
001Task.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007588  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001b0  08007718  08007718  00017718  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080078c8  080078c8  00020078  2**0
                  CONTENTS
  4 .ARM          00000000  080078c8  080078c8  00020078  2**0
                  CONTENTS
  5 .preinit_array 00000000  080078c8  080078c8  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080078c8  080078c8  000178c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080078cc  080078cc  000178cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  080078d0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020078  2**0
                  CONTENTS
 10 .bss          000054d8  20000078  20000078  00020078  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20005550  20005550  00020078  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 13 .debug_info   00014b55  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002e0a  00000000  00000000  00034bfd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001300  00000000  00000000  00037a08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001188  00000000  00000000  00038d08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021185  00000000  00000000  00039e90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000163f8  00000000  00000000  0005b015  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c1883  00000000  00000000  0007140d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00132c90  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005368  00000000  00000000  00132ce0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000078 	.word	0x20000078
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007700 	.word	0x08007700

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000007c 	.word	0x2000007c
 80001cc:	08007700 	.word	0x08007700

080001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001d0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001d2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001d6:	f8df 0088 	ldr.w	r0, [pc, #136]	; 8000260 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001da:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001de:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 80001e2:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 80001e4:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 80001e6:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 80001e8:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 80001ea:	d332      	bcc.n	8000252 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 80001ec:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 80001ee:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 80001f0:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 80001f2:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 80001f4:	d314      	bcc.n	8000220 <_CheckCase2>

080001f6 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 80001f6:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 80001f8:	19d0      	adds	r0, r2, r7
 80001fa:	bf00      	nop

080001fc <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 80001fc:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000200:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000204:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000206:	d005      	beq.n	8000214 <_CSDone>
        LDRB     R3,[R1], #+1
 8000208:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800020c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000210:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000212:	d1f3      	bne.n	80001fc <_LoopCopyStraight>

08000214 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000214:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000218:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800021a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800021c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800021e:	4770      	bx	lr

08000220 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000220:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000222:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000224:	d319      	bcc.n	800025a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000226:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000228:	1b12      	subs	r2, r2, r4

0800022a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800022a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800022e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000232:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000234:	d1f9      	bne.n	800022a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000236:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000238:	d005      	beq.n	8000246 <_No2ChunkNeeded>

0800023a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800023a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800023e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000242:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000244:	d1f9      	bne.n	800023a <_LoopCopyAfterWrapAround>

08000246 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000246:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800024a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800024c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800024e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000250:	4770      	bx	lr

08000252 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000252:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000254:	3801      	subs	r0, #1
        CMP      R0,R2
 8000256:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000258:	d2cd      	bcs.n	80001f6 <_Case4>

0800025a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800025a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800025c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800025e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000260:	20003f68 	.word	0x20003f68
	...

08000270 <memchr>:
 8000270:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000274:	2a10      	cmp	r2, #16
 8000276:	db2b      	blt.n	80002d0 <memchr+0x60>
 8000278:	f010 0f07 	tst.w	r0, #7
 800027c:	d008      	beq.n	8000290 <memchr+0x20>
 800027e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000282:	3a01      	subs	r2, #1
 8000284:	428b      	cmp	r3, r1
 8000286:	d02d      	beq.n	80002e4 <memchr+0x74>
 8000288:	f010 0f07 	tst.w	r0, #7
 800028c:	b342      	cbz	r2, 80002e0 <memchr+0x70>
 800028e:	d1f6      	bne.n	800027e <memchr+0xe>
 8000290:	b4f0      	push	{r4, r5, r6, r7}
 8000292:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000296:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800029a:	f022 0407 	bic.w	r4, r2, #7
 800029e:	f07f 0700 	mvns.w	r7, #0
 80002a2:	2300      	movs	r3, #0
 80002a4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002a8:	3c08      	subs	r4, #8
 80002aa:	ea85 0501 	eor.w	r5, r5, r1
 80002ae:	ea86 0601 	eor.w	r6, r6, r1
 80002b2:	fa85 f547 	uadd8	r5, r5, r7
 80002b6:	faa3 f587 	sel	r5, r3, r7
 80002ba:	fa86 f647 	uadd8	r6, r6, r7
 80002be:	faa5 f687 	sel	r6, r5, r7
 80002c2:	b98e      	cbnz	r6, 80002e8 <memchr+0x78>
 80002c4:	d1ee      	bne.n	80002a4 <memchr+0x34>
 80002c6:	bcf0      	pop	{r4, r5, r6, r7}
 80002c8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002cc:	f002 0207 	and.w	r2, r2, #7
 80002d0:	b132      	cbz	r2, 80002e0 <memchr+0x70>
 80002d2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002d6:	3a01      	subs	r2, #1
 80002d8:	ea83 0301 	eor.w	r3, r3, r1
 80002dc:	b113      	cbz	r3, 80002e4 <memchr+0x74>
 80002de:	d1f8      	bne.n	80002d2 <memchr+0x62>
 80002e0:	2000      	movs	r0, #0
 80002e2:	4770      	bx	lr
 80002e4:	3801      	subs	r0, #1
 80002e6:	4770      	bx	lr
 80002e8:	2d00      	cmp	r5, #0
 80002ea:	bf06      	itte	eq
 80002ec:	4635      	moveq	r5, r6
 80002ee:	3803      	subeq	r0, #3
 80002f0:	3807      	subne	r0, #7
 80002f2:	f015 0f01 	tst.w	r5, #1
 80002f6:	d107      	bne.n	8000308 <memchr+0x98>
 80002f8:	3001      	adds	r0, #1
 80002fa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002fe:	bf02      	ittt	eq
 8000300:	3001      	addeq	r0, #1
 8000302:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000306:	3001      	addeq	r0, #1
 8000308:	bcf0      	pop	{r4, r5, r6, r7}
 800030a:	3801      	subs	r0, #1
 800030c:	4770      	bx	lr
 800030e:	bf00      	nop

08000310 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000310:	b580      	push	{r7, lr}
 8000312:	b088      	sub	sp, #32
 8000314:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000316:	f000 fa99 	bl	800084c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800031a:	f000 f853 	bl	80003c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800031e:	f000 f893 	bl	8000448 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  DWT_CTRL |= (1 << 0);
 8000322:	4b21      	ldr	r3, [pc, #132]	; (80003a8 <main+0x98>)
 8000324:	681b      	ldr	r3, [r3, #0]
 8000326:	4a20      	ldr	r2, [pc, #128]	; (80003a8 <main+0x98>)
 8000328:	f043 0301 	orr.w	r3, r3, #1
 800032c:	6013      	str	r3, [r2, #0]

  SEGGER_SYSVIEW_Conf();
 800032e:	f004 fccf 	bl	8004cd0 <SEGGER_SYSVIEW_Conf>

  SEGGER_SYSVIEW_Start();
 8000332:	f005 ff99 	bl	8006268 <SEGGER_SYSVIEW_Start>

  Status = xTaskCreate(task1_handler, "Task-1", configMINIMAL_STACK_SIZE, "Hello world from Task-1", 2, &task1_hadle );
 8000336:	f107 0308 	add.w	r3, r7, #8
 800033a:	9301      	str	r3, [sp, #4]
 800033c:	2302      	movs	r3, #2
 800033e:	9300      	str	r3, [sp, #0]
 8000340:	4b1a      	ldr	r3, [pc, #104]	; (80003ac <main+0x9c>)
 8000342:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000346:	491a      	ldr	r1, [pc, #104]	; (80003b0 <main+0xa0>)
 8000348:	481a      	ldr	r0, [pc, #104]	; (80003b4 <main+0xa4>)
 800034a:	f002 fe17 	bl	8002f7c <xTaskCreate>
 800034e:	6178      	str	r0, [r7, #20]
  configASSERT(Status == pdPASS);
 8000350:	697b      	ldr	r3, [r7, #20]
 8000352:	2b01      	cmp	r3, #1
 8000354:	d00a      	beq.n	800036c <main+0x5c>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8000356:	f04f 0350 	mov.w	r3, #80	; 0x50
 800035a:	f383 8811 	msr	BASEPRI, r3
 800035e:	f3bf 8f6f 	isb	sy
 8000362:	f3bf 8f4f 	dsb	sy
 8000366:	613b      	str	r3, [r7, #16]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 8000368:	bf00      	nop
 800036a:	e7fe      	b.n	800036a <main+0x5a>

  Status = xTaskCreate(task2_handler, "Task-2", configMINIMAL_STACK_SIZE, "Hello world from Task-2", 2, &task2_hadle );
 800036c:	1d3b      	adds	r3, r7, #4
 800036e:	9301      	str	r3, [sp, #4]
 8000370:	2302      	movs	r3, #2
 8000372:	9300      	str	r3, [sp, #0]
 8000374:	4b10      	ldr	r3, [pc, #64]	; (80003b8 <main+0xa8>)
 8000376:	f44f 7280 	mov.w	r2, #256	; 0x100
 800037a:	4910      	ldr	r1, [pc, #64]	; (80003bc <main+0xac>)
 800037c:	4810      	ldr	r0, [pc, #64]	; (80003c0 <main+0xb0>)
 800037e:	f002 fdfd 	bl	8002f7c <xTaskCreate>
 8000382:	6178      	str	r0, [r7, #20]
  configASSERT(Status == pdPASS);
 8000384:	697b      	ldr	r3, [r7, #20]
 8000386:	2b01      	cmp	r3, #1
 8000388:	d00a      	beq.n	80003a0 <main+0x90>
        __asm volatile
 800038a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800038e:	f383 8811 	msr	BASEPRI, r3
 8000392:	f3bf 8f6f 	isb	sy
 8000396:	f3bf 8f4f 	dsb	sy
 800039a:	60fb      	str	r3, [r7, #12]
    }
 800039c:	bf00      	nop
 800039e:	e7fe      	b.n	800039e <main+0x8e>

  //START SCHEDULER
  vTaskStartScheduler();
 80003a0:	f002 ff66 	bl	8003270 <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80003a4:	e7fe      	b.n	80003a4 <main+0x94>
 80003a6:	bf00      	nop
 80003a8:	e0001000 	.word	0xe0001000
 80003ac:	08007718 	.word	0x08007718
 80003b0:	08007730 	.word	0x08007730
 80003b4:	080005b1 	.word	0x080005b1
 80003b8:	08007738 	.word	0x08007738
 80003bc:	08007750 	.word	0x08007750
 80003c0:	080005ed 	.word	0x080005ed

080003c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80003c4:	b580      	push	{r7, lr}
 80003c6:	b090      	sub	sp, #64	; 0x40
 80003c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003ca:	f107 0318 	add.w	r3, r7, #24
 80003ce:	2228      	movs	r2, #40	; 0x28
 80003d0:	2100      	movs	r1, #0
 80003d2:	4618      	mov	r0, r3
 80003d4:	f006 fd0a 	bl	8006dec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003d8:	1d3b      	adds	r3, r7, #4
 80003da:	2200      	movs	r2, #0
 80003dc:	601a      	str	r2, [r3, #0]
 80003de:	605a      	str	r2, [r3, #4]
 80003e0:	609a      	str	r2, [r3, #8]
 80003e2:	60da      	str	r2, [r3, #12]
 80003e4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80003e6:	2302      	movs	r3, #2
 80003e8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80003ea:	2301      	movs	r3, #1
 80003ec:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80003ee:	2310      	movs	r3, #16
 80003f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80003f2:	2302      	movs	r3, #2
 80003f4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80003f6:	2300      	movs	r3, #0
 80003f8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 80003fa:	f44f 1320 	mov.w	r3, #2621440	; 0x280000
 80003fe:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000400:	f107 0318 	add.w	r3, r7, #24
 8000404:	4618      	mov	r0, r3
 8000406:	f000 fccb 	bl	8000da0 <HAL_RCC_OscConfig>
 800040a:	4603      	mov	r3, r0
 800040c:	2b00      	cmp	r3, #0
 800040e:	d001      	beq.n	8000414 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000410:	f000 f91c 	bl	800064c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000414:	230f      	movs	r3, #15
 8000416:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000418:	2302      	movs	r3, #2
 800041a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800041c:	2300      	movs	r3, #0
 800041e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000420:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000424:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000426:	2300      	movs	r3, #0
 8000428:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800042a:	1d3b      	adds	r3, r7, #4
 800042c:	2101      	movs	r1, #1
 800042e:	4618      	mov	r0, r3
 8000430:	f001 fcf4 	bl	8001e1c <HAL_RCC_ClockConfig>
 8000434:	4603      	mov	r3, r0
 8000436:	2b00      	cmp	r3, #0
 8000438:	d001      	beq.n	800043e <SystemClock_Config+0x7a>
  {
    Error_Handler();
 800043a:	f000 f907 	bl	800064c <Error_Handler>
  }
}
 800043e:	bf00      	nop
 8000440:	3740      	adds	r7, #64	; 0x40
 8000442:	46bd      	mov	sp, r7
 8000444:	bd80      	pop	{r7, pc}
	...

08000448 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000448:	b580      	push	{r7, lr}
 800044a:	b08a      	sub	sp, #40	; 0x28
 800044c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800044e:	f107 0314 	add.w	r3, r7, #20
 8000452:	2200      	movs	r2, #0
 8000454:	601a      	str	r2, [r3, #0]
 8000456:	605a      	str	r2, [r3, #4]
 8000458:	609a      	str	r2, [r3, #8]
 800045a:	60da      	str	r2, [r3, #12]
 800045c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800045e:	4b51      	ldr	r3, [pc, #324]	; (80005a4 <MX_GPIO_Init+0x15c>)
 8000460:	695b      	ldr	r3, [r3, #20]
 8000462:	4a50      	ldr	r2, [pc, #320]	; (80005a4 <MX_GPIO_Init+0x15c>)
 8000464:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000468:	6153      	str	r3, [r2, #20]
 800046a:	4b4e      	ldr	r3, [pc, #312]	; (80005a4 <MX_GPIO_Init+0x15c>)
 800046c:	695b      	ldr	r3, [r3, #20]
 800046e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000472:	613b      	str	r3, [r7, #16]
 8000474:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000476:	4b4b      	ldr	r3, [pc, #300]	; (80005a4 <MX_GPIO_Init+0x15c>)
 8000478:	695b      	ldr	r3, [r3, #20]
 800047a:	4a4a      	ldr	r2, [pc, #296]	; (80005a4 <MX_GPIO_Init+0x15c>)
 800047c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000480:	6153      	str	r3, [r2, #20]
 8000482:	4b48      	ldr	r3, [pc, #288]	; (80005a4 <MX_GPIO_Init+0x15c>)
 8000484:	695b      	ldr	r3, [r3, #20]
 8000486:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800048a:	60fb      	str	r3, [r7, #12]
 800048c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800048e:	4b45      	ldr	r3, [pc, #276]	; (80005a4 <MX_GPIO_Init+0x15c>)
 8000490:	695b      	ldr	r3, [r3, #20]
 8000492:	4a44      	ldr	r2, [pc, #272]	; (80005a4 <MX_GPIO_Init+0x15c>)
 8000494:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000498:	6153      	str	r3, [r2, #20]
 800049a:	4b42      	ldr	r3, [pc, #264]	; (80005a4 <MX_GPIO_Init+0x15c>)
 800049c:	695b      	ldr	r3, [r3, #20]
 800049e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80004a2:	60bb      	str	r3, [r7, #8]
 80004a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004a6:	4b3f      	ldr	r3, [pc, #252]	; (80005a4 <MX_GPIO_Init+0x15c>)
 80004a8:	695b      	ldr	r3, [r3, #20]
 80004aa:	4a3e      	ldr	r2, [pc, #248]	; (80005a4 <MX_GPIO_Init+0x15c>)
 80004ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80004b0:	6153      	str	r3, [r2, #20]
 80004b2:	4b3c      	ldr	r3, [pc, #240]	; (80005a4 <MX_GPIO_Init+0x15c>)
 80004b4:	695b      	ldr	r3, [r3, #20]
 80004b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80004ba:	607b      	str	r3, [r7, #4]
 80004bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80004be:	4b39      	ldr	r3, [pc, #228]	; (80005a4 <MX_GPIO_Init+0x15c>)
 80004c0:	695b      	ldr	r3, [r3, #20]
 80004c2:	4a38      	ldr	r2, [pc, #224]	; (80005a4 <MX_GPIO_Init+0x15c>)
 80004c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80004c8:	6153      	str	r3, [r2, #20]
 80004ca:	4b36      	ldr	r3, [pc, #216]	; (80005a4 <MX_GPIO_Init+0x15c>)
 80004cc:	695b      	ldr	r3, [r3, #20]
 80004ce:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80004d2:	603b      	str	r3, [r7, #0]
 80004d4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 80004d6:	2200      	movs	r2, #0
 80004d8:	f64f 7108 	movw	r1, #65288	; 0xff08
 80004dc:	4832      	ldr	r0, [pc, #200]	; (80005a8 <MX_GPIO_Init+0x160>)
 80004de:	f000 fc47 	bl	8000d70 <HAL_GPIO_WritePin>
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : DRDY_Pin MEMS_INT3_Pin MEMS_INT4_Pin MEMS_INT1_Pin
                           MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = DRDY_Pin|MEMS_INT3_Pin|MEMS_INT4_Pin|MEMS_INT1_Pin
 80004e2:	2337      	movs	r3, #55	; 0x37
 80004e4:	617b      	str	r3, [r7, #20]
                          |MEMS_INT2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80004e6:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80004ea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004ec:	2300      	movs	r3, #0
 80004ee:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80004f0:	f107 0314 	add.w	r3, r7, #20
 80004f4:	4619      	mov	r1, r3
 80004f6:	482c      	ldr	r0, [pc, #176]	; (80005a8 <MX_GPIO_Init+0x160>)
 80004f8:	f000 fac0 	bl	8000a7c <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_I2C_SPI_Pin LD4_Pin LD3_Pin LD5_Pin
                           LD7_Pin LD9_Pin LD10_Pin LD8_Pin
                           LD6_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 80004fc:	f64f 7308 	movw	r3, #65288	; 0xff08
 8000500:	617b      	str	r3, [r7, #20]
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000502:	2301      	movs	r3, #1
 8000504:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000506:	2300      	movs	r3, #0
 8000508:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800050a:	2300      	movs	r3, #0
 800050c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800050e:	f107 0314 	add.w	r3, r7, #20
 8000512:	4619      	mov	r1, r3
 8000514:	4824      	ldr	r0, [pc, #144]	; (80005a8 <MX_GPIO_Init+0x160>)
 8000516:	f000 fab1 	bl	8000a7c <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800051a:	2301      	movs	r3, #1
 800051c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800051e:	2300      	movs	r3, #0
 8000520:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000522:	2300      	movs	r3, #0
 8000524:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000526:	f107 0314 	add.w	r3, r7, #20
 800052a:	4619      	mov	r1, r3
 800052c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000530:	f000 faa4 	bl	8000a7c <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MISOA7_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MISOA7_Pin;
 8000534:	23e0      	movs	r3, #224	; 0xe0
 8000536:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000538:	2302      	movs	r3, #2
 800053a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800053c:	2300      	movs	r3, #0
 800053e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000540:	2300      	movs	r3, #0
 8000542:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000544:	2305      	movs	r3, #5
 8000546:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000548:	f107 0314 	add.w	r3, r7, #20
 800054c:	4619      	mov	r1, r3
 800054e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000552:	f000 fa93 	bl	8000a7c <HAL_GPIO_Init>

  /*Configure GPIO pins : DM_Pin DP_Pin */
  GPIO_InitStruct.Pin = DM_Pin|DP_Pin;
 8000556:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800055a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800055c:	2302      	movs	r3, #2
 800055e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000560:	2300      	movs	r3, #0
 8000562:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000564:	2303      	movs	r3, #3
 8000566:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 8000568:	230e      	movs	r3, #14
 800056a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800056c:	f107 0314 	add.w	r3, r7, #20
 8000570:	4619      	mov	r1, r3
 8000572:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000576:	f000 fa81 	bl	8000a7c <HAL_GPIO_Init>

  /*Configure GPIO pins : I2C1_SCL_Pin I2C1_SDA_Pin */
  GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 800057a:	23c0      	movs	r3, #192	; 0xc0
 800057c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800057e:	2312      	movs	r3, #18
 8000580:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000582:	2300      	movs	r3, #0
 8000584:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000586:	2300      	movs	r3, #0
 8000588:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800058a:	2304      	movs	r3, #4
 800058c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800058e:	f107 0314 	add.w	r3, r7, #20
 8000592:	4619      	mov	r1, r3
 8000594:	4805      	ldr	r0, [pc, #20]	; (80005ac <MX_GPIO_Init+0x164>)
 8000596:	f000 fa71 	bl	8000a7c <HAL_GPIO_Init>

}
 800059a:	bf00      	nop
 800059c:	3728      	adds	r7, #40	; 0x28
 800059e:	46bd      	mov	sp, r7
 80005a0:	bd80      	pop	{r7, pc}
 80005a2:	bf00      	nop
 80005a4:	40021000 	.word	0x40021000
 80005a8:	48001000 	.word	0x48001000
 80005ac:	48000400 	.word	0x48000400

080005b0 <task1_handler>:

/* USER CODE BEGIN 4 */
static void task1_handler(void* parameters){
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b09c      	sub	sp, #112	; 0x70
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	6078      	str	r0, [r7, #4]

	char msg[100];
	while(1){
		//printf("%s\n", (char*) parameters);
		snprintf(msg, 100, "%s\n", (char*)parameters);
 80005b8:	f107 000c 	add.w	r0, r7, #12
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	4a09      	ldr	r2, [pc, #36]	; (80005e4 <task1_handler+0x34>)
 80005c0:	2164      	movs	r1, #100	; 0x64
 80005c2:	f006 fc1b 	bl	8006dfc <sniprintf>
		SEGGER_SYSVIEW_PrintfTarget(msg);
 80005c6:	f107 030c 	add.w	r3, r7, #12
 80005ca:	4618      	mov	r0, r3
 80005cc:	f006 fb5c 	bl	8006c88 <SEGGER_SYSVIEW_PrintfTarget>

		taskYIELD();
 80005d0:	4b05      	ldr	r3, [pc, #20]	; (80005e8 <task1_handler+0x38>)
 80005d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80005d6:	601a      	str	r2, [r3, #0]
 80005d8:	f3bf 8f4f 	dsb	sy
 80005dc:	f3bf 8f6f 	isb	sy
		snprintf(msg, 100, "%s\n", (char*)parameters);
 80005e0:	e7ea      	b.n	80005b8 <task1_handler+0x8>
 80005e2:	bf00      	nop
 80005e4:	08007758 	.word	0x08007758
 80005e8:	e000ed04 	.word	0xe000ed04

080005ec <task2_handler>:
	}
}

static void task2_handler(void* parameters){
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b09c      	sub	sp, #112	; 0x70
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	6078      	str	r0, [r7, #4]

	char msg[100];
	while(1){
		//printf("%s\n", (char*) parameters);
		snprintf(msg, 100, "%s\n", (char*)parameters);
 80005f4:	f107 000c 	add.w	r0, r7, #12
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	4a09      	ldr	r2, [pc, #36]	; (8000620 <task2_handler+0x34>)
 80005fc:	2164      	movs	r1, #100	; 0x64
 80005fe:	f006 fbfd 	bl	8006dfc <sniprintf>
		SEGGER_SYSVIEW_PrintfTarget(msg);
 8000602:	f107 030c 	add.w	r3, r7, #12
 8000606:	4618      	mov	r0, r3
 8000608:	f006 fb3e 	bl	8006c88 <SEGGER_SYSVIEW_PrintfTarget>
		taskYIELD();
 800060c:	4b05      	ldr	r3, [pc, #20]	; (8000624 <task2_handler+0x38>)
 800060e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000612:	601a      	str	r2, [r3, #0]
 8000614:	f3bf 8f4f 	dsb	sy
 8000618:	f3bf 8f6f 	isb	sy
		snprintf(msg, 100, "%s\n", (char*)parameters);
 800061c:	e7ea      	b.n	80005f4 <task2_handler+0x8>
 800061e:	bf00      	nop
 8000620:	08007758 	.word	0x08007758
 8000624:	e000ed04 	.word	0xe000ed04

08000628 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	b082      	sub	sp, #8
 800062c:	af00      	add	r7, sp, #0
 800062e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	4a04      	ldr	r2, [pc, #16]	; (8000648 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000636:	4293      	cmp	r3, r2
 8000638:	d101      	bne.n	800063e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800063a:	f000 f91d 	bl	8000878 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800063e:	bf00      	nop
 8000640:	3708      	adds	r7, #8
 8000642:	46bd      	mov	sp, r7
 8000644:	bd80      	pop	{r7, pc}
 8000646:	bf00      	nop
 8000648:	40001000 	.word	0x40001000

0800064c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800064c:	b480      	push	{r7}
 800064e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000650:	b672      	cpsid	i
}
 8000652:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000654:	e7fe      	b.n	8000654 <Error_Handler+0x8>
	...

08000658 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b082      	sub	sp, #8
 800065c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800065e:	4b0f      	ldr	r3, [pc, #60]	; (800069c <HAL_MspInit+0x44>)
 8000660:	699b      	ldr	r3, [r3, #24]
 8000662:	4a0e      	ldr	r2, [pc, #56]	; (800069c <HAL_MspInit+0x44>)
 8000664:	f043 0301 	orr.w	r3, r3, #1
 8000668:	6193      	str	r3, [r2, #24]
 800066a:	4b0c      	ldr	r3, [pc, #48]	; (800069c <HAL_MspInit+0x44>)
 800066c:	699b      	ldr	r3, [r3, #24]
 800066e:	f003 0301 	and.w	r3, r3, #1
 8000672:	607b      	str	r3, [r7, #4]
 8000674:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000676:	4b09      	ldr	r3, [pc, #36]	; (800069c <HAL_MspInit+0x44>)
 8000678:	69db      	ldr	r3, [r3, #28]
 800067a:	4a08      	ldr	r2, [pc, #32]	; (800069c <HAL_MspInit+0x44>)
 800067c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000680:	61d3      	str	r3, [r2, #28]
 8000682:	4b06      	ldr	r3, [pc, #24]	; (800069c <HAL_MspInit+0x44>)
 8000684:	69db      	ldr	r3, [r3, #28]
 8000686:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800068a:	603b      	str	r3, [r7, #0]
 800068c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */
  vInitPrioGroupValue();
 800068e:	f003 ff9b 	bl	80045c8 <vInitPrioGroupValue>
  /* USER CODE END MspInit 1 */
}
 8000692:	bf00      	nop
 8000694:	3708      	adds	r7, #8
 8000696:	46bd      	mov	sp, r7
 8000698:	bd80      	pop	{r7, pc}
 800069a:	bf00      	nop
 800069c:	40021000 	.word	0x40021000

080006a0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b08e      	sub	sp, #56	; 0x38
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80006a8:	2300      	movs	r3, #0
 80006aa:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80006ac:	2300      	movs	r3, #0
 80006ae:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80006b0:	4b33      	ldr	r3, [pc, #204]	; (8000780 <HAL_InitTick+0xe0>)
 80006b2:	69db      	ldr	r3, [r3, #28]
 80006b4:	4a32      	ldr	r2, [pc, #200]	; (8000780 <HAL_InitTick+0xe0>)
 80006b6:	f043 0310 	orr.w	r3, r3, #16
 80006ba:	61d3      	str	r3, [r2, #28]
 80006bc:	4b30      	ldr	r3, [pc, #192]	; (8000780 <HAL_InitTick+0xe0>)
 80006be:	69db      	ldr	r3, [r3, #28]
 80006c0:	f003 0310 	and.w	r3, r3, #16
 80006c4:	60fb      	str	r3, [r7, #12]
 80006c6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80006c8:	f107 0210 	add.w	r2, r7, #16
 80006cc:	f107 0314 	add.w	r3, r7, #20
 80006d0:	4611      	mov	r1, r2
 80006d2:	4618      	mov	r0, r3
 80006d4:	f001 fdb6 	bl	8002244 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80006d8:	6a3b      	ldr	r3, [r7, #32]
 80006da:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80006dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d103      	bne.n	80006ea <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80006e2:	f001 fd8d 	bl	8002200 <HAL_RCC_GetPCLK1Freq>
 80006e6:	6378      	str	r0, [r7, #52]	; 0x34
 80006e8:	e004      	b.n	80006f4 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80006ea:	f001 fd89 	bl	8002200 <HAL_RCC_GetPCLK1Freq>
 80006ee:	4603      	mov	r3, r0
 80006f0:	005b      	lsls	r3, r3, #1
 80006f2:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80006f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80006f6:	4a23      	ldr	r2, [pc, #140]	; (8000784 <HAL_InitTick+0xe4>)
 80006f8:	fba2 2303 	umull	r2, r3, r2, r3
 80006fc:	0c9b      	lsrs	r3, r3, #18
 80006fe:	3b01      	subs	r3, #1
 8000700:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000702:	4b21      	ldr	r3, [pc, #132]	; (8000788 <HAL_InitTick+0xe8>)
 8000704:	4a21      	ldr	r2, [pc, #132]	; (800078c <HAL_InitTick+0xec>)
 8000706:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000708:	4b1f      	ldr	r3, [pc, #124]	; (8000788 <HAL_InitTick+0xe8>)
 800070a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800070e:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000710:	4a1d      	ldr	r2, [pc, #116]	; (8000788 <HAL_InitTick+0xe8>)
 8000712:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000714:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000716:	4b1c      	ldr	r3, [pc, #112]	; (8000788 <HAL_InitTick+0xe8>)
 8000718:	2200      	movs	r2, #0
 800071a:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800071c:	4b1a      	ldr	r3, [pc, #104]	; (8000788 <HAL_InitTick+0xe8>)
 800071e:	2200      	movs	r2, #0
 8000720:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000722:	4b19      	ldr	r3, [pc, #100]	; (8000788 <HAL_InitTick+0xe8>)
 8000724:	2200      	movs	r2, #0
 8000726:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000728:	4817      	ldr	r0, [pc, #92]	; (8000788 <HAL_InitTick+0xe8>)
 800072a:	f001 fdbd 	bl	80022a8 <HAL_TIM_Base_Init>
 800072e:	4603      	mov	r3, r0
 8000730:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000734:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000738:	2b00      	cmp	r3, #0
 800073a:	d11b      	bne.n	8000774 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 800073c:	4812      	ldr	r0, [pc, #72]	; (8000788 <HAL_InitTick+0xe8>)
 800073e:	f001 fe15 	bl	800236c <HAL_TIM_Base_Start_IT>
 8000742:	4603      	mov	r3, r0
 8000744:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000748:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800074c:	2b00      	cmp	r3, #0
 800074e:	d111      	bne.n	8000774 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000750:	2036      	movs	r0, #54	; 0x36
 8000752:	f000 f985 	bl	8000a60 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	2b0f      	cmp	r3, #15
 800075a:	d808      	bhi.n	800076e <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 800075c:	2200      	movs	r2, #0
 800075e:	6879      	ldr	r1, [r7, #4]
 8000760:	2036      	movs	r0, #54	; 0x36
 8000762:	f000 f961 	bl	8000a28 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000766:	4a0a      	ldr	r2, [pc, #40]	; (8000790 <HAL_InitTick+0xf0>)
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	6013      	str	r3, [r2, #0]
 800076c:	e002      	b.n	8000774 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 800076e:	2301      	movs	r3, #1
 8000770:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000774:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000778:	4618      	mov	r0, r3
 800077a:	3738      	adds	r7, #56	; 0x38
 800077c:	46bd      	mov	sp, r7
 800077e:	bd80      	pop	{r7, pc}
 8000780:	40021000 	.word	0x40021000
 8000784:	431bde83 	.word	0x431bde83
 8000788:	20000094 	.word	0x20000094
 800078c:	40001000 	.word	0x40001000
 8000790:	20000004 	.word	0x20000004

08000794 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000794:	b480      	push	{r7}
 8000796:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000798:	e7fe      	b.n	8000798 <NMI_Handler+0x4>

0800079a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800079a:	b480      	push	{r7}
 800079c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800079e:	e7fe      	b.n	800079e <HardFault_Handler+0x4>

080007a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007a0:	b480      	push	{r7}
 80007a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007a4:	e7fe      	b.n	80007a4 <MemManage_Handler+0x4>

080007a6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007a6:	b480      	push	{r7}
 80007a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007aa:	e7fe      	b.n	80007aa <BusFault_Handler+0x4>

080007ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007ac:	b480      	push	{r7}
 80007ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007b0:	e7fe      	b.n	80007b0 <UsageFault_Handler+0x4>

080007b2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007b2:	b480      	push	{r7}
 80007b4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007b6:	bf00      	nop
 80007b8:	46bd      	mov	sp, r7
 80007ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007be:	4770      	bx	lr

080007c0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles Timer 6 interrupt and DAC underrun interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80007c4:	4802      	ldr	r0, [pc, #8]	; (80007d0 <TIM6_DAC_IRQHandler+0x10>)
 80007c6:	f001 fe3b 	bl	8002440 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80007ca:	bf00      	nop
 80007cc:	bd80      	pop	{r7, pc}
 80007ce:	bf00      	nop
 80007d0:	20000094 	.word	0x20000094

080007d4 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80007d4:	b480      	push	{r7}
 80007d6:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80007d8:	4b06      	ldr	r3, [pc, #24]	; (80007f4 <SystemInit+0x20>)
 80007da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80007de:	4a05      	ldr	r2, [pc, #20]	; (80007f4 <SystemInit+0x20>)
 80007e0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80007e4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80007e8:	bf00      	nop
 80007ea:	46bd      	mov	sp, r7
 80007ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f0:	4770      	bx	lr
 80007f2:	bf00      	nop
 80007f4:	e000ed00 	.word	0xe000ed00

080007f8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80007f8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000830 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80007fc:	480d      	ldr	r0, [pc, #52]	; (8000834 <LoopForever+0x6>)
  ldr r1, =_edata
 80007fe:	490e      	ldr	r1, [pc, #56]	; (8000838 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000800:	4a0e      	ldr	r2, [pc, #56]	; (800083c <LoopForever+0xe>)
  movs r3, #0
 8000802:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000804:	e002      	b.n	800080c <LoopCopyDataInit>

08000806 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000806:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000808:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800080a:	3304      	adds	r3, #4

0800080c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800080c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800080e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000810:	d3f9      	bcc.n	8000806 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000812:	4a0b      	ldr	r2, [pc, #44]	; (8000840 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000814:	4c0b      	ldr	r4, [pc, #44]	; (8000844 <LoopForever+0x16>)
  movs r3, #0
 8000816:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000818:	e001      	b.n	800081e <LoopFillZerobss>

0800081a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800081a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800081c:	3204      	adds	r2, #4

0800081e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800081e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000820:	d3fb      	bcc.n	800081a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000822:	f7ff ffd7 	bl	80007d4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000826:	f006 fa9f 	bl	8006d68 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800082a:	f7ff fd71 	bl	8000310 <main>

0800082e <LoopForever>:

LoopForever:
    b LoopForever
 800082e:	e7fe      	b.n	800082e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000830:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8000834:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000838:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 800083c:	080078d0 	.word	0x080078d0
  ldr r2, =_sbss
 8000840:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8000844:	20005550 	.word	0x20005550

08000848 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000848:	e7fe      	b.n	8000848 <ADC1_2_IRQHandler>
	...

0800084c <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000850:	4b08      	ldr	r3, [pc, #32]	; (8000874 <HAL_Init+0x28>)
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	4a07      	ldr	r2, [pc, #28]	; (8000874 <HAL_Init+0x28>)
 8000856:	f043 0310 	orr.w	r3, r3, #16
 800085a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800085c:	2003      	movs	r0, #3
 800085e:	f000 f8d8 	bl	8000a12 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000862:	200f      	movs	r0, #15
 8000864:	f7ff ff1c 	bl	80006a0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000868:	f7ff fef6 	bl	8000658 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800086c:	2300      	movs	r3, #0
}
 800086e:	4618      	mov	r0, r3
 8000870:	bd80      	pop	{r7, pc}
 8000872:	bf00      	nop
 8000874:	40022000 	.word	0x40022000

08000878 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000878:	b480      	push	{r7}
 800087a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800087c:	4b06      	ldr	r3, [pc, #24]	; (8000898 <HAL_IncTick+0x20>)
 800087e:	781b      	ldrb	r3, [r3, #0]
 8000880:	461a      	mov	r2, r3
 8000882:	4b06      	ldr	r3, [pc, #24]	; (800089c <HAL_IncTick+0x24>)
 8000884:	681b      	ldr	r3, [r3, #0]
 8000886:	4413      	add	r3, r2
 8000888:	4a04      	ldr	r2, [pc, #16]	; (800089c <HAL_IncTick+0x24>)
 800088a:	6013      	str	r3, [r2, #0]
}
 800088c:	bf00      	nop
 800088e:	46bd      	mov	sp, r7
 8000890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000894:	4770      	bx	lr
 8000896:	bf00      	nop
 8000898:	20000008 	.word	0x20000008
 800089c:	200000e0 	.word	0x200000e0

080008a0 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80008a0:	b480      	push	{r7}
 80008a2:	af00      	add	r7, sp, #0
  return uwTick;  
 80008a4:	4b03      	ldr	r3, [pc, #12]	; (80008b4 <HAL_GetTick+0x14>)
 80008a6:	681b      	ldr	r3, [r3, #0]
}
 80008a8:	4618      	mov	r0, r3
 80008aa:	46bd      	mov	sp, r7
 80008ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b0:	4770      	bx	lr
 80008b2:	bf00      	nop
 80008b4:	200000e0 	.word	0x200000e0

080008b8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008b8:	b480      	push	{r7}
 80008ba:	b085      	sub	sp, #20
 80008bc:	af00      	add	r7, sp, #0
 80008be:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	f003 0307 	and.w	r3, r3, #7
 80008c6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80008c8:	4b0c      	ldr	r3, [pc, #48]	; (80008fc <__NVIC_SetPriorityGrouping+0x44>)
 80008ca:	68db      	ldr	r3, [r3, #12]
 80008cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80008ce:	68ba      	ldr	r2, [r7, #8]
 80008d0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80008d4:	4013      	ands	r3, r2
 80008d6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80008d8:	68fb      	ldr	r3, [r7, #12]
 80008da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80008dc:	68bb      	ldr	r3, [r7, #8]
 80008de:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80008e0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80008e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80008ea:	4a04      	ldr	r2, [pc, #16]	; (80008fc <__NVIC_SetPriorityGrouping+0x44>)
 80008ec:	68bb      	ldr	r3, [r7, #8]
 80008ee:	60d3      	str	r3, [r2, #12]
}
 80008f0:	bf00      	nop
 80008f2:	3714      	adds	r7, #20
 80008f4:	46bd      	mov	sp, r7
 80008f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008fa:	4770      	bx	lr
 80008fc:	e000ed00 	.word	0xe000ed00

08000900 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000900:	b480      	push	{r7}
 8000902:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000904:	4b04      	ldr	r3, [pc, #16]	; (8000918 <__NVIC_GetPriorityGrouping+0x18>)
 8000906:	68db      	ldr	r3, [r3, #12]
 8000908:	0a1b      	lsrs	r3, r3, #8
 800090a:	f003 0307 	and.w	r3, r3, #7
}
 800090e:	4618      	mov	r0, r3
 8000910:	46bd      	mov	sp, r7
 8000912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000916:	4770      	bx	lr
 8000918:	e000ed00 	.word	0xe000ed00

0800091c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800091c:	b480      	push	{r7}
 800091e:	b083      	sub	sp, #12
 8000920:	af00      	add	r7, sp, #0
 8000922:	4603      	mov	r3, r0
 8000924:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000926:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800092a:	2b00      	cmp	r3, #0
 800092c:	db0b      	blt.n	8000946 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800092e:	79fb      	ldrb	r3, [r7, #7]
 8000930:	f003 021f 	and.w	r2, r3, #31
 8000934:	4907      	ldr	r1, [pc, #28]	; (8000954 <__NVIC_EnableIRQ+0x38>)
 8000936:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800093a:	095b      	lsrs	r3, r3, #5
 800093c:	2001      	movs	r0, #1
 800093e:	fa00 f202 	lsl.w	r2, r0, r2
 8000942:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000946:	bf00      	nop
 8000948:	370c      	adds	r7, #12
 800094a:	46bd      	mov	sp, r7
 800094c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000950:	4770      	bx	lr
 8000952:	bf00      	nop
 8000954:	e000e100 	.word	0xe000e100

08000958 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000958:	b480      	push	{r7}
 800095a:	b083      	sub	sp, #12
 800095c:	af00      	add	r7, sp, #0
 800095e:	4603      	mov	r3, r0
 8000960:	6039      	str	r1, [r7, #0]
 8000962:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000964:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000968:	2b00      	cmp	r3, #0
 800096a:	db0a      	blt.n	8000982 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800096c:	683b      	ldr	r3, [r7, #0]
 800096e:	b2da      	uxtb	r2, r3
 8000970:	490c      	ldr	r1, [pc, #48]	; (80009a4 <__NVIC_SetPriority+0x4c>)
 8000972:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000976:	0112      	lsls	r2, r2, #4
 8000978:	b2d2      	uxtb	r2, r2
 800097a:	440b      	add	r3, r1
 800097c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000980:	e00a      	b.n	8000998 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000982:	683b      	ldr	r3, [r7, #0]
 8000984:	b2da      	uxtb	r2, r3
 8000986:	4908      	ldr	r1, [pc, #32]	; (80009a8 <__NVIC_SetPriority+0x50>)
 8000988:	79fb      	ldrb	r3, [r7, #7]
 800098a:	f003 030f 	and.w	r3, r3, #15
 800098e:	3b04      	subs	r3, #4
 8000990:	0112      	lsls	r2, r2, #4
 8000992:	b2d2      	uxtb	r2, r2
 8000994:	440b      	add	r3, r1
 8000996:	761a      	strb	r2, [r3, #24]
}
 8000998:	bf00      	nop
 800099a:	370c      	adds	r7, #12
 800099c:	46bd      	mov	sp, r7
 800099e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a2:	4770      	bx	lr
 80009a4:	e000e100 	.word	0xe000e100
 80009a8:	e000ed00 	.word	0xe000ed00

080009ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80009ac:	b480      	push	{r7}
 80009ae:	b089      	sub	sp, #36	; 0x24
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	60f8      	str	r0, [r7, #12]
 80009b4:	60b9      	str	r1, [r7, #8]
 80009b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80009b8:	68fb      	ldr	r3, [r7, #12]
 80009ba:	f003 0307 	and.w	r3, r3, #7
 80009be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80009c0:	69fb      	ldr	r3, [r7, #28]
 80009c2:	f1c3 0307 	rsb	r3, r3, #7
 80009c6:	2b04      	cmp	r3, #4
 80009c8:	bf28      	it	cs
 80009ca:	2304      	movcs	r3, #4
 80009cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80009ce:	69fb      	ldr	r3, [r7, #28]
 80009d0:	3304      	adds	r3, #4
 80009d2:	2b06      	cmp	r3, #6
 80009d4:	d902      	bls.n	80009dc <NVIC_EncodePriority+0x30>
 80009d6:	69fb      	ldr	r3, [r7, #28]
 80009d8:	3b03      	subs	r3, #3
 80009da:	e000      	b.n	80009de <NVIC_EncodePriority+0x32>
 80009dc:	2300      	movs	r3, #0
 80009de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009e0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80009e4:	69bb      	ldr	r3, [r7, #24]
 80009e6:	fa02 f303 	lsl.w	r3, r2, r3
 80009ea:	43da      	mvns	r2, r3
 80009ec:	68bb      	ldr	r3, [r7, #8]
 80009ee:	401a      	ands	r2, r3
 80009f0:	697b      	ldr	r3, [r7, #20]
 80009f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80009f4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80009f8:	697b      	ldr	r3, [r7, #20]
 80009fa:	fa01 f303 	lsl.w	r3, r1, r3
 80009fe:	43d9      	mvns	r1, r3
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a04:	4313      	orrs	r3, r2
         );
}
 8000a06:	4618      	mov	r0, r3
 8000a08:	3724      	adds	r7, #36	; 0x24
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a10:	4770      	bx	lr

08000a12 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a12:	b580      	push	{r7, lr}
 8000a14:	b082      	sub	sp, #8
 8000a16:	af00      	add	r7, sp, #0
 8000a18:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000a1a:	6878      	ldr	r0, [r7, #4]
 8000a1c:	f7ff ff4c 	bl	80008b8 <__NVIC_SetPriorityGrouping>
}
 8000a20:	bf00      	nop
 8000a22:	3708      	adds	r7, #8
 8000a24:	46bd      	mov	sp, r7
 8000a26:	bd80      	pop	{r7, pc}

08000a28 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b086      	sub	sp, #24
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	4603      	mov	r3, r0
 8000a30:	60b9      	str	r1, [r7, #8]
 8000a32:	607a      	str	r2, [r7, #4]
 8000a34:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000a36:	2300      	movs	r3, #0
 8000a38:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000a3a:	f7ff ff61 	bl	8000900 <__NVIC_GetPriorityGrouping>
 8000a3e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000a40:	687a      	ldr	r2, [r7, #4]
 8000a42:	68b9      	ldr	r1, [r7, #8]
 8000a44:	6978      	ldr	r0, [r7, #20]
 8000a46:	f7ff ffb1 	bl	80009ac <NVIC_EncodePriority>
 8000a4a:	4602      	mov	r2, r0
 8000a4c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a50:	4611      	mov	r1, r2
 8000a52:	4618      	mov	r0, r3
 8000a54:	f7ff ff80 	bl	8000958 <__NVIC_SetPriority>
}
 8000a58:	bf00      	nop
 8000a5a:	3718      	adds	r7, #24
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	bd80      	pop	{r7, pc}

08000a60 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b082      	sub	sp, #8
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	4603      	mov	r3, r0
 8000a68:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000a6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a6e:	4618      	mov	r0, r3
 8000a70:	f7ff ff54 	bl	800091c <__NVIC_EnableIRQ>
}
 8000a74:	bf00      	nop
 8000a76:	3708      	adds	r7, #8
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	bd80      	pop	{r7, pc}

08000a7c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	b087      	sub	sp, #28
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	6078      	str	r0, [r7, #4]
 8000a84:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000a86:	2300      	movs	r3, #0
 8000a88:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000a8a:	e154      	b.n	8000d36 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000a8c:	683b      	ldr	r3, [r7, #0]
 8000a8e:	681a      	ldr	r2, [r3, #0]
 8000a90:	2101      	movs	r1, #1
 8000a92:	697b      	ldr	r3, [r7, #20]
 8000a94:	fa01 f303 	lsl.w	r3, r1, r3
 8000a98:	4013      	ands	r3, r2
 8000a9a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000a9c:	68fb      	ldr	r3, [r7, #12]
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	f000 8146 	beq.w	8000d30 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000aa4:	683b      	ldr	r3, [r7, #0]
 8000aa6:	685b      	ldr	r3, [r3, #4]
 8000aa8:	f003 0303 	and.w	r3, r3, #3
 8000aac:	2b01      	cmp	r3, #1
 8000aae:	d005      	beq.n	8000abc <HAL_GPIO_Init+0x40>
 8000ab0:	683b      	ldr	r3, [r7, #0]
 8000ab2:	685b      	ldr	r3, [r3, #4]
 8000ab4:	f003 0303 	and.w	r3, r3, #3
 8000ab8:	2b02      	cmp	r3, #2
 8000aba:	d130      	bne.n	8000b1e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	689b      	ldr	r3, [r3, #8]
 8000ac0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000ac2:	697b      	ldr	r3, [r7, #20]
 8000ac4:	005b      	lsls	r3, r3, #1
 8000ac6:	2203      	movs	r2, #3
 8000ac8:	fa02 f303 	lsl.w	r3, r2, r3
 8000acc:	43db      	mvns	r3, r3
 8000ace:	693a      	ldr	r2, [r7, #16]
 8000ad0:	4013      	ands	r3, r2
 8000ad2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000ad4:	683b      	ldr	r3, [r7, #0]
 8000ad6:	68da      	ldr	r2, [r3, #12]
 8000ad8:	697b      	ldr	r3, [r7, #20]
 8000ada:	005b      	lsls	r3, r3, #1
 8000adc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ae0:	693a      	ldr	r2, [r7, #16]
 8000ae2:	4313      	orrs	r3, r2
 8000ae4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	693a      	ldr	r2, [r7, #16]
 8000aea:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	685b      	ldr	r3, [r3, #4]
 8000af0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000af2:	2201      	movs	r2, #1
 8000af4:	697b      	ldr	r3, [r7, #20]
 8000af6:	fa02 f303 	lsl.w	r3, r2, r3
 8000afa:	43db      	mvns	r3, r3
 8000afc:	693a      	ldr	r2, [r7, #16]
 8000afe:	4013      	ands	r3, r2
 8000b00:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000b02:	683b      	ldr	r3, [r7, #0]
 8000b04:	685b      	ldr	r3, [r3, #4]
 8000b06:	091b      	lsrs	r3, r3, #4
 8000b08:	f003 0201 	and.w	r2, r3, #1
 8000b0c:	697b      	ldr	r3, [r7, #20]
 8000b0e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b12:	693a      	ldr	r2, [r7, #16]
 8000b14:	4313      	orrs	r3, r2
 8000b16:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	693a      	ldr	r2, [r7, #16]
 8000b1c:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000b1e:	683b      	ldr	r3, [r7, #0]
 8000b20:	685b      	ldr	r3, [r3, #4]
 8000b22:	f003 0303 	and.w	r3, r3, #3
 8000b26:	2b03      	cmp	r3, #3
 8000b28:	d017      	beq.n	8000b5a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	68db      	ldr	r3, [r3, #12]
 8000b2e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000b30:	697b      	ldr	r3, [r7, #20]
 8000b32:	005b      	lsls	r3, r3, #1
 8000b34:	2203      	movs	r2, #3
 8000b36:	fa02 f303 	lsl.w	r3, r2, r3
 8000b3a:	43db      	mvns	r3, r3
 8000b3c:	693a      	ldr	r2, [r7, #16]
 8000b3e:	4013      	ands	r3, r2
 8000b40:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000b42:	683b      	ldr	r3, [r7, #0]
 8000b44:	689a      	ldr	r2, [r3, #8]
 8000b46:	697b      	ldr	r3, [r7, #20]
 8000b48:	005b      	lsls	r3, r3, #1
 8000b4a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b4e:	693a      	ldr	r2, [r7, #16]
 8000b50:	4313      	orrs	r3, r2
 8000b52:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	693a      	ldr	r2, [r7, #16]
 8000b58:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000b5a:	683b      	ldr	r3, [r7, #0]
 8000b5c:	685b      	ldr	r3, [r3, #4]
 8000b5e:	f003 0303 	and.w	r3, r3, #3
 8000b62:	2b02      	cmp	r3, #2
 8000b64:	d123      	bne.n	8000bae <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000b66:	697b      	ldr	r3, [r7, #20]
 8000b68:	08da      	lsrs	r2, r3, #3
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	3208      	adds	r2, #8
 8000b6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000b72:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000b74:	697b      	ldr	r3, [r7, #20]
 8000b76:	f003 0307 	and.w	r3, r3, #7
 8000b7a:	009b      	lsls	r3, r3, #2
 8000b7c:	220f      	movs	r2, #15
 8000b7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b82:	43db      	mvns	r3, r3
 8000b84:	693a      	ldr	r2, [r7, #16]
 8000b86:	4013      	ands	r3, r2
 8000b88:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000b8a:	683b      	ldr	r3, [r7, #0]
 8000b8c:	691a      	ldr	r2, [r3, #16]
 8000b8e:	697b      	ldr	r3, [r7, #20]
 8000b90:	f003 0307 	and.w	r3, r3, #7
 8000b94:	009b      	lsls	r3, r3, #2
 8000b96:	fa02 f303 	lsl.w	r3, r2, r3
 8000b9a:	693a      	ldr	r2, [r7, #16]
 8000b9c:	4313      	orrs	r3, r2
 8000b9e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000ba0:	697b      	ldr	r3, [r7, #20]
 8000ba2:	08da      	lsrs	r2, r3, #3
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	3208      	adds	r2, #8
 8000ba8:	6939      	ldr	r1, [r7, #16]
 8000baa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000bb4:	697b      	ldr	r3, [r7, #20]
 8000bb6:	005b      	lsls	r3, r3, #1
 8000bb8:	2203      	movs	r2, #3
 8000bba:	fa02 f303 	lsl.w	r3, r2, r3
 8000bbe:	43db      	mvns	r3, r3
 8000bc0:	693a      	ldr	r2, [r7, #16]
 8000bc2:	4013      	ands	r3, r2
 8000bc4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000bc6:	683b      	ldr	r3, [r7, #0]
 8000bc8:	685b      	ldr	r3, [r3, #4]
 8000bca:	f003 0203 	and.w	r2, r3, #3
 8000bce:	697b      	ldr	r3, [r7, #20]
 8000bd0:	005b      	lsls	r3, r3, #1
 8000bd2:	fa02 f303 	lsl.w	r3, r2, r3
 8000bd6:	693a      	ldr	r2, [r7, #16]
 8000bd8:	4313      	orrs	r3, r2
 8000bda:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	693a      	ldr	r2, [r7, #16]
 8000be0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000be2:	683b      	ldr	r3, [r7, #0]
 8000be4:	685b      	ldr	r3, [r3, #4]
 8000be6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	f000 80a0 	beq.w	8000d30 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bf0:	4b58      	ldr	r3, [pc, #352]	; (8000d54 <HAL_GPIO_Init+0x2d8>)
 8000bf2:	699b      	ldr	r3, [r3, #24]
 8000bf4:	4a57      	ldr	r2, [pc, #348]	; (8000d54 <HAL_GPIO_Init+0x2d8>)
 8000bf6:	f043 0301 	orr.w	r3, r3, #1
 8000bfa:	6193      	str	r3, [r2, #24]
 8000bfc:	4b55      	ldr	r3, [pc, #340]	; (8000d54 <HAL_GPIO_Init+0x2d8>)
 8000bfe:	699b      	ldr	r3, [r3, #24]
 8000c00:	f003 0301 	and.w	r3, r3, #1
 8000c04:	60bb      	str	r3, [r7, #8]
 8000c06:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000c08:	4a53      	ldr	r2, [pc, #332]	; (8000d58 <HAL_GPIO_Init+0x2dc>)
 8000c0a:	697b      	ldr	r3, [r7, #20]
 8000c0c:	089b      	lsrs	r3, r3, #2
 8000c0e:	3302      	adds	r3, #2
 8000c10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c14:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000c16:	697b      	ldr	r3, [r7, #20]
 8000c18:	f003 0303 	and.w	r3, r3, #3
 8000c1c:	009b      	lsls	r3, r3, #2
 8000c1e:	220f      	movs	r2, #15
 8000c20:	fa02 f303 	lsl.w	r3, r2, r3
 8000c24:	43db      	mvns	r3, r3
 8000c26:	693a      	ldr	r2, [r7, #16]
 8000c28:	4013      	ands	r3, r2
 8000c2a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000c32:	d019      	beq.n	8000c68 <HAL_GPIO_Init+0x1ec>
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	4a49      	ldr	r2, [pc, #292]	; (8000d5c <HAL_GPIO_Init+0x2e0>)
 8000c38:	4293      	cmp	r3, r2
 8000c3a:	d013      	beq.n	8000c64 <HAL_GPIO_Init+0x1e8>
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	4a48      	ldr	r2, [pc, #288]	; (8000d60 <HAL_GPIO_Init+0x2e4>)
 8000c40:	4293      	cmp	r3, r2
 8000c42:	d00d      	beq.n	8000c60 <HAL_GPIO_Init+0x1e4>
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	4a47      	ldr	r2, [pc, #284]	; (8000d64 <HAL_GPIO_Init+0x2e8>)
 8000c48:	4293      	cmp	r3, r2
 8000c4a:	d007      	beq.n	8000c5c <HAL_GPIO_Init+0x1e0>
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	4a46      	ldr	r2, [pc, #280]	; (8000d68 <HAL_GPIO_Init+0x2ec>)
 8000c50:	4293      	cmp	r3, r2
 8000c52:	d101      	bne.n	8000c58 <HAL_GPIO_Init+0x1dc>
 8000c54:	2304      	movs	r3, #4
 8000c56:	e008      	b.n	8000c6a <HAL_GPIO_Init+0x1ee>
 8000c58:	2305      	movs	r3, #5
 8000c5a:	e006      	b.n	8000c6a <HAL_GPIO_Init+0x1ee>
 8000c5c:	2303      	movs	r3, #3
 8000c5e:	e004      	b.n	8000c6a <HAL_GPIO_Init+0x1ee>
 8000c60:	2302      	movs	r3, #2
 8000c62:	e002      	b.n	8000c6a <HAL_GPIO_Init+0x1ee>
 8000c64:	2301      	movs	r3, #1
 8000c66:	e000      	b.n	8000c6a <HAL_GPIO_Init+0x1ee>
 8000c68:	2300      	movs	r3, #0
 8000c6a:	697a      	ldr	r2, [r7, #20]
 8000c6c:	f002 0203 	and.w	r2, r2, #3
 8000c70:	0092      	lsls	r2, r2, #2
 8000c72:	4093      	lsls	r3, r2
 8000c74:	693a      	ldr	r2, [r7, #16]
 8000c76:	4313      	orrs	r3, r2
 8000c78:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000c7a:	4937      	ldr	r1, [pc, #220]	; (8000d58 <HAL_GPIO_Init+0x2dc>)
 8000c7c:	697b      	ldr	r3, [r7, #20]
 8000c7e:	089b      	lsrs	r3, r3, #2
 8000c80:	3302      	adds	r3, #2
 8000c82:	693a      	ldr	r2, [r7, #16]
 8000c84:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000c88:	4b38      	ldr	r3, [pc, #224]	; (8000d6c <HAL_GPIO_Init+0x2f0>)
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c8e:	68fb      	ldr	r3, [r7, #12]
 8000c90:	43db      	mvns	r3, r3
 8000c92:	693a      	ldr	r2, [r7, #16]
 8000c94:	4013      	ands	r3, r2
 8000c96:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000c98:	683b      	ldr	r3, [r7, #0]
 8000c9a:	685b      	ldr	r3, [r3, #4]
 8000c9c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d003      	beq.n	8000cac <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8000ca4:	693a      	ldr	r2, [r7, #16]
 8000ca6:	68fb      	ldr	r3, [r7, #12]
 8000ca8:	4313      	orrs	r3, r2
 8000caa:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000cac:	4a2f      	ldr	r2, [pc, #188]	; (8000d6c <HAL_GPIO_Init+0x2f0>)
 8000cae:	693b      	ldr	r3, [r7, #16]
 8000cb0:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000cb2:	4b2e      	ldr	r3, [pc, #184]	; (8000d6c <HAL_GPIO_Init+0x2f0>)
 8000cb4:	685b      	ldr	r3, [r3, #4]
 8000cb6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000cb8:	68fb      	ldr	r3, [r7, #12]
 8000cba:	43db      	mvns	r3, r3
 8000cbc:	693a      	ldr	r2, [r7, #16]
 8000cbe:	4013      	ands	r3, r2
 8000cc0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000cc2:	683b      	ldr	r3, [r7, #0]
 8000cc4:	685b      	ldr	r3, [r3, #4]
 8000cc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d003      	beq.n	8000cd6 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8000cce:	693a      	ldr	r2, [r7, #16]
 8000cd0:	68fb      	ldr	r3, [r7, #12]
 8000cd2:	4313      	orrs	r3, r2
 8000cd4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000cd6:	4a25      	ldr	r2, [pc, #148]	; (8000d6c <HAL_GPIO_Init+0x2f0>)
 8000cd8:	693b      	ldr	r3, [r7, #16]
 8000cda:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000cdc:	4b23      	ldr	r3, [pc, #140]	; (8000d6c <HAL_GPIO_Init+0x2f0>)
 8000cde:	689b      	ldr	r3, [r3, #8]
 8000ce0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ce2:	68fb      	ldr	r3, [r7, #12]
 8000ce4:	43db      	mvns	r3, r3
 8000ce6:	693a      	ldr	r2, [r7, #16]
 8000ce8:	4013      	ands	r3, r2
 8000cea:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000cec:	683b      	ldr	r3, [r7, #0]
 8000cee:	685b      	ldr	r3, [r3, #4]
 8000cf0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d003      	beq.n	8000d00 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8000cf8:	693a      	ldr	r2, [r7, #16]
 8000cfa:	68fb      	ldr	r3, [r7, #12]
 8000cfc:	4313      	orrs	r3, r2
 8000cfe:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000d00:	4a1a      	ldr	r2, [pc, #104]	; (8000d6c <HAL_GPIO_Init+0x2f0>)
 8000d02:	693b      	ldr	r3, [r7, #16]
 8000d04:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000d06:	4b19      	ldr	r3, [pc, #100]	; (8000d6c <HAL_GPIO_Init+0x2f0>)
 8000d08:	68db      	ldr	r3, [r3, #12]
 8000d0a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d0c:	68fb      	ldr	r3, [r7, #12]
 8000d0e:	43db      	mvns	r3, r3
 8000d10:	693a      	ldr	r2, [r7, #16]
 8000d12:	4013      	ands	r3, r2
 8000d14:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000d16:	683b      	ldr	r3, [r7, #0]
 8000d18:	685b      	ldr	r3, [r3, #4]
 8000d1a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d003      	beq.n	8000d2a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8000d22:	693a      	ldr	r2, [r7, #16]
 8000d24:	68fb      	ldr	r3, [r7, #12]
 8000d26:	4313      	orrs	r3, r2
 8000d28:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000d2a:	4a10      	ldr	r2, [pc, #64]	; (8000d6c <HAL_GPIO_Init+0x2f0>)
 8000d2c:	693b      	ldr	r3, [r7, #16]
 8000d2e:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8000d30:	697b      	ldr	r3, [r7, #20]
 8000d32:	3301      	adds	r3, #1
 8000d34:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d36:	683b      	ldr	r3, [r7, #0]
 8000d38:	681a      	ldr	r2, [r3, #0]
 8000d3a:	697b      	ldr	r3, [r7, #20]
 8000d3c:	fa22 f303 	lsr.w	r3, r2, r3
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	f47f aea3 	bne.w	8000a8c <HAL_GPIO_Init+0x10>
  }
}
 8000d46:	bf00      	nop
 8000d48:	bf00      	nop
 8000d4a:	371c      	adds	r7, #28
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d52:	4770      	bx	lr
 8000d54:	40021000 	.word	0x40021000
 8000d58:	40010000 	.word	0x40010000
 8000d5c:	48000400 	.word	0x48000400
 8000d60:	48000800 	.word	0x48000800
 8000d64:	48000c00 	.word	0x48000c00
 8000d68:	48001000 	.word	0x48001000
 8000d6c:	40010400 	.word	0x40010400

08000d70 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000d70:	b480      	push	{r7}
 8000d72:	b083      	sub	sp, #12
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
 8000d78:	460b      	mov	r3, r1
 8000d7a:	807b      	strh	r3, [r7, #2]
 8000d7c:	4613      	mov	r3, r2
 8000d7e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000d80:	787b      	ldrb	r3, [r7, #1]
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d003      	beq.n	8000d8e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000d86:	887a      	ldrh	r2, [r7, #2]
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000d8c:	e002      	b.n	8000d94 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000d8e:	887a      	ldrh	r2, [r7, #2]
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000d94:	bf00      	nop
 8000d96:	370c      	adds	r7, #12
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9e:	4770      	bx	lr

08000da0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8000da6:	af00      	add	r7, sp, #0
 8000da8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000dac:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000db0:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000db2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000db6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d102      	bne.n	8000dc6 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8000dc0:	2301      	movs	r3, #1
 8000dc2:	f001 b823 	b.w	8001e0c <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000dc6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000dca:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	f003 0301 	and.w	r3, r3, #1
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	f000 817d 	beq.w	80010d6 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000ddc:	4bbc      	ldr	r3, [pc, #752]	; (80010d0 <HAL_RCC_OscConfig+0x330>)
 8000dde:	685b      	ldr	r3, [r3, #4]
 8000de0:	f003 030c 	and.w	r3, r3, #12
 8000de4:	2b04      	cmp	r3, #4
 8000de6:	d00c      	beq.n	8000e02 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000de8:	4bb9      	ldr	r3, [pc, #740]	; (80010d0 <HAL_RCC_OscConfig+0x330>)
 8000dea:	685b      	ldr	r3, [r3, #4]
 8000dec:	f003 030c 	and.w	r3, r3, #12
 8000df0:	2b08      	cmp	r3, #8
 8000df2:	d15c      	bne.n	8000eae <HAL_RCC_OscConfig+0x10e>
 8000df4:	4bb6      	ldr	r3, [pc, #728]	; (80010d0 <HAL_RCC_OscConfig+0x330>)
 8000df6:	685b      	ldr	r3, [r3, #4]
 8000df8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000dfc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000e00:	d155      	bne.n	8000eae <HAL_RCC_OscConfig+0x10e>
 8000e02:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000e06:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e0a:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8000e0e:	fa93 f3a3 	rbit	r3, r3
 8000e12:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000e16:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e1a:	fab3 f383 	clz	r3, r3
 8000e1e:	b2db      	uxtb	r3, r3
 8000e20:	095b      	lsrs	r3, r3, #5
 8000e22:	b2db      	uxtb	r3, r3
 8000e24:	f043 0301 	orr.w	r3, r3, #1
 8000e28:	b2db      	uxtb	r3, r3
 8000e2a:	2b01      	cmp	r3, #1
 8000e2c:	d102      	bne.n	8000e34 <HAL_RCC_OscConfig+0x94>
 8000e2e:	4ba8      	ldr	r3, [pc, #672]	; (80010d0 <HAL_RCC_OscConfig+0x330>)
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	e015      	b.n	8000e60 <HAL_RCC_OscConfig+0xc0>
 8000e34:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000e38:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e3c:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8000e40:	fa93 f3a3 	rbit	r3, r3
 8000e44:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8000e48:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000e4c:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8000e50:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8000e54:	fa93 f3a3 	rbit	r3, r3
 8000e58:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8000e5c:	4b9c      	ldr	r3, [pc, #624]	; (80010d0 <HAL_RCC_OscConfig+0x330>)
 8000e5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e60:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000e64:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8000e68:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8000e6c:	fa92 f2a2 	rbit	r2, r2
 8000e70:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8000e74:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8000e78:	fab2 f282 	clz	r2, r2
 8000e7c:	b2d2      	uxtb	r2, r2
 8000e7e:	f042 0220 	orr.w	r2, r2, #32
 8000e82:	b2d2      	uxtb	r2, r2
 8000e84:	f002 021f 	and.w	r2, r2, #31
 8000e88:	2101      	movs	r1, #1
 8000e8a:	fa01 f202 	lsl.w	r2, r1, r2
 8000e8e:	4013      	ands	r3, r2
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	f000 811f 	beq.w	80010d4 <HAL_RCC_OscConfig+0x334>
 8000e96:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000e9a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	685b      	ldr	r3, [r3, #4]
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	f040 8116 	bne.w	80010d4 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8000ea8:	2301      	movs	r3, #1
 8000eaa:	f000 bfaf 	b.w	8001e0c <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000eae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000eb2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	685b      	ldr	r3, [r3, #4]
 8000eba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000ebe:	d106      	bne.n	8000ece <HAL_RCC_OscConfig+0x12e>
 8000ec0:	4b83      	ldr	r3, [pc, #524]	; (80010d0 <HAL_RCC_OscConfig+0x330>)
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	4a82      	ldr	r2, [pc, #520]	; (80010d0 <HAL_RCC_OscConfig+0x330>)
 8000ec6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000eca:	6013      	str	r3, [r2, #0]
 8000ecc:	e036      	b.n	8000f3c <HAL_RCC_OscConfig+0x19c>
 8000ece:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000ed2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	685b      	ldr	r3, [r3, #4]
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d10c      	bne.n	8000ef8 <HAL_RCC_OscConfig+0x158>
 8000ede:	4b7c      	ldr	r3, [pc, #496]	; (80010d0 <HAL_RCC_OscConfig+0x330>)
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	4a7b      	ldr	r2, [pc, #492]	; (80010d0 <HAL_RCC_OscConfig+0x330>)
 8000ee4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000ee8:	6013      	str	r3, [r2, #0]
 8000eea:	4b79      	ldr	r3, [pc, #484]	; (80010d0 <HAL_RCC_OscConfig+0x330>)
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	4a78      	ldr	r2, [pc, #480]	; (80010d0 <HAL_RCC_OscConfig+0x330>)
 8000ef0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000ef4:	6013      	str	r3, [r2, #0]
 8000ef6:	e021      	b.n	8000f3c <HAL_RCC_OscConfig+0x19c>
 8000ef8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000efc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	685b      	ldr	r3, [r3, #4]
 8000f04:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000f08:	d10c      	bne.n	8000f24 <HAL_RCC_OscConfig+0x184>
 8000f0a:	4b71      	ldr	r3, [pc, #452]	; (80010d0 <HAL_RCC_OscConfig+0x330>)
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	4a70      	ldr	r2, [pc, #448]	; (80010d0 <HAL_RCC_OscConfig+0x330>)
 8000f10:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f14:	6013      	str	r3, [r2, #0]
 8000f16:	4b6e      	ldr	r3, [pc, #440]	; (80010d0 <HAL_RCC_OscConfig+0x330>)
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	4a6d      	ldr	r2, [pc, #436]	; (80010d0 <HAL_RCC_OscConfig+0x330>)
 8000f1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f20:	6013      	str	r3, [r2, #0]
 8000f22:	e00b      	b.n	8000f3c <HAL_RCC_OscConfig+0x19c>
 8000f24:	4b6a      	ldr	r3, [pc, #424]	; (80010d0 <HAL_RCC_OscConfig+0x330>)
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	4a69      	ldr	r2, [pc, #420]	; (80010d0 <HAL_RCC_OscConfig+0x330>)
 8000f2a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f2e:	6013      	str	r3, [r2, #0]
 8000f30:	4b67      	ldr	r3, [pc, #412]	; (80010d0 <HAL_RCC_OscConfig+0x330>)
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	4a66      	ldr	r2, [pc, #408]	; (80010d0 <HAL_RCC_OscConfig+0x330>)
 8000f36:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f3a:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000f3c:	4b64      	ldr	r3, [pc, #400]	; (80010d0 <HAL_RCC_OscConfig+0x330>)
 8000f3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f40:	f023 020f 	bic.w	r2, r3, #15
 8000f44:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000f48:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	689b      	ldr	r3, [r3, #8]
 8000f50:	495f      	ldr	r1, [pc, #380]	; (80010d0 <HAL_RCC_OscConfig+0x330>)
 8000f52:	4313      	orrs	r3, r2
 8000f54:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000f56:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000f5a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	685b      	ldr	r3, [r3, #4]
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d059      	beq.n	800101a <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f66:	f7ff fc9b 	bl	80008a0 <HAL_GetTick>
 8000f6a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f6e:	e00a      	b.n	8000f86 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000f70:	f7ff fc96 	bl	80008a0 <HAL_GetTick>
 8000f74:	4602      	mov	r2, r0
 8000f76:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000f7a:	1ad3      	subs	r3, r2, r3
 8000f7c:	2b64      	cmp	r3, #100	; 0x64
 8000f7e:	d902      	bls.n	8000f86 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8000f80:	2303      	movs	r3, #3
 8000f82:	f000 bf43 	b.w	8001e0c <HAL_RCC_OscConfig+0x106c>
 8000f86:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f8a:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f8e:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8000f92:	fa93 f3a3 	rbit	r3, r3
 8000f96:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8000f9a:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f9e:	fab3 f383 	clz	r3, r3
 8000fa2:	b2db      	uxtb	r3, r3
 8000fa4:	095b      	lsrs	r3, r3, #5
 8000fa6:	b2db      	uxtb	r3, r3
 8000fa8:	f043 0301 	orr.w	r3, r3, #1
 8000fac:	b2db      	uxtb	r3, r3
 8000fae:	2b01      	cmp	r3, #1
 8000fb0:	d102      	bne.n	8000fb8 <HAL_RCC_OscConfig+0x218>
 8000fb2:	4b47      	ldr	r3, [pc, #284]	; (80010d0 <HAL_RCC_OscConfig+0x330>)
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	e015      	b.n	8000fe4 <HAL_RCC_OscConfig+0x244>
 8000fb8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000fbc:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000fc0:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8000fc4:	fa93 f3a3 	rbit	r3, r3
 8000fc8:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8000fcc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000fd0:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8000fd4:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8000fd8:	fa93 f3a3 	rbit	r3, r3
 8000fdc:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8000fe0:	4b3b      	ldr	r3, [pc, #236]	; (80010d0 <HAL_RCC_OscConfig+0x330>)
 8000fe2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fe4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000fe8:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8000fec:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8000ff0:	fa92 f2a2 	rbit	r2, r2
 8000ff4:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8000ff8:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8000ffc:	fab2 f282 	clz	r2, r2
 8001000:	b2d2      	uxtb	r2, r2
 8001002:	f042 0220 	orr.w	r2, r2, #32
 8001006:	b2d2      	uxtb	r2, r2
 8001008:	f002 021f 	and.w	r2, r2, #31
 800100c:	2101      	movs	r1, #1
 800100e:	fa01 f202 	lsl.w	r2, r1, r2
 8001012:	4013      	ands	r3, r2
 8001014:	2b00      	cmp	r3, #0
 8001016:	d0ab      	beq.n	8000f70 <HAL_RCC_OscConfig+0x1d0>
 8001018:	e05d      	b.n	80010d6 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800101a:	f7ff fc41 	bl	80008a0 <HAL_GetTick>
 800101e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001022:	e00a      	b.n	800103a <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001024:	f7ff fc3c 	bl	80008a0 <HAL_GetTick>
 8001028:	4602      	mov	r2, r0
 800102a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800102e:	1ad3      	subs	r3, r2, r3
 8001030:	2b64      	cmp	r3, #100	; 0x64
 8001032:	d902      	bls.n	800103a <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8001034:	2303      	movs	r3, #3
 8001036:	f000 bee9 	b.w	8001e0c <HAL_RCC_OscConfig+0x106c>
 800103a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800103e:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001042:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8001046:	fa93 f3a3 	rbit	r3, r3
 800104a:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 800104e:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001052:	fab3 f383 	clz	r3, r3
 8001056:	b2db      	uxtb	r3, r3
 8001058:	095b      	lsrs	r3, r3, #5
 800105a:	b2db      	uxtb	r3, r3
 800105c:	f043 0301 	orr.w	r3, r3, #1
 8001060:	b2db      	uxtb	r3, r3
 8001062:	2b01      	cmp	r3, #1
 8001064:	d102      	bne.n	800106c <HAL_RCC_OscConfig+0x2cc>
 8001066:	4b1a      	ldr	r3, [pc, #104]	; (80010d0 <HAL_RCC_OscConfig+0x330>)
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	e015      	b.n	8001098 <HAL_RCC_OscConfig+0x2f8>
 800106c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001070:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001074:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8001078:	fa93 f3a3 	rbit	r3, r3
 800107c:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8001080:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001084:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8001088:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 800108c:	fa93 f3a3 	rbit	r3, r3
 8001090:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8001094:	4b0e      	ldr	r3, [pc, #56]	; (80010d0 <HAL_RCC_OscConfig+0x330>)
 8001096:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001098:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800109c:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 80010a0:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80010a4:	fa92 f2a2 	rbit	r2, r2
 80010a8:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 80010ac:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 80010b0:	fab2 f282 	clz	r2, r2
 80010b4:	b2d2      	uxtb	r2, r2
 80010b6:	f042 0220 	orr.w	r2, r2, #32
 80010ba:	b2d2      	uxtb	r2, r2
 80010bc:	f002 021f 	and.w	r2, r2, #31
 80010c0:	2101      	movs	r1, #1
 80010c2:	fa01 f202 	lsl.w	r2, r1, r2
 80010c6:	4013      	ands	r3, r2
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d1ab      	bne.n	8001024 <HAL_RCC_OscConfig+0x284>
 80010cc:	e003      	b.n	80010d6 <HAL_RCC_OscConfig+0x336>
 80010ce:	bf00      	nop
 80010d0:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80010d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80010da:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	f003 0302 	and.w	r3, r3, #2
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	f000 817d 	beq.w	80013e6 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80010ec:	4ba6      	ldr	r3, [pc, #664]	; (8001388 <HAL_RCC_OscConfig+0x5e8>)
 80010ee:	685b      	ldr	r3, [r3, #4]
 80010f0:	f003 030c 	and.w	r3, r3, #12
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d00b      	beq.n	8001110 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80010f8:	4ba3      	ldr	r3, [pc, #652]	; (8001388 <HAL_RCC_OscConfig+0x5e8>)
 80010fa:	685b      	ldr	r3, [r3, #4]
 80010fc:	f003 030c 	and.w	r3, r3, #12
 8001100:	2b08      	cmp	r3, #8
 8001102:	d172      	bne.n	80011ea <HAL_RCC_OscConfig+0x44a>
 8001104:	4ba0      	ldr	r3, [pc, #640]	; (8001388 <HAL_RCC_OscConfig+0x5e8>)
 8001106:	685b      	ldr	r3, [r3, #4]
 8001108:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800110c:	2b00      	cmp	r3, #0
 800110e:	d16c      	bne.n	80011ea <HAL_RCC_OscConfig+0x44a>
 8001110:	2302      	movs	r3, #2
 8001112:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001116:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800111a:	fa93 f3a3 	rbit	r3, r3
 800111e:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8001122:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001126:	fab3 f383 	clz	r3, r3
 800112a:	b2db      	uxtb	r3, r3
 800112c:	095b      	lsrs	r3, r3, #5
 800112e:	b2db      	uxtb	r3, r3
 8001130:	f043 0301 	orr.w	r3, r3, #1
 8001134:	b2db      	uxtb	r3, r3
 8001136:	2b01      	cmp	r3, #1
 8001138:	d102      	bne.n	8001140 <HAL_RCC_OscConfig+0x3a0>
 800113a:	4b93      	ldr	r3, [pc, #588]	; (8001388 <HAL_RCC_OscConfig+0x5e8>)
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	e013      	b.n	8001168 <HAL_RCC_OscConfig+0x3c8>
 8001140:	2302      	movs	r3, #2
 8001142:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001146:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 800114a:	fa93 f3a3 	rbit	r3, r3
 800114e:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8001152:	2302      	movs	r3, #2
 8001154:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8001158:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800115c:	fa93 f3a3 	rbit	r3, r3
 8001160:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8001164:	4b88      	ldr	r3, [pc, #544]	; (8001388 <HAL_RCC_OscConfig+0x5e8>)
 8001166:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001168:	2202      	movs	r2, #2
 800116a:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 800116e:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8001172:	fa92 f2a2 	rbit	r2, r2
 8001176:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 800117a:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 800117e:	fab2 f282 	clz	r2, r2
 8001182:	b2d2      	uxtb	r2, r2
 8001184:	f042 0220 	orr.w	r2, r2, #32
 8001188:	b2d2      	uxtb	r2, r2
 800118a:	f002 021f 	and.w	r2, r2, #31
 800118e:	2101      	movs	r1, #1
 8001190:	fa01 f202 	lsl.w	r2, r1, r2
 8001194:	4013      	ands	r3, r2
 8001196:	2b00      	cmp	r3, #0
 8001198:	d00a      	beq.n	80011b0 <HAL_RCC_OscConfig+0x410>
 800119a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800119e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	691b      	ldr	r3, [r3, #16]
 80011a6:	2b01      	cmp	r3, #1
 80011a8:	d002      	beq.n	80011b0 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 80011aa:	2301      	movs	r3, #1
 80011ac:	f000 be2e 	b.w	8001e0c <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011b0:	4b75      	ldr	r3, [pc, #468]	; (8001388 <HAL_RCC_OscConfig+0x5e8>)
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80011b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80011bc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	695b      	ldr	r3, [r3, #20]
 80011c4:	21f8      	movs	r1, #248	; 0xf8
 80011c6:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011ca:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80011ce:	fa91 f1a1 	rbit	r1, r1
 80011d2:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 80011d6:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 80011da:	fab1 f181 	clz	r1, r1
 80011de:	b2c9      	uxtb	r1, r1
 80011e0:	408b      	lsls	r3, r1
 80011e2:	4969      	ldr	r1, [pc, #420]	; (8001388 <HAL_RCC_OscConfig+0x5e8>)
 80011e4:	4313      	orrs	r3, r2
 80011e6:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80011e8:	e0fd      	b.n	80013e6 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80011ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80011ee:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	691b      	ldr	r3, [r3, #16]
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	f000 8088 	beq.w	800130c <HAL_RCC_OscConfig+0x56c>
 80011fc:	2301      	movs	r3, #1
 80011fe:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001202:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8001206:	fa93 f3a3 	rbit	r3, r3
 800120a:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 800120e:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001212:	fab3 f383 	clz	r3, r3
 8001216:	b2db      	uxtb	r3, r3
 8001218:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800121c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001220:	009b      	lsls	r3, r3, #2
 8001222:	461a      	mov	r2, r3
 8001224:	2301      	movs	r3, #1
 8001226:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001228:	f7ff fb3a 	bl	80008a0 <HAL_GetTick>
 800122c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001230:	e00a      	b.n	8001248 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001232:	f7ff fb35 	bl	80008a0 <HAL_GetTick>
 8001236:	4602      	mov	r2, r0
 8001238:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800123c:	1ad3      	subs	r3, r2, r3
 800123e:	2b02      	cmp	r3, #2
 8001240:	d902      	bls.n	8001248 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8001242:	2303      	movs	r3, #3
 8001244:	f000 bde2 	b.w	8001e0c <HAL_RCC_OscConfig+0x106c>
 8001248:	2302      	movs	r3, #2
 800124a:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800124e:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8001252:	fa93 f3a3 	rbit	r3, r3
 8001256:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 800125a:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800125e:	fab3 f383 	clz	r3, r3
 8001262:	b2db      	uxtb	r3, r3
 8001264:	095b      	lsrs	r3, r3, #5
 8001266:	b2db      	uxtb	r3, r3
 8001268:	f043 0301 	orr.w	r3, r3, #1
 800126c:	b2db      	uxtb	r3, r3
 800126e:	2b01      	cmp	r3, #1
 8001270:	d102      	bne.n	8001278 <HAL_RCC_OscConfig+0x4d8>
 8001272:	4b45      	ldr	r3, [pc, #276]	; (8001388 <HAL_RCC_OscConfig+0x5e8>)
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	e013      	b.n	80012a0 <HAL_RCC_OscConfig+0x500>
 8001278:	2302      	movs	r3, #2
 800127a:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800127e:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8001282:	fa93 f3a3 	rbit	r3, r3
 8001286:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800128a:	2302      	movs	r3, #2
 800128c:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001290:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8001294:	fa93 f3a3 	rbit	r3, r3
 8001298:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 800129c:	4b3a      	ldr	r3, [pc, #232]	; (8001388 <HAL_RCC_OscConfig+0x5e8>)
 800129e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012a0:	2202      	movs	r2, #2
 80012a2:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 80012a6:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80012aa:	fa92 f2a2 	rbit	r2, r2
 80012ae:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 80012b2:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 80012b6:	fab2 f282 	clz	r2, r2
 80012ba:	b2d2      	uxtb	r2, r2
 80012bc:	f042 0220 	orr.w	r2, r2, #32
 80012c0:	b2d2      	uxtb	r2, r2
 80012c2:	f002 021f 	and.w	r2, r2, #31
 80012c6:	2101      	movs	r1, #1
 80012c8:	fa01 f202 	lsl.w	r2, r1, r2
 80012cc:	4013      	ands	r3, r2
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d0af      	beq.n	8001232 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012d2:	4b2d      	ldr	r3, [pc, #180]	; (8001388 <HAL_RCC_OscConfig+0x5e8>)
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80012da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80012de:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	695b      	ldr	r3, [r3, #20]
 80012e6:	21f8      	movs	r1, #248	; 0xf8
 80012e8:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012ec:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80012f0:	fa91 f1a1 	rbit	r1, r1
 80012f4:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 80012f8:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 80012fc:	fab1 f181 	clz	r1, r1
 8001300:	b2c9      	uxtb	r1, r1
 8001302:	408b      	lsls	r3, r1
 8001304:	4920      	ldr	r1, [pc, #128]	; (8001388 <HAL_RCC_OscConfig+0x5e8>)
 8001306:	4313      	orrs	r3, r2
 8001308:	600b      	str	r3, [r1, #0]
 800130a:	e06c      	b.n	80013e6 <HAL_RCC_OscConfig+0x646>
 800130c:	2301      	movs	r3, #1
 800130e:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001312:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8001316:	fa93 f3a3 	rbit	r3, r3
 800131a:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 800131e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001322:	fab3 f383 	clz	r3, r3
 8001326:	b2db      	uxtb	r3, r3
 8001328:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800132c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001330:	009b      	lsls	r3, r3, #2
 8001332:	461a      	mov	r2, r3
 8001334:	2300      	movs	r3, #0
 8001336:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001338:	f7ff fab2 	bl	80008a0 <HAL_GetTick>
 800133c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001340:	e00a      	b.n	8001358 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001342:	f7ff faad 	bl	80008a0 <HAL_GetTick>
 8001346:	4602      	mov	r2, r0
 8001348:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800134c:	1ad3      	subs	r3, r2, r3
 800134e:	2b02      	cmp	r3, #2
 8001350:	d902      	bls.n	8001358 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8001352:	2303      	movs	r3, #3
 8001354:	f000 bd5a 	b.w	8001e0c <HAL_RCC_OscConfig+0x106c>
 8001358:	2302      	movs	r3, #2
 800135a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800135e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8001362:	fa93 f3a3 	rbit	r3, r3
 8001366:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 800136a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800136e:	fab3 f383 	clz	r3, r3
 8001372:	b2db      	uxtb	r3, r3
 8001374:	095b      	lsrs	r3, r3, #5
 8001376:	b2db      	uxtb	r3, r3
 8001378:	f043 0301 	orr.w	r3, r3, #1
 800137c:	b2db      	uxtb	r3, r3
 800137e:	2b01      	cmp	r3, #1
 8001380:	d104      	bne.n	800138c <HAL_RCC_OscConfig+0x5ec>
 8001382:	4b01      	ldr	r3, [pc, #4]	; (8001388 <HAL_RCC_OscConfig+0x5e8>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	e015      	b.n	80013b4 <HAL_RCC_OscConfig+0x614>
 8001388:	40021000 	.word	0x40021000
 800138c:	2302      	movs	r3, #2
 800138e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001392:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001396:	fa93 f3a3 	rbit	r3, r3
 800139a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800139e:	2302      	movs	r3, #2
 80013a0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80013a4:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80013a8:	fa93 f3a3 	rbit	r3, r3
 80013ac:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80013b0:	4bc8      	ldr	r3, [pc, #800]	; (80016d4 <HAL_RCC_OscConfig+0x934>)
 80013b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013b4:	2202      	movs	r2, #2
 80013b6:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 80013ba:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80013be:	fa92 f2a2 	rbit	r2, r2
 80013c2:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 80013c6:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80013ca:	fab2 f282 	clz	r2, r2
 80013ce:	b2d2      	uxtb	r2, r2
 80013d0:	f042 0220 	orr.w	r2, r2, #32
 80013d4:	b2d2      	uxtb	r2, r2
 80013d6:	f002 021f 	and.w	r2, r2, #31
 80013da:	2101      	movs	r1, #1
 80013dc:	fa01 f202 	lsl.w	r2, r1, r2
 80013e0:	4013      	ands	r3, r2
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d1ad      	bne.n	8001342 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80013e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80013ea:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	f003 0308 	and.w	r3, r3, #8
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	f000 8110 	beq.w	800161c <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80013fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001400:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	699b      	ldr	r3, [r3, #24]
 8001408:	2b00      	cmp	r3, #0
 800140a:	d079      	beq.n	8001500 <HAL_RCC_OscConfig+0x760>
 800140c:	2301      	movs	r3, #1
 800140e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001412:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001416:	fa93 f3a3 	rbit	r3, r3
 800141a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 800141e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001422:	fab3 f383 	clz	r3, r3
 8001426:	b2db      	uxtb	r3, r3
 8001428:	461a      	mov	r2, r3
 800142a:	4bab      	ldr	r3, [pc, #684]	; (80016d8 <HAL_RCC_OscConfig+0x938>)
 800142c:	4413      	add	r3, r2
 800142e:	009b      	lsls	r3, r3, #2
 8001430:	461a      	mov	r2, r3
 8001432:	2301      	movs	r3, #1
 8001434:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001436:	f7ff fa33 	bl	80008a0 <HAL_GetTick>
 800143a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800143e:	e00a      	b.n	8001456 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001440:	f7ff fa2e 	bl	80008a0 <HAL_GetTick>
 8001444:	4602      	mov	r2, r0
 8001446:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800144a:	1ad3      	subs	r3, r2, r3
 800144c:	2b02      	cmp	r3, #2
 800144e:	d902      	bls.n	8001456 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8001450:	2303      	movs	r3, #3
 8001452:	f000 bcdb 	b.w	8001e0c <HAL_RCC_OscConfig+0x106c>
 8001456:	2302      	movs	r3, #2
 8001458:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800145c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8001460:	fa93 f3a3 	rbit	r3, r3
 8001464:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8001468:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800146c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001470:	2202      	movs	r2, #2
 8001472:	601a      	str	r2, [r3, #0]
 8001474:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001478:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	fa93 f2a3 	rbit	r2, r3
 8001482:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001486:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800148a:	601a      	str	r2, [r3, #0]
 800148c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001490:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001494:	2202      	movs	r2, #2
 8001496:	601a      	str	r2, [r3, #0]
 8001498:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800149c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	fa93 f2a3 	rbit	r2, r3
 80014a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014aa:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80014ae:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014b0:	4b88      	ldr	r3, [pc, #544]	; (80016d4 <HAL_RCC_OscConfig+0x934>)
 80014b2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80014b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014b8:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80014bc:	2102      	movs	r1, #2
 80014be:	6019      	str	r1, [r3, #0]
 80014c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014c4:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	fa93 f1a3 	rbit	r1, r3
 80014ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014d2:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80014d6:	6019      	str	r1, [r3, #0]
  return result;
 80014d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014dc:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	fab3 f383 	clz	r3, r3
 80014e6:	b2db      	uxtb	r3, r3
 80014e8:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80014ec:	b2db      	uxtb	r3, r3
 80014ee:	f003 031f 	and.w	r3, r3, #31
 80014f2:	2101      	movs	r1, #1
 80014f4:	fa01 f303 	lsl.w	r3, r1, r3
 80014f8:	4013      	ands	r3, r2
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d0a0      	beq.n	8001440 <HAL_RCC_OscConfig+0x6a0>
 80014fe:	e08d      	b.n	800161c <HAL_RCC_OscConfig+0x87c>
 8001500:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001504:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001508:	2201      	movs	r2, #1
 800150a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800150c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001510:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	fa93 f2a3 	rbit	r2, r3
 800151a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800151e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001522:	601a      	str	r2, [r3, #0]
  return result;
 8001524:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001528:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800152c:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800152e:	fab3 f383 	clz	r3, r3
 8001532:	b2db      	uxtb	r3, r3
 8001534:	461a      	mov	r2, r3
 8001536:	4b68      	ldr	r3, [pc, #416]	; (80016d8 <HAL_RCC_OscConfig+0x938>)
 8001538:	4413      	add	r3, r2
 800153a:	009b      	lsls	r3, r3, #2
 800153c:	461a      	mov	r2, r3
 800153e:	2300      	movs	r3, #0
 8001540:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001542:	f7ff f9ad 	bl	80008a0 <HAL_GetTick>
 8001546:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800154a:	e00a      	b.n	8001562 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800154c:	f7ff f9a8 	bl	80008a0 <HAL_GetTick>
 8001550:	4602      	mov	r2, r0
 8001552:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001556:	1ad3      	subs	r3, r2, r3
 8001558:	2b02      	cmp	r3, #2
 800155a:	d902      	bls.n	8001562 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 800155c:	2303      	movs	r3, #3
 800155e:	f000 bc55 	b.w	8001e0c <HAL_RCC_OscConfig+0x106c>
 8001562:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001566:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800156a:	2202      	movs	r2, #2
 800156c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800156e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001572:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	fa93 f2a3 	rbit	r2, r3
 800157c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001580:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001584:	601a      	str	r2, [r3, #0]
 8001586:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800158a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800158e:	2202      	movs	r2, #2
 8001590:	601a      	str	r2, [r3, #0]
 8001592:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001596:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	fa93 f2a3 	rbit	r2, r3
 80015a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015a4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80015a8:	601a      	str	r2, [r3, #0]
 80015aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015ae:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80015b2:	2202      	movs	r2, #2
 80015b4:	601a      	str	r2, [r3, #0]
 80015b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015ba:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	fa93 f2a3 	rbit	r2, r3
 80015c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015c8:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80015cc:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015ce:	4b41      	ldr	r3, [pc, #260]	; (80016d4 <HAL_RCC_OscConfig+0x934>)
 80015d0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80015d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015d6:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80015da:	2102      	movs	r1, #2
 80015dc:	6019      	str	r1, [r3, #0]
 80015de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015e2:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	fa93 f1a3 	rbit	r1, r3
 80015ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015f0:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80015f4:	6019      	str	r1, [r3, #0]
  return result;
 80015f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015fa:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	fab3 f383 	clz	r3, r3
 8001604:	b2db      	uxtb	r3, r3
 8001606:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800160a:	b2db      	uxtb	r3, r3
 800160c:	f003 031f 	and.w	r3, r3, #31
 8001610:	2101      	movs	r1, #1
 8001612:	fa01 f303 	lsl.w	r3, r1, r3
 8001616:	4013      	ands	r3, r2
 8001618:	2b00      	cmp	r3, #0
 800161a:	d197      	bne.n	800154c <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800161c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001620:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	f003 0304 	and.w	r3, r3, #4
 800162c:	2b00      	cmp	r3, #0
 800162e:	f000 81a1 	beq.w	8001974 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001632:	2300      	movs	r3, #0
 8001634:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001638:	4b26      	ldr	r3, [pc, #152]	; (80016d4 <HAL_RCC_OscConfig+0x934>)
 800163a:	69db      	ldr	r3, [r3, #28]
 800163c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001640:	2b00      	cmp	r3, #0
 8001642:	d116      	bne.n	8001672 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001644:	4b23      	ldr	r3, [pc, #140]	; (80016d4 <HAL_RCC_OscConfig+0x934>)
 8001646:	69db      	ldr	r3, [r3, #28]
 8001648:	4a22      	ldr	r2, [pc, #136]	; (80016d4 <HAL_RCC_OscConfig+0x934>)
 800164a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800164e:	61d3      	str	r3, [r2, #28]
 8001650:	4b20      	ldr	r3, [pc, #128]	; (80016d4 <HAL_RCC_OscConfig+0x934>)
 8001652:	69db      	ldr	r3, [r3, #28]
 8001654:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8001658:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800165c:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8001660:	601a      	str	r2, [r3, #0]
 8001662:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001666:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 800166a:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 800166c:	2301      	movs	r3, #1
 800166e:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001672:	4b1a      	ldr	r3, [pc, #104]	; (80016dc <HAL_RCC_OscConfig+0x93c>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800167a:	2b00      	cmp	r3, #0
 800167c:	d11a      	bne.n	80016b4 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800167e:	4b17      	ldr	r3, [pc, #92]	; (80016dc <HAL_RCC_OscConfig+0x93c>)
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	4a16      	ldr	r2, [pc, #88]	; (80016dc <HAL_RCC_OscConfig+0x93c>)
 8001684:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001688:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800168a:	f7ff f909 	bl	80008a0 <HAL_GetTick>
 800168e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001692:	e009      	b.n	80016a8 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001694:	f7ff f904 	bl	80008a0 <HAL_GetTick>
 8001698:	4602      	mov	r2, r0
 800169a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800169e:	1ad3      	subs	r3, r2, r3
 80016a0:	2b64      	cmp	r3, #100	; 0x64
 80016a2:	d901      	bls.n	80016a8 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 80016a4:	2303      	movs	r3, #3
 80016a6:	e3b1      	b.n	8001e0c <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016a8:	4b0c      	ldr	r3, [pc, #48]	; (80016dc <HAL_RCC_OscConfig+0x93c>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d0ef      	beq.n	8001694 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80016b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016b8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	68db      	ldr	r3, [r3, #12]
 80016c0:	2b01      	cmp	r3, #1
 80016c2:	d10d      	bne.n	80016e0 <HAL_RCC_OscConfig+0x940>
 80016c4:	4b03      	ldr	r3, [pc, #12]	; (80016d4 <HAL_RCC_OscConfig+0x934>)
 80016c6:	6a1b      	ldr	r3, [r3, #32]
 80016c8:	4a02      	ldr	r2, [pc, #8]	; (80016d4 <HAL_RCC_OscConfig+0x934>)
 80016ca:	f043 0301 	orr.w	r3, r3, #1
 80016ce:	6213      	str	r3, [r2, #32]
 80016d0:	e03c      	b.n	800174c <HAL_RCC_OscConfig+0x9ac>
 80016d2:	bf00      	nop
 80016d4:	40021000 	.word	0x40021000
 80016d8:	10908120 	.word	0x10908120
 80016dc:	40007000 	.word	0x40007000
 80016e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016e4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	68db      	ldr	r3, [r3, #12]
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d10c      	bne.n	800170a <HAL_RCC_OscConfig+0x96a>
 80016f0:	4bc1      	ldr	r3, [pc, #772]	; (80019f8 <HAL_RCC_OscConfig+0xc58>)
 80016f2:	6a1b      	ldr	r3, [r3, #32]
 80016f4:	4ac0      	ldr	r2, [pc, #768]	; (80019f8 <HAL_RCC_OscConfig+0xc58>)
 80016f6:	f023 0301 	bic.w	r3, r3, #1
 80016fa:	6213      	str	r3, [r2, #32]
 80016fc:	4bbe      	ldr	r3, [pc, #760]	; (80019f8 <HAL_RCC_OscConfig+0xc58>)
 80016fe:	6a1b      	ldr	r3, [r3, #32]
 8001700:	4abd      	ldr	r2, [pc, #756]	; (80019f8 <HAL_RCC_OscConfig+0xc58>)
 8001702:	f023 0304 	bic.w	r3, r3, #4
 8001706:	6213      	str	r3, [r2, #32]
 8001708:	e020      	b.n	800174c <HAL_RCC_OscConfig+0x9ac>
 800170a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800170e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	68db      	ldr	r3, [r3, #12]
 8001716:	2b05      	cmp	r3, #5
 8001718:	d10c      	bne.n	8001734 <HAL_RCC_OscConfig+0x994>
 800171a:	4bb7      	ldr	r3, [pc, #732]	; (80019f8 <HAL_RCC_OscConfig+0xc58>)
 800171c:	6a1b      	ldr	r3, [r3, #32]
 800171e:	4ab6      	ldr	r2, [pc, #728]	; (80019f8 <HAL_RCC_OscConfig+0xc58>)
 8001720:	f043 0304 	orr.w	r3, r3, #4
 8001724:	6213      	str	r3, [r2, #32]
 8001726:	4bb4      	ldr	r3, [pc, #720]	; (80019f8 <HAL_RCC_OscConfig+0xc58>)
 8001728:	6a1b      	ldr	r3, [r3, #32]
 800172a:	4ab3      	ldr	r2, [pc, #716]	; (80019f8 <HAL_RCC_OscConfig+0xc58>)
 800172c:	f043 0301 	orr.w	r3, r3, #1
 8001730:	6213      	str	r3, [r2, #32]
 8001732:	e00b      	b.n	800174c <HAL_RCC_OscConfig+0x9ac>
 8001734:	4bb0      	ldr	r3, [pc, #704]	; (80019f8 <HAL_RCC_OscConfig+0xc58>)
 8001736:	6a1b      	ldr	r3, [r3, #32]
 8001738:	4aaf      	ldr	r2, [pc, #700]	; (80019f8 <HAL_RCC_OscConfig+0xc58>)
 800173a:	f023 0301 	bic.w	r3, r3, #1
 800173e:	6213      	str	r3, [r2, #32]
 8001740:	4bad      	ldr	r3, [pc, #692]	; (80019f8 <HAL_RCC_OscConfig+0xc58>)
 8001742:	6a1b      	ldr	r3, [r3, #32]
 8001744:	4aac      	ldr	r2, [pc, #688]	; (80019f8 <HAL_RCC_OscConfig+0xc58>)
 8001746:	f023 0304 	bic.w	r3, r3, #4
 800174a:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800174c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001750:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	68db      	ldr	r3, [r3, #12]
 8001758:	2b00      	cmp	r3, #0
 800175a:	f000 8081 	beq.w	8001860 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800175e:	f7ff f89f 	bl	80008a0 <HAL_GetTick>
 8001762:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001766:	e00b      	b.n	8001780 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001768:	f7ff f89a 	bl	80008a0 <HAL_GetTick>
 800176c:	4602      	mov	r2, r0
 800176e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001772:	1ad3      	subs	r3, r2, r3
 8001774:	f241 3288 	movw	r2, #5000	; 0x1388
 8001778:	4293      	cmp	r3, r2
 800177a:	d901      	bls.n	8001780 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 800177c:	2303      	movs	r3, #3
 800177e:	e345      	b.n	8001e0c <HAL_RCC_OscConfig+0x106c>
 8001780:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001784:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001788:	2202      	movs	r2, #2
 800178a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800178c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001790:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	fa93 f2a3 	rbit	r2, r3
 800179a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800179e:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80017a2:	601a      	str	r2, [r3, #0]
 80017a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017a8:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80017ac:	2202      	movs	r2, #2
 80017ae:	601a      	str	r2, [r3, #0]
 80017b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017b4:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	fa93 f2a3 	rbit	r2, r3
 80017be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017c2:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80017c6:	601a      	str	r2, [r3, #0]
  return result;
 80017c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017cc:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80017d0:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017d2:	fab3 f383 	clz	r3, r3
 80017d6:	b2db      	uxtb	r3, r3
 80017d8:	095b      	lsrs	r3, r3, #5
 80017da:	b2db      	uxtb	r3, r3
 80017dc:	f043 0302 	orr.w	r3, r3, #2
 80017e0:	b2db      	uxtb	r3, r3
 80017e2:	2b02      	cmp	r3, #2
 80017e4:	d102      	bne.n	80017ec <HAL_RCC_OscConfig+0xa4c>
 80017e6:	4b84      	ldr	r3, [pc, #528]	; (80019f8 <HAL_RCC_OscConfig+0xc58>)
 80017e8:	6a1b      	ldr	r3, [r3, #32]
 80017ea:	e013      	b.n	8001814 <HAL_RCC_OscConfig+0xa74>
 80017ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017f0:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80017f4:	2202      	movs	r2, #2
 80017f6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017fc:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	fa93 f2a3 	rbit	r2, r3
 8001806:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800180a:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 800180e:	601a      	str	r2, [r3, #0]
 8001810:	4b79      	ldr	r3, [pc, #484]	; (80019f8 <HAL_RCC_OscConfig+0xc58>)
 8001812:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001814:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001818:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 800181c:	2102      	movs	r1, #2
 800181e:	6011      	str	r1, [r2, #0]
 8001820:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001824:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8001828:	6812      	ldr	r2, [r2, #0]
 800182a:	fa92 f1a2 	rbit	r1, r2
 800182e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001832:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8001836:	6011      	str	r1, [r2, #0]
  return result;
 8001838:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800183c:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8001840:	6812      	ldr	r2, [r2, #0]
 8001842:	fab2 f282 	clz	r2, r2
 8001846:	b2d2      	uxtb	r2, r2
 8001848:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800184c:	b2d2      	uxtb	r2, r2
 800184e:	f002 021f 	and.w	r2, r2, #31
 8001852:	2101      	movs	r1, #1
 8001854:	fa01 f202 	lsl.w	r2, r1, r2
 8001858:	4013      	ands	r3, r2
 800185a:	2b00      	cmp	r3, #0
 800185c:	d084      	beq.n	8001768 <HAL_RCC_OscConfig+0x9c8>
 800185e:	e07f      	b.n	8001960 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001860:	f7ff f81e 	bl	80008a0 <HAL_GetTick>
 8001864:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001868:	e00b      	b.n	8001882 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800186a:	f7ff f819 	bl	80008a0 <HAL_GetTick>
 800186e:	4602      	mov	r2, r0
 8001870:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001874:	1ad3      	subs	r3, r2, r3
 8001876:	f241 3288 	movw	r2, #5000	; 0x1388
 800187a:	4293      	cmp	r3, r2
 800187c:	d901      	bls.n	8001882 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 800187e:	2303      	movs	r3, #3
 8001880:	e2c4      	b.n	8001e0c <HAL_RCC_OscConfig+0x106c>
 8001882:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001886:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800188a:	2202      	movs	r2, #2
 800188c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800188e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001892:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	fa93 f2a3 	rbit	r2, r3
 800189c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018a0:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80018a4:	601a      	str	r2, [r3, #0]
 80018a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018aa:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80018ae:	2202      	movs	r2, #2
 80018b0:	601a      	str	r2, [r3, #0]
 80018b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018b6:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	fa93 f2a3 	rbit	r2, r3
 80018c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018c4:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80018c8:	601a      	str	r2, [r3, #0]
  return result;
 80018ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018ce:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80018d2:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80018d4:	fab3 f383 	clz	r3, r3
 80018d8:	b2db      	uxtb	r3, r3
 80018da:	095b      	lsrs	r3, r3, #5
 80018dc:	b2db      	uxtb	r3, r3
 80018de:	f043 0302 	orr.w	r3, r3, #2
 80018e2:	b2db      	uxtb	r3, r3
 80018e4:	2b02      	cmp	r3, #2
 80018e6:	d102      	bne.n	80018ee <HAL_RCC_OscConfig+0xb4e>
 80018e8:	4b43      	ldr	r3, [pc, #268]	; (80019f8 <HAL_RCC_OscConfig+0xc58>)
 80018ea:	6a1b      	ldr	r3, [r3, #32]
 80018ec:	e013      	b.n	8001916 <HAL_RCC_OscConfig+0xb76>
 80018ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018f2:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80018f6:	2202      	movs	r2, #2
 80018f8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018fe:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	fa93 f2a3 	rbit	r2, r3
 8001908:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800190c:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8001910:	601a      	str	r2, [r3, #0]
 8001912:	4b39      	ldr	r3, [pc, #228]	; (80019f8 <HAL_RCC_OscConfig+0xc58>)
 8001914:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001916:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800191a:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 800191e:	2102      	movs	r1, #2
 8001920:	6011      	str	r1, [r2, #0]
 8001922:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001926:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 800192a:	6812      	ldr	r2, [r2, #0]
 800192c:	fa92 f1a2 	rbit	r1, r2
 8001930:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001934:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8001938:	6011      	str	r1, [r2, #0]
  return result;
 800193a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800193e:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8001942:	6812      	ldr	r2, [r2, #0]
 8001944:	fab2 f282 	clz	r2, r2
 8001948:	b2d2      	uxtb	r2, r2
 800194a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800194e:	b2d2      	uxtb	r2, r2
 8001950:	f002 021f 	and.w	r2, r2, #31
 8001954:	2101      	movs	r1, #1
 8001956:	fa01 f202 	lsl.w	r2, r1, r2
 800195a:	4013      	ands	r3, r2
 800195c:	2b00      	cmp	r3, #0
 800195e:	d184      	bne.n	800186a <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001960:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8001964:	2b01      	cmp	r3, #1
 8001966:	d105      	bne.n	8001974 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001968:	4b23      	ldr	r3, [pc, #140]	; (80019f8 <HAL_RCC_OscConfig+0xc58>)
 800196a:	69db      	ldr	r3, [r3, #28]
 800196c:	4a22      	ldr	r2, [pc, #136]	; (80019f8 <HAL_RCC_OscConfig+0xc58>)
 800196e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001972:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001974:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001978:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	69db      	ldr	r3, [r3, #28]
 8001980:	2b00      	cmp	r3, #0
 8001982:	f000 8242 	beq.w	8001e0a <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001986:	4b1c      	ldr	r3, [pc, #112]	; (80019f8 <HAL_RCC_OscConfig+0xc58>)
 8001988:	685b      	ldr	r3, [r3, #4]
 800198a:	f003 030c 	and.w	r3, r3, #12
 800198e:	2b08      	cmp	r3, #8
 8001990:	f000 8213 	beq.w	8001dba <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001994:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001998:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	69db      	ldr	r3, [r3, #28]
 80019a0:	2b02      	cmp	r3, #2
 80019a2:	f040 8162 	bne.w	8001c6a <HAL_RCC_OscConfig+0xeca>
 80019a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019aa:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 80019ae:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80019b2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019b8:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	fa93 f2a3 	rbit	r2, r3
 80019c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019c6:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80019ca:	601a      	str	r2, [r3, #0]
  return result;
 80019cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019d0:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80019d4:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019d6:	fab3 f383 	clz	r3, r3
 80019da:	b2db      	uxtb	r3, r3
 80019dc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80019e0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80019e4:	009b      	lsls	r3, r3, #2
 80019e6:	461a      	mov	r2, r3
 80019e8:	2300      	movs	r3, #0
 80019ea:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019ec:	f7fe ff58 	bl	80008a0 <HAL_GetTick>
 80019f0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019f4:	e00c      	b.n	8001a10 <HAL_RCC_OscConfig+0xc70>
 80019f6:	bf00      	nop
 80019f8:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019fc:	f7fe ff50 	bl	80008a0 <HAL_GetTick>
 8001a00:	4602      	mov	r2, r0
 8001a02:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001a06:	1ad3      	subs	r3, r2, r3
 8001a08:	2b02      	cmp	r3, #2
 8001a0a:	d901      	bls.n	8001a10 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8001a0c:	2303      	movs	r3, #3
 8001a0e:	e1fd      	b.n	8001e0c <HAL_RCC_OscConfig+0x106c>
 8001a10:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a14:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8001a18:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001a1c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a1e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a22:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	fa93 f2a3 	rbit	r2, r3
 8001a2c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a30:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001a34:	601a      	str	r2, [r3, #0]
  return result;
 8001a36:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a3a:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001a3e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a40:	fab3 f383 	clz	r3, r3
 8001a44:	b2db      	uxtb	r3, r3
 8001a46:	095b      	lsrs	r3, r3, #5
 8001a48:	b2db      	uxtb	r3, r3
 8001a4a:	f043 0301 	orr.w	r3, r3, #1
 8001a4e:	b2db      	uxtb	r3, r3
 8001a50:	2b01      	cmp	r3, #1
 8001a52:	d102      	bne.n	8001a5a <HAL_RCC_OscConfig+0xcba>
 8001a54:	4bb0      	ldr	r3, [pc, #704]	; (8001d18 <HAL_RCC_OscConfig+0xf78>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	e027      	b.n	8001aaa <HAL_RCC_OscConfig+0xd0a>
 8001a5a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a5e:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8001a62:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001a66:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a68:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a6c:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	fa93 f2a3 	rbit	r2, r3
 8001a76:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a7a:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8001a7e:	601a      	str	r2, [r3, #0]
 8001a80:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a84:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8001a88:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001a8c:	601a      	str	r2, [r3, #0]
 8001a8e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a92:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	fa93 f2a3 	rbit	r2, r3
 8001a9c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001aa0:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8001aa4:	601a      	str	r2, [r3, #0]
 8001aa6:	4b9c      	ldr	r3, [pc, #624]	; (8001d18 <HAL_RCC_OscConfig+0xf78>)
 8001aa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aaa:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001aae:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8001ab2:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001ab6:	6011      	str	r1, [r2, #0]
 8001ab8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001abc:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8001ac0:	6812      	ldr	r2, [r2, #0]
 8001ac2:	fa92 f1a2 	rbit	r1, r2
 8001ac6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001aca:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8001ace:	6011      	str	r1, [r2, #0]
  return result;
 8001ad0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001ad4:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8001ad8:	6812      	ldr	r2, [r2, #0]
 8001ada:	fab2 f282 	clz	r2, r2
 8001ade:	b2d2      	uxtb	r2, r2
 8001ae0:	f042 0220 	orr.w	r2, r2, #32
 8001ae4:	b2d2      	uxtb	r2, r2
 8001ae6:	f002 021f 	and.w	r2, r2, #31
 8001aea:	2101      	movs	r1, #1
 8001aec:	fa01 f202 	lsl.w	r2, r1, r2
 8001af0:	4013      	ands	r3, r2
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d182      	bne.n	80019fc <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001af6:	4b88      	ldr	r3, [pc, #544]	; (8001d18 <HAL_RCC_OscConfig+0xf78>)
 8001af8:	685b      	ldr	r3, [r3, #4]
 8001afa:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001afe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b02:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8001b0a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b0e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	6a1b      	ldr	r3, [r3, #32]
 8001b16:	430b      	orrs	r3, r1
 8001b18:	497f      	ldr	r1, [pc, #508]	; (8001d18 <HAL_RCC_OscConfig+0xf78>)
 8001b1a:	4313      	orrs	r3, r2
 8001b1c:	604b      	str	r3, [r1, #4]
 8001b1e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b22:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8001b26:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001b2a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b2c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b30:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	fa93 f2a3 	rbit	r2, r3
 8001b3a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b3e:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8001b42:	601a      	str	r2, [r3, #0]
  return result;
 8001b44:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b48:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8001b4c:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b4e:	fab3 f383 	clz	r3, r3
 8001b52:	b2db      	uxtb	r3, r3
 8001b54:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001b58:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001b5c:	009b      	lsls	r3, r3, #2
 8001b5e:	461a      	mov	r2, r3
 8001b60:	2301      	movs	r3, #1
 8001b62:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b64:	f7fe fe9c 	bl	80008a0 <HAL_GetTick>
 8001b68:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b6c:	e009      	b.n	8001b82 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b6e:	f7fe fe97 	bl	80008a0 <HAL_GetTick>
 8001b72:	4602      	mov	r2, r0
 8001b74:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001b78:	1ad3      	subs	r3, r2, r3
 8001b7a:	2b02      	cmp	r3, #2
 8001b7c:	d901      	bls.n	8001b82 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8001b7e:	2303      	movs	r3, #3
 8001b80:	e144      	b.n	8001e0c <HAL_RCC_OscConfig+0x106c>
 8001b82:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b86:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8001b8a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001b8e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b90:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b94:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	fa93 f2a3 	rbit	r2, r3
 8001b9e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ba2:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8001ba6:	601a      	str	r2, [r3, #0]
  return result;
 8001ba8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bac:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8001bb0:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001bb2:	fab3 f383 	clz	r3, r3
 8001bb6:	b2db      	uxtb	r3, r3
 8001bb8:	095b      	lsrs	r3, r3, #5
 8001bba:	b2db      	uxtb	r3, r3
 8001bbc:	f043 0301 	orr.w	r3, r3, #1
 8001bc0:	b2db      	uxtb	r3, r3
 8001bc2:	2b01      	cmp	r3, #1
 8001bc4:	d102      	bne.n	8001bcc <HAL_RCC_OscConfig+0xe2c>
 8001bc6:	4b54      	ldr	r3, [pc, #336]	; (8001d18 <HAL_RCC_OscConfig+0xf78>)
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	e027      	b.n	8001c1c <HAL_RCC_OscConfig+0xe7c>
 8001bcc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bd0:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8001bd4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001bd8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bda:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bde:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	fa93 f2a3 	rbit	r2, r3
 8001be8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bec:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8001bf0:	601a      	str	r2, [r3, #0]
 8001bf2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bf6:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8001bfa:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001bfe:	601a      	str	r2, [r3, #0]
 8001c00:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c04:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	fa93 f2a3 	rbit	r2, r3
 8001c0e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c12:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8001c16:	601a      	str	r2, [r3, #0]
 8001c18:	4b3f      	ldr	r3, [pc, #252]	; (8001d18 <HAL_RCC_OscConfig+0xf78>)
 8001c1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c1c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001c20:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8001c24:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001c28:	6011      	str	r1, [r2, #0]
 8001c2a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001c2e:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8001c32:	6812      	ldr	r2, [r2, #0]
 8001c34:	fa92 f1a2 	rbit	r1, r2
 8001c38:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001c3c:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8001c40:	6011      	str	r1, [r2, #0]
  return result;
 8001c42:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001c46:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8001c4a:	6812      	ldr	r2, [r2, #0]
 8001c4c:	fab2 f282 	clz	r2, r2
 8001c50:	b2d2      	uxtb	r2, r2
 8001c52:	f042 0220 	orr.w	r2, r2, #32
 8001c56:	b2d2      	uxtb	r2, r2
 8001c58:	f002 021f 	and.w	r2, r2, #31
 8001c5c:	2101      	movs	r1, #1
 8001c5e:	fa01 f202 	lsl.w	r2, r1, r2
 8001c62:	4013      	ands	r3, r2
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d082      	beq.n	8001b6e <HAL_RCC_OscConfig+0xdce>
 8001c68:	e0cf      	b.n	8001e0a <HAL_RCC_OscConfig+0x106a>
 8001c6a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c6e:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8001c72:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001c76:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c78:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c7c:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	fa93 f2a3 	rbit	r2, r3
 8001c86:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c8a:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8001c8e:	601a      	str	r2, [r3, #0]
  return result;
 8001c90:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c94:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8001c98:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c9a:	fab3 f383 	clz	r3, r3
 8001c9e:	b2db      	uxtb	r3, r3
 8001ca0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001ca4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001ca8:	009b      	lsls	r3, r3, #2
 8001caa:	461a      	mov	r2, r3
 8001cac:	2300      	movs	r3, #0
 8001cae:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cb0:	f7fe fdf6 	bl	80008a0 <HAL_GetTick>
 8001cb4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001cb8:	e009      	b.n	8001cce <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001cba:	f7fe fdf1 	bl	80008a0 <HAL_GetTick>
 8001cbe:	4602      	mov	r2, r0
 8001cc0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001cc4:	1ad3      	subs	r3, r2, r3
 8001cc6:	2b02      	cmp	r3, #2
 8001cc8:	d901      	bls.n	8001cce <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8001cca:	2303      	movs	r3, #3
 8001ccc:	e09e      	b.n	8001e0c <HAL_RCC_OscConfig+0x106c>
 8001cce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cd2:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8001cd6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001cda:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cdc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ce0:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	fa93 f2a3 	rbit	r2, r3
 8001cea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cee:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8001cf2:	601a      	str	r2, [r3, #0]
  return result;
 8001cf4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cf8:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8001cfc:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001cfe:	fab3 f383 	clz	r3, r3
 8001d02:	b2db      	uxtb	r3, r3
 8001d04:	095b      	lsrs	r3, r3, #5
 8001d06:	b2db      	uxtb	r3, r3
 8001d08:	f043 0301 	orr.w	r3, r3, #1
 8001d0c:	b2db      	uxtb	r3, r3
 8001d0e:	2b01      	cmp	r3, #1
 8001d10:	d104      	bne.n	8001d1c <HAL_RCC_OscConfig+0xf7c>
 8001d12:	4b01      	ldr	r3, [pc, #4]	; (8001d18 <HAL_RCC_OscConfig+0xf78>)
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	e029      	b.n	8001d6c <HAL_RCC_OscConfig+0xfcc>
 8001d18:	40021000 	.word	0x40021000
 8001d1c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d20:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8001d24:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001d28:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d2a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d2e:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	fa93 f2a3 	rbit	r2, r3
 8001d38:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d3c:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8001d40:	601a      	str	r2, [r3, #0]
 8001d42:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d46:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8001d4a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001d4e:	601a      	str	r2, [r3, #0]
 8001d50:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d54:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	fa93 f2a3 	rbit	r2, r3
 8001d5e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d62:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8001d66:	601a      	str	r2, [r3, #0]
 8001d68:	4b2b      	ldr	r3, [pc, #172]	; (8001e18 <HAL_RCC_OscConfig+0x1078>)
 8001d6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d6c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001d70:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8001d74:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001d78:	6011      	str	r1, [r2, #0]
 8001d7a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001d7e:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8001d82:	6812      	ldr	r2, [r2, #0]
 8001d84:	fa92 f1a2 	rbit	r1, r2
 8001d88:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001d8c:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8001d90:	6011      	str	r1, [r2, #0]
  return result;
 8001d92:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001d96:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8001d9a:	6812      	ldr	r2, [r2, #0]
 8001d9c:	fab2 f282 	clz	r2, r2
 8001da0:	b2d2      	uxtb	r2, r2
 8001da2:	f042 0220 	orr.w	r2, r2, #32
 8001da6:	b2d2      	uxtb	r2, r2
 8001da8:	f002 021f 	and.w	r2, r2, #31
 8001dac:	2101      	movs	r1, #1
 8001dae:	fa01 f202 	lsl.w	r2, r1, r2
 8001db2:	4013      	ands	r3, r2
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d180      	bne.n	8001cba <HAL_RCC_OscConfig+0xf1a>
 8001db8:	e027      	b.n	8001e0a <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001dba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001dbe:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	69db      	ldr	r3, [r3, #28]
 8001dc6:	2b01      	cmp	r3, #1
 8001dc8:	d101      	bne.n	8001dce <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8001dca:	2301      	movs	r3, #1
 8001dcc:	e01e      	b.n	8001e0c <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001dce:	4b12      	ldr	r3, [pc, #72]	; (8001e18 <HAL_RCC_OscConfig+0x1078>)
 8001dd0:	685b      	ldr	r3, [r3, #4]
 8001dd2:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001dd6:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001dda:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001dde:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001de2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	6a1b      	ldr	r3, [r3, #32]
 8001dea:	429a      	cmp	r2, r3
 8001dec:	d10b      	bne.n	8001e06 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8001dee:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001df2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001df6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001dfa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001e02:	429a      	cmp	r2, r3
 8001e04:	d001      	beq.n	8001e0a <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8001e06:	2301      	movs	r3, #1
 8001e08:	e000      	b.n	8001e0c <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8001e0a:	2300      	movs	r3, #0
}
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8001e12:	46bd      	mov	sp, r7
 8001e14:	bd80      	pop	{r7, pc}
 8001e16:	bf00      	nop
 8001e18:	40021000 	.word	0x40021000

08001e1c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b09e      	sub	sp, #120	; 0x78
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
 8001e24:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001e26:	2300      	movs	r3, #0
 8001e28:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d101      	bne.n	8001e34 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001e30:	2301      	movs	r3, #1
 8001e32:	e162      	b.n	80020fa <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001e34:	4b90      	ldr	r3, [pc, #576]	; (8002078 <HAL_RCC_ClockConfig+0x25c>)
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f003 0307 	and.w	r3, r3, #7
 8001e3c:	683a      	ldr	r2, [r7, #0]
 8001e3e:	429a      	cmp	r2, r3
 8001e40:	d910      	bls.n	8001e64 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e42:	4b8d      	ldr	r3, [pc, #564]	; (8002078 <HAL_RCC_ClockConfig+0x25c>)
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f023 0207 	bic.w	r2, r3, #7
 8001e4a:	498b      	ldr	r1, [pc, #556]	; (8002078 <HAL_RCC_ClockConfig+0x25c>)
 8001e4c:	683b      	ldr	r3, [r7, #0]
 8001e4e:	4313      	orrs	r3, r2
 8001e50:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e52:	4b89      	ldr	r3, [pc, #548]	; (8002078 <HAL_RCC_ClockConfig+0x25c>)
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f003 0307 	and.w	r3, r3, #7
 8001e5a:	683a      	ldr	r2, [r7, #0]
 8001e5c:	429a      	cmp	r2, r3
 8001e5e:	d001      	beq.n	8001e64 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001e60:	2301      	movs	r3, #1
 8001e62:	e14a      	b.n	80020fa <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f003 0302 	and.w	r3, r3, #2
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d008      	beq.n	8001e82 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e70:	4b82      	ldr	r3, [pc, #520]	; (800207c <HAL_RCC_ClockConfig+0x260>)
 8001e72:	685b      	ldr	r3, [r3, #4]
 8001e74:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	689b      	ldr	r3, [r3, #8]
 8001e7c:	497f      	ldr	r1, [pc, #508]	; (800207c <HAL_RCC_ClockConfig+0x260>)
 8001e7e:	4313      	orrs	r3, r2
 8001e80:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f003 0301 	and.w	r3, r3, #1
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	f000 80dc 	beq.w	8002048 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	685b      	ldr	r3, [r3, #4]
 8001e94:	2b01      	cmp	r3, #1
 8001e96:	d13c      	bne.n	8001f12 <HAL_RCC_ClockConfig+0xf6>
 8001e98:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001e9c:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e9e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001ea0:	fa93 f3a3 	rbit	r3, r3
 8001ea4:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8001ea6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ea8:	fab3 f383 	clz	r3, r3
 8001eac:	b2db      	uxtb	r3, r3
 8001eae:	095b      	lsrs	r3, r3, #5
 8001eb0:	b2db      	uxtb	r3, r3
 8001eb2:	f043 0301 	orr.w	r3, r3, #1
 8001eb6:	b2db      	uxtb	r3, r3
 8001eb8:	2b01      	cmp	r3, #1
 8001eba:	d102      	bne.n	8001ec2 <HAL_RCC_ClockConfig+0xa6>
 8001ebc:	4b6f      	ldr	r3, [pc, #444]	; (800207c <HAL_RCC_ClockConfig+0x260>)
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	e00f      	b.n	8001ee2 <HAL_RCC_ClockConfig+0xc6>
 8001ec2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001ec6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ec8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001eca:	fa93 f3a3 	rbit	r3, r3
 8001ece:	667b      	str	r3, [r7, #100]	; 0x64
 8001ed0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001ed4:	663b      	str	r3, [r7, #96]	; 0x60
 8001ed6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001ed8:	fa93 f3a3 	rbit	r3, r3
 8001edc:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001ede:	4b67      	ldr	r3, [pc, #412]	; (800207c <HAL_RCC_ClockConfig+0x260>)
 8001ee0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ee2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001ee6:	65ba      	str	r2, [r7, #88]	; 0x58
 8001ee8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001eea:	fa92 f2a2 	rbit	r2, r2
 8001eee:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8001ef0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001ef2:	fab2 f282 	clz	r2, r2
 8001ef6:	b2d2      	uxtb	r2, r2
 8001ef8:	f042 0220 	orr.w	r2, r2, #32
 8001efc:	b2d2      	uxtb	r2, r2
 8001efe:	f002 021f 	and.w	r2, r2, #31
 8001f02:	2101      	movs	r1, #1
 8001f04:	fa01 f202 	lsl.w	r2, r1, r2
 8001f08:	4013      	ands	r3, r2
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d17b      	bne.n	8002006 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001f0e:	2301      	movs	r3, #1
 8001f10:	e0f3      	b.n	80020fa <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	685b      	ldr	r3, [r3, #4]
 8001f16:	2b02      	cmp	r3, #2
 8001f18:	d13c      	bne.n	8001f94 <HAL_RCC_ClockConfig+0x178>
 8001f1a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001f1e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f20:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001f22:	fa93 f3a3 	rbit	r3, r3
 8001f26:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001f28:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f2a:	fab3 f383 	clz	r3, r3
 8001f2e:	b2db      	uxtb	r3, r3
 8001f30:	095b      	lsrs	r3, r3, #5
 8001f32:	b2db      	uxtb	r3, r3
 8001f34:	f043 0301 	orr.w	r3, r3, #1
 8001f38:	b2db      	uxtb	r3, r3
 8001f3a:	2b01      	cmp	r3, #1
 8001f3c:	d102      	bne.n	8001f44 <HAL_RCC_ClockConfig+0x128>
 8001f3e:	4b4f      	ldr	r3, [pc, #316]	; (800207c <HAL_RCC_ClockConfig+0x260>)
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	e00f      	b.n	8001f64 <HAL_RCC_ClockConfig+0x148>
 8001f44:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001f48:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f4a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001f4c:	fa93 f3a3 	rbit	r3, r3
 8001f50:	647b      	str	r3, [r7, #68]	; 0x44
 8001f52:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001f56:	643b      	str	r3, [r7, #64]	; 0x40
 8001f58:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001f5a:	fa93 f3a3 	rbit	r3, r3
 8001f5e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001f60:	4b46      	ldr	r3, [pc, #280]	; (800207c <HAL_RCC_ClockConfig+0x260>)
 8001f62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f64:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001f68:	63ba      	str	r2, [r7, #56]	; 0x38
 8001f6a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001f6c:	fa92 f2a2 	rbit	r2, r2
 8001f70:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8001f72:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001f74:	fab2 f282 	clz	r2, r2
 8001f78:	b2d2      	uxtb	r2, r2
 8001f7a:	f042 0220 	orr.w	r2, r2, #32
 8001f7e:	b2d2      	uxtb	r2, r2
 8001f80:	f002 021f 	and.w	r2, r2, #31
 8001f84:	2101      	movs	r1, #1
 8001f86:	fa01 f202 	lsl.w	r2, r1, r2
 8001f8a:	4013      	ands	r3, r2
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d13a      	bne.n	8002006 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001f90:	2301      	movs	r3, #1
 8001f92:	e0b2      	b.n	80020fa <HAL_RCC_ClockConfig+0x2de>
 8001f94:	2302      	movs	r3, #2
 8001f96:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f9a:	fa93 f3a3 	rbit	r3, r3
 8001f9e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8001fa0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fa2:	fab3 f383 	clz	r3, r3
 8001fa6:	b2db      	uxtb	r3, r3
 8001fa8:	095b      	lsrs	r3, r3, #5
 8001faa:	b2db      	uxtb	r3, r3
 8001fac:	f043 0301 	orr.w	r3, r3, #1
 8001fb0:	b2db      	uxtb	r3, r3
 8001fb2:	2b01      	cmp	r3, #1
 8001fb4:	d102      	bne.n	8001fbc <HAL_RCC_ClockConfig+0x1a0>
 8001fb6:	4b31      	ldr	r3, [pc, #196]	; (800207c <HAL_RCC_ClockConfig+0x260>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	e00d      	b.n	8001fd8 <HAL_RCC_ClockConfig+0x1bc>
 8001fbc:	2302      	movs	r3, #2
 8001fbe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fc2:	fa93 f3a3 	rbit	r3, r3
 8001fc6:	627b      	str	r3, [r7, #36]	; 0x24
 8001fc8:	2302      	movs	r3, #2
 8001fca:	623b      	str	r3, [r7, #32]
 8001fcc:	6a3b      	ldr	r3, [r7, #32]
 8001fce:	fa93 f3a3 	rbit	r3, r3
 8001fd2:	61fb      	str	r3, [r7, #28]
 8001fd4:	4b29      	ldr	r3, [pc, #164]	; (800207c <HAL_RCC_ClockConfig+0x260>)
 8001fd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fd8:	2202      	movs	r2, #2
 8001fda:	61ba      	str	r2, [r7, #24]
 8001fdc:	69ba      	ldr	r2, [r7, #24]
 8001fde:	fa92 f2a2 	rbit	r2, r2
 8001fe2:	617a      	str	r2, [r7, #20]
  return result;
 8001fe4:	697a      	ldr	r2, [r7, #20]
 8001fe6:	fab2 f282 	clz	r2, r2
 8001fea:	b2d2      	uxtb	r2, r2
 8001fec:	f042 0220 	orr.w	r2, r2, #32
 8001ff0:	b2d2      	uxtb	r2, r2
 8001ff2:	f002 021f 	and.w	r2, r2, #31
 8001ff6:	2101      	movs	r1, #1
 8001ff8:	fa01 f202 	lsl.w	r2, r1, r2
 8001ffc:	4013      	ands	r3, r2
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d101      	bne.n	8002006 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002002:	2301      	movs	r3, #1
 8002004:	e079      	b.n	80020fa <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002006:	4b1d      	ldr	r3, [pc, #116]	; (800207c <HAL_RCC_ClockConfig+0x260>)
 8002008:	685b      	ldr	r3, [r3, #4]
 800200a:	f023 0203 	bic.w	r2, r3, #3
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	685b      	ldr	r3, [r3, #4]
 8002012:	491a      	ldr	r1, [pc, #104]	; (800207c <HAL_RCC_ClockConfig+0x260>)
 8002014:	4313      	orrs	r3, r2
 8002016:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002018:	f7fe fc42 	bl	80008a0 <HAL_GetTick>
 800201c:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800201e:	e00a      	b.n	8002036 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002020:	f7fe fc3e 	bl	80008a0 <HAL_GetTick>
 8002024:	4602      	mov	r2, r0
 8002026:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002028:	1ad3      	subs	r3, r2, r3
 800202a:	f241 3288 	movw	r2, #5000	; 0x1388
 800202e:	4293      	cmp	r3, r2
 8002030:	d901      	bls.n	8002036 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8002032:	2303      	movs	r3, #3
 8002034:	e061      	b.n	80020fa <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002036:	4b11      	ldr	r3, [pc, #68]	; (800207c <HAL_RCC_ClockConfig+0x260>)
 8002038:	685b      	ldr	r3, [r3, #4]
 800203a:	f003 020c 	and.w	r2, r3, #12
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	685b      	ldr	r3, [r3, #4]
 8002042:	009b      	lsls	r3, r3, #2
 8002044:	429a      	cmp	r2, r3
 8002046:	d1eb      	bne.n	8002020 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002048:	4b0b      	ldr	r3, [pc, #44]	; (8002078 <HAL_RCC_ClockConfig+0x25c>)
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f003 0307 	and.w	r3, r3, #7
 8002050:	683a      	ldr	r2, [r7, #0]
 8002052:	429a      	cmp	r2, r3
 8002054:	d214      	bcs.n	8002080 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002056:	4b08      	ldr	r3, [pc, #32]	; (8002078 <HAL_RCC_ClockConfig+0x25c>)
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f023 0207 	bic.w	r2, r3, #7
 800205e:	4906      	ldr	r1, [pc, #24]	; (8002078 <HAL_RCC_ClockConfig+0x25c>)
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	4313      	orrs	r3, r2
 8002064:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002066:	4b04      	ldr	r3, [pc, #16]	; (8002078 <HAL_RCC_ClockConfig+0x25c>)
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f003 0307 	and.w	r3, r3, #7
 800206e:	683a      	ldr	r2, [r7, #0]
 8002070:	429a      	cmp	r2, r3
 8002072:	d005      	beq.n	8002080 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002074:	2301      	movs	r3, #1
 8002076:	e040      	b.n	80020fa <HAL_RCC_ClockConfig+0x2de>
 8002078:	40022000 	.word	0x40022000
 800207c:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f003 0304 	and.w	r3, r3, #4
 8002088:	2b00      	cmp	r3, #0
 800208a:	d008      	beq.n	800209e <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800208c:	4b1d      	ldr	r3, [pc, #116]	; (8002104 <HAL_RCC_ClockConfig+0x2e8>)
 800208e:	685b      	ldr	r3, [r3, #4]
 8002090:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	68db      	ldr	r3, [r3, #12]
 8002098:	491a      	ldr	r1, [pc, #104]	; (8002104 <HAL_RCC_ClockConfig+0x2e8>)
 800209a:	4313      	orrs	r3, r2
 800209c:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f003 0308 	and.w	r3, r3, #8
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d009      	beq.n	80020be <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80020aa:	4b16      	ldr	r3, [pc, #88]	; (8002104 <HAL_RCC_ClockConfig+0x2e8>)
 80020ac:	685b      	ldr	r3, [r3, #4]
 80020ae:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	691b      	ldr	r3, [r3, #16]
 80020b6:	00db      	lsls	r3, r3, #3
 80020b8:	4912      	ldr	r1, [pc, #72]	; (8002104 <HAL_RCC_ClockConfig+0x2e8>)
 80020ba:	4313      	orrs	r3, r2
 80020bc:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80020be:	f000 f829 	bl	8002114 <HAL_RCC_GetSysClockFreq>
 80020c2:	4601      	mov	r1, r0
 80020c4:	4b0f      	ldr	r3, [pc, #60]	; (8002104 <HAL_RCC_ClockConfig+0x2e8>)
 80020c6:	685b      	ldr	r3, [r3, #4]
 80020c8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80020cc:	22f0      	movs	r2, #240	; 0xf0
 80020ce:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020d0:	693a      	ldr	r2, [r7, #16]
 80020d2:	fa92 f2a2 	rbit	r2, r2
 80020d6:	60fa      	str	r2, [r7, #12]
  return result;
 80020d8:	68fa      	ldr	r2, [r7, #12]
 80020da:	fab2 f282 	clz	r2, r2
 80020de:	b2d2      	uxtb	r2, r2
 80020e0:	40d3      	lsrs	r3, r2
 80020e2:	4a09      	ldr	r2, [pc, #36]	; (8002108 <HAL_RCC_ClockConfig+0x2ec>)
 80020e4:	5cd3      	ldrb	r3, [r2, r3]
 80020e6:	fa21 f303 	lsr.w	r3, r1, r3
 80020ea:	4a08      	ldr	r2, [pc, #32]	; (800210c <HAL_RCC_ClockConfig+0x2f0>)
 80020ec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80020ee:	4b08      	ldr	r3, [pc, #32]	; (8002110 <HAL_RCC_ClockConfig+0x2f4>)
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	4618      	mov	r0, r3
 80020f4:	f7fe fad4 	bl	80006a0 <HAL_InitTick>
  
  return HAL_OK;
 80020f8:	2300      	movs	r3, #0
}
 80020fa:	4618      	mov	r0, r3
 80020fc:	3778      	adds	r7, #120	; 0x78
 80020fe:	46bd      	mov	sp, r7
 8002100:	bd80      	pop	{r7, pc}
 8002102:	bf00      	nop
 8002104:	40021000 	.word	0x40021000
 8002108:	08007838 	.word	0x08007838
 800210c:	20000000 	.word	0x20000000
 8002110:	20000004 	.word	0x20000004

08002114 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002114:	b480      	push	{r7}
 8002116:	b08b      	sub	sp, #44	; 0x2c
 8002118:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800211a:	2300      	movs	r3, #0
 800211c:	61fb      	str	r3, [r7, #28]
 800211e:	2300      	movs	r3, #0
 8002120:	61bb      	str	r3, [r7, #24]
 8002122:	2300      	movs	r3, #0
 8002124:	627b      	str	r3, [r7, #36]	; 0x24
 8002126:	2300      	movs	r3, #0
 8002128:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800212a:	2300      	movs	r3, #0
 800212c:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 800212e:	4b29      	ldr	r3, [pc, #164]	; (80021d4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002130:	685b      	ldr	r3, [r3, #4]
 8002132:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002134:	69fb      	ldr	r3, [r7, #28]
 8002136:	f003 030c 	and.w	r3, r3, #12
 800213a:	2b04      	cmp	r3, #4
 800213c:	d002      	beq.n	8002144 <HAL_RCC_GetSysClockFreq+0x30>
 800213e:	2b08      	cmp	r3, #8
 8002140:	d003      	beq.n	800214a <HAL_RCC_GetSysClockFreq+0x36>
 8002142:	e03c      	b.n	80021be <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002144:	4b24      	ldr	r3, [pc, #144]	; (80021d8 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002146:	623b      	str	r3, [r7, #32]
      break;
 8002148:	e03c      	b.n	80021c4 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800214a:	69fb      	ldr	r3, [r7, #28]
 800214c:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002150:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8002154:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002156:	68ba      	ldr	r2, [r7, #8]
 8002158:	fa92 f2a2 	rbit	r2, r2
 800215c:	607a      	str	r2, [r7, #4]
  return result;
 800215e:	687a      	ldr	r2, [r7, #4]
 8002160:	fab2 f282 	clz	r2, r2
 8002164:	b2d2      	uxtb	r2, r2
 8002166:	40d3      	lsrs	r3, r2
 8002168:	4a1c      	ldr	r2, [pc, #112]	; (80021dc <HAL_RCC_GetSysClockFreq+0xc8>)
 800216a:	5cd3      	ldrb	r3, [r2, r3]
 800216c:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800216e:	4b19      	ldr	r3, [pc, #100]	; (80021d4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002170:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002172:	f003 030f 	and.w	r3, r3, #15
 8002176:	220f      	movs	r2, #15
 8002178:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800217a:	693a      	ldr	r2, [r7, #16]
 800217c:	fa92 f2a2 	rbit	r2, r2
 8002180:	60fa      	str	r2, [r7, #12]
  return result;
 8002182:	68fa      	ldr	r2, [r7, #12]
 8002184:	fab2 f282 	clz	r2, r2
 8002188:	b2d2      	uxtb	r2, r2
 800218a:	40d3      	lsrs	r3, r2
 800218c:	4a14      	ldr	r2, [pc, #80]	; (80021e0 <HAL_RCC_GetSysClockFreq+0xcc>)
 800218e:	5cd3      	ldrb	r3, [r2, r3]
 8002190:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8002192:	69fb      	ldr	r3, [r7, #28]
 8002194:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002198:	2b00      	cmp	r3, #0
 800219a:	d008      	beq.n	80021ae <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800219c:	4a0e      	ldr	r2, [pc, #56]	; (80021d8 <HAL_RCC_GetSysClockFreq+0xc4>)
 800219e:	69bb      	ldr	r3, [r7, #24]
 80021a0:	fbb2 f2f3 	udiv	r2, r2, r3
 80021a4:	697b      	ldr	r3, [r7, #20]
 80021a6:	fb02 f303 	mul.w	r3, r2, r3
 80021aa:	627b      	str	r3, [r7, #36]	; 0x24
 80021ac:	e004      	b.n	80021b8 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80021ae:	697b      	ldr	r3, [r7, #20]
 80021b0:	4a0c      	ldr	r2, [pc, #48]	; (80021e4 <HAL_RCC_GetSysClockFreq+0xd0>)
 80021b2:	fb02 f303 	mul.w	r3, r2, r3
 80021b6:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80021b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021ba:	623b      	str	r3, [r7, #32]
      break;
 80021bc:	e002      	b.n	80021c4 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80021be:	4b06      	ldr	r3, [pc, #24]	; (80021d8 <HAL_RCC_GetSysClockFreq+0xc4>)
 80021c0:	623b      	str	r3, [r7, #32]
      break;
 80021c2:	bf00      	nop
    }
  }
  return sysclockfreq;
 80021c4:	6a3b      	ldr	r3, [r7, #32]
}
 80021c6:	4618      	mov	r0, r3
 80021c8:	372c      	adds	r7, #44	; 0x2c
 80021ca:	46bd      	mov	sp, r7
 80021cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d0:	4770      	bx	lr
 80021d2:	bf00      	nop
 80021d4:	40021000 	.word	0x40021000
 80021d8:	007a1200 	.word	0x007a1200
 80021dc:	08007850 	.word	0x08007850
 80021e0:	08007860 	.word	0x08007860
 80021e4:	003d0900 	.word	0x003d0900

080021e8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80021e8:	b480      	push	{r7}
 80021ea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80021ec:	4b03      	ldr	r3, [pc, #12]	; (80021fc <HAL_RCC_GetHCLKFreq+0x14>)
 80021ee:	681b      	ldr	r3, [r3, #0]
}
 80021f0:	4618      	mov	r0, r3
 80021f2:	46bd      	mov	sp, r7
 80021f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f8:	4770      	bx	lr
 80021fa:	bf00      	nop
 80021fc:	20000000 	.word	0x20000000

08002200 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	b082      	sub	sp, #8
 8002204:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8002206:	f7ff ffef 	bl	80021e8 <HAL_RCC_GetHCLKFreq>
 800220a:	4601      	mov	r1, r0
 800220c:	4b0b      	ldr	r3, [pc, #44]	; (800223c <HAL_RCC_GetPCLK1Freq+0x3c>)
 800220e:	685b      	ldr	r3, [r3, #4]
 8002210:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002214:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002218:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800221a:	687a      	ldr	r2, [r7, #4]
 800221c:	fa92 f2a2 	rbit	r2, r2
 8002220:	603a      	str	r2, [r7, #0]
  return result;
 8002222:	683a      	ldr	r2, [r7, #0]
 8002224:	fab2 f282 	clz	r2, r2
 8002228:	b2d2      	uxtb	r2, r2
 800222a:	40d3      	lsrs	r3, r2
 800222c:	4a04      	ldr	r2, [pc, #16]	; (8002240 <HAL_RCC_GetPCLK1Freq+0x40>)
 800222e:	5cd3      	ldrb	r3, [r2, r3]
 8002230:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002234:	4618      	mov	r0, r3
 8002236:	3708      	adds	r7, #8
 8002238:	46bd      	mov	sp, r7
 800223a:	bd80      	pop	{r7, pc}
 800223c:	40021000 	.word	0x40021000
 8002240:	08007848 	.word	0x08007848

08002244 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002244:	b480      	push	{r7}
 8002246:	b083      	sub	sp, #12
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
 800224c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	220f      	movs	r2, #15
 8002252:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002254:	4b12      	ldr	r3, [pc, #72]	; (80022a0 <HAL_RCC_GetClockConfig+0x5c>)
 8002256:	685b      	ldr	r3, [r3, #4]
 8002258:	f003 0203 	and.w	r2, r3, #3
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 8002260:	4b0f      	ldr	r3, [pc, #60]	; (80022a0 <HAL_RCC_GetClockConfig+0x5c>)
 8002262:	685b      	ldr	r3, [r3, #4]
 8002264:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 800226c:	4b0c      	ldr	r3, [pc, #48]	; (80022a0 <HAL_RCC_GetClockConfig+0x5c>)
 800226e:	685b      	ldr	r3, [r3, #4]
 8002270:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	60da      	str	r2, [r3, #12]
  
  /* Get the APB2 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002278:	4b09      	ldr	r3, [pc, #36]	; (80022a0 <HAL_RCC_GetClockConfig+0x5c>)
 800227a:	685b      	ldr	r3, [r3, #4]
 800227c:	08db      	lsrs	r3, r3, #3
 800227e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	611a      	str	r2, [r3, #16]
  
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 8002286:	4b07      	ldr	r3, [pc, #28]	; (80022a4 <HAL_RCC_GetClockConfig+0x60>)
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f003 0207 	and.w	r2, r3, #7
 800228e:	683b      	ldr	r3, [r7, #0]
 8002290:	601a      	str	r2, [r3, #0]
}
 8002292:	bf00      	nop
 8002294:	370c      	adds	r7, #12
 8002296:	46bd      	mov	sp, r7
 8002298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229c:	4770      	bx	lr
 800229e:	bf00      	nop
 80022a0:	40021000 	.word	0x40021000
 80022a4:	40022000 	.word	0x40022000

080022a8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b082      	sub	sp, #8
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d101      	bne.n	80022ba <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80022b6:	2301      	movs	r3, #1
 80022b8:	e049      	b.n	800234e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80022c0:	b2db      	uxtb	r3, r3
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d106      	bne.n	80022d4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	2200      	movs	r2, #0
 80022ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80022ce:	6878      	ldr	r0, [r7, #4]
 80022d0:	f000 f841 	bl	8002356 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	2202      	movs	r2, #2
 80022d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681a      	ldr	r2, [r3, #0]
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	3304      	adds	r3, #4
 80022e4:	4619      	mov	r1, r3
 80022e6:	4610      	mov	r0, r2
 80022e8:	f000 f9f2 	bl	80026d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	2201      	movs	r2, #1
 80022f0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	2201      	movs	r2, #1
 80022f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	2201      	movs	r2, #1
 8002300:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	2201      	movs	r2, #1
 8002308:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	2201      	movs	r2, #1
 8002310:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	2201      	movs	r2, #1
 8002318:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	2201      	movs	r2, #1
 8002320:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	2201      	movs	r2, #1
 8002328:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	2201      	movs	r2, #1
 8002330:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	2201      	movs	r2, #1
 8002338:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	2201      	movs	r2, #1
 8002340:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	2201      	movs	r2, #1
 8002348:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800234c:	2300      	movs	r3, #0
}
 800234e:	4618      	mov	r0, r3
 8002350:	3708      	adds	r7, #8
 8002352:	46bd      	mov	sp, r7
 8002354:	bd80      	pop	{r7, pc}

08002356 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002356:	b480      	push	{r7}
 8002358:	b083      	sub	sp, #12
 800235a:	af00      	add	r7, sp, #0
 800235c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800235e:	bf00      	nop
 8002360:	370c      	adds	r7, #12
 8002362:	46bd      	mov	sp, r7
 8002364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002368:	4770      	bx	lr
	...

0800236c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800236c:	b480      	push	{r7}
 800236e:	b085      	sub	sp, #20
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800237a:	b2db      	uxtb	r3, r3
 800237c:	2b01      	cmp	r3, #1
 800237e:	d001      	beq.n	8002384 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002380:	2301      	movs	r3, #1
 8002382:	e04a      	b.n	800241a <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	2202      	movs	r2, #2
 8002388:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	68da      	ldr	r2, [r3, #12]
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f042 0201 	orr.w	r2, r2, #1
 800239a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	4a21      	ldr	r2, [pc, #132]	; (8002428 <HAL_TIM_Base_Start_IT+0xbc>)
 80023a2:	4293      	cmp	r3, r2
 80023a4:	d018      	beq.n	80023d8 <HAL_TIM_Base_Start_IT+0x6c>
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80023ae:	d013      	beq.n	80023d8 <HAL_TIM_Base_Start_IT+0x6c>
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	4a1d      	ldr	r2, [pc, #116]	; (800242c <HAL_TIM_Base_Start_IT+0xc0>)
 80023b6:	4293      	cmp	r3, r2
 80023b8:	d00e      	beq.n	80023d8 <HAL_TIM_Base_Start_IT+0x6c>
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	4a1c      	ldr	r2, [pc, #112]	; (8002430 <HAL_TIM_Base_Start_IT+0xc4>)
 80023c0:	4293      	cmp	r3, r2
 80023c2:	d009      	beq.n	80023d8 <HAL_TIM_Base_Start_IT+0x6c>
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	4a1a      	ldr	r2, [pc, #104]	; (8002434 <HAL_TIM_Base_Start_IT+0xc8>)
 80023ca:	4293      	cmp	r3, r2
 80023cc:	d004      	beq.n	80023d8 <HAL_TIM_Base_Start_IT+0x6c>
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	4a19      	ldr	r2, [pc, #100]	; (8002438 <HAL_TIM_Base_Start_IT+0xcc>)
 80023d4:	4293      	cmp	r3, r2
 80023d6:	d115      	bne.n	8002404 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	689a      	ldr	r2, [r3, #8]
 80023de:	4b17      	ldr	r3, [pc, #92]	; (800243c <HAL_TIM_Base_Start_IT+0xd0>)
 80023e0:	4013      	ands	r3, r2
 80023e2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	2b06      	cmp	r3, #6
 80023e8:	d015      	beq.n	8002416 <HAL_TIM_Base_Start_IT+0xaa>
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80023f0:	d011      	beq.n	8002416 <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	681a      	ldr	r2, [r3, #0]
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f042 0201 	orr.w	r2, r2, #1
 8002400:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002402:	e008      	b.n	8002416 <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	681a      	ldr	r2, [r3, #0]
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f042 0201 	orr.w	r2, r2, #1
 8002412:	601a      	str	r2, [r3, #0]
 8002414:	e000      	b.n	8002418 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002416:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002418:	2300      	movs	r3, #0
}
 800241a:	4618      	mov	r0, r3
 800241c:	3714      	adds	r7, #20
 800241e:	46bd      	mov	sp, r7
 8002420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002424:	4770      	bx	lr
 8002426:	bf00      	nop
 8002428:	40012c00 	.word	0x40012c00
 800242c:	40000400 	.word	0x40000400
 8002430:	40000800 	.word	0x40000800
 8002434:	40013400 	.word	0x40013400
 8002438:	40014000 	.word	0x40014000
 800243c:	00010007 	.word	0x00010007

08002440 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	b082      	sub	sp, #8
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	691b      	ldr	r3, [r3, #16]
 800244e:	f003 0302 	and.w	r3, r3, #2
 8002452:	2b02      	cmp	r3, #2
 8002454:	d122      	bne.n	800249c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	68db      	ldr	r3, [r3, #12]
 800245c:	f003 0302 	and.w	r3, r3, #2
 8002460:	2b02      	cmp	r3, #2
 8002462:	d11b      	bne.n	800249c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f06f 0202 	mvn.w	r2, #2
 800246c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	2201      	movs	r2, #1
 8002472:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	699b      	ldr	r3, [r3, #24]
 800247a:	f003 0303 	and.w	r3, r3, #3
 800247e:	2b00      	cmp	r3, #0
 8002480:	d003      	beq.n	800248a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002482:	6878      	ldr	r0, [r7, #4]
 8002484:	f000 f905 	bl	8002692 <HAL_TIM_IC_CaptureCallback>
 8002488:	e005      	b.n	8002496 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800248a:	6878      	ldr	r0, [r7, #4]
 800248c:	f000 f8f7 	bl	800267e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002490:	6878      	ldr	r0, [r7, #4]
 8002492:	f000 f908 	bl	80026a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	2200      	movs	r2, #0
 800249a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	691b      	ldr	r3, [r3, #16]
 80024a2:	f003 0304 	and.w	r3, r3, #4
 80024a6:	2b04      	cmp	r3, #4
 80024a8:	d122      	bne.n	80024f0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	68db      	ldr	r3, [r3, #12]
 80024b0:	f003 0304 	and.w	r3, r3, #4
 80024b4:	2b04      	cmp	r3, #4
 80024b6:	d11b      	bne.n	80024f0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f06f 0204 	mvn.w	r2, #4
 80024c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	2202      	movs	r2, #2
 80024c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	699b      	ldr	r3, [r3, #24]
 80024ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d003      	beq.n	80024de <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80024d6:	6878      	ldr	r0, [r7, #4]
 80024d8:	f000 f8db 	bl	8002692 <HAL_TIM_IC_CaptureCallback>
 80024dc:	e005      	b.n	80024ea <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80024de:	6878      	ldr	r0, [r7, #4]
 80024e0:	f000 f8cd 	bl	800267e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80024e4:	6878      	ldr	r0, [r7, #4]
 80024e6:	f000 f8de 	bl	80026a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	2200      	movs	r2, #0
 80024ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	691b      	ldr	r3, [r3, #16]
 80024f6:	f003 0308 	and.w	r3, r3, #8
 80024fa:	2b08      	cmp	r3, #8
 80024fc:	d122      	bne.n	8002544 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	68db      	ldr	r3, [r3, #12]
 8002504:	f003 0308 	and.w	r3, r3, #8
 8002508:	2b08      	cmp	r3, #8
 800250a:	d11b      	bne.n	8002544 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f06f 0208 	mvn.w	r2, #8
 8002514:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	2204      	movs	r2, #4
 800251a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	69db      	ldr	r3, [r3, #28]
 8002522:	f003 0303 	and.w	r3, r3, #3
 8002526:	2b00      	cmp	r3, #0
 8002528:	d003      	beq.n	8002532 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800252a:	6878      	ldr	r0, [r7, #4]
 800252c:	f000 f8b1 	bl	8002692 <HAL_TIM_IC_CaptureCallback>
 8002530:	e005      	b.n	800253e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002532:	6878      	ldr	r0, [r7, #4]
 8002534:	f000 f8a3 	bl	800267e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002538:	6878      	ldr	r0, [r7, #4]
 800253a:	f000 f8b4 	bl	80026a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	2200      	movs	r2, #0
 8002542:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	691b      	ldr	r3, [r3, #16]
 800254a:	f003 0310 	and.w	r3, r3, #16
 800254e:	2b10      	cmp	r3, #16
 8002550:	d122      	bne.n	8002598 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	68db      	ldr	r3, [r3, #12]
 8002558:	f003 0310 	and.w	r3, r3, #16
 800255c:	2b10      	cmp	r3, #16
 800255e:	d11b      	bne.n	8002598 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f06f 0210 	mvn.w	r2, #16
 8002568:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	2208      	movs	r2, #8
 800256e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	69db      	ldr	r3, [r3, #28]
 8002576:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800257a:	2b00      	cmp	r3, #0
 800257c:	d003      	beq.n	8002586 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800257e:	6878      	ldr	r0, [r7, #4]
 8002580:	f000 f887 	bl	8002692 <HAL_TIM_IC_CaptureCallback>
 8002584:	e005      	b.n	8002592 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002586:	6878      	ldr	r0, [r7, #4]
 8002588:	f000 f879 	bl	800267e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800258c:	6878      	ldr	r0, [r7, #4]
 800258e:	f000 f88a 	bl	80026a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	2200      	movs	r2, #0
 8002596:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	691b      	ldr	r3, [r3, #16]
 800259e:	f003 0301 	and.w	r3, r3, #1
 80025a2:	2b01      	cmp	r3, #1
 80025a4:	d10e      	bne.n	80025c4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	68db      	ldr	r3, [r3, #12]
 80025ac:	f003 0301 	and.w	r3, r3, #1
 80025b0:	2b01      	cmp	r3, #1
 80025b2:	d107      	bne.n	80025c4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f06f 0201 	mvn.w	r2, #1
 80025bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80025be:	6878      	ldr	r0, [r7, #4]
 80025c0:	f7fe f832 	bl	8000628 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	691b      	ldr	r3, [r3, #16]
 80025ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025ce:	2b80      	cmp	r3, #128	; 0x80
 80025d0:	d10e      	bne.n	80025f0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	68db      	ldr	r3, [r3, #12]
 80025d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025dc:	2b80      	cmp	r3, #128	; 0x80
 80025de:	d107      	bne.n	80025f0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80025e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80025ea:	6878      	ldr	r0, [r7, #4]
 80025ec:	f000 f90a 	bl	8002804 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	691b      	ldr	r3, [r3, #16]
 80025f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80025fe:	d10e      	bne.n	800261e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	68db      	ldr	r3, [r3, #12]
 8002606:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800260a:	2b80      	cmp	r3, #128	; 0x80
 800260c:	d107      	bne.n	800261e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002616:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002618:	6878      	ldr	r0, [r7, #4]
 800261a:	f000 f8fd 	bl	8002818 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	691b      	ldr	r3, [r3, #16]
 8002624:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002628:	2b40      	cmp	r3, #64	; 0x40
 800262a:	d10e      	bne.n	800264a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	68db      	ldr	r3, [r3, #12]
 8002632:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002636:	2b40      	cmp	r3, #64	; 0x40
 8002638:	d107      	bne.n	800264a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002642:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002644:	6878      	ldr	r0, [r7, #4]
 8002646:	f000 f838 	bl	80026ba <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	691b      	ldr	r3, [r3, #16]
 8002650:	f003 0320 	and.w	r3, r3, #32
 8002654:	2b20      	cmp	r3, #32
 8002656:	d10e      	bne.n	8002676 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	68db      	ldr	r3, [r3, #12]
 800265e:	f003 0320 	and.w	r3, r3, #32
 8002662:	2b20      	cmp	r3, #32
 8002664:	d107      	bne.n	8002676 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f06f 0220 	mvn.w	r2, #32
 800266e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002670:	6878      	ldr	r0, [r7, #4]
 8002672:	f000 f8bd 	bl	80027f0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002676:	bf00      	nop
 8002678:	3708      	adds	r7, #8
 800267a:	46bd      	mov	sp, r7
 800267c:	bd80      	pop	{r7, pc}

0800267e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800267e:	b480      	push	{r7}
 8002680:	b083      	sub	sp, #12
 8002682:	af00      	add	r7, sp, #0
 8002684:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002686:	bf00      	nop
 8002688:	370c      	adds	r7, #12
 800268a:	46bd      	mov	sp, r7
 800268c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002690:	4770      	bx	lr

08002692 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002692:	b480      	push	{r7}
 8002694:	b083      	sub	sp, #12
 8002696:	af00      	add	r7, sp, #0
 8002698:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800269a:	bf00      	nop
 800269c:	370c      	adds	r7, #12
 800269e:	46bd      	mov	sp, r7
 80026a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a4:	4770      	bx	lr

080026a6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80026a6:	b480      	push	{r7}
 80026a8:	b083      	sub	sp, #12
 80026aa:	af00      	add	r7, sp, #0
 80026ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80026ae:	bf00      	nop
 80026b0:	370c      	adds	r7, #12
 80026b2:	46bd      	mov	sp, r7
 80026b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b8:	4770      	bx	lr

080026ba <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80026ba:	b480      	push	{r7}
 80026bc:	b083      	sub	sp, #12
 80026be:	af00      	add	r7, sp, #0
 80026c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80026c2:	bf00      	nop
 80026c4:	370c      	adds	r7, #12
 80026c6:	46bd      	mov	sp, r7
 80026c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026cc:	4770      	bx	lr
	...

080026d0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80026d0:	b480      	push	{r7}
 80026d2:	b085      	sub	sp, #20
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
 80026d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	4a3c      	ldr	r2, [pc, #240]	; (80027d4 <TIM_Base_SetConfig+0x104>)
 80026e4:	4293      	cmp	r3, r2
 80026e6:	d00f      	beq.n	8002708 <TIM_Base_SetConfig+0x38>
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80026ee:	d00b      	beq.n	8002708 <TIM_Base_SetConfig+0x38>
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	4a39      	ldr	r2, [pc, #228]	; (80027d8 <TIM_Base_SetConfig+0x108>)
 80026f4:	4293      	cmp	r3, r2
 80026f6:	d007      	beq.n	8002708 <TIM_Base_SetConfig+0x38>
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	4a38      	ldr	r2, [pc, #224]	; (80027dc <TIM_Base_SetConfig+0x10c>)
 80026fc:	4293      	cmp	r3, r2
 80026fe:	d003      	beq.n	8002708 <TIM_Base_SetConfig+0x38>
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	4a37      	ldr	r2, [pc, #220]	; (80027e0 <TIM_Base_SetConfig+0x110>)
 8002704:	4293      	cmp	r3, r2
 8002706:	d108      	bne.n	800271a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800270e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002710:	683b      	ldr	r3, [r7, #0]
 8002712:	685b      	ldr	r3, [r3, #4]
 8002714:	68fa      	ldr	r2, [r7, #12]
 8002716:	4313      	orrs	r3, r2
 8002718:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	4a2d      	ldr	r2, [pc, #180]	; (80027d4 <TIM_Base_SetConfig+0x104>)
 800271e:	4293      	cmp	r3, r2
 8002720:	d01b      	beq.n	800275a <TIM_Base_SetConfig+0x8a>
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002728:	d017      	beq.n	800275a <TIM_Base_SetConfig+0x8a>
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	4a2a      	ldr	r2, [pc, #168]	; (80027d8 <TIM_Base_SetConfig+0x108>)
 800272e:	4293      	cmp	r3, r2
 8002730:	d013      	beq.n	800275a <TIM_Base_SetConfig+0x8a>
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	4a29      	ldr	r2, [pc, #164]	; (80027dc <TIM_Base_SetConfig+0x10c>)
 8002736:	4293      	cmp	r3, r2
 8002738:	d00f      	beq.n	800275a <TIM_Base_SetConfig+0x8a>
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	4a28      	ldr	r2, [pc, #160]	; (80027e0 <TIM_Base_SetConfig+0x110>)
 800273e:	4293      	cmp	r3, r2
 8002740:	d00b      	beq.n	800275a <TIM_Base_SetConfig+0x8a>
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	4a27      	ldr	r2, [pc, #156]	; (80027e4 <TIM_Base_SetConfig+0x114>)
 8002746:	4293      	cmp	r3, r2
 8002748:	d007      	beq.n	800275a <TIM_Base_SetConfig+0x8a>
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	4a26      	ldr	r2, [pc, #152]	; (80027e8 <TIM_Base_SetConfig+0x118>)
 800274e:	4293      	cmp	r3, r2
 8002750:	d003      	beq.n	800275a <TIM_Base_SetConfig+0x8a>
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	4a25      	ldr	r2, [pc, #148]	; (80027ec <TIM_Base_SetConfig+0x11c>)
 8002756:	4293      	cmp	r3, r2
 8002758:	d108      	bne.n	800276c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002760:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002762:	683b      	ldr	r3, [r7, #0]
 8002764:	68db      	ldr	r3, [r3, #12]
 8002766:	68fa      	ldr	r2, [r7, #12]
 8002768:	4313      	orrs	r3, r2
 800276a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002772:	683b      	ldr	r3, [r7, #0]
 8002774:	695b      	ldr	r3, [r3, #20]
 8002776:	4313      	orrs	r3, r2
 8002778:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	68fa      	ldr	r2, [r7, #12]
 800277e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002780:	683b      	ldr	r3, [r7, #0]
 8002782:	689a      	ldr	r2, [r3, #8]
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002788:	683b      	ldr	r3, [r7, #0]
 800278a:	681a      	ldr	r2, [r3, #0]
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	4a10      	ldr	r2, [pc, #64]	; (80027d4 <TIM_Base_SetConfig+0x104>)
 8002794:	4293      	cmp	r3, r2
 8002796:	d00f      	beq.n	80027b8 <TIM_Base_SetConfig+0xe8>
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	4a11      	ldr	r2, [pc, #68]	; (80027e0 <TIM_Base_SetConfig+0x110>)
 800279c:	4293      	cmp	r3, r2
 800279e:	d00b      	beq.n	80027b8 <TIM_Base_SetConfig+0xe8>
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	4a10      	ldr	r2, [pc, #64]	; (80027e4 <TIM_Base_SetConfig+0x114>)
 80027a4:	4293      	cmp	r3, r2
 80027a6:	d007      	beq.n	80027b8 <TIM_Base_SetConfig+0xe8>
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	4a0f      	ldr	r2, [pc, #60]	; (80027e8 <TIM_Base_SetConfig+0x118>)
 80027ac:	4293      	cmp	r3, r2
 80027ae:	d003      	beq.n	80027b8 <TIM_Base_SetConfig+0xe8>
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	4a0e      	ldr	r2, [pc, #56]	; (80027ec <TIM_Base_SetConfig+0x11c>)
 80027b4:	4293      	cmp	r3, r2
 80027b6:	d103      	bne.n	80027c0 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80027b8:	683b      	ldr	r3, [r7, #0]
 80027ba:	691a      	ldr	r2, [r3, #16]
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	2201      	movs	r2, #1
 80027c4:	615a      	str	r2, [r3, #20]
}
 80027c6:	bf00      	nop
 80027c8:	3714      	adds	r7, #20
 80027ca:	46bd      	mov	sp, r7
 80027cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d0:	4770      	bx	lr
 80027d2:	bf00      	nop
 80027d4:	40012c00 	.word	0x40012c00
 80027d8:	40000400 	.word	0x40000400
 80027dc:	40000800 	.word	0x40000800
 80027e0:	40013400 	.word	0x40013400
 80027e4:	40014000 	.word	0x40014000
 80027e8:	40014400 	.word	0x40014400
 80027ec:	40014800 	.word	0x40014800

080027f0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80027f0:	b480      	push	{r7}
 80027f2:	b083      	sub	sp, #12
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80027f8:	bf00      	nop
 80027fa:	370c      	adds	r7, #12
 80027fc:	46bd      	mov	sp, r7
 80027fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002802:	4770      	bx	lr

08002804 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002804:	b480      	push	{r7}
 8002806:	b083      	sub	sp, #12
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800280c:	bf00      	nop
 800280e:	370c      	adds	r7, #12
 8002810:	46bd      	mov	sp, r7
 8002812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002816:	4770      	bx	lr

08002818 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002818:	b480      	push	{r7}
 800281a:	b083      	sub	sp, #12
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002820:	bf00      	nop
 8002822:	370c      	adds	r7, #12
 8002824:	46bd      	mov	sp, r7
 8002826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282a:	4770      	bx	lr

0800282c <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800282c:	b480      	push	{r7}
 800282e:	b083      	sub	sp, #12
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	f103 0208 	add.w	r2, r3, #8
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002844:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	f103 0208 	add.w	r2, r3, #8
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	f103 0208 	add.w	r2, r3, #8
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	2200      	movs	r2, #0
 800285e:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002860:	bf00      	nop
 8002862:	370c      	adds	r7, #12
 8002864:	46bd      	mov	sp, r7
 8002866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286a:	4770      	bx	lr

0800286c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800286c:	b480      	push	{r7}
 800286e:	b083      	sub	sp, #12
 8002870:	af00      	add	r7, sp, #0
 8002872:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	2200      	movs	r2, #0
 8002878:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800287a:	bf00      	nop
 800287c:	370c      	adds	r7, #12
 800287e:	46bd      	mov	sp, r7
 8002880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002884:	4770      	bx	lr

08002886 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8002886:	b480      	push	{r7}
 8002888:	b085      	sub	sp, #20
 800288a:	af00      	add	r7, sp, #0
 800288c:	6078      	str	r0, [r7, #4]
 800288e:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002890:	683b      	ldr	r3, [r7, #0]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8002896:	68bb      	ldr	r3, [r7, #8]
 8002898:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800289c:	d103      	bne.n	80028a6 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	691b      	ldr	r3, [r3, #16]
 80028a2:	60fb      	str	r3, [r7, #12]
 80028a4:	e00c      	b.n	80028c0 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	3308      	adds	r3, #8
 80028aa:	60fb      	str	r3, [r7, #12]
 80028ac:	e002      	b.n	80028b4 <vListInsert+0x2e>
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	685b      	ldr	r3, [r3, #4]
 80028b2:	60fb      	str	r3, [r7, #12]
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	685b      	ldr	r3, [r3, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	68ba      	ldr	r2, [r7, #8]
 80028bc:	429a      	cmp	r2, r3
 80028be:	d2f6      	bcs.n	80028ae <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	685a      	ldr	r2, [r3, #4]
 80028c4:	683b      	ldr	r3, [r7, #0]
 80028c6:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80028c8:	683b      	ldr	r3, [r7, #0]
 80028ca:	685b      	ldr	r3, [r3, #4]
 80028cc:	683a      	ldr	r2, [r7, #0]
 80028ce:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 80028d0:	683b      	ldr	r3, [r7, #0]
 80028d2:	68fa      	ldr	r2, [r7, #12]
 80028d4:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	683a      	ldr	r2, [r7, #0]
 80028da:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	687a      	ldr	r2, [r7, #4]
 80028e0:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	1c5a      	adds	r2, r3, #1
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	601a      	str	r2, [r3, #0]
}
 80028ec:	bf00      	nop
 80028ee:	3714      	adds	r7, #20
 80028f0:	46bd      	mov	sp, r7
 80028f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f6:	4770      	bx	lr

080028f8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80028f8:	b480      	push	{r7}
 80028fa:	b085      	sub	sp, #20
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	691b      	ldr	r3, [r3, #16]
 8002904:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	685b      	ldr	r3, [r3, #4]
 800290a:	687a      	ldr	r2, [r7, #4]
 800290c:	6892      	ldr	r2, [r2, #8]
 800290e:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	689b      	ldr	r3, [r3, #8]
 8002914:	687a      	ldr	r2, [r7, #4]
 8002916:	6852      	ldr	r2, [r2, #4]
 8002918:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	685b      	ldr	r3, [r3, #4]
 800291e:	687a      	ldr	r2, [r7, #4]
 8002920:	429a      	cmp	r2, r3
 8002922:	d103      	bne.n	800292c <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	689a      	ldr	r2, [r3, #8]
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	2200      	movs	r2, #0
 8002930:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	1e5a      	subs	r2, r3, #1
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	681b      	ldr	r3, [r3, #0]
}
 8002940:	4618      	mov	r0, r3
 8002942:	3714      	adds	r7, #20
 8002944:	46bd      	mov	sp, r7
 8002946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294a:	4770      	bx	lr

0800294c <xQueueGenericReset>:
    }
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 800294c:	b580      	push	{r7, lr}
 800294e:	b086      	sub	sp, #24
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]
 8002954:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 8002956:	2301      	movs	r3, #1
 8002958:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 800295e:	693b      	ldr	r3, [r7, #16]
 8002960:	2b00      	cmp	r3, #0
 8002962:	d10a      	bne.n	800297a <xQueueGenericReset+0x2e>
        __asm volatile
 8002964:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002968:	f383 8811 	msr	BASEPRI, r3
 800296c:	f3bf 8f6f 	isb	sy
 8002970:	f3bf 8f4f 	dsb	sy
 8002974:	60fb      	str	r3, [r7, #12]
    }
 8002976:	bf00      	nop
 8002978:	e7fe      	b.n	8002978 <xQueueGenericReset+0x2c>

    if( ( pxQueue != NULL ) &&
 800297a:	693b      	ldr	r3, [r7, #16]
 800297c:	2b00      	cmp	r3, #0
 800297e:	d052      	beq.n	8002a26 <xQueueGenericReset+0xda>
        ( pxQueue->uxLength >= 1U ) &&
 8002980:	693b      	ldr	r3, [r7, #16]
 8002982:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    if( ( pxQueue != NULL ) &&
 8002984:	2b00      	cmp	r3, #0
 8002986:	d04e      	beq.n	8002a26 <xQueueGenericReset+0xda>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 8002988:	693b      	ldr	r3, [r7, #16]
 800298a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800298c:	693b      	ldr	r3, [r7, #16]
 800298e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002990:	2100      	movs	r1, #0
 8002992:	fba3 2302 	umull	r2, r3, r3, r2
 8002996:	2b00      	cmp	r3, #0
 8002998:	d000      	beq.n	800299c <xQueueGenericReset+0x50>
 800299a:	2101      	movs	r1, #1
 800299c:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d141      	bne.n	8002a26 <xQueueGenericReset+0xda>
    {
        taskENTER_CRITICAL();
 80029a2:	f001 fe8f 	bl	80046c4 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80029a6:	693b      	ldr	r3, [r7, #16]
 80029a8:	681a      	ldr	r2, [r3, #0]
 80029aa:	693b      	ldr	r3, [r7, #16]
 80029ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029ae:	6939      	ldr	r1, [r7, #16]
 80029b0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80029b2:	fb01 f303 	mul.w	r3, r1, r3
 80029b6:	441a      	add	r2, r3
 80029b8:	693b      	ldr	r3, [r7, #16]
 80029ba:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80029bc:	693b      	ldr	r3, [r7, #16]
 80029be:	2200      	movs	r2, #0
 80029c0:	639a      	str	r2, [r3, #56]	; 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 80029c2:	693b      	ldr	r3, [r7, #16]
 80029c4:	681a      	ldr	r2, [r3, #0]
 80029c6:	693b      	ldr	r3, [r7, #16]
 80029c8:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80029ca:	693b      	ldr	r3, [r7, #16]
 80029cc:	681a      	ldr	r2, [r3, #0]
 80029ce:	693b      	ldr	r3, [r7, #16]
 80029d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029d2:	3b01      	subs	r3, #1
 80029d4:	6939      	ldr	r1, [r7, #16]
 80029d6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80029d8:	fb01 f303 	mul.w	r3, r1, r3
 80029dc:	441a      	add	r2, r3
 80029de:	693b      	ldr	r3, [r7, #16]
 80029e0:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 80029e2:	693b      	ldr	r3, [r7, #16]
 80029e4:	22ff      	movs	r2, #255	; 0xff
 80029e6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 80029ea:	693b      	ldr	r3, [r7, #16]
 80029ec:	22ff      	movs	r2, #255	; 0xff
 80029ee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

            if( xNewQueue == pdFALSE )
 80029f2:	683b      	ldr	r3, [r7, #0]
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d109      	bne.n	8002a0c <xQueueGenericReset+0xc0>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80029f8:	693b      	ldr	r3, [r7, #16]
 80029fa:	691b      	ldr	r3, [r3, #16]
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d00f      	beq.n	8002a20 <xQueueGenericReset+0xd4>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002a00:	693b      	ldr	r3, [r7, #16]
 8002a02:	3310      	adds	r3, #16
 8002a04:	4618      	mov	r0, r3
 8002a06:	f000 ff85 	bl	8003914 <xTaskRemoveFromEventList>
 8002a0a:	e009      	b.n	8002a20 <xQueueGenericReset+0xd4>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002a0c:	693b      	ldr	r3, [r7, #16]
 8002a0e:	3310      	adds	r3, #16
 8002a10:	4618      	mov	r0, r3
 8002a12:	f7ff ff0b 	bl	800282c <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002a16:	693b      	ldr	r3, [r7, #16]
 8002a18:	3324      	adds	r3, #36	; 0x24
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	f7ff ff06 	bl	800282c <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 8002a20:	f001 fe80 	bl	8004724 <vPortExitCritical>
 8002a24:	e001      	b.n	8002a2a <xQueueGenericReset+0xde>
    }
    else
    {
        xReturn = pdFAIL;
 8002a26:	2300      	movs	r3, #0
 8002a28:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 8002a2a:	697b      	ldr	r3, [r7, #20]
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d10a      	bne.n	8002a46 <xQueueGenericReset+0xfa>
        __asm volatile
 8002a30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a34:	f383 8811 	msr	BASEPRI, r3
 8002a38:	f3bf 8f6f 	isb	sy
 8002a3c:	f3bf 8f4f 	dsb	sy
 8002a40:	60bb      	str	r3, [r7, #8]
    }
 8002a42:	bf00      	nop
 8002a44:	e7fe      	b.n	8002a44 <xQueueGenericReset+0xf8>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 8002a46:	697b      	ldr	r3, [r7, #20]
}
 8002a48:	4618      	mov	r0, r3
 8002a4a:	3718      	adds	r7, #24
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	bd80      	pop	{r7, pc}

08002a50 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b08a      	sub	sp, #40	; 0x28
 8002a54:	af02      	add	r7, sp, #8
 8002a56:	60f8      	str	r0, [r7, #12]
 8002a58:	60b9      	str	r1, [r7, #8]
 8002a5a:	4613      	mov	r3, r2
 8002a5c:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 8002a5e:	2300      	movs	r3, #0
 8002a60:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d02e      	beq.n	8002ac6 <xQueueGenericCreate+0x76>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8002a68:	2100      	movs	r1, #0
 8002a6a:	68ba      	ldr	r2, [r7, #8]
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	fba3 2302 	umull	r2, r3, r3, r2
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d000      	beq.n	8002a78 <xQueueGenericCreate+0x28>
 8002a76:	2101      	movs	r1, #1
 8002a78:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d123      	bne.n	8002ac6 <xQueueGenericCreate+0x76>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	68ba      	ldr	r2, [r7, #8]
 8002a82:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8002a86:	f113 0f51 	cmn.w	r3, #81	; 0x51
 8002a8a:	d81c      	bhi.n	8002ac6 <xQueueGenericCreate+0x76>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	68ba      	ldr	r2, [r7, #8]
 8002a90:	fb02 f303 	mul.w	r3, r2, r3
 8002a94:	61bb      	str	r3, [r7, #24]
             * alignment requirements of the Queue_t structure - which in this case
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
             * are greater than or equal to the pointer to char requirements the cast
             * is safe.  In other cases alignment requirements are not strict (one or
             * two bytes). */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8002a96:	69bb      	ldr	r3, [r7, #24]
 8002a98:	3350      	adds	r3, #80	; 0x50
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	f001 ff3e 	bl	800491c <pvPortMalloc>
 8002aa0:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 8002aa2:	69fb      	ldr	r3, [r7, #28]
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d01c      	beq.n	8002ae2 <xQueueGenericCreate+0x92>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8002aa8:	69fb      	ldr	r3, [r7, #28]
 8002aaa:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002aac:	697b      	ldr	r3, [r7, #20]
 8002aae:	3350      	adds	r3, #80	; 0x50
 8002ab0:	617b      	str	r3, [r7, #20]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002ab2:	79fa      	ldrb	r2, [r7, #7]
 8002ab4:	69fb      	ldr	r3, [r7, #28]
 8002ab6:	9300      	str	r3, [sp, #0]
 8002ab8:	4613      	mov	r3, r2
 8002aba:	697a      	ldr	r2, [r7, #20]
 8002abc:	68b9      	ldr	r1, [r7, #8]
 8002abe:	68f8      	ldr	r0, [r7, #12]
 8002ac0:	f000 f814 	bl	8002aec <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 8002ac4:	e00d      	b.n	8002ae2 <xQueueGenericCreate+0x92>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 8002ac6:	69fb      	ldr	r3, [r7, #28]
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d10a      	bne.n	8002ae2 <xQueueGenericCreate+0x92>
        __asm volatile
 8002acc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ad0:	f383 8811 	msr	BASEPRI, r3
 8002ad4:	f3bf 8f6f 	isb	sy
 8002ad8:	f3bf 8f4f 	dsb	sy
 8002adc:	613b      	str	r3, [r7, #16]
    }
 8002ade:	bf00      	nop
 8002ae0:	e7fe      	b.n	8002ae0 <xQueueGenericCreate+0x90>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8002ae2:	69fb      	ldr	r3, [r7, #28]
    }
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	3720      	adds	r7, #32
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	bd80      	pop	{r7, pc}

08002aec <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	b084      	sub	sp, #16
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	60f8      	str	r0, [r7, #12]
 8002af4:	60b9      	str	r1, [r7, #8]
 8002af6:	607a      	str	r2, [r7, #4]
 8002af8:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8002afa:	68bb      	ldr	r3, [r7, #8]
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d103      	bne.n	8002b08 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002b00:	69bb      	ldr	r3, [r7, #24]
 8002b02:	69ba      	ldr	r2, [r7, #24]
 8002b04:	601a      	str	r2, [r3, #0]
 8002b06:	e002      	b.n	8002b0e <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002b08:	69bb      	ldr	r3, [r7, #24]
 8002b0a:	687a      	ldr	r2, [r7, #4]
 8002b0c:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8002b0e:	69bb      	ldr	r3, [r7, #24]
 8002b10:	68fa      	ldr	r2, [r7, #12]
 8002b12:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8002b14:	69bb      	ldr	r3, [r7, #24]
 8002b16:	68ba      	ldr	r2, [r7, #8]
 8002b18:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002b1a:	2101      	movs	r1, #1
 8002b1c:	69b8      	ldr	r0, [r7, #24]
 8002b1e:	f7ff ff15 	bl	800294c <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
    {
        pxNewQueue->ucQueueType = ucQueueType;
 8002b22:	69bb      	ldr	r3, [r7, #24]
 8002b24:	78fa      	ldrb	r2, [r7, #3]
 8002b26:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    {
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
 8002b2a:	78fb      	ldrb	r3, [r7, #3]
 8002b2c:	68ba      	ldr	r2, [r7, #8]
 8002b2e:	68f9      	ldr	r1, [r7, #12]
 8002b30:	2073      	movs	r0, #115	; 0x73
 8002b32:	f003 fa91 	bl	8006058 <SEGGER_SYSVIEW_RecordU32x3>
}
 8002b36:	bf00      	nop
 8002b38:	3710      	adds	r7, #16
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	bd80      	pop	{r7, pc}
	...

08002b40 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8002b40:	b590      	push	{r4, r7, lr}
 8002b42:	b08f      	sub	sp, #60	; 0x3c
 8002b44:	af02      	add	r7, sp, #8
 8002b46:	60f8      	str	r0, [r7, #12]
 8002b48:	60b9      	str	r1, [r7, #8]
 8002b4a:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8002b4c:	2300      	movs	r3, #0
 8002b4e:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8002b54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d10a      	bne.n	8002b70 <xQueueReceive+0x30>
        __asm volatile
 8002b5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b5e:	f383 8811 	msr	BASEPRI, r3
 8002b62:	f3bf 8f6f 	isb	sy
 8002b66:	f3bf 8f4f 	dsb	sy
 8002b6a:	623b      	str	r3, [r7, #32]
    }
 8002b6c:	bf00      	nop
 8002b6e:	e7fe      	b.n	8002b6e <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002b70:	68bb      	ldr	r3, [r7, #8]
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d103      	bne.n	8002b7e <xQueueReceive+0x3e>
 8002b76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d101      	bne.n	8002b82 <xQueueReceive+0x42>
 8002b7e:	2301      	movs	r3, #1
 8002b80:	e000      	b.n	8002b84 <xQueueReceive+0x44>
 8002b82:	2300      	movs	r3, #0
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d10a      	bne.n	8002b9e <xQueueReceive+0x5e>
        __asm volatile
 8002b88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b8c:	f383 8811 	msr	BASEPRI, r3
 8002b90:	f3bf 8f6f 	isb	sy
 8002b94:	f3bf 8f4f 	dsb	sy
 8002b98:	61fb      	str	r3, [r7, #28]
    }
 8002b9a:	bf00      	nop
 8002b9c:	e7fe      	b.n	8002b9c <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002b9e:	f001 f8c5 	bl	8003d2c <xTaskGetSchedulerState>
 8002ba2:	4603      	mov	r3, r0
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d102      	bne.n	8002bae <xQueueReceive+0x6e>
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d101      	bne.n	8002bb2 <xQueueReceive+0x72>
 8002bae:	2301      	movs	r3, #1
 8002bb0:	e000      	b.n	8002bb4 <xQueueReceive+0x74>
 8002bb2:	2300      	movs	r3, #0
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d10a      	bne.n	8002bce <xQueueReceive+0x8e>
        __asm volatile
 8002bb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bbc:	f383 8811 	msr	BASEPRI, r3
 8002bc0:	f3bf 8f6f 	isb	sy
 8002bc4:	f3bf 8f4f 	dsb	sy
 8002bc8:	61bb      	str	r3, [r7, #24]
    }
 8002bca:	bf00      	nop
 8002bcc:	e7fe      	b.n	8002bcc <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8002bce:	f001 fd79 	bl	80046c4 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002bd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bd6:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002bd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d024      	beq.n	8002c28 <xQueueReceive+0xe8>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002bde:	68b9      	ldr	r1, [r7, #8]
 8002be0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002be2:	f000 f8b3 	bl	8002d4c <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
 8002be6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002be8:	4618      	mov	r0, r3
 8002bea:	f003 ff61 	bl	8006ab0 <SEGGER_SYSVIEW_ShrinkId>
 8002bee:	4604      	mov	r4, r0
 8002bf0:	2000      	movs	r0, #0
 8002bf2:	f003 ff5d 	bl	8006ab0 <SEGGER_SYSVIEW_ShrinkId>
 8002bf6:	4602      	mov	r2, r0
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	2101      	movs	r1, #1
 8002bfc:	9100      	str	r1, [sp, #0]
 8002bfe:	4621      	mov	r1, r4
 8002c00:	205c      	movs	r0, #92	; 0x5c
 8002c02:	f003 fa9f 	bl	8006144 <SEGGER_SYSVIEW_RecordU32x4>
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002c06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c08:	1e5a      	subs	r2, r3, #1
 8002c0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c0c:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002c0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c10:	691b      	ldr	r3, [r3, #16]
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d004      	beq.n	8002c20 <xQueueReceive+0xe0>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002c16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c18:	3310      	adds	r3, #16
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	f000 fe7a 	bl	8003914 <xTaskRemoveFromEventList>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8002c20:	f001 fd80 	bl	8004724 <vPortExitCritical>
                return pdPASS;
 8002c24:	2301      	movs	r3, #1
 8002c26:	e08a      	b.n	8002d3e <xQueueReceive+0x1fe>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d113      	bne.n	8002c56 <xQueueReceive+0x116>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8002c2e:	f001 fd79 	bl	8004724 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
 8002c32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c34:	4618      	mov	r0, r3
 8002c36:	f003 ff3b 	bl	8006ab0 <SEGGER_SYSVIEW_ShrinkId>
 8002c3a:	4604      	mov	r4, r0
 8002c3c:	2000      	movs	r0, #0
 8002c3e:	f003 ff37 	bl	8006ab0 <SEGGER_SYSVIEW_ShrinkId>
 8002c42:	4602      	mov	r2, r0
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	2101      	movs	r1, #1
 8002c48:	9100      	str	r1, [sp, #0]
 8002c4a:	4621      	mov	r1, r4
 8002c4c:	205c      	movs	r0, #92	; 0x5c
 8002c4e:	f003 fa79 	bl	8006144 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_EMPTY;
 8002c52:	2300      	movs	r3, #0
 8002c54:	e073      	b.n	8002d3e <xQueueReceive+0x1fe>
                }
                else if( xEntryTimeSet == pdFALSE )
 8002c56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d106      	bne.n	8002c6a <xQueueReceive+0x12a>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8002c5c:	f107 0310 	add.w	r3, r7, #16
 8002c60:	4618      	mov	r0, r3
 8002c62:	f000 ff2f 	bl	8003ac4 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8002c66:	2301      	movs	r3, #1
 8002c68:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8002c6a:	f001 fd5b 	bl	8004724 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8002c6e:	f000 fb61 	bl	8003334 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8002c72:	f001 fd27 	bl	80046c4 <vPortEnterCritical>
 8002c76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c78:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002c7c:	b25b      	sxtb	r3, r3
 8002c7e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002c82:	d103      	bne.n	8002c8c <xQueueReceive+0x14c>
 8002c84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c86:	2200      	movs	r2, #0
 8002c88:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002c8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c8e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002c92:	b25b      	sxtb	r3, r3
 8002c94:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002c98:	d103      	bne.n	8002ca2 <xQueueReceive+0x162>
 8002c9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002ca2:	f001 fd3f 	bl	8004724 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002ca6:	1d3a      	adds	r2, r7, #4
 8002ca8:	f107 0310 	add.w	r3, r7, #16
 8002cac:	4611      	mov	r1, r2
 8002cae:	4618      	mov	r0, r3
 8002cb0:	f000 ff1e 	bl	8003af0 <xTaskCheckForTimeOut>
 8002cb4:	4603      	mov	r3, r0
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d124      	bne.n	8002d04 <xQueueReceive+0x1c4>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002cba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002cbc:	f000 f8be 	bl	8002e3c <prvIsQueueEmpty>
 8002cc0:	4603      	mov	r3, r0
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d018      	beq.n	8002cf8 <xQueueReceive+0x1b8>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002cc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cc8:	3324      	adds	r3, #36	; 0x24
 8002cca:	687a      	ldr	r2, [r7, #4]
 8002ccc:	4611      	mov	r1, r2
 8002cce:	4618      	mov	r0, r3
 8002cd0:	f000 fdb4 	bl	800383c <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8002cd4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002cd6:	f000 f85f 	bl	8002d98 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8002cda:	f000 fb39 	bl	8003350 <xTaskResumeAll>
 8002cde:	4603      	mov	r3, r0
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	f47f af74 	bne.w	8002bce <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 8002ce6:	4b18      	ldr	r3, [pc, #96]	; (8002d48 <xQueueReceive+0x208>)
 8002ce8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002cec:	601a      	str	r2, [r3, #0]
 8002cee:	f3bf 8f4f 	dsb	sy
 8002cf2:	f3bf 8f6f 	isb	sy
 8002cf6:	e76a      	b.n	8002bce <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8002cf8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002cfa:	f000 f84d 	bl	8002d98 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8002cfe:	f000 fb27 	bl	8003350 <xTaskResumeAll>
 8002d02:	e764      	b.n	8002bce <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8002d04:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002d06:	f000 f847 	bl	8002d98 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8002d0a:	f000 fb21 	bl	8003350 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002d0e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002d10:	f000 f894 	bl	8002e3c <prvIsQueueEmpty>
 8002d14:	4603      	mov	r3, r0
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	f43f af59 	beq.w	8002bce <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
 8002d1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d1e:	4618      	mov	r0, r3
 8002d20:	f003 fec6 	bl	8006ab0 <SEGGER_SYSVIEW_ShrinkId>
 8002d24:	4604      	mov	r4, r0
 8002d26:	2000      	movs	r0, #0
 8002d28:	f003 fec2 	bl	8006ab0 <SEGGER_SYSVIEW_ShrinkId>
 8002d2c:	4602      	mov	r2, r0
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	2101      	movs	r1, #1
 8002d32:	9100      	str	r1, [sp, #0]
 8002d34:	4621      	mov	r1, r4
 8002d36:	205c      	movs	r0, #92	; 0x5c
 8002d38:	f003 fa04 	bl	8006144 <SEGGER_SYSVIEW_RecordU32x4>
                return errQUEUE_EMPTY;
 8002d3c:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8002d3e:	4618      	mov	r0, r3
 8002d40:	3734      	adds	r7, #52	; 0x34
 8002d42:	46bd      	mov	sp, r7
 8002d44:	bd90      	pop	{r4, r7, pc}
 8002d46:	bf00      	nop
 8002d48:	e000ed04 	.word	0xe000ed04

08002d4c <prvCopyDataFromQueue>:
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	b082      	sub	sp, #8
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	6078      	str	r0, [r7, #4]
 8002d54:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d018      	beq.n	8002d90 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	68da      	ldr	r2, [r3, #12]
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d66:	441a      	add	r2, r3
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	68da      	ldr	r2, [r3, #12]
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	689b      	ldr	r3, [r3, #8]
 8002d74:	429a      	cmp	r2, r3
 8002d76:	d303      	bcc.n	8002d80 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681a      	ldr	r2, [r3, #0]
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	68d9      	ldr	r1, [r3, #12]
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d88:	461a      	mov	r2, r3
 8002d8a:	6838      	ldr	r0, [r7, #0]
 8002d8c:	f004 f820 	bl	8006dd0 <memcpy>
    }
}
 8002d90:	bf00      	nop
 8002d92:	3708      	adds	r7, #8
 8002d94:	46bd      	mov	sp, r7
 8002d96:	bd80      	pop	{r7, pc}

08002d98 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	b084      	sub	sp, #16
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8002da0:	f001 fc90 	bl	80046c4 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002daa:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8002dac:	e011      	b.n	8002dd2 <prvUnlockQueue+0x3a>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d012      	beq.n	8002ddc <prvUnlockQueue+0x44>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	3324      	adds	r3, #36	; 0x24
 8002dba:	4618      	mov	r0, r3
 8002dbc:	f000 fdaa 	bl	8003914 <xTaskRemoveFromEventList>
 8002dc0:	4603      	mov	r3, r0
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d001      	beq.n	8002dca <prvUnlockQueue+0x32>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 8002dc6:	f000 fef9 	bl	8003bbc <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8002dca:	7bfb      	ldrb	r3, [r7, #15]
 8002dcc:	3b01      	subs	r3, #1
 8002dce:	b2db      	uxtb	r3, r3
 8002dd0:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8002dd2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	dce9      	bgt.n	8002dae <prvUnlockQueue+0x16>
 8002dda:	e000      	b.n	8002dde <prvUnlockQueue+0x46>
                    break;
 8002ddc:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	22ff      	movs	r2, #255	; 0xff
 8002de2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 8002de6:	f001 fc9d 	bl	8004724 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8002dea:	f001 fc6b 	bl	80046c4 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002df4:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002df6:	e011      	b.n	8002e1c <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	691b      	ldr	r3, [r3, #16]
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d012      	beq.n	8002e26 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	3310      	adds	r3, #16
 8002e04:	4618      	mov	r0, r3
 8002e06:	f000 fd85 	bl	8003914 <xTaskRemoveFromEventList>
 8002e0a:	4603      	mov	r3, r0
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d001      	beq.n	8002e14 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8002e10:	f000 fed4 	bl	8003bbc <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8002e14:	7bbb      	ldrb	r3, [r7, #14]
 8002e16:	3b01      	subs	r3, #1
 8002e18:	b2db      	uxtb	r3, r3
 8002e1a:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002e1c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	dce9      	bgt.n	8002df8 <prvUnlockQueue+0x60>
 8002e24:	e000      	b.n	8002e28 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8002e26:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	22ff      	movs	r2, #255	; 0xff
 8002e2c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 8002e30:	f001 fc78 	bl	8004724 <vPortExitCritical>
}
 8002e34:	bf00      	nop
 8002e36:	3710      	adds	r7, #16
 8002e38:	46bd      	mov	sp, r7
 8002e3a:	bd80      	pop	{r7, pc}

08002e3c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	b084      	sub	sp, #16
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8002e44:	f001 fc3e 	bl	80046c4 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d102      	bne.n	8002e56 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8002e50:	2301      	movs	r3, #1
 8002e52:	60fb      	str	r3, [r7, #12]
 8002e54:	e001      	b.n	8002e5a <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8002e56:	2300      	movs	r3, #0
 8002e58:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8002e5a:	f001 fc63 	bl	8004724 <vPortExitCritical>

    return xReturn;
 8002e5e:	68fb      	ldr	r3, [r7, #12]
}
 8002e60:	4618      	mov	r0, r3
 8002e62:	3710      	adds	r7, #16
 8002e64:	46bd      	mov	sp, r7
 8002e66:	bd80      	pop	{r7, pc}

08002e68 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	b086      	sub	sp, #24
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]
 8002e70:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;
        QueueRegistryItem_t * pxEntryToWrite = NULL;
 8002e72:	2300      	movs	r3, #0
 8002e74:	613b      	str	r3, [r7, #16]

        configASSERT( xQueue );
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d10a      	bne.n	8002e92 <vQueueAddToRegistry+0x2a>
        __asm volatile
 8002e7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e80:	f383 8811 	msr	BASEPRI, r3
 8002e84:	f3bf 8f6f 	isb	sy
 8002e88:	f3bf 8f4f 	dsb	sy
 8002e8c:	60fb      	str	r3, [r7, #12]
    }
 8002e8e:	bf00      	nop
 8002e90:	e7fe      	b.n	8002e90 <vQueueAddToRegistry+0x28>

        if( pcQueueName != NULL )
 8002e92:	683b      	ldr	r3, [r7, #0]
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d024      	beq.n	8002ee2 <vQueueAddToRegistry+0x7a>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002e98:	2300      	movs	r3, #0
 8002e9a:	617b      	str	r3, [r7, #20]
 8002e9c:	e01e      	b.n	8002edc <vQueueAddToRegistry+0x74>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 8002e9e:	4a1c      	ldr	r2, [pc, #112]	; (8002f10 <vQueueAddToRegistry+0xa8>)
 8002ea0:	697b      	ldr	r3, [r7, #20]
 8002ea2:	00db      	lsls	r3, r3, #3
 8002ea4:	4413      	add	r3, r2
 8002ea6:	685b      	ldr	r3, [r3, #4]
 8002ea8:	687a      	ldr	r2, [r7, #4]
 8002eaa:	429a      	cmp	r2, r3
 8002eac:	d105      	bne.n	8002eba <vQueueAddToRegistry+0x52>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8002eae:	697b      	ldr	r3, [r7, #20]
 8002eb0:	00db      	lsls	r3, r3, #3
 8002eb2:	4a17      	ldr	r2, [pc, #92]	; (8002f10 <vQueueAddToRegistry+0xa8>)
 8002eb4:	4413      	add	r3, r2
 8002eb6:	613b      	str	r3, [r7, #16]
                    break;
 8002eb8:	e013      	b.n	8002ee2 <vQueueAddToRegistry+0x7a>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 8002eba:	693b      	ldr	r3, [r7, #16]
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d10a      	bne.n	8002ed6 <vQueueAddToRegistry+0x6e>
 8002ec0:	4a13      	ldr	r2, [pc, #76]	; (8002f10 <vQueueAddToRegistry+0xa8>)
 8002ec2:	697b      	ldr	r3, [r7, #20]
 8002ec4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d104      	bne.n	8002ed6 <vQueueAddToRegistry+0x6e>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8002ecc:	697b      	ldr	r3, [r7, #20]
 8002ece:	00db      	lsls	r3, r3, #3
 8002ed0:	4a0f      	ldr	r2, [pc, #60]	; (8002f10 <vQueueAddToRegistry+0xa8>)
 8002ed2:	4413      	add	r3, r2
 8002ed4:	613b      	str	r3, [r7, #16]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002ed6:	697b      	ldr	r3, [r7, #20]
 8002ed8:	3301      	adds	r3, #1
 8002eda:	617b      	str	r3, [r7, #20]
 8002edc:	697b      	ldr	r3, [r7, #20]
 8002ede:	2b07      	cmp	r3, #7
 8002ee0:	d9dd      	bls.n	8002e9e <vQueueAddToRegistry+0x36>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 8002ee2:	693b      	ldr	r3, [r7, #16]
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d00f      	beq.n	8002f08 <vQueueAddToRegistry+0xa0>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 8002ee8:	693b      	ldr	r3, [r7, #16]
 8002eea:	683a      	ldr	r2, [r7, #0]
 8002eec:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 8002eee:	693b      	ldr	r3, [r7, #16]
 8002ef0:	687a      	ldr	r2, [r7, #4]
 8002ef2:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	f003 fdda 	bl	8006ab0 <SEGGER_SYSVIEW_ShrinkId>
 8002efc:	4601      	mov	r1, r0
 8002efe:	683b      	ldr	r3, [r7, #0]
 8002f00:	461a      	mov	r2, r3
 8002f02:	2071      	movs	r0, #113	; 0x71
 8002f04:	f003 f84e 	bl	8005fa4 <SEGGER_SYSVIEW_RecordU32x2>
        }
    }
 8002f08:	bf00      	nop
 8002f0a:	3718      	adds	r7, #24
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	bd80      	pop	{r7, pc}
 8002f10:	200000e4 	.word	0x200000e4

08002f14 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8002f14:	b580      	push	{r7, lr}
 8002f16:	b086      	sub	sp, #24
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	60f8      	str	r0, [r7, #12]
 8002f1c:	60b9      	str	r1, [r7, #8]
 8002f1e:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8002f24:	f001 fbce 	bl	80046c4 <vPortEnterCritical>
 8002f28:	697b      	ldr	r3, [r7, #20]
 8002f2a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002f2e:	b25b      	sxtb	r3, r3
 8002f30:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002f34:	d103      	bne.n	8002f3e <vQueueWaitForMessageRestricted+0x2a>
 8002f36:	697b      	ldr	r3, [r7, #20]
 8002f38:	2200      	movs	r2, #0
 8002f3a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002f3e:	697b      	ldr	r3, [r7, #20]
 8002f40:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002f44:	b25b      	sxtb	r3, r3
 8002f46:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002f4a:	d103      	bne.n	8002f54 <vQueueWaitForMessageRestricted+0x40>
 8002f4c:	697b      	ldr	r3, [r7, #20]
 8002f4e:	2200      	movs	r2, #0
 8002f50:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002f54:	f001 fbe6 	bl	8004724 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8002f58:	697b      	ldr	r3, [r7, #20]
 8002f5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d106      	bne.n	8002f6e <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8002f60:	697b      	ldr	r3, [r7, #20]
 8002f62:	3324      	adds	r3, #36	; 0x24
 8002f64:	687a      	ldr	r2, [r7, #4]
 8002f66:	68b9      	ldr	r1, [r7, #8]
 8002f68:	4618      	mov	r0, r3
 8002f6a:	f000 fc8b 	bl	8003884 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8002f6e:	6978      	ldr	r0, [r7, #20]
 8002f70:	f7ff ff12 	bl	8002d98 <prvUnlockQueue>
    }
 8002f74:	bf00      	nop
 8002f76:	3718      	adds	r7, #24
 8002f78:	46bd      	mov	sp, r7
 8002f7a:	bd80      	pop	{r7, pc}

08002f7c <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	b08c      	sub	sp, #48	; 0x30
 8002f80:	af04      	add	r7, sp, #16
 8002f82:	60f8      	str	r0, [r7, #12]
 8002f84:	60b9      	str	r1, [r7, #8]
 8002f86:	603b      	str	r3, [r7, #0]
 8002f88:	4613      	mov	r3, r2
 8002f8a:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
        {
            StackType_t * pxStack;

            /* Allocate space for the stack used by the task being created. */
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002f8c:	88fb      	ldrh	r3, [r7, #6]
 8002f8e:	009b      	lsls	r3, r3, #2
 8002f90:	4618      	mov	r0, r3
 8002f92:	f001 fcc3 	bl	800491c <pvPortMalloc>
 8002f96:	6178      	str	r0, [r7, #20]

            if( pxStack != NULL )
 8002f98:	697b      	ldr	r3, [r7, #20]
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d013      	beq.n	8002fc6 <xTaskCreate+0x4a>
            {
                /* Allocate space for the TCB. */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002f9e:	2058      	movs	r0, #88	; 0x58
 8002fa0:	f001 fcbc 	bl	800491c <pvPortMalloc>
 8002fa4:	61f8      	str	r0, [r7, #28]

                if( pxNewTCB != NULL )
 8002fa6:	69fb      	ldr	r3, [r7, #28]
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d008      	beq.n	8002fbe <xTaskCreate+0x42>
                {
                    memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 8002fac:	2258      	movs	r2, #88	; 0x58
 8002fae:	2100      	movs	r1, #0
 8002fb0:	69f8      	ldr	r0, [r7, #28]
 8002fb2:	f003 ff1b 	bl	8006dec <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 8002fb6:	69fb      	ldr	r3, [r7, #28]
 8002fb8:	697a      	ldr	r2, [r7, #20]
 8002fba:	631a      	str	r2, [r3, #48]	; 0x30
 8002fbc:	e005      	b.n	8002fca <xTaskCreate+0x4e>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 8002fbe:	6978      	ldr	r0, [r7, #20]
 8002fc0:	f001 fd66 	bl	8004a90 <vPortFree>
 8002fc4:	e001      	b.n	8002fca <xTaskCreate+0x4e>
                }
            }
            else
            {
                pxNewTCB = NULL;
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	61fb      	str	r3, [r7, #28]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8002fca:	69fb      	ldr	r3, [r7, #28]
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d013      	beq.n	8002ff8 <xTaskCreate+0x7c>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002fd0:	88fa      	ldrh	r2, [r7, #6]
 8002fd2:	2300      	movs	r3, #0
 8002fd4:	9303      	str	r3, [sp, #12]
 8002fd6:	69fb      	ldr	r3, [r7, #28]
 8002fd8:	9302      	str	r3, [sp, #8]
 8002fda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fdc:	9301      	str	r3, [sp, #4]
 8002fde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fe0:	9300      	str	r3, [sp, #0]
 8002fe2:	683b      	ldr	r3, [r7, #0]
 8002fe4:	68b9      	ldr	r1, [r7, #8]
 8002fe6:	68f8      	ldr	r0, [r7, #12]
 8002fe8:	f000 f80e 	bl	8003008 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8002fec:	69f8      	ldr	r0, [r7, #28]
 8002fee:	f000 f899 	bl	8003124 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8002ff2:	2301      	movs	r3, #1
 8002ff4:	61bb      	str	r3, [r7, #24]
 8002ff6:	e002      	b.n	8002ffe <xTaskCreate+0x82>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002ff8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002ffc:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8002ffe:	69bb      	ldr	r3, [r7, #24]
    }
 8003000:	4618      	mov	r0, r3
 8003002:	3720      	adds	r7, #32
 8003004:	46bd      	mov	sp, r7
 8003006:	bd80      	pop	{r7, pc}

08003008 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8003008:	b580      	push	{r7, lr}
 800300a:	b088      	sub	sp, #32
 800300c:	af00      	add	r7, sp, #0
 800300e:	60f8      	str	r0, [r7, #12]
 8003010:	60b9      	str	r1, [r7, #8]
 8003012:	607a      	str	r2, [r7, #4]
 8003014:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003016:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003018:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	009b      	lsls	r3, r3, #2
 800301e:	461a      	mov	r2, r3
 8003020:	21a5      	movs	r1, #165	; 0xa5
 8003022:	f003 fee3 	bl	8006dec <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003026:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003028:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003030:	3b01      	subs	r3, #1
 8003032:	009b      	lsls	r3, r3, #2
 8003034:	4413      	add	r3, r2
 8003036:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003038:	69bb      	ldr	r3, [r7, #24]
 800303a:	f023 0307 	bic.w	r3, r3, #7
 800303e:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003040:	69bb      	ldr	r3, [r7, #24]
 8003042:	f003 0307 	and.w	r3, r3, #7
 8003046:	2b00      	cmp	r3, #0
 8003048:	d00a      	beq.n	8003060 <prvInitialiseNewTask+0x58>
        __asm volatile
 800304a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800304e:	f383 8811 	msr	BASEPRI, r3
 8003052:	f3bf 8f6f 	isb	sy
 8003056:	f3bf 8f4f 	dsb	sy
 800305a:	617b      	str	r3, [r7, #20]
    }
 800305c:	bf00      	nop
 800305e:	e7fe      	b.n	800305e <prvInitialiseNewTask+0x56>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8003060:	68bb      	ldr	r3, [r7, #8]
 8003062:	2b00      	cmp	r3, #0
 8003064:	d01e      	beq.n	80030a4 <prvInitialiseNewTask+0x9c>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003066:	2300      	movs	r3, #0
 8003068:	61fb      	str	r3, [r7, #28]
 800306a:	e012      	b.n	8003092 <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800306c:	68ba      	ldr	r2, [r7, #8]
 800306e:	69fb      	ldr	r3, [r7, #28]
 8003070:	4413      	add	r3, r2
 8003072:	7819      	ldrb	r1, [r3, #0]
 8003074:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003076:	69fb      	ldr	r3, [r7, #28]
 8003078:	4413      	add	r3, r2
 800307a:	3334      	adds	r3, #52	; 0x34
 800307c:	460a      	mov	r2, r1
 800307e:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8003080:	68ba      	ldr	r2, [r7, #8]
 8003082:	69fb      	ldr	r3, [r7, #28]
 8003084:	4413      	add	r3, r2
 8003086:	781b      	ldrb	r3, [r3, #0]
 8003088:	2b00      	cmp	r3, #0
 800308a:	d006      	beq.n	800309a <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800308c:	69fb      	ldr	r3, [r7, #28]
 800308e:	3301      	adds	r3, #1
 8003090:	61fb      	str	r3, [r7, #28]
 8003092:	69fb      	ldr	r3, [r7, #28]
 8003094:	2b09      	cmp	r3, #9
 8003096:	d9e9      	bls.n	800306c <prvInitialiseNewTask+0x64>
 8003098:	e000      	b.n	800309c <prvInitialiseNewTask+0x94>
            {
                break;
 800309a:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800309c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800309e:	2200      	movs	r2, #0
 80030a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 80030a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030a6:	2b07      	cmp	r3, #7
 80030a8:	d90a      	bls.n	80030c0 <prvInitialiseNewTask+0xb8>
        __asm volatile
 80030aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030ae:	f383 8811 	msr	BASEPRI, r3
 80030b2:	f3bf 8f6f 	isb	sy
 80030b6:	f3bf 8f4f 	dsb	sy
 80030ba:	613b      	str	r3, [r7, #16]
    }
 80030bc:	bf00      	nop
 80030be:	e7fe      	b.n	80030be <prvInitialiseNewTask+0xb6>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80030c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030c2:	2b07      	cmp	r3, #7
 80030c4:	d901      	bls.n	80030ca <prvInitialiseNewTask+0xc2>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80030c6:	2307      	movs	r3, #7
 80030c8:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 80030ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030cc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80030ce:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 80030d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030d2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80030d4:	649a      	str	r2, [r3, #72]	; 0x48
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80030d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030d8:	3304      	adds	r3, #4
 80030da:	4618      	mov	r0, r3
 80030dc:	f7ff fbc6 	bl	800286c <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80030e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030e2:	3318      	adds	r3, #24
 80030e4:	4618      	mov	r0, r3
 80030e6:	f7ff fbc1 	bl	800286c <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80030ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80030ee:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80030f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030f2:	f1c3 0208 	rsb	r2, r3, #8
 80030f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030f8:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80030fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80030fe:	625a      	str	r2, [r3, #36]	; 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003100:	683a      	ldr	r2, [r7, #0]
 8003102:	68f9      	ldr	r1, [r7, #12]
 8003104:	69b8      	ldr	r0, [r7, #24]
 8003106:	f001 f933 	bl	8004370 <pxPortInitialiseStack>
 800310a:	4602      	mov	r2, r0
 800310c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800310e:	601a      	str	r2, [r3, #0]
        }
        #endif /* portHAS_STACK_OVERFLOW_CHECKING */
    }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8003110:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003112:	2b00      	cmp	r3, #0
 8003114:	d002      	beq.n	800311c <prvInitialiseNewTask+0x114>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003116:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003118:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800311a:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800311c:	bf00      	nop
 800311e:	3720      	adds	r7, #32
 8003120:	46bd      	mov	sp, r7
 8003122:	bd80      	pop	{r7, pc}

08003124 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8003124:	b5b0      	push	{r4, r5, r7, lr}
 8003126:	b086      	sub	sp, #24
 8003128:	af02      	add	r7, sp, #8
 800312a:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 800312c:	f001 faca 	bl	80046c4 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8003130:	4b49      	ldr	r3, [pc, #292]	; (8003258 <prvAddNewTaskToReadyList+0x134>)
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	3301      	adds	r3, #1
 8003136:	4a48      	ldr	r2, [pc, #288]	; (8003258 <prvAddNewTaskToReadyList+0x134>)
 8003138:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 800313a:	4b48      	ldr	r3, [pc, #288]	; (800325c <prvAddNewTaskToReadyList+0x138>)
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	2b00      	cmp	r3, #0
 8003140:	d109      	bne.n	8003156 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8003142:	4a46      	ldr	r2, [pc, #280]	; (800325c <prvAddNewTaskToReadyList+0x138>)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003148:	4b43      	ldr	r3, [pc, #268]	; (8003258 <prvAddNewTaskToReadyList+0x134>)
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	2b01      	cmp	r3, #1
 800314e:	d110      	bne.n	8003172 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8003150:	f000 fd52 	bl	8003bf8 <prvInitialiseTaskLists>
 8003154:	e00d      	b.n	8003172 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8003156:	4b42      	ldr	r3, [pc, #264]	; (8003260 <prvAddNewTaskToReadyList+0x13c>)
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	2b00      	cmp	r3, #0
 800315c:	d109      	bne.n	8003172 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800315e:	4b3f      	ldr	r3, [pc, #252]	; (800325c <prvAddNewTaskToReadyList+0x138>)
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003168:	429a      	cmp	r2, r3
 800316a:	d802      	bhi.n	8003172 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 800316c:	4a3b      	ldr	r2, [pc, #236]	; (800325c <prvAddNewTaskToReadyList+0x138>)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8003172:	4b3c      	ldr	r3, [pc, #240]	; (8003264 <prvAddNewTaskToReadyList+0x140>)
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	3301      	adds	r3, #1
 8003178:	4a3a      	ldr	r2, [pc, #232]	; (8003264 <prvAddNewTaskToReadyList+0x140>)
 800317a:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
        {
            /* Add a counter into the TCB for tracing only. */
            pxNewTCB->uxTCBNumber = uxTaskNumber;
 800317c:	4b39      	ldr	r3, [pc, #228]	; (8003264 <prvAddNewTaskToReadyList+0x140>)
 800317e:	681a      	ldr	r2, [r3, #0]
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	641a      	str	r2, [r3, #64]	; 0x40
        }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	2b00      	cmp	r3, #0
 8003188:	d016      	beq.n	80031b8 <prvAddNewTaskToReadyList+0x94>
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	4618      	mov	r0, r3
 800318e:	f003 fbc9 	bl	8006924 <SEGGER_SYSVIEW_OnTaskCreate>
 8003192:	6878      	ldr	r0, [r7, #4]
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031a2:	461d      	mov	r5, r3
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	461c      	mov	r4, r3
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031ae:	1ae3      	subs	r3, r4, r3
 80031b0:	9300      	str	r3, [sp, #0]
 80031b2:	462b      	mov	r3, r5
 80031b4:	f001 fe2e 	bl	8004e14 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	4618      	mov	r0, r3
 80031bc:	f003 fc36 	bl	8006a2c <SEGGER_SYSVIEW_OnTaskStartReady>
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031c4:	2201      	movs	r2, #1
 80031c6:	409a      	lsls	r2, r3
 80031c8:	4b27      	ldr	r3, [pc, #156]	; (8003268 <prvAddNewTaskToReadyList+0x144>)
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	4313      	orrs	r3, r2
 80031ce:	4a26      	ldr	r2, [pc, #152]	; (8003268 <prvAddNewTaskToReadyList+0x144>)
 80031d0:	6013      	str	r3, [r2, #0]
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031d6:	4925      	ldr	r1, [pc, #148]	; (800326c <prvAddNewTaskToReadyList+0x148>)
 80031d8:	4613      	mov	r3, r2
 80031da:	009b      	lsls	r3, r3, #2
 80031dc:	4413      	add	r3, r2
 80031de:	009b      	lsls	r3, r3, #2
 80031e0:	440b      	add	r3, r1
 80031e2:	3304      	adds	r3, #4
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	60fb      	str	r3, [r7, #12]
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	68fa      	ldr	r2, [r7, #12]
 80031ec:	609a      	str	r2, [r3, #8]
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	689a      	ldr	r2, [r3, #8]
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	60da      	str	r2, [r3, #12]
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	689b      	ldr	r3, [r3, #8]
 80031fa:	687a      	ldr	r2, [r7, #4]
 80031fc:	3204      	adds	r2, #4
 80031fe:	605a      	str	r2, [r3, #4]
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	1d1a      	adds	r2, r3, #4
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	609a      	str	r2, [r3, #8]
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800320c:	4613      	mov	r3, r2
 800320e:	009b      	lsls	r3, r3, #2
 8003210:	4413      	add	r3, r2
 8003212:	009b      	lsls	r3, r3, #2
 8003214:	4a15      	ldr	r2, [pc, #84]	; (800326c <prvAddNewTaskToReadyList+0x148>)
 8003216:	441a      	add	r2, r3
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	615a      	str	r2, [r3, #20]
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003220:	4912      	ldr	r1, [pc, #72]	; (800326c <prvAddNewTaskToReadyList+0x148>)
 8003222:	4613      	mov	r3, r2
 8003224:	009b      	lsls	r3, r3, #2
 8003226:	4413      	add	r3, r2
 8003228:	009b      	lsls	r3, r3, #2
 800322a:	440b      	add	r3, r1
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	1c59      	adds	r1, r3, #1
 8003230:	480e      	ldr	r0, [pc, #56]	; (800326c <prvAddNewTaskToReadyList+0x148>)
 8003232:	4613      	mov	r3, r2
 8003234:	009b      	lsls	r3, r3, #2
 8003236:	4413      	add	r3, r2
 8003238:	009b      	lsls	r3, r3, #2
 800323a:	4403      	add	r3, r0
 800323c:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 800323e:	f001 fa71 	bl	8004724 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8003242:	4b07      	ldr	r3, [pc, #28]	; (8003260 <prvAddNewTaskToReadyList+0x13c>)
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	2b00      	cmp	r3, #0
 8003248:	d001      	beq.n	800324e <prvAddNewTaskToReadyList+0x12a>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800324a:	4b04      	ldr	r3, [pc, #16]	; (800325c <prvAddNewTaskToReadyList+0x138>)
 800324c:	681b      	ldr	r3, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800324e:	bf00      	nop
 8003250:	3710      	adds	r7, #16
 8003252:	46bd      	mov	sp, r7
 8003254:	bdb0      	pop	{r4, r5, r7, pc}
 8003256:	bf00      	nop
 8003258:	20000238 	.word	0x20000238
 800325c:	20000124 	.word	0x20000124
 8003260:	20000244 	.word	0x20000244
 8003264:	20000254 	.word	0x20000254
 8003268:	20000240 	.word	0x20000240
 800326c:	20000128 	.word	0x20000128

08003270 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003270:	b580      	push	{r7, lr}
 8003272:	b086      	sub	sp, #24
 8003274:	af02      	add	r7, sp, #8
        }
    }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
    {
        /* The Idle task is being created using dynamically allocated RAM. */
        xReturn = xTaskCreate( prvIdleTask,
 8003276:	4b27      	ldr	r3, [pc, #156]	; (8003314 <vTaskStartScheduler+0xa4>)
 8003278:	9301      	str	r3, [sp, #4]
 800327a:	2300      	movs	r3, #0
 800327c:	9300      	str	r3, [sp, #0]
 800327e:	2300      	movs	r3, #0
 8003280:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003284:	4924      	ldr	r1, [pc, #144]	; (8003318 <vTaskStartScheduler+0xa8>)
 8003286:	4825      	ldr	r0, [pc, #148]	; (800331c <vTaskStartScheduler+0xac>)
 8003288:	f7ff fe78 	bl	8002f7c <xTaskCreate>
 800328c:	60f8      	str	r0, [r7, #12]
    }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	2b01      	cmp	r3, #1
 8003292:	d102      	bne.n	800329a <vTaskStartScheduler+0x2a>
        {
            xReturn = xTimerCreateTimerTask();
 8003294:	f000 fde8 	bl	8003e68 <xTimerCreateTimerTask>
 8003298:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	2b01      	cmp	r3, #1
 800329e:	d124      	bne.n	80032ea <vTaskStartScheduler+0x7a>
        __asm volatile
 80032a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032a4:	f383 8811 	msr	BASEPRI, r3
 80032a8:	f3bf 8f6f 	isb	sy
 80032ac:	f3bf 8f4f 	dsb	sy
 80032b0:	60bb      	str	r3, [r7, #8]
    }
 80032b2:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 80032b4:	4b1a      	ldr	r3, [pc, #104]	; (8003320 <vTaskStartScheduler+0xb0>)
 80032b6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80032ba:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 80032bc:	4b19      	ldr	r3, [pc, #100]	; (8003324 <vTaskStartScheduler+0xb4>)
 80032be:	2201      	movs	r2, #1
 80032c0:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80032c2:	4b19      	ldr	r3, [pc, #100]	; (8003328 <vTaskStartScheduler+0xb8>)
 80032c4:	2200      	movs	r2, #0
 80032c6:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 80032c8:	4b18      	ldr	r3, [pc, #96]	; (800332c <vTaskStartScheduler+0xbc>)
 80032ca:	681a      	ldr	r2, [r3, #0]
 80032cc:	4b11      	ldr	r3, [pc, #68]	; (8003314 <vTaskStartScheduler+0xa4>)
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	429a      	cmp	r2, r3
 80032d2:	d102      	bne.n	80032da <vTaskStartScheduler+0x6a>
 80032d4:	f003 fb0a 	bl	80068ec <SEGGER_SYSVIEW_OnIdle>
 80032d8:	e004      	b.n	80032e4 <vTaskStartScheduler+0x74>
 80032da:	4b14      	ldr	r3, [pc, #80]	; (800332c <vTaskStartScheduler+0xbc>)
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	4618      	mov	r0, r3
 80032e0:	f003 fb62 	bl	80069a8 <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        xPortStartScheduler();
 80032e4:	f001 f8ce 	bl	8004484 <xPortStartScheduler>
 80032e8:	e00e      	b.n	8003308 <vTaskStartScheduler+0x98>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80032f0:	d10a      	bne.n	8003308 <vTaskStartScheduler+0x98>
        __asm volatile
 80032f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032f6:	f383 8811 	msr	BASEPRI, r3
 80032fa:	f3bf 8f6f 	isb	sy
 80032fe:	f3bf 8f4f 	dsb	sy
 8003302:	607b      	str	r3, [r7, #4]
    }
 8003304:	bf00      	nop
 8003306:	e7fe      	b.n	8003306 <vTaskStartScheduler+0x96>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8003308:	4b09      	ldr	r3, [pc, #36]	; (8003330 <vTaskStartScheduler+0xc0>)
 800330a:	681b      	ldr	r3, [r3, #0]
}
 800330c:	bf00      	nop
 800330e:	3710      	adds	r7, #16
 8003310:	46bd      	mov	sp, r7
 8003312:	bd80      	pop	{r7, pc}
 8003314:	2000025c 	.word	0x2000025c
 8003318:	0800775c 	.word	0x0800775c
 800331c:	08003bd5 	.word	0x08003bd5
 8003320:	20000258 	.word	0x20000258
 8003324:	20000244 	.word	0x20000244
 8003328:	2000023c 	.word	0x2000023c
 800332c:	20000124 	.word	0x20000124
 8003330:	2000000c 	.word	0x2000000c

08003334 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003334:	b480      	push	{r7}
 8003336:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8003338:	4b04      	ldr	r3, [pc, #16]	; (800334c <vTaskSuspendAll+0x18>)
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	3301      	adds	r3, #1
 800333e:	4a03      	ldr	r2, [pc, #12]	; (800334c <vTaskSuspendAll+0x18>)
 8003340:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8003342:	bf00      	nop
 8003344:	46bd      	mov	sp, r7
 8003346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334a:	4770      	bx	lr
 800334c:	20000260 	.word	0x20000260

08003350 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003350:	b580      	push	{r7, lr}
 8003352:	b088      	sub	sp, #32
 8003354:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8003356:	2300      	movs	r3, #0
 8003358:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 800335a:	2300      	movs	r3, #0
 800335c:	617b      	str	r3, [r7, #20]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 800335e:	4b6d      	ldr	r3, [pc, #436]	; (8003514 <xTaskResumeAll+0x1c4>)
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	2b00      	cmp	r3, #0
 8003364:	d10a      	bne.n	800337c <xTaskResumeAll+0x2c>
        __asm volatile
 8003366:	f04f 0350 	mov.w	r3, #80	; 0x50
 800336a:	f383 8811 	msr	BASEPRI, r3
 800336e:	f3bf 8f6f 	isb	sy
 8003372:	f3bf 8f4f 	dsb	sy
 8003376:	607b      	str	r3, [r7, #4]
    }
 8003378:	bf00      	nop
 800337a:	e7fe      	b.n	800337a <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 800337c:	f001 f9a2 	bl	80046c4 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8003380:	4b64      	ldr	r3, [pc, #400]	; (8003514 <xTaskResumeAll+0x1c4>)
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	3b01      	subs	r3, #1
 8003386:	4a63      	ldr	r2, [pc, #396]	; (8003514 <xTaskResumeAll+0x1c4>)
 8003388:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800338a:	4b62      	ldr	r3, [pc, #392]	; (8003514 <xTaskResumeAll+0x1c4>)
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	2b00      	cmp	r3, #0
 8003390:	f040 80b8 	bne.w	8003504 <xTaskResumeAll+0x1b4>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003394:	4b60      	ldr	r3, [pc, #384]	; (8003518 <xTaskResumeAll+0x1c8>)
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	2b00      	cmp	r3, #0
 800339a:	f000 80b3 	beq.w	8003504 <xTaskResumeAll+0x1b4>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800339e:	e08e      	b.n	80034be <xTaskResumeAll+0x16e>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80033a0:	4b5e      	ldr	r3, [pc, #376]	; (800351c <xTaskResumeAll+0x1cc>)
 80033a2:	68db      	ldr	r3, [r3, #12]
 80033a4:	68db      	ldr	r3, [r3, #12]
 80033a6:	61fb      	str	r3, [r7, #28]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 80033a8:	69fb      	ldr	r3, [r7, #28]
 80033aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033ac:	613b      	str	r3, [r7, #16]
 80033ae:	69fb      	ldr	r3, [r7, #28]
 80033b0:	69db      	ldr	r3, [r3, #28]
 80033b2:	69fa      	ldr	r2, [r7, #28]
 80033b4:	6a12      	ldr	r2, [r2, #32]
 80033b6:	609a      	str	r2, [r3, #8]
 80033b8:	69fb      	ldr	r3, [r7, #28]
 80033ba:	6a1b      	ldr	r3, [r3, #32]
 80033bc:	69fa      	ldr	r2, [r7, #28]
 80033be:	69d2      	ldr	r2, [r2, #28]
 80033c0:	605a      	str	r2, [r3, #4]
 80033c2:	693b      	ldr	r3, [r7, #16]
 80033c4:	685a      	ldr	r2, [r3, #4]
 80033c6:	69fb      	ldr	r3, [r7, #28]
 80033c8:	3318      	adds	r3, #24
 80033ca:	429a      	cmp	r2, r3
 80033cc:	d103      	bne.n	80033d6 <xTaskResumeAll+0x86>
 80033ce:	69fb      	ldr	r3, [r7, #28]
 80033d0:	6a1a      	ldr	r2, [r3, #32]
 80033d2:	693b      	ldr	r3, [r7, #16]
 80033d4:	605a      	str	r2, [r3, #4]
 80033d6:	69fb      	ldr	r3, [r7, #28]
 80033d8:	2200      	movs	r2, #0
 80033da:	629a      	str	r2, [r3, #40]	; 0x28
 80033dc:	693b      	ldr	r3, [r7, #16]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	1e5a      	subs	r2, r3, #1
 80033e2:	693b      	ldr	r3, [r7, #16]
 80033e4:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 80033e6:	69fb      	ldr	r3, [r7, #28]
 80033e8:	695b      	ldr	r3, [r3, #20]
 80033ea:	60fb      	str	r3, [r7, #12]
 80033ec:	69fb      	ldr	r3, [r7, #28]
 80033ee:	689b      	ldr	r3, [r3, #8]
 80033f0:	69fa      	ldr	r2, [r7, #28]
 80033f2:	68d2      	ldr	r2, [r2, #12]
 80033f4:	609a      	str	r2, [r3, #8]
 80033f6:	69fb      	ldr	r3, [r7, #28]
 80033f8:	68db      	ldr	r3, [r3, #12]
 80033fa:	69fa      	ldr	r2, [r7, #28]
 80033fc:	6892      	ldr	r2, [r2, #8]
 80033fe:	605a      	str	r2, [r3, #4]
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	685a      	ldr	r2, [r3, #4]
 8003404:	69fb      	ldr	r3, [r7, #28]
 8003406:	3304      	adds	r3, #4
 8003408:	429a      	cmp	r2, r3
 800340a:	d103      	bne.n	8003414 <xTaskResumeAll+0xc4>
 800340c:	69fb      	ldr	r3, [r7, #28]
 800340e:	68da      	ldr	r2, [r3, #12]
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	605a      	str	r2, [r3, #4]
 8003414:	69fb      	ldr	r3, [r7, #28]
 8003416:	2200      	movs	r2, #0
 8003418:	615a      	str	r2, [r3, #20]
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	1e5a      	subs	r2, r3, #1
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 8003424:	69fb      	ldr	r3, [r7, #28]
 8003426:	4618      	mov	r0, r3
 8003428:	f003 fb00 	bl	8006a2c <SEGGER_SYSVIEW_OnTaskStartReady>
 800342c:	69fb      	ldr	r3, [r7, #28]
 800342e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003430:	2201      	movs	r2, #1
 8003432:	409a      	lsls	r2, r3
 8003434:	4b3a      	ldr	r3, [pc, #232]	; (8003520 <xTaskResumeAll+0x1d0>)
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	4313      	orrs	r3, r2
 800343a:	4a39      	ldr	r2, [pc, #228]	; (8003520 <xTaskResumeAll+0x1d0>)
 800343c:	6013      	str	r3, [r2, #0]
 800343e:	69fb      	ldr	r3, [r7, #28]
 8003440:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003442:	4938      	ldr	r1, [pc, #224]	; (8003524 <xTaskResumeAll+0x1d4>)
 8003444:	4613      	mov	r3, r2
 8003446:	009b      	lsls	r3, r3, #2
 8003448:	4413      	add	r3, r2
 800344a:	009b      	lsls	r3, r3, #2
 800344c:	440b      	add	r3, r1
 800344e:	3304      	adds	r3, #4
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	60bb      	str	r3, [r7, #8]
 8003454:	69fb      	ldr	r3, [r7, #28]
 8003456:	68ba      	ldr	r2, [r7, #8]
 8003458:	609a      	str	r2, [r3, #8]
 800345a:	68bb      	ldr	r3, [r7, #8]
 800345c:	689a      	ldr	r2, [r3, #8]
 800345e:	69fb      	ldr	r3, [r7, #28]
 8003460:	60da      	str	r2, [r3, #12]
 8003462:	68bb      	ldr	r3, [r7, #8]
 8003464:	689b      	ldr	r3, [r3, #8]
 8003466:	69fa      	ldr	r2, [r7, #28]
 8003468:	3204      	adds	r2, #4
 800346a:	605a      	str	r2, [r3, #4]
 800346c:	69fb      	ldr	r3, [r7, #28]
 800346e:	1d1a      	adds	r2, r3, #4
 8003470:	68bb      	ldr	r3, [r7, #8]
 8003472:	609a      	str	r2, [r3, #8]
 8003474:	69fb      	ldr	r3, [r7, #28]
 8003476:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003478:	4613      	mov	r3, r2
 800347a:	009b      	lsls	r3, r3, #2
 800347c:	4413      	add	r3, r2
 800347e:	009b      	lsls	r3, r3, #2
 8003480:	4a28      	ldr	r2, [pc, #160]	; (8003524 <xTaskResumeAll+0x1d4>)
 8003482:	441a      	add	r2, r3
 8003484:	69fb      	ldr	r3, [r7, #28]
 8003486:	615a      	str	r2, [r3, #20]
 8003488:	69fb      	ldr	r3, [r7, #28]
 800348a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800348c:	4925      	ldr	r1, [pc, #148]	; (8003524 <xTaskResumeAll+0x1d4>)
 800348e:	4613      	mov	r3, r2
 8003490:	009b      	lsls	r3, r3, #2
 8003492:	4413      	add	r3, r2
 8003494:	009b      	lsls	r3, r3, #2
 8003496:	440b      	add	r3, r1
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	1c59      	adds	r1, r3, #1
 800349c:	4821      	ldr	r0, [pc, #132]	; (8003524 <xTaskResumeAll+0x1d4>)
 800349e:	4613      	mov	r3, r2
 80034a0:	009b      	lsls	r3, r3, #2
 80034a2:	4413      	add	r3, r2
 80034a4:	009b      	lsls	r3, r3, #2
 80034a6:	4403      	add	r3, r0
 80034a8:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80034aa:	69fb      	ldr	r3, [r7, #28]
 80034ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034ae:	4b1e      	ldr	r3, [pc, #120]	; (8003528 <xTaskResumeAll+0x1d8>)
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034b4:	429a      	cmp	r2, r3
 80034b6:	d302      	bcc.n	80034be <xTaskResumeAll+0x16e>
                    {
                        xYieldPending = pdTRUE;
 80034b8:	4b1c      	ldr	r3, [pc, #112]	; (800352c <xTaskResumeAll+0x1dc>)
 80034ba:	2201      	movs	r2, #1
 80034bc:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80034be:	4b17      	ldr	r3, [pc, #92]	; (800351c <xTaskResumeAll+0x1cc>)
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	f47f af6c 	bne.w	80033a0 <xTaskResumeAll+0x50>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 80034c8:	69fb      	ldr	r3, [r7, #28]
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d001      	beq.n	80034d2 <xTaskResumeAll+0x182>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 80034ce:	f000 fc11 	bl	8003cf4 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80034d2:	4b17      	ldr	r3, [pc, #92]	; (8003530 <xTaskResumeAll+0x1e0>)
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	61bb      	str	r3, [r7, #24]

                    if( xPendedCounts > ( TickType_t ) 0U )
 80034d8:	69bb      	ldr	r3, [r7, #24]
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d010      	beq.n	8003500 <xTaskResumeAll+0x1b0>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 80034de:	f000 f84b 	bl	8003578 <xTaskIncrementTick>
 80034e2:	4603      	mov	r3, r0
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d002      	beq.n	80034ee <xTaskResumeAll+0x19e>
                            {
                                xYieldPending = pdTRUE;
 80034e8:	4b10      	ldr	r3, [pc, #64]	; (800352c <xTaskResumeAll+0x1dc>)
 80034ea:	2201      	movs	r2, #1
 80034ec:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 80034ee:	69bb      	ldr	r3, [r7, #24]
 80034f0:	3b01      	subs	r3, #1
 80034f2:	61bb      	str	r3, [r7, #24]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 80034f4:	69bb      	ldr	r3, [r7, #24]
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d1f1      	bne.n	80034de <xTaskResumeAll+0x18e>

                        xPendedTicks = 0;
 80034fa:	4b0d      	ldr	r3, [pc, #52]	; (8003530 <xTaskResumeAll+0x1e0>)
 80034fc:	2200      	movs	r2, #0
 80034fe:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8003500:	4b0a      	ldr	r3, [pc, #40]	; (800352c <xTaskResumeAll+0x1dc>)
 8003502:	681b      	ldr	r3, [r3, #0]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8003504:	f001 f90e 	bl	8004724 <vPortExitCritical>

    return xAlreadyYielded;
 8003508:	697b      	ldr	r3, [r7, #20]
}
 800350a:	4618      	mov	r0, r3
 800350c:	3720      	adds	r7, #32
 800350e:	46bd      	mov	sp, r7
 8003510:	bd80      	pop	{r7, pc}
 8003512:	bf00      	nop
 8003514:	20000260 	.word	0x20000260
 8003518:	20000238 	.word	0x20000238
 800351c:	200001f8 	.word	0x200001f8
 8003520:	20000240 	.word	0x20000240
 8003524:	20000128 	.word	0x20000128
 8003528:	20000124 	.word	0x20000124
 800352c:	2000024c 	.word	0x2000024c
 8003530:	20000248 	.word	0x20000248

08003534 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003534:	b480      	push	{r7}
 8003536:	b083      	sub	sp, #12
 8003538:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 800353a:	4b05      	ldr	r3, [pc, #20]	; (8003550 <xTaskGetTickCount+0x1c>)
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8003540:	687b      	ldr	r3, [r7, #4]
}
 8003542:	4618      	mov	r0, r3
 8003544:	370c      	adds	r7, #12
 8003546:	46bd      	mov	sp, r7
 8003548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354c:	4770      	bx	lr
 800354e:	bf00      	nop
 8003550:	2000023c 	.word	0x2000023c

08003554 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8003554:	b580      	push	{r7, lr}
 8003556:	b082      	sub	sp, #8
 8003558:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800355a:	f001 f99f 	bl	800489c <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800355e:	2300      	movs	r3, #0
 8003560:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 8003562:	4b04      	ldr	r3, [pc, #16]	; (8003574 <xTaskGetTickCountFromISR+0x20>)
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8003568:	683b      	ldr	r3, [r7, #0]
}
 800356a:	4618      	mov	r0, r3
 800356c:	3708      	adds	r7, #8
 800356e:	46bd      	mov	sp, r7
 8003570:	bd80      	pop	{r7, pc}
 8003572:	bf00      	nop
 8003574:	2000023c 	.word	0x2000023c

08003578 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003578:	b580      	push	{r7, lr}
 800357a:	b08a      	sub	sp, #40	; 0x28
 800357c:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 800357e:	2300      	movs	r3, #0
 8003580:	627b      	str	r3, [r7, #36]	; 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003582:	4b70      	ldr	r3, [pc, #448]	; (8003744 <xTaskIncrementTick+0x1cc>)
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	2b00      	cmp	r3, #0
 8003588:	f040 80d1 	bne.w	800372e <xTaskIncrementTick+0x1b6>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800358c:	4b6e      	ldr	r3, [pc, #440]	; (8003748 <xTaskIncrementTick+0x1d0>)
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	3301      	adds	r3, #1
 8003592:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8003594:	4a6c      	ldr	r2, [pc, #432]	; (8003748 <xTaskIncrementTick+0x1d0>)
 8003596:	6a3b      	ldr	r3, [r7, #32]
 8003598:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800359a:	6a3b      	ldr	r3, [r7, #32]
 800359c:	2b00      	cmp	r3, #0
 800359e:	d120      	bne.n	80035e2 <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 80035a0:	4b6a      	ldr	r3, [pc, #424]	; (800374c <xTaskIncrementTick+0x1d4>)
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d00a      	beq.n	80035c0 <xTaskIncrementTick+0x48>
        __asm volatile
 80035aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035ae:	f383 8811 	msr	BASEPRI, r3
 80035b2:	f3bf 8f6f 	isb	sy
 80035b6:	f3bf 8f4f 	dsb	sy
 80035ba:	607b      	str	r3, [r7, #4]
    }
 80035bc:	bf00      	nop
 80035be:	e7fe      	b.n	80035be <xTaskIncrementTick+0x46>
 80035c0:	4b62      	ldr	r3, [pc, #392]	; (800374c <xTaskIncrementTick+0x1d4>)
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	61fb      	str	r3, [r7, #28]
 80035c6:	4b62      	ldr	r3, [pc, #392]	; (8003750 <xTaskIncrementTick+0x1d8>)
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	4a60      	ldr	r2, [pc, #384]	; (800374c <xTaskIncrementTick+0x1d4>)
 80035cc:	6013      	str	r3, [r2, #0]
 80035ce:	4a60      	ldr	r2, [pc, #384]	; (8003750 <xTaskIncrementTick+0x1d8>)
 80035d0:	69fb      	ldr	r3, [r7, #28]
 80035d2:	6013      	str	r3, [r2, #0]
 80035d4:	4b5f      	ldr	r3, [pc, #380]	; (8003754 <xTaskIncrementTick+0x1dc>)
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	3301      	adds	r3, #1
 80035da:	4a5e      	ldr	r2, [pc, #376]	; (8003754 <xTaskIncrementTick+0x1dc>)
 80035dc:	6013      	str	r3, [r2, #0]
 80035de:	f000 fb89 	bl	8003cf4 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 80035e2:	4b5d      	ldr	r3, [pc, #372]	; (8003758 <xTaskIncrementTick+0x1e0>)
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	6a3a      	ldr	r2, [r7, #32]
 80035e8:	429a      	cmp	r2, r3
 80035ea:	f0c0 80a5 	bcc.w	8003738 <xTaskIncrementTick+0x1c0>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80035ee:	4b57      	ldr	r3, [pc, #348]	; (800374c <xTaskIncrementTick+0x1d4>)
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d104      	bne.n	8003602 <xTaskIncrementTick+0x8a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80035f8:	4b57      	ldr	r3, [pc, #348]	; (8003758 <xTaskIncrementTick+0x1e0>)
 80035fa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80035fe:	601a      	str	r2, [r3, #0]
                    break;
 8003600:	e09a      	b.n	8003738 <xTaskIncrementTick+0x1c0>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003602:	4b52      	ldr	r3, [pc, #328]	; (800374c <xTaskIncrementTick+0x1d4>)
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	68db      	ldr	r3, [r3, #12]
 8003608:	68db      	ldr	r3, [r3, #12]
 800360a:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800360c:	69bb      	ldr	r3, [r7, #24]
 800360e:	685b      	ldr	r3, [r3, #4]
 8003610:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 8003612:	6a3a      	ldr	r2, [r7, #32]
 8003614:	697b      	ldr	r3, [r7, #20]
 8003616:	429a      	cmp	r2, r3
 8003618:	d203      	bcs.n	8003622 <xTaskIncrementTick+0xaa>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 800361a:	4a4f      	ldr	r2, [pc, #316]	; (8003758 <xTaskIncrementTick+0x1e0>)
 800361c:	697b      	ldr	r3, [r7, #20]
 800361e:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 8003620:	e08a      	b.n	8003738 <xTaskIncrementTick+0x1c0>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8003622:	69bb      	ldr	r3, [r7, #24]
 8003624:	695b      	ldr	r3, [r3, #20]
 8003626:	613b      	str	r3, [r7, #16]
 8003628:	69bb      	ldr	r3, [r7, #24]
 800362a:	689b      	ldr	r3, [r3, #8]
 800362c:	69ba      	ldr	r2, [r7, #24]
 800362e:	68d2      	ldr	r2, [r2, #12]
 8003630:	609a      	str	r2, [r3, #8]
 8003632:	69bb      	ldr	r3, [r7, #24]
 8003634:	68db      	ldr	r3, [r3, #12]
 8003636:	69ba      	ldr	r2, [r7, #24]
 8003638:	6892      	ldr	r2, [r2, #8]
 800363a:	605a      	str	r2, [r3, #4]
 800363c:	693b      	ldr	r3, [r7, #16]
 800363e:	685a      	ldr	r2, [r3, #4]
 8003640:	69bb      	ldr	r3, [r7, #24]
 8003642:	3304      	adds	r3, #4
 8003644:	429a      	cmp	r2, r3
 8003646:	d103      	bne.n	8003650 <xTaskIncrementTick+0xd8>
 8003648:	69bb      	ldr	r3, [r7, #24]
 800364a:	68da      	ldr	r2, [r3, #12]
 800364c:	693b      	ldr	r3, [r7, #16]
 800364e:	605a      	str	r2, [r3, #4]
 8003650:	69bb      	ldr	r3, [r7, #24]
 8003652:	2200      	movs	r2, #0
 8003654:	615a      	str	r2, [r3, #20]
 8003656:	693b      	ldr	r3, [r7, #16]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	1e5a      	subs	r2, r3, #1
 800365c:	693b      	ldr	r3, [r7, #16]
 800365e:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003660:	69bb      	ldr	r3, [r7, #24]
 8003662:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003664:	2b00      	cmp	r3, #0
 8003666:	d01e      	beq.n	80036a6 <xTaskIncrementTick+0x12e>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8003668:	69bb      	ldr	r3, [r7, #24]
 800366a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800366c:	60fb      	str	r3, [r7, #12]
 800366e:	69bb      	ldr	r3, [r7, #24]
 8003670:	69db      	ldr	r3, [r3, #28]
 8003672:	69ba      	ldr	r2, [r7, #24]
 8003674:	6a12      	ldr	r2, [r2, #32]
 8003676:	609a      	str	r2, [r3, #8]
 8003678:	69bb      	ldr	r3, [r7, #24]
 800367a:	6a1b      	ldr	r3, [r3, #32]
 800367c:	69ba      	ldr	r2, [r7, #24]
 800367e:	69d2      	ldr	r2, [r2, #28]
 8003680:	605a      	str	r2, [r3, #4]
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	685a      	ldr	r2, [r3, #4]
 8003686:	69bb      	ldr	r3, [r7, #24]
 8003688:	3318      	adds	r3, #24
 800368a:	429a      	cmp	r2, r3
 800368c:	d103      	bne.n	8003696 <xTaskIncrementTick+0x11e>
 800368e:	69bb      	ldr	r3, [r7, #24]
 8003690:	6a1a      	ldr	r2, [r3, #32]
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	605a      	str	r2, [r3, #4]
 8003696:	69bb      	ldr	r3, [r7, #24]
 8003698:	2200      	movs	r2, #0
 800369a:	629a      	str	r2, [r3, #40]	; 0x28
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	1e5a      	subs	r2, r3, #1
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 80036a6:	69bb      	ldr	r3, [r7, #24]
 80036a8:	4618      	mov	r0, r3
 80036aa:	f003 f9bf 	bl	8006a2c <SEGGER_SYSVIEW_OnTaskStartReady>
 80036ae:	69bb      	ldr	r3, [r7, #24]
 80036b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036b2:	2201      	movs	r2, #1
 80036b4:	409a      	lsls	r2, r3
 80036b6:	4b29      	ldr	r3, [pc, #164]	; (800375c <xTaskIncrementTick+0x1e4>)
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	4313      	orrs	r3, r2
 80036bc:	4a27      	ldr	r2, [pc, #156]	; (800375c <xTaskIncrementTick+0x1e4>)
 80036be:	6013      	str	r3, [r2, #0]
 80036c0:	69bb      	ldr	r3, [r7, #24]
 80036c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036c4:	4926      	ldr	r1, [pc, #152]	; (8003760 <xTaskIncrementTick+0x1e8>)
 80036c6:	4613      	mov	r3, r2
 80036c8:	009b      	lsls	r3, r3, #2
 80036ca:	4413      	add	r3, r2
 80036cc:	009b      	lsls	r3, r3, #2
 80036ce:	440b      	add	r3, r1
 80036d0:	3304      	adds	r3, #4
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	60bb      	str	r3, [r7, #8]
 80036d6:	69bb      	ldr	r3, [r7, #24]
 80036d8:	68ba      	ldr	r2, [r7, #8]
 80036da:	609a      	str	r2, [r3, #8]
 80036dc:	68bb      	ldr	r3, [r7, #8]
 80036de:	689a      	ldr	r2, [r3, #8]
 80036e0:	69bb      	ldr	r3, [r7, #24]
 80036e2:	60da      	str	r2, [r3, #12]
 80036e4:	68bb      	ldr	r3, [r7, #8]
 80036e6:	689b      	ldr	r3, [r3, #8]
 80036e8:	69ba      	ldr	r2, [r7, #24]
 80036ea:	3204      	adds	r2, #4
 80036ec:	605a      	str	r2, [r3, #4]
 80036ee:	69bb      	ldr	r3, [r7, #24]
 80036f0:	1d1a      	adds	r2, r3, #4
 80036f2:	68bb      	ldr	r3, [r7, #8]
 80036f4:	609a      	str	r2, [r3, #8]
 80036f6:	69bb      	ldr	r3, [r7, #24]
 80036f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036fa:	4613      	mov	r3, r2
 80036fc:	009b      	lsls	r3, r3, #2
 80036fe:	4413      	add	r3, r2
 8003700:	009b      	lsls	r3, r3, #2
 8003702:	4a17      	ldr	r2, [pc, #92]	; (8003760 <xTaskIncrementTick+0x1e8>)
 8003704:	441a      	add	r2, r3
 8003706:	69bb      	ldr	r3, [r7, #24]
 8003708:	615a      	str	r2, [r3, #20]
 800370a:	69bb      	ldr	r3, [r7, #24]
 800370c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800370e:	4914      	ldr	r1, [pc, #80]	; (8003760 <xTaskIncrementTick+0x1e8>)
 8003710:	4613      	mov	r3, r2
 8003712:	009b      	lsls	r3, r3, #2
 8003714:	4413      	add	r3, r2
 8003716:	009b      	lsls	r3, r3, #2
 8003718:	440b      	add	r3, r1
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	1c59      	adds	r1, r3, #1
 800371e:	4810      	ldr	r0, [pc, #64]	; (8003760 <xTaskIncrementTick+0x1e8>)
 8003720:	4613      	mov	r3, r2
 8003722:	009b      	lsls	r3, r3, #2
 8003724:	4413      	add	r3, r2
 8003726:	009b      	lsls	r3, r3, #2
 8003728:	4403      	add	r3, r0
 800372a:	6019      	str	r1, [r3, #0]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800372c:	e75f      	b.n	80035ee <xTaskIncrementTick+0x76>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 800372e:	4b0d      	ldr	r3, [pc, #52]	; (8003764 <xTaskIncrementTick+0x1ec>)
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	3301      	adds	r3, #1
 8003734:	4a0b      	ldr	r2, [pc, #44]	; (8003764 <xTaskIncrementTick+0x1ec>)
 8003736:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 8003738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800373a:	4618      	mov	r0, r3
 800373c:	3728      	adds	r7, #40	; 0x28
 800373e:	46bd      	mov	sp, r7
 8003740:	bd80      	pop	{r7, pc}
 8003742:	bf00      	nop
 8003744:	20000260 	.word	0x20000260
 8003748:	2000023c 	.word	0x2000023c
 800374c:	200001f0 	.word	0x200001f0
 8003750:	200001f4 	.word	0x200001f4
 8003754:	20000250 	.word	0x20000250
 8003758:	20000258 	.word	0x20000258
 800375c:	20000240 	.word	0x20000240
 8003760:	20000128 	.word	0x20000128
 8003764:	20000248 	.word	0x20000248

08003768 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003768:	b580      	push	{r7, lr}
 800376a:	b086      	sub	sp, #24
 800376c:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800376e:	4b2d      	ldr	r3, [pc, #180]	; (8003824 <vTaskSwitchContext+0xbc>)
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	2b00      	cmp	r3, #0
 8003774:	d003      	beq.n	800377e <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8003776:	4b2c      	ldr	r3, [pc, #176]	; (8003828 <vTaskSwitchContext+0xc0>)
 8003778:	2201      	movs	r2, #1
 800377a:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 800377c:	e04d      	b.n	800381a <vTaskSwitchContext+0xb2>
        xYieldPending = pdFALSE;
 800377e:	4b2a      	ldr	r3, [pc, #168]	; (8003828 <vTaskSwitchContext+0xc0>)
 8003780:	2200      	movs	r2, #0
 8003782:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003784:	4b29      	ldr	r3, [pc, #164]	; (800382c <vTaskSwitchContext+0xc4>)
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	fab3 f383 	clz	r3, r3
 8003790:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8003792:	7afb      	ldrb	r3, [r7, #11]
 8003794:	f1c3 031f 	rsb	r3, r3, #31
 8003798:	617b      	str	r3, [r7, #20]
 800379a:	4925      	ldr	r1, [pc, #148]	; (8003830 <vTaskSwitchContext+0xc8>)
 800379c:	697a      	ldr	r2, [r7, #20]
 800379e:	4613      	mov	r3, r2
 80037a0:	009b      	lsls	r3, r3, #2
 80037a2:	4413      	add	r3, r2
 80037a4:	009b      	lsls	r3, r3, #2
 80037a6:	440b      	add	r3, r1
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d10a      	bne.n	80037c4 <vTaskSwitchContext+0x5c>
        __asm volatile
 80037ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037b2:	f383 8811 	msr	BASEPRI, r3
 80037b6:	f3bf 8f6f 	isb	sy
 80037ba:	f3bf 8f4f 	dsb	sy
 80037be:	607b      	str	r3, [r7, #4]
    }
 80037c0:	bf00      	nop
 80037c2:	e7fe      	b.n	80037c2 <vTaskSwitchContext+0x5a>
 80037c4:	697a      	ldr	r2, [r7, #20]
 80037c6:	4613      	mov	r3, r2
 80037c8:	009b      	lsls	r3, r3, #2
 80037ca:	4413      	add	r3, r2
 80037cc:	009b      	lsls	r3, r3, #2
 80037ce:	4a18      	ldr	r2, [pc, #96]	; (8003830 <vTaskSwitchContext+0xc8>)
 80037d0:	4413      	add	r3, r2
 80037d2:	613b      	str	r3, [r7, #16]
 80037d4:	693b      	ldr	r3, [r7, #16]
 80037d6:	685b      	ldr	r3, [r3, #4]
 80037d8:	685a      	ldr	r2, [r3, #4]
 80037da:	693b      	ldr	r3, [r7, #16]
 80037dc:	605a      	str	r2, [r3, #4]
 80037de:	693b      	ldr	r3, [r7, #16]
 80037e0:	685a      	ldr	r2, [r3, #4]
 80037e2:	693b      	ldr	r3, [r7, #16]
 80037e4:	3308      	adds	r3, #8
 80037e6:	429a      	cmp	r2, r3
 80037e8:	d104      	bne.n	80037f4 <vTaskSwitchContext+0x8c>
 80037ea:	693b      	ldr	r3, [r7, #16]
 80037ec:	685b      	ldr	r3, [r3, #4]
 80037ee:	685a      	ldr	r2, [r3, #4]
 80037f0:	693b      	ldr	r3, [r7, #16]
 80037f2:	605a      	str	r2, [r3, #4]
 80037f4:	693b      	ldr	r3, [r7, #16]
 80037f6:	685b      	ldr	r3, [r3, #4]
 80037f8:	68db      	ldr	r3, [r3, #12]
 80037fa:	4a0e      	ldr	r2, [pc, #56]	; (8003834 <vTaskSwitchContext+0xcc>)
 80037fc:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 80037fe:	4b0d      	ldr	r3, [pc, #52]	; (8003834 <vTaskSwitchContext+0xcc>)
 8003800:	681a      	ldr	r2, [r3, #0]
 8003802:	4b0d      	ldr	r3, [pc, #52]	; (8003838 <vTaskSwitchContext+0xd0>)
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	429a      	cmp	r2, r3
 8003808:	d102      	bne.n	8003810 <vTaskSwitchContext+0xa8>
 800380a:	f003 f86f 	bl	80068ec <SEGGER_SYSVIEW_OnIdle>
}
 800380e:	e004      	b.n	800381a <vTaskSwitchContext+0xb2>
        traceTASK_SWITCHED_IN();
 8003810:	4b08      	ldr	r3, [pc, #32]	; (8003834 <vTaskSwitchContext+0xcc>)
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	4618      	mov	r0, r3
 8003816:	f003 f8c7 	bl	80069a8 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 800381a:	bf00      	nop
 800381c:	3718      	adds	r7, #24
 800381e:	46bd      	mov	sp, r7
 8003820:	bd80      	pop	{r7, pc}
 8003822:	bf00      	nop
 8003824:	20000260 	.word	0x20000260
 8003828:	2000024c 	.word	0x2000024c
 800382c:	20000240 	.word	0x20000240
 8003830:	20000128 	.word	0x20000128
 8003834:	20000124 	.word	0x20000124
 8003838:	2000025c 	.word	0x2000025c

0800383c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 800383c:	b580      	push	{r7, lr}
 800383e:	b084      	sub	sp, #16
 8003840:	af00      	add	r7, sp, #0
 8003842:	6078      	str	r0, [r7, #4]
 8003844:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	2b00      	cmp	r3, #0
 800384a:	d10a      	bne.n	8003862 <vTaskPlaceOnEventList+0x26>
        __asm volatile
 800384c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003850:	f383 8811 	msr	BASEPRI, r3
 8003854:	f3bf 8f6f 	isb	sy
 8003858:	f3bf 8f4f 	dsb	sy
 800385c:	60fb      	str	r3, [r7, #12]
    }
 800385e:	bf00      	nop
 8003860:	e7fe      	b.n	8003860 <vTaskPlaceOnEventList+0x24>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003862:	4b07      	ldr	r3, [pc, #28]	; (8003880 <vTaskPlaceOnEventList+0x44>)
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	3318      	adds	r3, #24
 8003868:	4619      	mov	r1, r3
 800386a:	6878      	ldr	r0, [r7, #4]
 800386c:	f7ff f80b 	bl	8002886 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003870:	2101      	movs	r1, #1
 8003872:	6838      	ldr	r0, [r7, #0]
 8003874:	f000 fa78 	bl	8003d68 <prvAddCurrentTaskToDelayedList>
}
 8003878:	bf00      	nop
 800387a:	3710      	adds	r7, #16
 800387c:	46bd      	mov	sp, r7
 800387e:	bd80      	pop	{r7, pc}
 8003880:	20000124 	.word	0x20000124

08003884 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8003884:	b580      	push	{r7, lr}
 8003886:	b086      	sub	sp, #24
 8003888:	af00      	add	r7, sp, #0
 800388a:	60f8      	str	r0, [r7, #12]
 800388c:	60b9      	str	r1, [r7, #8]
 800388e:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	2b00      	cmp	r3, #0
 8003894:	d10a      	bne.n	80038ac <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 8003896:	f04f 0350 	mov.w	r3, #80	; 0x50
 800389a:	f383 8811 	msr	BASEPRI, r3
 800389e:	f3bf 8f6f 	isb	sy
 80038a2:	f3bf 8f4f 	dsb	sy
 80038a6:	613b      	str	r3, [r7, #16]
    }
 80038a8:	bf00      	nop
 80038aa:	e7fe      	b.n	80038aa <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	685b      	ldr	r3, [r3, #4]
 80038b0:	617b      	str	r3, [r7, #20]
 80038b2:	4b17      	ldr	r3, [pc, #92]	; (8003910 <vTaskPlaceOnEventListRestricted+0x8c>)
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	697a      	ldr	r2, [r7, #20]
 80038b8:	61da      	str	r2, [r3, #28]
 80038ba:	4b15      	ldr	r3, [pc, #84]	; (8003910 <vTaskPlaceOnEventListRestricted+0x8c>)
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	697a      	ldr	r2, [r7, #20]
 80038c0:	6892      	ldr	r2, [r2, #8]
 80038c2:	621a      	str	r2, [r3, #32]
 80038c4:	4b12      	ldr	r3, [pc, #72]	; (8003910 <vTaskPlaceOnEventListRestricted+0x8c>)
 80038c6:	681a      	ldr	r2, [r3, #0]
 80038c8:	697b      	ldr	r3, [r7, #20]
 80038ca:	689b      	ldr	r3, [r3, #8]
 80038cc:	3218      	adds	r2, #24
 80038ce:	605a      	str	r2, [r3, #4]
 80038d0:	4b0f      	ldr	r3, [pc, #60]	; (8003910 <vTaskPlaceOnEventListRestricted+0x8c>)
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f103 0218 	add.w	r2, r3, #24
 80038d8:	697b      	ldr	r3, [r7, #20]
 80038da:	609a      	str	r2, [r3, #8]
 80038dc:	4b0c      	ldr	r3, [pc, #48]	; (8003910 <vTaskPlaceOnEventListRestricted+0x8c>)
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	68fa      	ldr	r2, [r7, #12]
 80038e2:	629a      	str	r2, [r3, #40]	; 0x28
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	1c5a      	adds	r2, r3, #1
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d002      	beq.n	80038fa <vTaskPlaceOnEventListRestricted+0x76>
        {
            xTicksToWait = portMAX_DELAY;
 80038f4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80038f8:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 80038fa:	2024      	movs	r0, #36	; 0x24
 80038fc:	f002 faf8 	bl	8005ef0 <SEGGER_SYSVIEW_RecordVoid>
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003900:	6879      	ldr	r1, [r7, #4]
 8003902:	68b8      	ldr	r0, [r7, #8]
 8003904:	f000 fa30 	bl	8003d68 <prvAddCurrentTaskToDelayedList>
    }
 8003908:	bf00      	nop
 800390a:	3718      	adds	r7, #24
 800390c:	46bd      	mov	sp, r7
 800390e:	bd80      	pop	{r7, pc}
 8003910:	20000124 	.word	0x20000124

08003914 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003914:	b580      	push	{r7, lr}
 8003916:	b08a      	sub	sp, #40	; 0x28
 8003918:	af00      	add	r7, sp, #0
 800391a:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	68db      	ldr	r3, [r3, #12]
 8003920:	68db      	ldr	r3, [r3, #12]
 8003922:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
 8003924:	6a3b      	ldr	r3, [r7, #32]
 8003926:	2b00      	cmp	r3, #0
 8003928:	d10a      	bne.n	8003940 <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 800392a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800392e:	f383 8811 	msr	BASEPRI, r3
 8003932:	f3bf 8f6f 	isb	sy
 8003936:	f3bf 8f4f 	dsb	sy
 800393a:	60fb      	str	r3, [r7, #12]
    }
 800393c:	bf00      	nop
 800393e:	e7fe      	b.n	800393e <xTaskRemoveFromEventList+0x2a>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 8003940:	6a3b      	ldr	r3, [r7, #32]
 8003942:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003944:	61fb      	str	r3, [r7, #28]
 8003946:	6a3b      	ldr	r3, [r7, #32]
 8003948:	69db      	ldr	r3, [r3, #28]
 800394a:	6a3a      	ldr	r2, [r7, #32]
 800394c:	6a12      	ldr	r2, [r2, #32]
 800394e:	609a      	str	r2, [r3, #8]
 8003950:	6a3b      	ldr	r3, [r7, #32]
 8003952:	6a1b      	ldr	r3, [r3, #32]
 8003954:	6a3a      	ldr	r2, [r7, #32]
 8003956:	69d2      	ldr	r2, [r2, #28]
 8003958:	605a      	str	r2, [r3, #4]
 800395a:	69fb      	ldr	r3, [r7, #28]
 800395c:	685a      	ldr	r2, [r3, #4]
 800395e:	6a3b      	ldr	r3, [r7, #32]
 8003960:	3318      	adds	r3, #24
 8003962:	429a      	cmp	r2, r3
 8003964:	d103      	bne.n	800396e <xTaskRemoveFromEventList+0x5a>
 8003966:	6a3b      	ldr	r3, [r7, #32]
 8003968:	6a1a      	ldr	r2, [r3, #32]
 800396a:	69fb      	ldr	r3, [r7, #28]
 800396c:	605a      	str	r2, [r3, #4]
 800396e:	6a3b      	ldr	r3, [r7, #32]
 8003970:	2200      	movs	r2, #0
 8003972:	629a      	str	r2, [r3, #40]	; 0x28
 8003974:	69fb      	ldr	r3, [r7, #28]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	1e5a      	subs	r2, r3, #1
 800397a:	69fb      	ldr	r3, [r7, #28]
 800397c:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800397e:	4b4b      	ldr	r3, [pc, #300]	; (8003aac <xTaskRemoveFromEventList+0x198>)
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	2b00      	cmp	r3, #0
 8003984:	d162      	bne.n	8003a4c <xTaskRemoveFromEventList+0x138>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 8003986:	6a3b      	ldr	r3, [r7, #32]
 8003988:	695b      	ldr	r3, [r3, #20]
 800398a:	617b      	str	r3, [r7, #20]
 800398c:	6a3b      	ldr	r3, [r7, #32]
 800398e:	689b      	ldr	r3, [r3, #8]
 8003990:	6a3a      	ldr	r2, [r7, #32]
 8003992:	68d2      	ldr	r2, [r2, #12]
 8003994:	609a      	str	r2, [r3, #8]
 8003996:	6a3b      	ldr	r3, [r7, #32]
 8003998:	68db      	ldr	r3, [r3, #12]
 800399a:	6a3a      	ldr	r2, [r7, #32]
 800399c:	6892      	ldr	r2, [r2, #8]
 800399e:	605a      	str	r2, [r3, #4]
 80039a0:	697b      	ldr	r3, [r7, #20]
 80039a2:	685a      	ldr	r2, [r3, #4]
 80039a4:	6a3b      	ldr	r3, [r7, #32]
 80039a6:	3304      	adds	r3, #4
 80039a8:	429a      	cmp	r2, r3
 80039aa:	d103      	bne.n	80039b4 <xTaskRemoveFromEventList+0xa0>
 80039ac:	6a3b      	ldr	r3, [r7, #32]
 80039ae:	68da      	ldr	r2, [r3, #12]
 80039b0:	697b      	ldr	r3, [r7, #20]
 80039b2:	605a      	str	r2, [r3, #4]
 80039b4:	6a3b      	ldr	r3, [r7, #32]
 80039b6:	2200      	movs	r2, #0
 80039b8:	615a      	str	r2, [r3, #20]
 80039ba:	697b      	ldr	r3, [r7, #20]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	1e5a      	subs	r2, r3, #1
 80039c0:	697b      	ldr	r3, [r7, #20]
 80039c2:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 80039c4:	6a3b      	ldr	r3, [r7, #32]
 80039c6:	4618      	mov	r0, r3
 80039c8:	f003 f830 	bl	8006a2c <SEGGER_SYSVIEW_OnTaskStartReady>
 80039cc:	6a3b      	ldr	r3, [r7, #32]
 80039ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039d0:	2201      	movs	r2, #1
 80039d2:	409a      	lsls	r2, r3
 80039d4:	4b36      	ldr	r3, [pc, #216]	; (8003ab0 <xTaskRemoveFromEventList+0x19c>)
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	4313      	orrs	r3, r2
 80039da:	4a35      	ldr	r2, [pc, #212]	; (8003ab0 <xTaskRemoveFromEventList+0x19c>)
 80039dc:	6013      	str	r3, [r2, #0]
 80039de:	6a3b      	ldr	r3, [r7, #32]
 80039e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039e2:	4934      	ldr	r1, [pc, #208]	; (8003ab4 <xTaskRemoveFromEventList+0x1a0>)
 80039e4:	4613      	mov	r3, r2
 80039e6:	009b      	lsls	r3, r3, #2
 80039e8:	4413      	add	r3, r2
 80039ea:	009b      	lsls	r3, r3, #2
 80039ec:	440b      	add	r3, r1
 80039ee:	3304      	adds	r3, #4
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	613b      	str	r3, [r7, #16]
 80039f4:	6a3b      	ldr	r3, [r7, #32]
 80039f6:	693a      	ldr	r2, [r7, #16]
 80039f8:	609a      	str	r2, [r3, #8]
 80039fa:	693b      	ldr	r3, [r7, #16]
 80039fc:	689a      	ldr	r2, [r3, #8]
 80039fe:	6a3b      	ldr	r3, [r7, #32]
 8003a00:	60da      	str	r2, [r3, #12]
 8003a02:	693b      	ldr	r3, [r7, #16]
 8003a04:	689b      	ldr	r3, [r3, #8]
 8003a06:	6a3a      	ldr	r2, [r7, #32]
 8003a08:	3204      	adds	r2, #4
 8003a0a:	605a      	str	r2, [r3, #4]
 8003a0c:	6a3b      	ldr	r3, [r7, #32]
 8003a0e:	1d1a      	adds	r2, r3, #4
 8003a10:	693b      	ldr	r3, [r7, #16]
 8003a12:	609a      	str	r2, [r3, #8]
 8003a14:	6a3b      	ldr	r3, [r7, #32]
 8003a16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a18:	4613      	mov	r3, r2
 8003a1a:	009b      	lsls	r3, r3, #2
 8003a1c:	4413      	add	r3, r2
 8003a1e:	009b      	lsls	r3, r3, #2
 8003a20:	4a24      	ldr	r2, [pc, #144]	; (8003ab4 <xTaskRemoveFromEventList+0x1a0>)
 8003a22:	441a      	add	r2, r3
 8003a24:	6a3b      	ldr	r3, [r7, #32]
 8003a26:	615a      	str	r2, [r3, #20]
 8003a28:	6a3b      	ldr	r3, [r7, #32]
 8003a2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a2c:	4921      	ldr	r1, [pc, #132]	; (8003ab4 <xTaskRemoveFromEventList+0x1a0>)
 8003a2e:	4613      	mov	r3, r2
 8003a30:	009b      	lsls	r3, r3, #2
 8003a32:	4413      	add	r3, r2
 8003a34:	009b      	lsls	r3, r3, #2
 8003a36:	440b      	add	r3, r1
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	1c59      	adds	r1, r3, #1
 8003a3c:	481d      	ldr	r0, [pc, #116]	; (8003ab4 <xTaskRemoveFromEventList+0x1a0>)
 8003a3e:	4613      	mov	r3, r2
 8003a40:	009b      	lsls	r3, r3, #2
 8003a42:	4413      	add	r3, r2
 8003a44:	009b      	lsls	r3, r3, #2
 8003a46:	4403      	add	r3, r0
 8003a48:	6019      	str	r1, [r3, #0]
 8003a4a:	e01b      	b.n	8003a84 <xTaskRemoveFromEventList+0x170>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003a4c:	4b1a      	ldr	r3, [pc, #104]	; (8003ab8 <xTaskRemoveFromEventList+0x1a4>)
 8003a4e:	685b      	ldr	r3, [r3, #4]
 8003a50:	61bb      	str	r3, [r7, #24]
 8003a52:	6a3b      	ldr	r3, [r7, #32]
 8003a54:	69ba      	ldr	r2, [r7, #24]
 8003a56:	61da      	str	r2, [r3, #28]
 8003a58:	69bb      	ldr	r3, [r7, #24]
 8003a5a:	689a      	ldr	r2, [r3, #8]
 8003a5c:	6a3b      	ldr	r3, [r7, #32]
 8003a5e:	621a      	str	r2, [r3, #32]
 8003a60:	69bb      	ldr	r3, [r7, #24]
 8003a62:	689b      	ldr	r3, [r3, #8]
 8003a64:	6a3a      	ldr	r2, [r7, #32]
 8003a66:	3218      	adds	r2, #24
 8003a68:	605a      	str	r2, [r3, #4]
 8003a6a:	6a3b      	ldr	r3, [r7, #32]
 8003a6c:	f103 0218 	add.w	r2, r3, #24
 8003a70:	69bb      	ldr	r3, [r7, #24]
 8003a72:	609a      	str	r2, [r3, #8]
 8003a74:	6a3b      	ldr	r3, [r7, #32]
 8003a76:	4a10      	ldr	r2, [pc, #64]	; (8003ab8 <xTaskRemoveFromEventList+0x1a4>)
 8003a78:	629a      	str	r2, [r3, #40]	; 0x28
 8003a7a:	4b0f      	ldr	r3, [pc, #60]	; (8003ab8 <xTaskRemoveFromEventList+0x1a4>)
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	3301      	adds	r3, #1
 8003a80:	4a0d      	ldr	r2, [pc, #52]	; (8003ab8 <xTaskRemoveFromEventList+0x1a4>)
 8003a82:	6013      	str	r3, [r2, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003a84:	6a3b      	ldr	r3, [r7, #32]
 8003a86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a88:	4b0c      	ldr	r3, [pc, #48]	; (8003abc <xTaskRemoveFromEventList+0x1a8>)
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a8e:	429a      	cmp	r2, r3
 8003a90:	d905      	bls.n	8003a9e <xTaskRemoveFromEventList+0x18a>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8003a92:	2301      	movs	r3, #1
 8003a94:	627b      	str	r3, [r7, #36]	; 0x24

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8003a96:	4b0a      	ldr	r3, [pc, #40]	; (8003ac0 <xTaskRemoveFromEventList+0x1ac>)
 8003a98:	2201      	movs	r2, #1
 8003a9a:	601a      	str	r2, [r3, #0]
 8003a9c:	e001      	b.n	8003aa2 <xTaskRemoveFromEventList+0x18e>
    }
    else
    {
        xReturn = pdFALSE;
 8003a9e:	2300      	movs	r3, #0
 8003aa0:	627b      	str	r3, [r7, #36]	; 0x24
    }

    return xReturn;
 8003aa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003aa4:	4618      	mov	r0, r3
 8003aa6:	3728      	adds	r7, #40	; 0x28
 8003aa8:	46bd      	mov	sp, r7
 8003aaa:	bd80      	pop	{r7, pc}
 8003aac:	20000260 	.word	0x20000260
 8003ab0:	20000240 	.word	0x20000240
 8003ab4:	20000128 	.word	0x20000128
 8003ab8:	200001f8 	.word	0x200001f8
 8003abc:	20000124 	.word	0x20000124
 8003ac0:	2000024c 	.word	0x2000024c

08003ac4 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003ac4:	b480      	push	{r7}
 8003ac6:	b083      	sub	sp, #12
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003acc:	4b06      	ldr	r3, [pc, #24]	; (8003ae8 <vTaskInternalSetTimeOutState+0x24>)
 8003ace:	681a      	ldr	r2, [r3, #0]
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8003ad4:	4b05      	ldr	r3, [pc, #20]	; (8003aec <vTaskInternalSetTimeOutState+0x28>)
 8003ad6:	681a      	ldr	r2, [r3, #0]
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	605a      	str	r2, [r3, #4]
}
 8003adc:	bf00      	nop
 8003ade:	370c      	adds	r7, #12
 8003ae0:	46bd      	mov	sp, r7
 8003ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae6:	4770      	bx	lr
 8003ae8:	20000250 	.word	0x20000250
 8003aec:	2000023c 	.word	0x2000023c

08003af0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8003af0:	b580      	push	{r7, lr}
 8003af2:	b088      	sub	sp, #32
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	6078      	str	r0, [r7, #4]
 8003af8:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d10a      	bne.n	8003b16 <xTaskCheckForTimeOut+0x26>
        __asm volatile
 8003b00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b04:	f383 8811 	msr	BASEPRI, r3
 8003b08:	f3bf 8f6f 	isb	sy
 8003b0c:	f3bf 8f4f 	dsb	sy
 8003b10:	613b      	str	r3, [r7, #16]
    }
 8003b12:	bf00      	nop
 8003b14:	e7fe      	b.n	8003b14 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 8003b16:	683b      	ldr	r3, [r7, #0]
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d10a      	bne.n	8003b32 <xTaskCheckForTimeOut+0x42>
        __asm volatile
 8003b1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b20:	f383 8811 	msr	BASEPRI, r3
 8003b24:	f3bf 8f6f 	isb	sy
 8003b28:	f3bf 8f4f 	dsb	sy
 8003b2c:	60fb      	str	r3, [r7, #12]
    }
 8003b2e:	bf00      	nop
 8003b30:	e7fe      	b.n	8003b30 <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 8003b32:	f000 fdc7 	bl	80046c4 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8003b36:	4b1f      	ldr	r3, [pc, #124]	; (8003bb4 <xTaskCheckForTimeOut+0xc4>)
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	685b      	ldr	r3, [r3, #4]
 8003b40:	69ba      	ldr	r2, [r7, #24]
 8003b42:	1ad3      	subs	r3, r2, r3
 8003b44:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8003b46:	683b      	ldr	r3, [r7, #0]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003b4e:	d102      	bne.n	8003b56 <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8003b50:	2300      	movs	r3, #0
 8003b52:	61fb      	str	r3, [r7, #28]
 8003b54:	e026      	b.n	8003ba4 <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681a      	ldr	r2, [r3, #0]
 8003b5a:	4b17      	ldr	r3, [pc, #92]	; (8003bb8 <xTaskCheckForTimeOut+0xc8>)
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	429a      	cmp	r2, r3
 8003b60:	d00a      	beq.n	8003b78 <xTaskCheckForTimeOut+0x88>
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	685b      	ldr	r3, [r3, #4]
 8003b66:	69ba      	ldr	r2, [r7, #24]
 8003b68:	429a      	cmp	r2, r3
 8003b6a:	d305      	bcc.n	8003b78 <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8003b6c:	2301      	movs	r3, #1
 8003b6e:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8003b70:	683b      	ldr	r3, [r7, #0]
 8003b72:	2200      	movs	r2, #0
 8003b74:	601a      	str	r2, [r3, #0]
 8003b76:	e015      	b.n	8003ba4 <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003b78:	683b      	ldr	r3, [r7, #0]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	697a      	ldr	r2, [r7, #20]
 8003b7e:	429a      	cmp	r2, r3
 8003b80:	d20b      	bcs.n	8003b9a <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8003b82:	683b      	ldr	r3, [r7, #0]
 8003b84:	681a      	ldr	r2, [r3, #0]
 8003b86:	697b      	ldr	r3, [r7, #20]
 8003b88:	1ad2      	subs	r2, r2, r3
 8003b8a:	683b      	ldr	r3, [r7, #0]
 8003b8c:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8003b8e:	6878      	ldr	r0, [r7, #4]
 8003b90:	f7ff ff98 	bl	8003ac4 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8003b94:	2300      	movs	r3, #0
 8003b96:	61fb      	str	r3, [r7, #28]
 8003b98:	e004      	b.n	8003ba4 <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8003b9a:	683b      	ldr	r3, [r7, #0]
 8003b9c:	2200      	movs	r2, #0
 8003b9e:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8003ba0:	2301      	movs	r3, #1
 8003ba2:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8003ba4:	f000 fdbe 	bl	8004724 <vPortExitCritical>

    return xReturn;
 8003ba8:	69fb      	ldr	r3, [r7, #28]
}
 8003baa:	4618      	mov	r0, r3
 8003bac:	3720      	adds	r7, #32
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	bd80      	pop	{r7, pc}
 8003bb2:	bf00      	nop
 8003bb4:	2000023c 	.word	0x2000023c
 8003bb8:	20000250 	.word	0x20000250

08003bbc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003bbc:	b480      	push	{r7}
 8003bbe:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8003bc0:	4b03      	ldr	r3, [pc, #12]	; (8003bd0 <vTaskMissedYield+0x14>)
 8003bc2:	2201      	movs	r2, #1
 8003bc4:	601a      	str	r2, [r3, #0]
}
 8003bc6:	bf00      	nop
 8003bc8:	46bd      	mov	sp, r7
 8003bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bce:	4770      	bx	lr
 8003bd0:	2000024c 	.word	0x2000024c

08003bd4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003bd4:	b580      	push	{r7, lr}
 8003bd6:	b082      	sub	sp, #8
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8003bdc:	f000 f84c 	bl	8003c78 <prvCheckTasksWaitingTermination>
        {
            /* If we are not using preemption we keep forcing a task switch to
             * see if any other task has become available.  If we are using
             * preemption we don't need to do this as any task becoming available
             * will automatically get the processor anyway. */
            taskYIELD();
 8003be0:	4b04      	ldr	r3, [pc, #16]	; (8003bf4 <prvIdleTask+0x20>)
 8003be2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003be6:	601a      	str	r2, [r3, #0]
 8003be8:	f3bf 8f4f 	dsb	sy
 8003bec:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8003bf0:	e7f4      	b.n	8003bdc <prvIdleTask+0x8>
 8003bf2:	bf00      	nop
 8003bf4:	e000ed04 	.word	0xe000ed04

08003bf8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003bf8:	b580      	push	{r7, lr}
 8003bfa:	b082      	sub	sp, #8
 8003bfc:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003bfe:	2300      	movs	r3, #0
 8003c00:	607b      	str	r3, [r7, #4]
 8003c02:	e00c      	b.n	8003c1e <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003c04:	687a      	ldr	r2, [r7, #4]
 8003c06:	4613      	mov	r3, r2
 8003c08:	009b      	lsls	r3, r3, #2
 8003c0a:	4413      	add	r3, r2
 8003c0c:	009b      	lsls	r3, r3, #2
 8003c0e:	4a12      	ldr	r2, [pc, #72]	; (8003c58 <prvInitialiseTaskLists+0x60>)
 8003c10:	4413      	add	r3, r2
 8003c12:	4618      	mov	r0, r3
 8003c14:	f7fe fe0a 	bl	800282c <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	3301      	adds	r3, #1
 8003c1c:	607b      	str	r3, [r7, #4]
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	2b07      	cmp	r3, #7
 8003c22:	d9ef      	bls.n	8003c04 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8003c24:	480d      	ldr	r0, [pc, #52]	; (8003c5c <prvInitialiseTaskLists+0x64>)
 8003c26:	f7fe fe01 	bl	800282c <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8003c2a:	480d      	ldr	r0, [pc, #52]	; (8003c60 <prvInitialiseTaskLists+0x68>)
 8003c2c:	f7fe fdfe 	bl	800282c <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8003c30:	480c      	ldr	r0, [pc, #48]	; (8003c64 <prvInitialiseTaskLists+0x6c>)
 8003c32:	f7fe fdfb 	bl	800282c <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 8003c36:	480c      	ldr	r0, [pc, #48]	; (8003c68 <prvInitialiseTaskLists+0x70>)
 8003c38:	f7fe fdf8 	bl	800282c <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 8003c3c:	480b      	ldr	r0, [pc, #44]	; (8003c6c <prvInitialiseTaskLists+0x74>)
 8003c3e:	f7fe fdf5 	bl	800282c <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8003c42:	4b0b      	ldr	r3, [pc, #44]	; (8003c70 <prvInitialiseTaskLists+0x78>)
 8003c44:	4a05      	ldr	r2, [pc, #20]	; (8003c5c <prvInitialiseTaskLists+0x64>)
 8003c46:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003c48:	4b0a      	ldr	r3, [pc, #40]	; (8003c74 <prvInitialiseTaskLists+0x7c>)
 8003c4a:	4a05      	ldr	r2, [pc, #20]	; (8003c60 <prvInitialiseTaskLists+0x68>)
 8003c4c:	601a      	str	r2, [r3, #0]
}
 8003c4e:	bf00      	nop
 8003c50:	3708      	adds	r7, #8
 8003c52:	46bd      	mov	sp, r7
 8003c54:	bd80      	pop	{r7, pc}
 8003c56:	bf00      	nop
 8003c58:	20000128 	.word	0x20000128
 8003c5c:	200001c8 	.word	0x200001c8
 8003c60:	200001dc 	.word	0x200001dc
 8003c64:	200001f8 	.word	0x200001f8
 8003c68:	2000020c 	.word	0x2000020c
 8003c6c:	20000224 	.word	0x20000224
 8003c70:	200001f0 	.word	0x200001f0
 8003c74:	200001f4 	.word	0x200001f4

08003c78 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003c78:	b580      	push	{r7, lr}
 8003c7a:	b082      	sub	sp, #8
 8003c7c:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003c7e:	e019      	b.n	8003cb4 <prvCheckTasksWaitingTermination+0x3c>
        {
            taskENTER_CRITICAL();
 8003c80:	f000 fd20 	bl	80046c4 <vPortEnterCritical>
            {
                pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003c84:	4b10      	ldr	r3, [pc, #64]	; (8003cc8 <prvCheckTasksWaitingTermination+0x50>)
 8003c86:	68db      	ldr	r3, [r3, #12]
 8003c88:	68db      	ldr	r3, [r3, #12]
 8003c8a:	607b      	str	r3, [r7, #4]
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	3304      	adds	r3, #4
 8003c90:	4618      	mov	r0, r3
 8003c92:	f7fe fe31 	bl	80028f8 <uxListRemove>
                --uxCurrentNumberOfTasks;
 8003c96:	4b0d      	ldr	r3, [pc, #52]	; (8003ccc <prvCheckTasksWaitingTermination+0x54>)
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	3b01      	subs	r3, #1
 8003c9c:	4a0b      	ldr	r2, [pc, #44]	; (8003ccc <prvCheckTasksWaitingTermination+0x54>)
 8003c9e:	6013      	str	r3, [r2, #0]
                --uxDeletedTasksWaitingCleanUp;
 8003ca0:	4b0b      	ldr	r3, [pc, #44]	; (8003cd0 <prvCheckTasksWaitingTermination+0x58>)
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	3b01      	subs	r3, #1
 8003ca6:	4a0a      	ldr	r2, [pc, #40]	; (8003cd0 <prvCheckTasksWaitingTermination+0x58>)
 8003ca8:	6013      	str	r3, [r2, #0]
            }
            taskEXIT_CRITICAL();
 8003caa:	f000 fd3b 	bl	8004724 <vPortExitCritical>

            prvDeleteTCB( pxTCB );
 8003cae:	6878      	ldr	r0, [r7, #4]
 8003cb0:	f000 f810 	bl	8003cd4 <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003cb4:	4b06      	ldr	r3, [pc, #24]	; (8003cd0 <prvCheckTasksWaitingTermination+0x58>)
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d1e1      	bne.n	8003c80 <prvCheckTasksWaitingTermination+0x8>
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 8003cbc:	bf00      	nop
 8003cbe:	bf00      	nop
 8003cc0:	3708      	adds	r7, #8
 8003cc2:	46bd      	mov	sp, r7
 8003cc4:	bd80      	pop	{r7, pc}
 8003cc6:	bf00      	nop
 8003cc8:	2000020c 	.word	0x2000020c
 8003ccc:	20000238 	.word	0x20000238
 8003cd0:	20000220 	.word	0x20000220

08003cd4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8003cd4:	b580      	push	{r7, lr}
 8003cd6:	b082      	sub	sp, #8
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ce0:	4618      	mov	r0, r3
 8003ce2:	f000 fed5 	bl	8004a90 <vPortFree>
            vPortFree( pxTCB );
 8003ce6:	6878      	ldr	r0, [r7, #4]
 8003ce8:	f000 fed2 	bl	8004a90 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8003cec:	bf00      	nop
 8003cee:	3708      	adds	r7, #8
 8003cf0:	46bd      	mov	sp, r7
 8003cf2:	bd80      	pop	{r7, pc}

08003cf4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003cf4:	b480      	push	{r7}
 8003cf6:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003cf8:	4b0a      	ldr	r3, [pc, #40]	; (8003d24 <prvResetNextTaskUnblockTime+0x30>)
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d104      	bne.n	8003d0c <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8003d02:	4b09      	ldr	r3, [pc, #36]	; (8003d28 <prvResetNextTaskUnblockTime+0x34>)
 8003d04:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003d08:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8003d0a:	e005      	b.n	8003d18 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003d0c:	4b05      	ldr	r3, [pc, #20]	; (8003d24 <prvResetNextTaskUnblockTime+0x30>)
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	68db      	ldr	r3, [r3, #12]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	4a04      	ldr	r2, [pc, #16]	; (8003d28 <prvResetNextTaskUnblockTime+0x34>)
 8003d16:	6013      	str	r3, [r2, #0]
}
 8003d18:	bf00      	nop
 8003d1a:	46bd      	mov	sp, r7
 8003d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d20:	4770      	bx	lr
 8003d22:	bf00      	nop
 8003d24:	200001f0 	.word	0x200001f0
 8003d28:	20000258 	.word	0x20000258

08003d2c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8003d2c:	b480      	push	{r7}
 8003d2e:	b083      	sub	sp, #12
 8003d30:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 8003d32:	4b0b      	ldr	r3, [pc, #44]	; (8003d60 <xTaskGetSchedulerState+0x34>)
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d102      	bne.n	8003d40 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8003d3a:	2301      	movs	r3, #1
 8003d3c:	607b      	str	r3, [r7, #4]
 8003d3e:	e008      	b.n	8003d52 <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003d40:	4b08      	ldr	r3, [pc, #32]	; (8003d64 <xTaskGetSchedulerState+0x38>)
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d102      	bne.n	8003d4e <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8003d48:	2302      	movs	r3, #2
 8003d4a:	607b      	str	r3, [r7, #4]
 8003d4c:	e001      	b.n	8003d52 <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8003d4e:	2300      	movs	r3, #0
 8003d50:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8003d52:	687b      	ldr	r3, [r7, #4]
    }
 8003d54:	4618      	mov	r0, r3
 8003d56:	370c      	adds	r7, #12
 8003d58:	46bd      	mov	sp, r7
 8003d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d5e:	4770      	bx	lr
 8003d60:	20000244 	.word	0x20000244
 8003d64:	20000260 	.word	0x20000260

08003d68 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8003d68:	b580      	push	{r7, lr}
 8003d6a:	b086      	sub	sp, #24
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	6078      	str	r0, [r7, #4]
 8003d70:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8003d72:	4b36      	ldr	r3, [pc, #216]	; (8003e4c <prvAddCurrentTaskToDelayedList+0xe4>)
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003d78:	4b35      	ldr	r3, [pc, #212]	; (8003e50 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	3304      	adds	r3, #4
 8003d7e:	4618      	mov	r0, r3
 8003d80:	f7fe fdba 	bl	80028f8 <uxListRemove>
 8003d84:	4603      	mov	r3, r0
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d10b      	bne.n	8003da2 <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8003d8a:	4b31      	ldr	r3, [pc, #196]	; (8003e50 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d90:	2201      	movs	r2, #1
 8003d92:	fa02 f303 	lsl.w	r3, r2, r3
 8003d96:	43da      	mvns	r2, r3
 8003d98:	4b2e      	ldr	r3, [pc, #184]	; (8003e54 <prvAddCurrentTaskToDelayedList+0xec>)
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	4013      	ands	r3, r2
 8003d9e:	4a2d      	ldr	r2, [pc, #180]	; (8003e54 <prvAddCurrentTaskToDelayedList+0xec>)
 8003da0:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003da8:	d124      	bne.n	8003df4 <prvAddCurrentTaskToDelayedList+0x8c>
 8003daa:	683b      	ldr	r3, [r7, #0]
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d021      	beq.n	8003df4 <prvAddCurrentTaskToDelayedList+0x8c>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003db0:	4b29      	ldr	r3, [pc, #164]	; (8003e58 <prvAddCurrentTaskToDelayedList+0xf0>)
 8003db2:	685b      	ldr	r3, [r3, #4]
 8003db4:	613b      	str	r3, [r7, #16]
 8003db6:	4b26      	ldr	r3, [pc, #152]	; (8003e50 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	693a      	ldr	r2, [r7, #16]
 8003dbc:	609a      	str	r2, [r3, #8]
 8003dbe:	4b24      	ldr	r3, [pc, #144]	; (8003e50 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	693a      	ldr	r2, [r7, #16]
 8003dc4:	6892      	ldr	r2, [r2, #8]
 8003dc6:	60da      	str	r2, [r3, #12]
 8003dc8:	4b21      	ldr	r3, [pc, #132]	; (8003e50 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003dca:	681a      	ldr	r2, [r3, #0]
 8003dcc:	693b      	ldr	r3, [r7, #16]
 8003dce:	689b      	ldr	r3, [r3, #8]
 8003dd0:	3204      	adds	r2, #4
 8003dd2:	605a      	str	r2, [r3, #4]
 8003dd4:	4b1e      	ldr	r3, [pc, #120]	; (8003e50 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	1d1a      	adds	r2, r3, #4
 8003dda:	693b      	ldr	r3, [r7, #16]
 8003ddc:	609a      	str	r2, [r3, #8]
 8003dde:	4b1c      	ldr	r3, [pc, #112]	; (8003e50 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	4a1d      	ldr	r2, [pc, #116]	; (8003e58 <prvAddCurrentTaskToDelayedList+0xf0>)
 8003de4:	615a      	str	r2, [r3, #20]
 8003de6:	4b1c      	ldr	r3, [pc, #112]	; (8003e58 <prvAddCurrentTaskToDelayedList+0xf0>)
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	3301      	adds	r3, #1
 8003dec:	4a1a      	ldr	r2, [pc, #104]	; (8003e58 <prvAddCurrentTaskToDelayedList+0xf0>)
 8003dee:	6013      	str	r3, [r2, #0]
 8003df0:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 8003df2:	e026      	b.n	8003e42 <prvAddCurrentTaskToDelayedList+0xda>
            xTimeToWake = xConstTickCount + xTicksToWait;
 8003df4:	697a      	ldr	r2, [r7, #20]
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	4413      	add	r3, r2
 8003dfa:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003dfc:	4b14      	ldr	r3, [pc, #80]	; (8003e50 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	68fa      	ldr	r2, [r7, #12]
 8003e02:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 8003e04:	68fa      	ldr	r2, [r7, #12]
 8003e06:	697b      	ldr	r3, [r7, #20]
 8003e08:	429a      	cmp	r2, r3
 8003e0a:	d209      	bcs.n	8003e20 <prvAddCurrentTaskToDelayedList+0xb8>
                vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003e0c:	4b13      	ldr	r3, [pc, #76]	; (8003e5c <prvAddCurrentTaskToDelayedList+0xf4>)
 8003e0e:	681a      	ldr	r2, [r3, #0]
 8003e10:	4b0f      	ldr	r3, [pc, #60]	; (8003e50 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	3304      	adds	r3, #4
 8003e16:	4619      	mov	r1, r3
 8003e18:	4610      	mov	r0, r2
 8003e1a:	f7fe fd34 	bl	8002886 <vListInsert>
}
 8003e1e:	e010      	b.n	8003e42 <prvAddCurrentTaskToDelayedList+0xda>
                vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003e20:	4b0f      	ldr	r3, [pc, #60]	; (8003e60 <prvAddCurrentTaskToDelayedList+0xf8>)
 8003e22:	681a      	ldr	r2, [r3, #0]
 8003e24:	4b0a      	ldr	r3, [pc, #40]	; (8003e50 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	3304      	adds	r3, #4
 8003e2a:	4619      	mov	r1, r3
 8003e2c:	4610      	mov	r0, r2
 8003e2e:	f7fe fd2a 	bl	8002886 <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 8003e32:	4b0c      	ldr	r3, [pc, #48]	; (8003e64 <prvAddCurrentTaskToDelayedList+0xfc>)
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	68fa      	ldr	r2, [r7, #12]
 8003e38:	429a      	cmp	r2, r3
 8003e3a:	d202      	bcs.n	8003e42 <prvAddCurrentTaskToDelayedList+0xda>
                    xNextTaskUnblockTime = xTimeToWake;
 8003e3c:	4a09      	ldr	r2, [pc, #36]	; (8003e64 <prvAddCurrentTaskToDelayedList+0xfc>)
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	6013      	str	r3, [r2, #0]
}
 8003e42:	bf00      	nop
 8003e44:	3718      	adds	r7, #24
 8003e46:	46bd      	mov	sp, r7
 8003e48:	bd80      	pop	{r7, pc}
 8003e4a:	bf00      	nop
 8003e4c:	2000023c 	.word	0x2000023c
 8003e50:	20000124 	.word	0x20000124
 8003e54:	20000240 	.word	0x20000240
 8003e58:	20000224 	.word	0x20000224
 8003e5c:	200001f4 	.word	0x200001f4
 8003e60:	200001f0 	.word	0x200001f0
 8003e64:	20000258 	.word	0x20000258

08003e68 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8003e68:	b580      	push	{r7, lr}
 8003e6a:	b084      	sub	sp, #16
 8003e6c:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 8003e6e:	2300      	movs	r3, #0
 8003e70:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8003e72:	f000 fa47 	bl	8004304 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8003e76:	4b11      	ldr	r3, [pc, #68]	; (8003ebc <xTimerCreateTimerTask+0x54>)
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d00b      	beq.n	8003e96 <xTimerCreateTimerTask+0x2e>
                    xReturn = pdPASS;
                }
            }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
            {
                xReturn = xTaskCreate( prvTimerTask,
 8003e7e:	4b10      	ldr	r3, [pc, #64]	; (8003ec0 <xTimerCreateTimerTask+0x58>)
 8003e80:	9301      	str	r3, [sp, #4]
 8003e82:	2302      	movs	r3, #2
 8003e84:	9300      	str	r3, [sp, #0]
 8003e86:	2300      	movs	r3, #0
 8003e88:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003e8c:	490d      	ldr	r1, [pc, #52]	; (8003ec4 <xTimerCreateTimerTask+0x5c>)
 8003e8e:	480e      	ldr	r0, [pc, #56]	; (8003ec8 <xTimerCreateTimerTask+0x60>)
 8003e90:	f7ff f874 	bl	8002f7c <xTaskCreate>
 8003e94:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d10a      	bne.n	8003eb2 <xTimerCreateTimerTask+0x4a>
        __asm volatile
 8003e9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ea0:	f383 8811 	msr	BASEPRI, r3
 8003ea4:	f3bf 8f6f 	isb	sy
 8003ea8:	f3bf 8f4f 	dsb	sy
 8003eac:	603b      	str	r3, [r7, #0]
    }
 8003eae:	bf00      	nop
 8003eb0:	e7fe      	b.n	8003eb0 <xTimerCreateTimerTask+0x48>
        return xReturn;
 8003eb2:	687b      	ldr	r3, [r7, #4]
    }
 8003eb4:	4618      	mov	r0, r3
 8003eb6:	3708      	adds	r7, #8
 8003eb8:	46bd      	mov	sp, r7
 8003eba:	bd80      	pop	{r7, pc}
 8003ebc:	20000294 	.word	0x20000294
 8003ec0:	20000298 	.word	0x20000298
 8003ec4:	08007764 	.word	0x08007764
 8003ec8:	08003f71 	.word	0x08003f71

08003ecc <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 8003ecc:	b580      	push	{r7, lr}
 8003ece:	b084      	sub	sp, #16
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	60f8      	str	r0, [r7, #12]
 8003ed4:	60b9      	str	r1, [r7, #8]
 8003ed6:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8003ed8:	e008      	b.n	8003eec <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	699b      	ldr	r3, [r3, #24]
 8003ede:	68ba      	ldr	r2, [r7, #8]
 8003ee0:	4413      	add	r3, r2
 8003ee2:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	6a1b      	ldr	r3, [r3, #32]
 8003ee8:	68f8      	ldr	r0, [r7, #12]
 8003eea:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	699a      	ldr	r2, [r3, #24]
 8003ef0:	68bb      	ldr	r3, [r7, #8]
 8003ef2:	18d1      	adds	r1, r2, r3
 8003ef4:	68bb      	ldr	r3, [r7, #8]
 8003ef6:	687a      	ldr	r2, [r7, #4]
 8003ef8:	68f8      	ldr	r0, [r7, #12]
 8003efa:	f000 f8dd 	bl	80040b8 <prvInsertTimerInActiveList>
 8003efe:	4603      	mov	r3, r0
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d1ea      	bne.n	8003eda <prvReloadTimer+0xe>
        }
    }
 8003f04:	bf00      	nop
 8003f06:	bf00      	nop
 8003f08:	3710      	adds	r7, #16
 8003f0a:	46bd      	mov	sp, r7
 8003f0c:	bd80      	pop	{r7, pc}
	...

08003f10 <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8003f10:	b580      	push	{r7, lr}
 8003f12:	b084      	sub	sp, #16
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	6078      	str	r0, [r7, #4]
 8003f18:	6039      	str	r1, [r7, #0]
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003f1a:	4b14      	ldr	r3, [pc, #80]	; (8003f6c <prvProcessExpiredTimer+0x5c>)
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	68db      	ldr	r3, [r3, #12]
 8003f20:	68db      	ldr	r3, [r3, #12]
 8003f22:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	3304      	adds	r3, #4
 8003f28:	4618      	mov	r0, r3
 8003f2a:	f7fe fce5 	bl	80028f8 <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003f34:	f003 0304 	and.w	r3, r3, #4
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d005      	beq.n	8003f48 <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 8003f3c:	683a      	ldr	r2, [r7, #0]
 8003f3e:	6879      	ldr	r1, [r7, #4]
 8003f40:	68f8      	ldr	r0, [r7, #12]
 8003f42:	f7ff ffc3 	bl	8003ecc <prvReloadTimer>
 8003f46:	e008      	b.n	8003f5a <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003f4e:	f023 0301 	bic.w	r3, r3, #1
 8003f52:	b2da      	uxtb	r2, r3
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	6a1b      	ldr	r3, [r3, #32]
 8003f5e:	68f8      	ldr	r0, [r7, #12]
 8003f60:	4798      	blx	r3
    }
 8003f62:	bf00      	nop
 8003f64:	3710      	adds	r7, #16
 8003f66:	46bd      	mov	sp, r7
 8003f68:	bd80      	pop	{r7, pc}
 8003f6a:	bf00      	nop
 8003f6c:	2000028c 	.word	0x2000028c

08003f70 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8003f70:	b580      	push	{r7, lr}
 8003f72:	b084      	sub	sp, #16
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003f78:	f107 0308 	add.w	r3, r7, #8
 8003f7c:	4618      	mov	r0, r3
 8003f7e:	f000 f857 	bl	8004030 <prvGetNextExpireTime>
 8003f82:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8003f84:	68bb      	ldr	r3, [r7, #8]
 8003f86:	4619      	mov	r1, r3
 8003f88:	68f8      	ldr	r0, [r7, #12]
 8003f8a:	f000 f803 	bl	8003f94 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8003f8e:	f000 f8d5 	bl	800413c <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003f92:	e7f1      	b.n	8003f78 <prvTimerTask+0x8>

08003f94 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8003f94:	b580      	push	{r7, lr}
 8003f96:	b084      	sub	sp, #16
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	6078      	str	r0, [r7, #4]
 8003f9c:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8003f9e:	f7ff f9c9 	bl	8003334 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003fa2:	f107 0308 	add.w	r3, r7, #8
 8003fa6:	4618      	mov	r0, r3
 8003fa8:	f000 f866 	bl	8004078 <prvSampleTimeNow>
 8003fac:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8003fae:	68bb      	ldr	r3, [r7, #8]
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d130      	bne.n	8004016 <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8003fb4:	683b      	ldr	r3, [r7, #0]
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d10a      	bne.n	8003fd0 <prvProcessTimerOrBlockTask+0x3c>
 8003fba:	687a      	ldr	r2, [r7, #4]
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	429a      	cmp	r2, r3
 8003fc0:	d806      	bhi.n	8003fd0 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8003fc2:	f7ff f9c5 	bl	8003350 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8003fc6:	68f9      	ldr	r1, [r7, #12]
 8003fc8:	6878      	ldr	r0, [r7, #4]
 8003fca:	f7ff ffa1 	bl	8003f10 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8003fce:	e024      	b.n	800401a <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8003fd0:	683b      	ldr	r3, [r7, #0]
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d008      	beq.n	8003fe8 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8003fd6:	4b13      	ldr	r3, [pc, #76]	; (8004024 <prvProcessTimerOrBlockTask+0x90>)
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d101      	bne.n	8003fe4 <prvProcessTimerOrBlockTask+0x50>
 8003fe0:	2301      	movs	r3, #1
 8003fe2:	e000      	b.n	8003fe6 <prvProcessTimerOrBlockTask+0x52>
 8003fe4:	2300      	movs	r3, #0
 8003fe6:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8003fe8:	4b0f      	ldr	r3, [pc, #60]	; (8004028 <prvProcessTimerOrBlockTask+0x94>)
 8003fea:	6818      	ldr	r0, [r3, #0]
 8003fec:	687a      	ldr	r2, [r7, #4]
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	1ad3      	subs	r3, r2, r3
 8003ff2:	683a      	ldr	r2, [r7, #0]
 8003ff4:	4619      	mov	r1, r3
 8003ff6:	f7fe ff8d 	bl	8002f14 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8003ffa:	f7ff f9a9 	bl	8003350 <xTaskResumeAll>
 8003ffe:	4603      	mov	r3, r0
 8004000:	2b00      	cmp	r3, #0
 8004002:	d10a      	bne.n	800401a <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8004004:	4b09      	ldr	r3, [pc, #36]	; (800402c <prvProcessTimerOrBlockTask+0x98>)
 8004006:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800400a:	601a      	str	r2, [r3, #0]
 800400c:	f3bf 8f4f 	dsb	sy
 8004010:	f3bf 8f6f 	isb	sy
    }
 8004014:	e001      	b.n	800401a <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8004016:	f7ff f99b 	bl	8003350 <xTaskResumeAll>
    }
 800401a:	bf00      	nop
 800401c:	3710      	adds	r7, #16
 800401e:	46bd      	mov	sp, r7
 8004020:	bd80      	pop	{r7, pc}
 8004022:	bf00      	nop
 8004024:	20000290 	.word	0x20000290
 8004028:	20000294 	.word	0x20000294
 800402c:	e000ed04 	.word	0xe000ed04

08004030 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8004030:	b480      	push	{r7}
 8004032:	b085      	sub	sp, #20
 8004034:	af00      	add	r7, sp, #0
 8004036:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004038:	4b0e      	ldr	r3, [pc, #56]	; (8004074 <prvGetNextExpireTime+0x44>)
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	2b00      	cmp	r3, #0
 8004040:	d101      	bne.n	8004046 <prvGetNextExpireTime+0x16>
 8004042:	2201      	movs	r2, #1
 8004044:	e000      	b.n	8004048 <prvGetNextExpireTime+0x18>
 8004046:	2200      	movs	r2, #0
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	2b00      	cmp	r3, #0
 8004052:	d105      	bne.n	8004060 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004054:	4b07      	ldr	r3, [pc, #28]	; (8004074 <prvGetNextExpireTime+0x44>)
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	68db      	ldr	r3, [r3, #12]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	60fb      	str	r3, [r7, #12]
 800405e:	e001      	b.n	8004064 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8004060:	2300      	movs	r3, #0
 8004062:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8004064:	68fb      	ldr	r3, [r7, #12]
    }
 8004066:	4618      	mov	r0, r3
 8004068:	3714      	adds	r7, #20
 800406a:	46bd      	mov	sp, r7
 800406c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004070:	4770      	bx	lr
 8004072:	bf00      	nop
 8004074:	2000028c 	.word	0x2000028c

08004078 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8004078:	b580      	push	{r7, lr}
 800407a:	b084      	sub	sp, #16
 800407c:	af00      	add	r7, sp, #0
 800407e:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8004080:	f7ff fa58 	bl	8003534 <xTaskGetTickCount>
 8004084:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8004086:	4b0b      	ldr	r3, [pc, #44]	; (80040b4 <prvSampleTimeNow+0x3c>)
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	68fa      	ldr	r2, [r7, #12]
 800408c:	429a      	cmp	r2, r3
 800408e:	d205      	bcs.n	800409c <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8004090:	f000 f912 	bl	80042b8 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	2201      	movs	r2, #1
 8004098:	601a      	str	r2, [r3, #0]
 800409a:	e002      	b.n	80040a2 <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	2200      	movs	r2, #0
 80040a0:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 80040a2:	4a04      	ldr	r2, [pc, #16]	; (80040b4 <prvSampleTimeNow+0x3c>)
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 80040a8:	68fb      	ldr	r3, [r7, #12]
    }
 80040aa:	4618      	mov	r0, r3
 80040ac:	3710      	adds	r7, #16
 80040ae:	46bd      	mov	sp, r7
 80040b0:	bd80      	pop	{r7, pc}
 80040b2:	bf00      	nop
 80040b4:	2000029c 	.word	0x2000029c

080040b8 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 80040b8:	b580      	push	{r7, lr}
 80040ba:	b086      	sub	sp, #24
 80040bc:	af00      	add	r7, sp, #0
 80040be:	60f8      	str	r0, [r7, #12]
 80040c0:	60b9      	str	r1, [r7, #8]
 80040c2:	607a      	str	r2, [r7, #4]
 80040c4:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 80040c6:	2300      	movs	r3, #0
 80040c8:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	68ba      	ldr	r2, [r7, #8]
 80040ce:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	68fa      	ldr	r2, [r7, #12]
 80040d4:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 80040d6:	68ba      	ldr	r2, [r7, #8]
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	429a      	cmp	r2, r3
 80040dc:	d812      	bhi.n	8004104 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80040de:	687a      	ldr	r2, [r7, #4]
 80040e0:	683b      	ldr	r3, [r7, #0]
 80040e2:	1ad2      	subs	r2, r2, r3
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	699b      	ldr	r3, [r3, #24]
 80040e8:	429a      	cmp	r2, r3
 80040ea:	d302      	bcc.n	80040f2 <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 80040ec:	2301      	movs	r3, #1
 80040ee:	617b      	str	r3, [r7, #20]
 80040f0:	e01b      	b.n	800412a <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80040f2:	4b10      	ldr	r3, [pc, #64]	; (8004134 <prvInsertTimerInActiveList+0x7c>)
 80040f4:	681a      	ldr	r2, [r3, #0]
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	3304      	adds	r3, #4
 80040fa:	4619      	mov	r1, r3
 80040fc:	4610      	mov	r0, r2
 80040fe:	f7fe fbc2 	bl	8002886 <vListInsert>
 8004102:	e012      	b.n	800412a <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004104:	687a      	ldr	r2, [r7, #4]
 8004106:	683b      	ldr	r3, [r7, #0]
 8004108:	429a      	cmp	r2, r3
 800410a:	d206      	bcs.n	800411a <prvInsertTimerInActiveList+0x62>
 800410c:	68ba      	ldr	r2, [r7, #8]
 800410e:	683b      	ldr	r3, [r7, #0]
 8004110:	429a      	cmp	r2, r3
 8004112:	d302      	bcc.n	800411a <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8004114:	2301      	movs	r3, #1
 8004116:	617b      	str	r3, [r7, #20]
 8004118:	e007      	b.n	800412a <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800411a:	4b07      	ldr	r3, [pc, #28]	; (8004138 <prvInsertTimerInActiveList+0x80>)
 800411c:	681a      	ldr	r2, [r3, #0]
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	3304      	adds	r3, #4
 8004122:	4619      	mov	r1, r3
 8004124:	4610      	mov	r0, r2
 8004126:	f7fe fbae 	bl	8002886 <vListInsert>
            }
        }

        return xProcessTimerNow;
 800412a:	697b      	ldr	r3, [r7, #20]
    }
 800412c:	4618      	mov	r0, r3
 800412e:	3718      	adds	r7, #24
 8004130:	46bd      	mov	sp, r7
 8004132:	bd80      	pop	{r7, pc}
 8004134:	20000290 	.word	0x20000290
 8004138:	2000028c 	.word	0x2000028c

0800413c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 800413c:	b580      	push	{r7, lr}
 800413e:	b088      	sub	sp, #32
 8004140:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004142:	e0a6      	b.n	8004292 <prvProcessReceivedCommands+0x156>
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004144:	68bb      	ldr	r3, [r7, #8]
 8004146:	2b00      	cmp	r3, #0
 8004148:	f2c0 80a2 	blt.w	8004290 <prvProcessReceivedCommands+0x154>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800414c:	693b      	ldr	r3, [r7, #16]
 800414e:	61fb      	str	r3, [r7, #28]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004150:	69fb      	ldr	r3, [r7, #28]
 8004152:	695b      	ldr	r3, [r3, #20]
 8004154:	2b00      	cmp	r3, #0
 8004156:	d004      	beq.n	8004162 <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004158:	69fb      	ldr	r3, [r7, #28]
 800415a:	3304      	adds	r3, #4
 800415c:	4618      	mov	r0, r3
 800415e:	f7fe fbcb 	bl	80028f8 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004162:	1d3b      	adds	r3, r7, #4
 8004164:	4618      	mov	r0, r3
 8004166:	f7ff ff87 	bl	8004078 <prvSampleTimeNow>
 800416a:	61b8      	str	r0, [r7, #24]

                switch( xMessage.xMessageID )
 800416c:	68bb      	ldr	r3, [r7, #8]
 800416e:	3b01      	subs	r3, #1
 8004170:	2b08      	cmp	r3, #8
 8004172:	f200 808e 	bhi.w	8004292 <prvProcessReceivedCommands+0x156>
 8004176:	a201      	add	r2, pc, #4	; (adr r2, 800417c <prvProcessReceivedCommands+0x40>)
 8004178:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800417c:	080041a1 	.word	0x080041a1
 8004180:	080041a1 	.word	0x080041a1
 8004184:	08004209 	.word	0x08004209
 8004188:	0800421d 	.word	0x0800421d
 800418c:	08004267 	.word	0x08004267
 8004190:	080041a1 	.word	0x080041a1
 8004194:	080041a1 	.word	0x080041a1
 8004198:	08004209 	.word	0x08004209
 800419c:	0800421d 	.word	0x0800421d
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80041a0:	69fb      	ldr	r3, [r7, #28]
 80041a2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80041a6:	f043 0301 	orr.w	r3, r3, #1
 80041aa:	b2da      	uxtb	r2, r3
 80041ac:	69fb      	ldr	r3, [r7, #28]
 80041ae:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80041b2:	68fa      	ldr	r2, [r7, #12]
 80041b4:	69fb      	ldr	r3, [r7, #28]
 80041b6:	699b      	ldr	r3, [r3, #24]
 80041b8:	18d1      	adds	r1, r2, r3
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	69ba      	ldr	r2, [r7, #24]
 80041be:	69f8      	ldr	r0, [r7, #28]
 80041c0:	f7ff ff7a 	bl	80040b8 <prvInsertTimerInActiveList>
 80041c4:	4603      	mov	r3, r0
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d063      	beq.n	8004292 <prvProcessReceivedCommands+0x156>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80041ca:	69fb      	ldr	r3, [r7, #28]
 80041cc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80041d0:	f003 0304 	and.w	r3, r3, #4
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d009      	beq.n	80041ec <prvProcessReceivedCommands+0xb0>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 80041d8:	68fa      	ldr	r2, [r7, #12]
 80041da:	69fb      	ldr	r3, [r7, #28]
 80041dc:	699b      	ldr	r3, [r3, #24]
 80041de:	4413      	add	r3, r2
 80041e0:	69ba      	ldr	r2, [r7, #24]
 80041e2:	4619      	mov	r1, r3
 80041e4:	69f8      	ldr	r0, [r7, #28]
 80041e6:	f7ff fe71 	bl	8003ecc <prvReloadTimer>
 80041ea:	e008      	b.n	80041fe <prvProcessReceivedCommands+0xc2>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 80041ec:	69fb      	ldr	r3, [r7, #28]
 80041ee:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80041f2:	f023 0301 	bic.w	r3, r3, #1
 80041f6:	b2da      	uxtb	r2, r3
 80041f8:	69fb      	ldr	r3, [r7, #28]
 80041fa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80041fe:	69fb      	ldr	r3, [r7, #28]
 8004200:	6a1b      	ldr	r3, [r3, #32]
 8004202:	69f8      	ldr	r0, [r7, #28]
 8004204:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 8004206:	e044      	b.n	8004292 <prvProcessReceivedCommands+0x156>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8004208:	69fb      	ldr	r3, [r7, #28]
 800420a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800420e:	f023 0301 	bic.w	r3, r3, #1
 8004212:	b2da      	uxtb	r2, r3
 8004214:	69fb      	ldr	r3, [r7, #28]
 8004216:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 800421a:	e03a      	b.n	8004292 <prvProcessReceivedCommands+0x156>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800421c:	69fb      	ldr	r3, [r7, #28]
 800421e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004222:	f043 0301 	orr.w	r3, r3, #1
 8004226:	b2da      	uxtb	r2, r3
 8004228:	69fb      	ldr	r3, [r7, #28]
 800422a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800422e:	68fa      	ldr	r2, [r7, #12]
 8004230:	69fb      	ldr	r3, [r7, #28]
 8004232:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004234:	69fb      	ldr	r3, [r7, #28]
 8004236:	699b      	ldr	r3, [r3, #24]
 8004238:	2b00      	cmp	r3, #0
 800423a:	d10a      	bne.n	8004252 <prvProcessReceivedCommands+0x116>
        __asm volatile
 800423c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004240:	f383 8811 	msr	BASEPRI, r3
 8004244:	f3bf 8f6f 	isb	sy
 8004248:	f3bf 8f4f 	dsb	sy
 800424c:	617b      	str	r3, [r7, #20]
    }
 800424e:	bf00      	nop
 8004250:	e7fe      	b.n	8004250 <prvProcessReceivedCommands+0x114>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004252:	69fb      	ldr	r3, [r7, #28]
 8004254:	699a      	ldr	r2, [r3, #24]
 8004256:	69bb      	ldr	r3, [r7, #24]
 8004258:	18d1      	adds	r1, r2, r3
 800425a:	69bb      	ldr	r3, [r7, #24]
 800425c:	69ba      	ldr	r2, [r7, #24]
 800425e:	69f8      	ldr	r0, [r7, #28]
 8004260:	f7ff ff2a 	bl	80040b8 <prvInsertTimerInActiveList>
                        break;
 8004264:	e015      	b.n	8004292 <prvProcessReceivedCommands+0x156>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                        {
                            /* The timer has already been removed from the active list,
                             * just free up the memory if the memory was dynamically
                             * allocated. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8004266:	69fb      	ldr	r3, [r7, #28]
 8004268:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800426c:	f003 0302 	and.w	r3, r3, #2
 8004270:	2b00      	cmp	r3, #0
 8004272:	d103      	bne.n	800427c <prvProcessReceivedCommands+0x140>
                            {
                                vPortFree( pxTimer );
 8004274:	69f8      	ldr	r0, [r7, #28]
 8004276:	f000 fc0b 	bl	8004a90 <vPortFree>
 800427a:	e00a      	b.n	8004292 <prvProcessReceivedCommands+0x156>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 800427c:	69fb      	ldr	r3, [r7, #28]
 800427e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004282:	f023 0301 	bic.w	r3, r3, #1
 8004286:	b2da      	uxtb	r2, r3
 8004288:	69fb      	ldr	r3, [r7, #28]
 800428a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                             * no need to free the memory - just mark the timer as
                             * "not active". */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                        }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 800428e:	e000      	b.n	8004292 <prvProcessReceivedCommands+0x156>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 8004290:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004292:	4b08      	ldr	r3, [pc, #32]	; (80042b4 <prvProcessReceivedCommands+0x178>)
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f107 0108 	add.w	r1, r7, #8
 800429a:	2200      	movs	r2, #0
 800429c:	4618      	mov	r0, r3
 800429e:	f7fe fc4f 	bl	8002b40 <xQueueReceive>
 80042a2:	4603      	mov	r3, r0
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	f47f af4d 	bne.w	8004144 <prvProcessReceivedCommands+0x8>
        }
    }
 80042aa:	bf00      	nop
 80042ac:	bf00      	nop
 80042ae:	3720      	adds	r7, #32
 80042b0:	46bd      	mov	sp, r7
 80042b2:	bd80      	pop	{r7, pc}
 80042b4:	20000294 	.word	0x20000294

080042b8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 80042b8:	b580      	push	{r7, lr}
 80042ba:	b082      	sub	sp, #8
 80042bc:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80042be:	e009      	b.n	80042d4 <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80042c0:	4b0e      	ldr	r3, [pc, #56]	; (80042fc <prvSwitchTimerLists+0x44>)
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	68db      	ldr	r3, [r3, #12]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 80042ca:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80042ce:	6838      	ldr	r0, [r7, #0]
 80042d0:	f7ff fe1e 	bl	8003f10 <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80042d4:	4b09      	ldr	r3, [pc, #36]	; (80042fc <prvSwitchTimerLists+0x44>)
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d1f0      	bne.n	80042c0 <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 80042de:	4b07      	ldr	r3, [pc, #28]	; (80042fc <prvSwitchTimerLists+0x44>)
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 80042e4:	4b06      	ldr	r3, [pc, #24]	; (8004300 <prvSwitchTimerLists+0x48>)
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	4a04      	ldr	r2, [pc, #16]	; (80042fc <prvSwitchTimerLists+0x44>)
 80042ea:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 80042ec:	4a04      	ldr	r2, [pc, #16]	; (8004300 <prvSwitchTimerLists+0x48>)
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	6013      	str	r3, [r2, #0]
    }
 80042f2:	bf00      	nop
 80042f4:	3708      	adds	r7, #8
 80042f6:	46bd      	mov	sp, r7
 80042f8:	bd80      	pop	{r7, pc}
 80042fa:	bf00      	nop
 80042fc:	2000028c 	.word	0x2000028c
 8004300:	20000290 	.word	0x20000290

08004304 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8004304:	b580      	push	{r7, lr}
 8004306:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8004308:	f000 f9dc 	bl	80046c4 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 800430c:	4b12      	ldr	r3, [pc, #72]	; (8004358 <prvCheckForValidListAndQueue+0x54>)
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	2b00      	cmp	r3, #0
 8004312:	d11d      	bne.n	8004350 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8004314:	4811      	ldr	r0, [pc, #68]	; (800435c <prvCheckForValidListAndQueue+0x58>)
 8004316:	f7fe fa89 	bl	800282c <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 800431a:	4811      	ldr	r0, [pc, #68]	; (8004360 <prvCheckForValidListAndQueue+0x5c>)
 800431c:	f7fe fa86 	bl	800282c <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8004320:	4b10      	ldr	r3, [pc, #64]	; (8004364 <prvCheckForValidListAndQueue+0x60>)
 8004322:	4a0e      	ldr	r2, [pc, #56]	; (800435c <prvCheckForValidListAndQueue+0x58>)
 8004324:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8004326:	4b10      	ldr	r3, [pc, #64]	; (8004368 <prvCheckForValidListAndQueue+0x64>)
 8004328:	4a0d      	ldr	r2, [pc, #52]	; (8004360 <prvCheckForValidListAndQueue+0x5c>)
 800432a:	601a      	str	r2, [r3, #0]

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                }
                #else
                {
                    xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 800432c:	2200      	movs	r2, #0
 800432e:	210c      	movs	r1, #12
 8004330:	200a      	movs	r0, #10
 8004332:	f7fe fb8d 	bl	8002a50 <xQueueGenericCreate>
 8004336:	4603      	mov	r3, r0
 8004338:	4a07      	ldr	r2, [pc, #28]	; (8004358 <prvCheckForValidListAndQueue+0x54>)
 800433a:	6013      	str	r3, [r2, #0]
                }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                {
                    if( xTimerQueue != NULL )
 800433c:	4b06      	ldr	r3, [pc, #24]	; (8004358 <prvCheckForValidListAndQueue+0x54>)
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	2b00      	cmp	r3, #0
 8004342:	d005      	beq.n	8004350 <prvCheckForValidListAndQueue+0x4c>
                    {
                        vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004344:	4b04      	ldr	r3, [pc, #16]	; (8004358 <prvCheckForValidListAndQueue+0x54>)
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	4908      	ldr	r1, [pc, #32]	; (800436c <prvCheckForValidListAndQueue+0x68>)
 800434a:	4618      	mov	r0, r3
 800434c:	f7fe fd8c 	bl	8002e68 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8004350:	f000 f9e8 	bl	8004724 <vPortExitCritical>
    }
 8004354:	bf00      	nop
 8004356:	bd80      	pop	{r7, pc}
 8004358:	20000294 	.word	0x20000294
 800435c:	20000264 	.word	0x20000264
 8004360:	20000278 	.word	0x20000278
 8004364:	2000028c 	.word	0x2000028c
 8004368:	20000290 	.word	0x20000290
 800436c:	0800776c 	.word	0x0800776c

08004370 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8004370:	b480      	push	{r7}
 8004372:	b085      	sub	sp, #20
 8004374:	af00      	add	r7, sp, #0
 8004376:	60f8      	str	r0, [r7, #12]
 8004378:	60b9      	str	r1, [r7, #8]
 800437a:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	3b04      	subs	r3, #4
 8004380:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004388:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	3b04      	subs	r3, #4
 800438e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8004390:	68bb      	ldr	r3, [r7, #8]
 8004392:	f023 0201 	bic.w	r2, r3, #1
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	3b04      	subs	r3, #4
 800439e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 80043a0:	4a0c      	ldr	r2, [pc, #48]	; (80043d4 <pxPortInitialiseStack+0x64>)
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	3b14      	subs	r3, #20
 80043aa:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 80043ac:	687a      	ldr	r2, [r7, #4]
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	3b04      	subs	r3, #4
 80043b6:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	f06f 0202 	mvn.w	r2, #2
 80043be:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	3b20      	subs	r3, #32
 80043c4:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 80043c6:	68fb      	ldr	r3, [r7, #12]
}
 80043c8:	4618      	mov	r0, r3
 80043ca:	3714      	adds	r7, #20
 80043cc:	46bd      	mov	sp, r7
 80043ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d2:	4770      	bx	lr
 80043d4:	080043d9 	.word	0x080043d9

080043d8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80043d8:	b480      	push	{r7}
 80043da:	b085      	sub	sp, #20
 80043dc:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 80043de:	2300      	movs	r3, #0
 80043e0:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 80043e2:	4b12      	ldr	r3, [pc, #72]	; (800442c <prvTaskExitError+0x54>)
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80043ea:	d00a      	beq.n	8004402 <prvTaskExitError+0x2a>
        __asm volatile
 80043ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043f0:	f383 8811 	msr	BASEPRI, r3
 80043f4:	f3bf 8f6f 	isb	sy
 80043f8:	f3bf 8f4f 	dsb	sy
 80043fc:	60fb      	str	r3, [r7, #12]
    }
 80043fe:	bf00      	nop
 8004400:	e7fe      	b.n	8004400 <prvTaskExitError+0x28>
        __asm volatile
 8004402:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004406:	f383 8811 	msr	BASEPRI, r3
 800440a:	f3bf 8f6f 	isb	sy
 800440e:	f3bf 8f4f 	dsb	sy
 8004412:	60bb      	str	r3, [r7, #8]
    }
 8004414:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8004416:	bf00      	nop
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	2b00      	cmp	r3, #0
 800441c:	d0fc      	beq.n	8004418 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 800441e:	bf00      	nop
 8004420:	bf00      	nop
 8004422:	3714      	adds	r7, #20
 8004424:	46bd      	mov	sp, r7
 8004426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800442a:	4770      	bx	lr
 800442c:	20000010 	.word	0x20000010

08004430 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8004430:	4b07      	ldr	r3, [pc, #28]	; (8004450 <pxCurrentTCBConst2>)
 8004432:	6819      	ldr	r1, [r3, #0]
 8004434:	6808      	ldr	r0, [r1, #0]
 8004436:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800443a:	f380 8809 	msr	PSP, r0
 800443e:	f3bf 8f6f 	isb	sy
 8004442:	f04f 0000 	mov.w	r0, #0
 8004446:	f380 8811 	msr	BASEPRI, r0
 800444a:	4770      	bx	lr
 800444c:	f3af 8000 	nop.w

08004450 <pxCurrentTCBConst2>:
 8004450:	20000124 	.word	0x20000124
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8004454:	bf00      	nop
 8004456:	bf00      	nop

08004458 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8004458:	4808      	ldr	r0, [pc, #32]	; (800447c <prvPortStartFirstTask+0x24>)
 800445a:	6800      	ldr	r0, [r0, #0]
 800445c:	6800      	ldr	r0, [r0, #0]
 800445e:	f380 8808 	msr	MSP, r0
 8004462:	f04f 0000 	mov.w	r0, #0
 8004466:	f380 8814 	msr	CONTROL, r0
 800446a:	b662      	cpsie	i
 800446c:	b661      	cpsie	f
 800446e:	f3bf 8f4f 	dsb	sy
 8004472:	f3bf 8f6f 	isb	sy
 8004476:	df00      	svc	0
 8004478:	bf00      	nop
 800447a:	0000      	.short	0x0000
 800447c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8004480:	bf00      	nop
 8004482:	bf00      	nop

08004484 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004484:	b580      	push	{r7, lr}
 8004486:	b086      	sub	sp, #24
 8004488:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800448a:	4b46      	ldr	r3, [pc, #280]	; (80045a4 <xPortStartScheduler+0x120>)
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	4a46      	ldr	r2, [pc, #280]	; (80045a8 <xPortStartScheduler+0x124>)
 8004490:	4293      	cmp	r3, r2
 8004492:	d10a      	bne.n	80044aa <xPortStartScheduler+0x26>
        __asm volatile
 8004494:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004498:	f383 8811 	msr	BASEPRI, r3
 800449c:	f3bf 8f6f 	isb	sy
 80044a0:	f3bf 8f4f 	dsb	sy
 80044a4:	613b      	str	r3, [r7, #16]
    }
 80044a6:	bf00      	nop
 80044a8:	e7fe      	b.n	80044a8 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80044aa:	4b3e      	ldr	r3, [pc, #248]	; (80045a4 <xPortStartScheduler+0x120>)
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	4a3f      	ldr	r2, [pc, #252]	; (80045ac <xPortStartScheduler+0x128>)
 80044b0:	4293      	cmp	r3, r2
 80044b2:	d10a      	bne.n	80044ca <xPortStartScheduler+0x46>
        __asm volatile
 80044b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044b8:	f383 8811 	msr	BASEPRI, r3
 80044bc:	f3bf 8f6f 	isb	sy
 80044c0:	f3bf 8f4f 	dsb	sy
 80044c4:	60fb      	str	r3, [r7, #12]
    }
 80044c6:	bf00      	nop
 80044c8:	e7fe      	b.n	80044c8 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint32_t ulOriginalPriority;
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80044ca:	4b39      	ldr	r3, [pc, #228]	; (80045b0 <xPortStartScheduler+0x12c>)
 80044cc:	617b      	str	r3, [r7, #20]
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ulOriginalPriority = *pucFirstUserPriorityRegister;
 80044ce:	697b      	ldr	r3, [r7, #20]
 80044d0:	781b      	ldrb	r3, [r3, #0]
 80044d2:	b2db      	uxtb	r3, r3
 80044d4:	607b      	str	r3, [r7, #4]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80044d6:	697b      	ldr	r3, [r7, #20]
 80044d8:	22ff      	movs	r2, #255	; 0xff
 80044da:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80044dc:	697b      	ldr	r3, [r7, #20]
 80044de:	781b      	ldrb	r3, [r3, #0]
 80044e0:	b2db      	uxtb	r3, r3
 80044e2:	70fb      	strb	r3, [r7, #3]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80044e4:	78fb      	ldrb	r3, [r7, #3]
 80044e6:	b2db      	uxtb	r3, r3
 80044e8:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80044ec:	b2da      	uxtb	r2, r3
 80044ee:	4b31      	ldr	r3, [pc, #196]	; (80045b4 <xPortStartScheduler+0x130>)
 80044f0:	701a      	strb	r2, [r3, #0]

        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */
        ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80044f2:	4b31      	ldr	r3, [pc, #196]	; (80045b8 <xPortStartScheduler+0x134>)
 80044f4:	2207      	movs	r2, #7
 80044f6:	601a      	str	r2, [r3, #0]

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80044f8:	e009      	b.n	800450e <xPortStartScheduler+0x8a>
        {
            ulMaxPRIGROUPValue--;
 80044fa:	4b2f      	ldr	r3, [pc, #188]	; (80045b8 <xPortStartScheduler+0x134>)
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	3b01      	subs	r3, #1
 8004500:	4a2d      	ldr	r2, [pc, #180]	; (80045b8 <xPortStartScheduler+0x134>)
 8004502:	6013      	str	r3, [r2, #0]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004504:	78fb      	ldrb	r3, [r7, #3]
 8004506:	b2db      	uxtb	r3, r3
 8004508:	005b      	lsls	r3, r3, #1
 800450a:	b2db      	uxtb	r3, r3
 800450c:	70fb      	strb	r3, [r7, #3]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800450e:	78fb      	ldrb	r3, [r7, #3]
 8004510:	b2db      	uxtb	r3, r3
 8004512:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004516:	2b80      	cmp	r3, #128	; 0x80
 8004518:	d0ef      	beq.n	80044fa <xPortStartScheduler+0x76>
        #ifdef configPRIO_BITS
        {
            /* Check the FreeRTOS configuration that defines the number of
             * priority bits matches the number of priority bits actually queried
             * from the hardware. */
            configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800451a:	4b27      	ldr	r3, [pc, #156]	; (80045b8 <xPortStartScheduler+0x134>)
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	f1c3 0307 	rsb	r3, r3, #7
 8004522:	2b04      	cmp	r3, #4
 8004524:	d00a      	beq.n	800453c <xPortStartScheduler+0xb8>
        __asm volatile
 8004526:	f04f 0350 	mov.w	r3, #80	; 0x50
 800452a:	f383 8811 	msr	BASEPRI, r3
 800452e:	f3bf 8f6f 	isb	sy
 8004532:	f3bf 8f4f 	dsb	sy
 8004536:	60bb      	str	r3, [r7, #8]
    }
 8004538:	bf00      	nop
 800453a:	e7fe      	b.n	800453a <xPortStartScheduler+0xb6>
        }
        #endif

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800453c:	4b1e      	ldr	r3, [pc, #120]	; (80045b8 <xPortStartScheduler+0x134>)
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	021b      	lsls	r3, r3, #8
 8004542:	4a1d      	ldr	r2, [pc, #116]	; (80045b8 <xPortStartScheduler+0x134>)
 8004544:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004546:	4b1c      	ldr	r3, [pc, #112]	; (80045b8 <xPortStartScheduler+0x134>)
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800454e:	4a1a      	ldr	r2, [pc, #104]	; (80045b8 <xPortStartScheduler+0x134>)
 8004550:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ulOriginalPriority;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	b2da      	uxtb	r2, r3
 8004556:	697b      	ldr	r3, [r7, #20]
 8004558:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 800455a:	4b18      	ldr	r3, [pc, #96]	; (80045bc <xPortStartScheduler+0x138>)
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	4a17      	ldr	r2, [pc, #92]	; (80045bc <xPortStartScheduler+0x138>)
 8004560:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004564:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8004566:	4b15      	ldr	r3, [pc, #84]	; (80045bc <xPortStartScheduler+0x138>)
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	4a14      	ldr	r2, [pc, #80]	; (80045bc <xPortStartScheduler+0x138>)
 800456c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004570:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8004572:	f000 f963 	bl	800483c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8004576:	4b12      	ldr	r3, [pc, #72]	; (80045c0 <xPortStartScheduler+0x13c>)
 8004578:	2200      	movs	r2, #0
 800457a:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 800457c:	f000 f982 	bl	8004884 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004580:	4b10      	ldr	r3, [pc, #64]	; (80045c4 <xPortStartScheduler+0x140>)
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	4a0f      	ldr	r2, [pc, #60]	; (80045c4 <xPortStartScheduler+0x140>)
 8004586:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800458a:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 800458c:	f7ff ff64 	bl	8004458 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8004590:	f7ff f8ea 	bl	8003768 <vTaskSwitchContext>
    prvTaskExitError();
 8004594:	f7ff ff20 	bl	80043d8 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8004598:	2300      	movs	r3, #0
}
 800459a:	4618      	mov	r0, r3
 800459c:	3718      	adds	r7, #24
 800459e:	46bd      	mov	sp, r7
 80045a0:	bd80      	pop	{r7, pc}
 80045a2:	bf00      	nop
 80045a4:	e000ed00 	.word	0xe000ed00
 80045a8:	410fc271 	.word	0x410fc271
 80045ac:	410fc270 	.word	0x410fc270
 80045b0:	e000e400 	.word	0xe000e400
 80045b4:	200002a0 	.word	0x200002a0
 80045b8:	200002a4 	.word	0x200002a4
 80045bc:	e000ed20 	.word	0xe000ed20
 80045c0:	20000010 	.word	0x20000010
 80045c4:	e000ef34 	.word	0xe000ef34

080045c8 <vInitPrioGroupValue>:
/*-----------------------------------------------------------*/


void vInitPrioGroupValue(void)
{
 80045c8:	b480      	push	{r7}
 80045ca:	b087      	sub	sp, #28
 80045cc:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80045ce:	4b37      	ldr	r3, [pc, #220]	; (80046ac <vInitPrioGroupValue+0xe4>)
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	4a37      	ldr	r2, [pc, #220]	; (80046b0 <vInitPrioGroupValue+0xe8>)
 80045d4:	4293      	cmp	r3, r2
 80045d6:	d10a      	bne.n	80045ee <vInitPrioGroupValue+0x26>
        __asm volatile
 80045d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045dc:	f383 8811 	msr	BASEPRI, r3
 80045e0:	f3bf 8f6f 	isb	sy
 80045e4:	f3bf 8f4f 	dsb	sy
 80045e8:	613b      	str	r3, [r7, #16]
    }
 80045ea:	bf00      	nop
 80045ec:	e7fe      	b.n	80045ec <vInitPrioGroupValue+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80045ee:	4b2f      	ldr	r3, [pc, #188]	; (80046ac <vInitPrioGroupValue+0xe4>)
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	4a30      	ldr	r2, [pc, #192]	; (80046b4 <vInitPrioGroupValue+0xec>)
 80045f4:	4293      	cmp	r3, r2
 80045f6:	d10a      	bne.n	800460e <vInitPrioGroupValue+0x46>
        __asm volatile
 80045f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045fc:	f383 8811 	msr	BASEPRI, r3
 8004600:	f3bf 8f6f 	isb	sy
 8004604:	f3bf 8f4f 	dsb	sy
 8004608:	60fb      	str	r3, [r7, #12]
    }
 800460a:	bf00      	nop
 800460c:	e7fe      	b.n	800460c <vInitPrioGroupValue+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800460e:	4b2a      	ldr	r3, [pc, #168]	; (80046b8 <vInitPrioGroupValue+0xf0>)
 8004610:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004612:	697b      	ldr	r3, [r7, #20]
 8004614:	781b      	ldrb	r3, [r3, #0]
 8004616:	b2db      	uxtb	r3, r3
 8004618:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800461a:	697b      	ldr	r3, [r7, #20]
 800461c:	22ff      	movs	r2, #255	; 0xff
 800461e:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004620:	697b      	ldr	r3, [r7, #20]
 8004622:	781b      	ldrb	r3, [r3, #0]
 8004624:	b2db      	uxtb	r3, r3
 8004626:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004628:	78fb      	ldrb	r3, [r7, #3]
 800462a:	b2db      	uxtb	r3, r3
 800462c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004630:	b2da      	uxtb	r2, r3
 8004632:	4b22      	ldr	r3, [pc, #136]	; (80046bc <vInitPrioGroupValue+0xf4>)
 8004634:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004636:	4b22      	ldr	r3, [pc, #136]	; (80046c0 <vInitPrioGroupValue+0xf8>)
 8004638:	2207      	movs	r2, #7
 800463a:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800463c:	e009      	b.n	8004652 <vInitPrioGroupValue+0x8a>
            {
                ulMaxPRIGROUPValue--;
 800463e:	4b20      	ldr	r3, [pc, #128]	; (80046c0 <vInitPrioGroupValue+0xf8>)
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	3b01      	subs	r3, #1
 8004644:	4a1e      	ldr	r2, [pc, #120]	; (80046c0 <vInitPrioGroupValue+0xf8>)
 8004646:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004648:	78fb      	ldrb	r3, [r7, #3]
 800464a:	b2db      	uxtb	r3, r3
 800464c:	005b      	lsls	r3, r3, #1
 800464e:	b2db      	uxtb	r3, r3
 8004650:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004652:	78fb      	ldrb	r3, [r7, #3]
 8004654:	b2db      	uxtb	r3, r3
 8004656:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800465a:	2b80      	cmp	r3, #128	; 0x80
 800465c:	d0ef      	beq.n	800463e <vInitPrioGroupValue+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800465e:	4b18      	ldr	r3, [pc, #96]	; (80046c0 <vInitPrioGroupValue+0xf8>)
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f1c3 0307 	rsb	r3, r3, #7
 8004666:	2b04      	cmp	r3, #4
 8004668:	d00a      	beq.n	8004680 <vInitPrioGroupValue+0xb8>
        __asm volatile
 800466a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800466e:	f383 8811 	msr	BASEPRI, r3
 8004672:	f3bf 8f6f 	isb	sy
 8004676:	f3bf 8f4f 	dsb	sy
 800467a:	60bb      	str	r3, [r7, #8]
    }
 800467c:	bf00      	nop
 800467e:	e7fe      	b.n	800467e <vInitPrioGroupValue+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004680:	4b0f      	ldr	r3, [pc, #60]	; (80046c0 <vInitPrioGroupValue+0xf8>)
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	021b      	lsls	r3, r3, #8
 8004686:	4a0e      	ldr	r2, [pc, #56]	; (80046c0 <vInitPrioGroupValue+0xf8>)
 8004688:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800468a:	4b0d      	ldr	r3, [pc, #52]	; (80046c0 <vInitPrioGroupValue+0xf8>)
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004692:	4a0b      	ldr	r2, [pc, #44]	; (80046c0 <vInitPrioGroupValue+0xf8>)
 8004694:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	b2da      	uxtb	r2, r3
 800469a:	697b      	ldr	r3, [r7, #20]
 800469c:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */
}
 800469e:	bf00      	nop
 80046a0:	371c      	adds	r7, #28
 80046a2:	46bd      	mov	sp, r7
 80046a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a8:	4770      	bx	lr
 80046aa:	bf00      	nop
 80046ac:	e000ed00 	.word	0xe000ed00
 80046b0:	410fc271 	.word	0x410fc271
 80046b4:	410fc270 	.word	0x410fc270
 80046b8:	e000e400 	.word	0xe000e400
 80046bc:	200002a0 	.word	0x200002a0
 80046c0:	200002a4 	.word	0x200002a4

080046c4 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80046c4:	b480      	push	{r7}
 80046c6:	b083      	sub	sp, #12
 80046c8:	af00      	add	r7, sp, #0
        __asm volatile
 80046ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046ce:	f383 8811 	msr	BASEPRI, r3
 80046d2:	f3bf 8f6f 	isb	sy
 80046d6:	f3bf 8f4f 	dsb	sy
 80046da:	607b      	str	r3, [r7, #4]
    }
 80046dc:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 80046de:	4b0f      	ldr	r3, [pc, #60]	; (800471c <vPortEnterCritical+0x58>)
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	3301      	adds	r3, #1
 80046e4:	4a0d      	ldr	r2, [pc, #52]	; (800471c <vPortEnterCritical+0x58>)
 80046e6:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 80046e8:	4b0c      	ldr	r3, [pc, #48]	; (800471c <vPortEnterCritical+0x58>)
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	2b01      	cmp	r3, #1
 80046ee:	d10f      	bne.n	8004710 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80046f0:	4b0b      	ldr	r3, [pc, #44]	; (8004720 <vPortEnterCritical+0x5c>)
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	b2db      	uxtb	r3, r3
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d00a      	beq.n	8004710 <vPortEnterCritical+0x4c>
        __asm volatile
 80046fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046fe:	f383 8811 	msr	BASEPRI, r3
 8004702:	f3bf 8f6f 	isb	sy
 8004706:	f3bf 8f4f 	dsb	sy
 800470a:	603b      	str	r3, [r7, #0]
    }
 800470c:	bf00      	nop
 800470e:	e7fe      	b.n	800470e <vPortEnterCritical+0x4a>
    }
}
 8004710:	bf00      	nop
 8004712:	370c      	adds	r7, #12
 8004714:	46bd      	mov	sp, r7
 8004716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800471a:	4770      	bx	lr
 800471c:	20000010 	.word	0x20000010
 8004720:	e000ed04 	.word	0xe000ed04

08004724 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004724:	b480      	push	{r7}
 8004726:	b083      	sub	sp, #12
 8004728:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 800472a:	4b12      	ldr	r3, [pc, #72]	; (8004774 <vPortExitCritical+0x50>)
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	2b00      	cmp	r3, #0
 8004730:	d10a      	bne.n	8004748 <vPortExitCritical+0x24>
        __asm volatile
 8004732:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004736:	f383 8811 	msr	BASEPRI, r3
 800473a:	f3bf 8f6f 	isb	sy
 800473e:	f3bf 8f4f 	dsb	sy
 8004742:	607b      	str	r3, [r7, #4]
    }
 8004744:	bf00      	nop
 8004746:	e7fe      	b.n	8004746 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8004748:	4b0a      	ldr	r3, [pc, #40]	; (8004774 <vPortExitCritical+0x50>)
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	3b01      	subs	r3, #1
 800474e:	4a09      	ldr	r2, [pc, #36]	; (8004774 <vPortExitCritical+0x50>)
 8004750:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8004752:	4b08      	ldr	r3, [pc, #32]	; (8004774 <vPortExitCritical+0x50>)
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	2b00      	cmp	r3, #0
 8004758:	d105      	bne.n	8004766 <vPortExitCritical+0x42>
 800475a:	2300      	movs	r3, #0
 800475c:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 800475e:	683b      	ldr	r3, [r7, #0]
 8004760:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8004764:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8004766:	bf00      	nop
 8004768:	370c      	adds	r7, #12
 800476a:	46bd      	mov	sp, r7
 800476c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004770:	4770      	bx	lr
 8004772:	bf00      	nop
 8004774:	20000010 	.word	0x20000010
	...

08004780 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8004780:	f3ef 8009 	mrs	r0, PSP
 8004784:	f3bf 8f6f 	isb	sy
 8004788:	4b15      	ldr	r3, [pc, #84]	; (80047e0 <pxCurrentTCBConst>)
 800478a:	681a      	ldr	r2, [r3, #0]
 800478c:	f01e 0f10 	tst.w	lr, #16
 8004790:	bf08      	it	eq
 8004792:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004796:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800479a:	6010      	str	r0, [r2, #0]
 800479c:	e92d 0009 	stmdb	sp!, {r0, r3}
 80047a0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80047a4:	f380 8811 	msr	BASEPRI, r0
 80047a8:	f3bf 8f4f 	dsb	sy
 80047ac:	f3bf 8f6f 	isb	sy
 80047b0:	f7fe ffda 	bl	8003768 <vTaskSwitchContext>
 80047b4:	f04f 0000 	mov.w	r0, #0
 80047b8:	f380 8811 	msr	BASEPRI, r0
 80047bc:	bc09      	pop	{r0, r3}
 80047be:	6819      	ldr	r1, [r3, #0]
 80047c0:	6808      	ldr	r0, [r1, #0]
 80047c2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80047c6:	f01e 0f10 	tst.w	lr, #16
 80047ca:	bf08      	it	eq
 80047cc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80047d0:	f380 8809 	msr	PSP, r0
 80047d4:	f3bf 8f6f 	isb	sy
 80047d8:	4770      	bx	lr
 80047da:	bf00      	nop
 80047dc:	f3af 8000 	nop.w

080047e0 <pxCurrentTCBConst>:
 80047e0:	20000124 	.word	0x20000124
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 80047e4:	bf00      	nop
 80047e6:	bf00      	nop

080047e8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80047e8:	b580      	push	{r7, lr}
 80047ea:	b082      	sub	sp, #8
 80047ec:	af00      	add	r7, sp, #0
        __asm volatile
 80047ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047f2:	f383 8811 	msr	BASEPRI, r3
 80047f6:	f3bf 8f6f 	isb	sy
 80047fa:	f3bf 8f4f 	dsb	sy
 80047fe:	607b      	str	r3, [r7, #4]
    }
 8004800:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 8004802:	f001 fff9 	bl	80067f8 <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8004806:	f7fe feb7 	bl	8003578 <xTaskIncrementTick>
 800480a:	4603      	mov	r3, r0
 800480c:	2b00      	cmp	r3, #0
 800480e:	d006      	beq.n	800481e <SysTick_Handler+0x36>
        {
			traceISR_EXIT_TO_SCHEDULER();
 8004810:	f002 f850 	bl	80068b4 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004814:	4b08      	ldr	r3, [pc, #32]	; (8004838 <SysTick_Handler+0x50>)
 8004816:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800481a:	601a      	str	r2, [r3, #0]
 800481c:	e001      	b.n	8004822 <SysTick_Handler+0x3a>
        }
		else
		{
			traceISR_EXIT();
 800481e:	f002 f82d 	bl	800687c <SEGGER_SYSVIEW_RecordExitISR>
 8004822:	2300      	movs	r3, #0
 8004824:	603b      	str	r3, [r7, #0]
        __asm volatile
 8004826:	683b      	ldr	r3, [r7, #0]
 8004828:	f383 8811 	msr	BASEPRI, r3
    }
 800482c:	bf00      	nop
		}
    }
    portENABLE_INTERRUPTS();
}
 800482e:	bf00      	nop
 8004830:	3708      	adds	r7, #8
 8004832:	46bd      	mov	sp, r7
 8004834:	bd80      	pop	{r7, pc}
 8004836:	bf00      	nop
 8004838:	e000ed04 	.word	0xe000ed04

0800483c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 800483c:	b480      	push	{r7}
 800483e:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004840:	4b0b      	ldr	r3, [pc, #44]	; (8004870 <vPortSetupTimerInterrupt+0x34>)
 8004842:	2200      	movs	r2, #0
 8004844:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004846:	4b0b      	ldr	r3, [pc, #44]	; (8004874 <vPortSetupTimerInterrupt+0x38>)
 8004848:	2200      	movs	r2, #0
 800484a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800484c:	4b0a      	ldr	r3, [pc, #40]	; (8004878 <vPortSetupTimerInterrupt+0x3c>)
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	4a0a      	ldr	r2, [pc, #40]	; (800487c <vPortSetupTimerInterrupt+0x40>)
 8004852:	fba2 2303 	umull	r2, r3, r2, r3
 8004856:	099b      	lsrs	r3, r3, #6
 8004858:	4a09      	ldr	r2, [pc, #36]	; (8004880 <vPortSetupTimerInterrupt+0x44>)
 800485a:	3b01      	subs	r3, #1
 800485c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800485e:	4b04      	ldr	r3, [pc, #16]	; (8004870 <vPortSetupTimerInterrupt+0x34>)
 8004860:	2207      	movs	r2, #7
 8004862:	601a      	str	r2, [r3, #0]
}
 8004864:	bf00      	nop
 8004866:	46bd      	mov	sp, r7
 8004868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800486c:	4770      	bx	lr
 800486e:	bf00      	nop
 8004870:	e000e010 	.word	0xe000e010
 8004874:	e000e018 	.word	0xe000e018
 8004878:	20000000 	.word	0x20000000
 800487c:	10624dd3 	.word	0x10624dd3
 8004880:	e000e014 	.word	0xe000e014

08004884 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8004884:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004894 <vPortEnableVFP+0x10>
 8004888:	6801      	ldr	r1, [r0, #0]
 800488a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800488e:	6001      	str	r1, [r0, #0]
 8004890:	4770      	bx	lr
 8004892:	0000      	.short	0x0000
 8004894:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8004898:	bf00      	nop
 800489a:	bf00      	nop

0800489c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 800489c:	b480      	push	{r7}
 800489e:	b085      	sub	sp, #20
 80048a0:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 80048a2:	f3ef 8305 	mrs	r3, IPSR
 80048a6:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	2b0f      	cmp	r3, #15
 80048ac:	d914      	bls.n	80048d8 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80048ae:	4a17      	ldr	r2, [pc, #92]	; (800490c <vPortValidateInterruptPriority+0x70>)
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	4413      	add	r3, r2
 80048b4:	781b      	ldrb	r3, [r3, #0]
 80048b6:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80048b8:	4b15      	ldr	r3, [pc, #84]	; (8004910 <vPortValidateInterruptPriority+0x74>)
 80048ba:	781b      	ldrb	r3, [r3, #0]
 80048bc:	7afa      	ldrb	r2, [r7, #11]
 80048be:	429a      	cmp	r2, r3
 80048c0:	d20a      	bcs.n	80048d8 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 80048c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048c6:	f383 8811 	msr	BASEPRI, r3
 80048ca:	f3bf 8f6f 	isb	sy
 80048ce:	f3bf 8f4f 	dsb	sy
 80048d2:	607b      	str	r3, [r7, #4]
    }
 80048d4:	bf00      	nop
 80048d6:	e7fe      	b.n	80048d6 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80048d8:	4b0e      	ldr	r3, [pc, #56]	; (8004914 <vPortValidateInterruptPriority+0x78>)
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80048e0:	4b0d      	ldr	r3, [pc, #52]	; (8004918 <vPortValidateInterruptPriority+0x7c>)
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	429a      	cmp	r2, r3
 80048e6:	d90a      	bls.n	80048fe <vPortValidateInterruptPriority+0x62>
        __asm volatile
 80048e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048ec:	f383 8811 	msr	BASEPRI, r3
 80048f0:	f3bf 8f6f 	isb	sy
 80048f4:	f3bf 8f4f 	dsb	sy
 80048f8:	603b      	str	r3, [r7, #0]
    }
 80048fa:	bf00      	nop
 80048fc:	e7fe      	b.n	80048fc <vPortValidateInterruptPriority+0x60>
    }
 80048fe:	bf00      	nop
 8004900:	3714      	adds	r7, #20
 8004902:	46bd      	mov	sp, r7
 8004904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004908:	4770      	bx	lr
 800490a:	bf00      	nop
 800490c:	e000e3f0 	.word	0xe000e3f0
 8004910:	200002a0 	.word	0x200002a0
 8004914:	e000ed0c 	.word	0xe000ed0c
 8004918:	200002a4 	.word	0x200002a4

0800491c <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 800491c:	b580      	push	{r7, lr}
 800491e:	b08a      	sub	sp, #40	; 0x28
 8004920:	af00      	add	r7, sp, #0
 8004922:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 8004924:	2300      	movs	r3, #0
 8004926:	61fb      	str	r3, [r7, #28]
    size_t xAdditionalRequiredSize;

    vTaskSuspendAll();
 8004928:	f7fe fd04 	bl	8003334 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 800492c:	4b53      	ldr	r3, [pc, #332]	; (8004a7c <pvPortMalloc+0x160>)
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	2b00      	cmp	r3, #0
 8004932:	d101      	bne.n	8004938 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8004934:	f000 f908 	bl	8004b48 <prvHeapInit>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xWantedSize > 0 )
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	2b00      	cmp	r3, #0
 800493c:	d012      	beq.n	8004964 <pvPortMalloc+0x48>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. Some
             * additional increment may also be needed for alignment. */
            xAdditionalRequiredSize = xHeapStructSize + portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 800493e:	2208      	movs	r2, #8
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	f003 0307 	and.w	r3, r3, #7
 8004946:	1ad3      	subs	r3, r2, r3
 8004948:	3308      	adds	r3, #8
 800494a:	61bb      	str	r3, [r7, #24]

            if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 800494c:	69bb      	ldr	r3, [r7, #24]
 800494e:	43db      	mvns	r3, r3
 8004950:	687a      	ldr	r2, [r7, #4]
 8004952:	429a      	cmp	r2, r3
 8004954:	d804      	bhi.n	8004960 <pvPortMalloc+0x44>
            {
                xWantedSize += xAdditionalRequiredSize;
 8004956:	687a      	ldr	r2, [r7, #4]
 8004958:	69bb      	ldr	r3, [r7, #24]
 800495a:	4413      	add	r3, r2
 800495c:	607b      	str	r3, [r7, #4]
 800495e:	e001      	b.n	8004964 <pvPortMalloc+0x48>
            }
            else
            {
                xWantedSize = 0;
 8004960:	2300      	movs	r3, #0
 8004962:	607b      	str	r3, [r7, #4]

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	2b00      	cmp	r3, #0
 8004968:	db70      	blt.n	8004a4c <pvPortMalloc+0x130>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	2b00      	cmp	r3, #0
 800496e:	d06d      	beq.n	8004a4c <pvPortMalloc+0x130>
 8004970:	4b43      	ldr	r3, [pc, #268]	; (8004a80 <pvPortMalloc+0x164>)
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	687a      	ldr	r2, [r7, #4]
 8004976:	429a      	cmp	r2, r3
 8004978:	d868      	bhi.n	8004a4c <pvPortMalloc+0x130>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 800497a:	4b42      	ldr	r3, [pc, #264]	; (8004a84 <pvPortMalloc+0x168>)
 800497c:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 800497e:	4b41      	ldr	r3, [pc, #260]	; (8004a84 <pvPortMalloc+0x168>)
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004984:	e004      	b.n	8004990 <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
 8004986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004988:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 800498a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004992:	685b      	ldr	r3, [r3, #4]
 8004994:	687a      	ldr	r2, [r7, #4]
 8004996:	429a      	cmp	r2, r3
 8004998:	d903      	bls.n	80049a2 <pvPortMalloc+0x86>
 800499a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d1f1      	bne.n	8004986 <pvPortMalloc+0x6a>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 80049a2:	4b36      	ldr	r3, [pc, #216]	; (8004a7c <pvPortMalloc+0x160>)
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80049a8:	429a      	cmp	r2, r3
 80049aa:	d04f      	beq.n	8004a4c <pvPortMalloc+0x130>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80049ac:	6a3b      	ldr	r3, [r7, #32]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	2208      	movs	r2, #8
 80049b2:	4413      	add	r3, r2
 80049b4:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80049b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049b8:	681a      	ldr	r2, [r3, #0]
 80049ba:	6a3b      	ldr	r3, [r7, #32]
 80049bc:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80049be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049c0:	685a      	ldr	r2, [r3, #4]
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	1ad2      	subs	r2, r2, r3
 80049c6:	2308      	movs	r3, #8
 80049c8:	005b      	lsls	r3, r3, #1
 80049ca:	429a      	cmp	r2, r3
 80049cc:	d91f      	bls.n	8004a0e <pvPortMalloc+0xf2>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80049ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	4413      	add	r3, r2
 80049d4:	617b      	str	r3, [r7, #20]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80049d6:	697b      	ldr	r3, [r7, #20]
 80049d8:	f003 0307 	and.w	r3, r3, #7
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d00a      	beq.n	80049f6 <pvPortMalloc+0xda>
        __asm volatile
 80049e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049e4:	f383 8811 	msr	BASEPRI, r3
 80049e8:	f3bf 8f6f 	isb	sy
 80049ec:	f3bf 8f4f 	dsb	sy
 80049f0:	613b      	str	r3, [r7, #16]
    }
 80049f2:	bf00      	nop
 80049f4:	e7fe      	b.n	80049f4 <pvPortMalloc+0xd8>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80049f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049f8:	685a      	ldr	r2, [r3, #4]
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	1ad2      	subs	r2, r2, r3
 80049fe:	697b      	ldr	r3, [r7, #20]
 8004a00:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8004a02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a04:	687a      	ldr	r2, [r7, #4]
 8004a06:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004a08:	6978      	ldr	r0, [r7, #20]
 8004a0a:	f000 f8f9 	bl	8004c00 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004a0e:	4b1c      	ldr	r3, [pc, #112]	; (8004a80 <pvPortMalloc+0x164>)
 8004a10:	681a      	ldr	r2, [r3, #0]
 8004a12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a14:	685b      	ldr	r3, [r3, #4]
 8004a16:	1ad3      	subs	r3, r2, r3
 8004a18:	4a19      	ldr	r2, [pc, #100]	; (8004a80 <pvPortMalloc+0x164>)
 8004a1a:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004a1c:	4b18      	ldr	r3, [pc, #96]	; (8004a80 <pvPortMalloc+0x164>)
 8004a1e:	681a      	ldr	r2, [r3, #0]
 8004a20:	4b19      	ldr	r3, [pc, #100]	; (8004a88 <pvPortMalloc+0x16c>)
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	429a      	cmp	r2, r3
 8004a26:	d203      	bcs.n	8004a30 <pvPortMalloc+0x114>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004a28:	4b15      	ldr	r3, [pc, #84]	; (8004a80 <pvPortMalloc+0x164>)
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	4a16      	ldr	r2, [pc, #88]	; (8004a88 <pvPortMalloc+0x16c>)
 8004a2e:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 8004a30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a32:	685b      	ldr	r3, [r3, #4]
 8004a34:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004a38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a3a:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8004a3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a3e:	2200      	movs	r2, #0
 8004a40:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8004a42:	4b12      	ldr	r3, [pc, #72]	; (8004a8c <pvPortMalloc+0x170>)
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	3301      	adds	r3, #1
 8004a48:	4a10      	ldr	r2, [pc, #64]	; (8004a8c <pvPortMalloc+0x170>)
 8004a4a:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8004a4c:	f7fe fc80 	bl	8003350 <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004a50:	69fb      	ldr	r3, [r7, #28]
 8004a52:	f003 0307 	and.w	r3, r3, #7
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d00a      	beq.n	8004a70 <pvPortMalloc+0x154>
        __asm volatile
 8004a5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a5e:	f383 8811 	msr	BASEPRI, r3
 8004a62:	f3bf 8f6f 	isb	sy
 8004a66:	f3bf 8f4f 	dsb	sy
 8004a6a:	60fb      	str	r3, [r7, #12]
    }
 8004a6c:	bf00      	nop
 8004a6e:	e7fe      	b.n	8004a6e <pvPortMalloc+0x152>
    return pvReturn;
 8004a70:	69fb      	ldr	r3, [r7, #28]
}
 8004a72:	4618      	mov	r0, r3
 8004a74:	3728      	adds	r7, #40	; 0x28
 8004a76:	46bd      	mov	sp, r7
 8004a78:	bd80      	pop	{r7, pc}
 8004a7a:	bf00      	nop
 8004a7c:	20003eb0 	.word	0x20003eb0
 8004a80:	20003eb4 	.word	0x20003eb4
 8004a84:	20003ea8 	.word	0x20003ea8
 8004a88:	20003eb8 	.word	0x20003eb8
 8004a8c:	20003ebc 	.word	0x20003ebc

08004a90 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8004a90:	b580      	push	{r7, lr}
 8004a92:	b086      	sub	sp, #24
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d049      	beq.n	8004b36 <vPortFree+0xa6>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8004aa2:	2308      	movs	r3, #8
 8004aa4:	425b      	negs	r3, r3
 8004aa6:	697a      	ldr	r2, [r7, #20]
 8004aa8:	4413      	add	r3, r2
 8004aaa:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8004aac:	697b      	ldr	r3, [r7, #20]
 8004aae:	613b      	str	r3, [r7, #16]

        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 8004ab0:	693b      	ldr	r3, [r7, #16]
 8004ab2:	685b      	ldr	r3, [r3, #4]
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	db0a      	blt.n	8004ace <vPortFree+0x3e>
        __asm volatile
 8004ab8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004abc:	f383 8811 	msr	BASEPRI, r3
 8004ac0:	f3bf 8f6f 	isb	sy
 8004ac4:	f3bf 8f4f 	dsb	sy
 8004ac8:	60fb      	str	r3, [r7, #12]
    }
 8004aca:	bf00      	nop
 8004acc:	e7fe      	b.n	8004acc <vPortFree+0x3c>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004ace:	693b      	ldr	r3, [r7, #16]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d00a      	beq.n	8004aec <vPortFree+0x5c>
        __asm volatile
 8004ad6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ada:	f383 8811 	msr	BASEPRI, r3
 8004ade:	f3bf 8f6f 	isb	sy
 8004ae2:	f3bf 8f4f 	dsb	sy
 8004ae6:	60bb      	str	r3, [r7, #8]
    }
 8004ae8:	bf00      	nop
 8004aea:	e7fe      	b.n	8004aea <vPortFree+0x5a>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 8004aec:	693b      	ldr	r3, [r7, #16]
 8004aee:	685b      	ldr	r3, [r3, #4]
 8004af0:	0fdb      	lsrs	r3, r3, #31
 8004af2:	f003 0301 	and.w	r3, r3, #1
 8004af6:	b2db      	uxtb	r3, r3
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d01c      	beq.n	8004b36 <vPortFree+0xa6>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8004afc:	693b      	ldr	r3, [r7, #16]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d118      	bne.n	8004b36 <vPortFree+0xa6>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 8004b04:	693b      	ldr	r3, [r7, #16]
 8004b06:	685b      	ldr	r3, [r3, #4]
 8004b08:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004b0c:	693b      	ldr	r3, [r7, #16]
 8004b0e:	605a      	str	r2, [r3, #4]
                {
                    ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                }
                #endif

                vTaskSuspendAll();
 8004b10:	f7fe fc10 	bl	8003334 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8004b14:	693b      	ldr	r3, [r7, #16]
 8004b16:	685a      	ldr	r2, [r3, #4]
 8004b18:	4b09      	ldr	r3, [pc, #36]	; (8004b40 <vPortFree+0xb0>)
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	4413      	add	r3, r2
 8004b1e:	4a08      	ldr	r2, [pc, #32]	; (8004b40 <vPortFree+0xb0>)
 8004b20:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004b22:	6938      	ldr	r0, [r7, #16]
 8004b24:	f000 f86c 	bl	8004c00 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8004b28:	4b06      	ldr	r3, [pc, #24]	; (8004b44 <vPortFree+0xb4>)
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	3301      	adds	r3, #1
 8004b2e:	4a05      	ldr	r2, [pc, #20]	; (8004b44 <vPortFree+0xb4>)
 8004b30:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8004b32:	f7fe fc0d 	bl	8003350 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8004b36:	bf00      	nop
 8004b38:	3718      	adds	r7, #24
 8004b3a:	46bd      	mov	sp, r7
 8004b3c:	bd80      	pop	{r7, pc}
 8004b3e:	bf00      	nop
 8004b40:	20003eb4 	.word	0x20003eb4
 8004b44:	20003ec0 	.word	0x20003ec0

08004b48 <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8004b48:	b480      	push	{r7}
 8004b4a:	b085      	sub	sp, #20
 8004b4c:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    portPOINTER_SIZE_TYPE uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004b4e:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8004b52:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 8004b54:	4b25      	ldr	r3, [pc, #148]	; (8004bec <prvHeapInit+0xa4>)
 8004b56:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	f003 0307 	and.w	r3, r3, #7
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d00c      	beq.n	8004b7c <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	3307      	adds	r3, #7
 8004b66:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	f023 0307 	bic.w	r3, r3, #7
 8004b6e:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( portPOINTER_SIZE_TYPE ) ucHeap;
 8004b70:	68ba      	ldr	r2, [r7, #8]
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	1ad3      	subs	r3, r2, r3
 8004b76:	4a1d      	ldr	r2, [pc, #116]	; (8004bec <prvHeapInit+0xa4>)
 8004b78:	4413      	add	r3, r2
 8004b7a:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004b80:	4a1b      	ldr	r2, [pc, #108]	; (8004bf0 <prvHeapInit+0xa8>)
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8004b86:	4b1a      	ldr	r3, [pc, #104]	; (8004bf0 <prvHeapInit+0xa8>)
 8004b88:	2200      	movs	r2, #0
 8004b8a:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( portPOINTER_SIZE_TYPE ) pucAlignedHeap ) + xTotalHeapSize;
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	68ba      	ldr	r2, [r7, #8]
 8004b90:	4413      	add	r3, r2
 8004b92:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8004b94:	2208      	movs	r2, #8
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	1a9b      	subs	r3, r3, r2
 8004b9a:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	f023 0307 	bic.w	r3, r3, #7
 8004ba2:	60fb      	str	r3, [r7, #12]
    pxEnd = ( BlockLink_t * ) uxAddress;
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	4a13      	ldr	r2, [pc, #76]	; (8004bf4 <prvHeapInit+0xac>)
 8004ba8:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8004baa:	4b12      	ldr	r3, [pc, #72]	; (8004bf4 <prvHeapInit+0xac>)
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	2200      	movs	r2, #0
 8004bb0:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8004bb2:	4b10      	ldr	r3, [pc, #64]	; (8004bf4 <prvHeapInit+0xac>)
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	2200      	movs	r2, #0
 8004bb8:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) pucAlignedHeap;
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 8004bbe:	683b      	ldr	r3, [r7, #0]
 8004bc0:	68fa      	ldr	r2, [r7, #12]
 8004bc2:	1ad2      	subs	r2, r2, r3
 8004bc4:	683b      	ldr	r3, [r7, #0]
 8004bc6:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004bc8:	4b0a      	ldr	r3, [pc, #40]	; (8004bf4 <prvHeapInit+0xac>)
 8004bca:	681a      	ldr	r2, [r3, #0]
 8004bcc:	683b      	ldr	r3, [r7, #0]
 8004bce:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004bd0:	683b      	ldr	r3, [r7, #0]
 8004bd2:	685b      	ldr	r3, [r3, #4]
 8004bd4:	4a08      	ldr	r2, [pc, #32]	; (8004bf8 <prvHeapInit+0xb0>)
 8004bd6:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004bd8:	683b      	ldr	r3, [r7, #0]
 8004bda:	685b      	ldr	r3, [r3, #4]
 8004bdc:	4a07      	ldr	r2, [pc, #28]	; (8004bfc <prvHeapInit+0xb4>)
 8004bde:	6013      	str	r3, [r2, #0]
}
 8004be0:	bf00      	nop
 8004be2:	3714      	adds	r7, #20
 8004be4:	46bd      	mov	sp, r7
 8004be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bea:	4770      	bx	lr
 8004bec:	200002a8 	.word	0x200002a8
 8004bf0:	20003ea8 	.word	0x20003ea8
 8004bf4:	20003eb0 	.word	0x20003eb0
 8004bf8:	20003eb8 	.word	0x20003eb8
 8004bfc:	20003eb4 	.word	0x20003eb4

08004c00 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8004c00:	b480      	push	{r7}
 8004c02:	b085      	sub	sp, #20
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004c08:	4b28      	ldr	r3, [pc, #160]	; (8004cac <prvInsertBlockIntoFreeList+0xac>)
 8004c0a:	60fb      	str	r3, [r7, #12]
 8004c0c:	e002      	b.n	8004c14 <prvInsertBlockIntoFreeList+0x14>
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	60fb      	str	r3, [r7, #12]
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	687a      	ldr	r2, [r7, #4]
 8004c1a:	429a      	cmp	r2, r3
 8004c1c:	d8f7      	bhi.n	8004c0e <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	685b      	ldr	r3, [r3, #4]
 8004c26:	68ba      	ldr	r2, [r7, #8]
 8004c28:	4413      	add	r3, r2
 8004c2a:	687a      	ldr	r2, [r7, #4]
 8004c2c:	429a      	cmp	r2, r3
 8004c2e:	d108      	bne.n	8004c42 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	685a      	ldr	r2, [r3, #4]
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	685b      	ldr	r3, [r3, #4]
 8004c38:	441a      	add	r2, r3
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	685b      	ldr	r3, [r3, #4]
 8004c4a:	68ba      	ldr	r2, [r7, #8]
 8004c4c:	441a      	add	r2, r3
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	429a      	cmp	r2, r3
 8004c54:	d118      	bne.n	8004c88 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	681a      	ldr	r2, [r3, #0]
 8004c5a:	4b15      	ldr	r3, [pc, #84]	; (8004cb0 <prvInsertBlockIntoFreeList+0xb0>)
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	429a      	cmp	r2, r3
 8004c60:	d00d      	beq.n	8004c7e <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	685a      	ldr	r2, [r3, #4]
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	685b      	ldr	r3, [r3, #4]
 8004c6c:	441a      	add	r2, r3
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	681a      	ldr	r2, [r3, #0]
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	601a      	str	r2, [r3, #0]
 8004c7c:	e008      	b.n	8004c90 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004c7e:	4b0c      	ldr	r3, [pc, #48]	; (8004cb0 <prvInsertBlockIntoFreeList+0xb0>)
 8004c80:	681a      	ldr	r2, [r3, #0]
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	601a      	str	r2, [r3, #0]
 8004c86:	e003      	b.n	8004c90 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	681a      	ldr	r2, [r3, #0]
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8004c90:	68fa      	ldr	r2, [r7, #12]
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	429a      	cmp	r2, r3
 8004c96:	d002      	beq.n	8004c9e <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	687a      	ldr	r2, [r7, #4]
 8004c9c:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8004c9e:	bf00      	nop
 8004ca0:	3714      	adds	r7, #20
 8004ca2:	46bd      	mov	sp, r7
 8004ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca8:	4770      	bx	lr
 8004caa:	bf00      	nop
 8004cac:	20003ea8 	.word	0x20003ea8
 8004cb0:	20003eb0 	.word	0x20003eb0

08004cb4 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8004cb4:	b580      	push	{r7, lr}
 8004cb6:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 8004cb8:	4803      	ldr	r0, [pc, #12]	; (8004cc8 <_cbSendSystemDesc+0x14>)
 8004cba:	f001 fd47 	bl	800674c <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 8004cbe:	4803      	ldr	r0, [pc, #12]	; (8004ccc <_cbSendSystemDesc+0x18>)
 8004cc0:	f001 fd44 	bl	800674c <SEGGER_SYSVIEW_SendSysDesc>
}
 8004cc4:	bf00      	nop
 8004cc6:	bd80      	pop	{r7, pc}
 8004cc8:	08007774 	.word	0x08007774
 8004ccc:	080077b0 	.word	0x080077b0

08004cd0 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8004cd0:	b580      	push	{r7, lr}
 8004cd2:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8004cd4:	4b06      	ldr	r3, [pc, #24]	; (8004cf0 <SEGGER_SYSVIEW_Conf+0x20>)
 8004cd6:	6818      	ldr	r0, [r3, #0]
 8004cd8:	4b05      	ldr	r3, [pc, #20]	; (8004cf0 <SEGGER_SYSVIEW_Conf+0x20>)
 8004cda:	6819      	ldr	r1, [r3, #0]
 8004cdc:	4b05      	ldr	r3, [pc, #20]	; (8004cf4 <SEGGER_SYSVIEW_Conf+0x24>)
 8004cde:	4a06      	ldr	r2, [pc, #24]	; (8004cf8 <SEGGER_SYSVIEW_Conf+0x28>)
 8004ce0:	f001 f8b2 	bl	8005e48 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8004ce4:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8004ce8:	f001 f8f2 	bl	8005ed0 <SEGGER_SYSVIEW_SetRAMBase>
}
 8004cec:	bf00      	nop
 8004cee:	bd80      	pop	{r7, pc}
 8004cf0:	20000000 	.word	0x20000000
 8004cf4:	08004cb5 	.word	0x08004cb5
 8004cf8:	08007870 	.word	0x08007870

08004cfc <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 8004cfc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004cfe:	b085      	sub	sp, #20
 8004d00:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 8004d02:	2300      	movs	r3, #0
 8004d04:	607b      	str	r3, [r7, #4]
 8004d06:	e033      	b.n	8004d70 <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 8004d08:	491e      	ldr	r1, [pc, #120]	; (8004d84 <_cbSendTaskList+0x88>)
 8004d0a:	687a      	ldr	r2, [r7, #4]
 8004d0c:	4613      	mov	r3, r2
 8004d0e:	009b      	lsls	r3, r3, #2
 8004d10:	4413      	add	r3, r2
 8004d12:	009b      	lsls	r3, r3, #2
 8004d14:	440b      	add	r3, r1
 8004d16:	6818      	ldr	r0, [r3, #0]
 8004d18:	491a      	ldr	r1, [pc, #104]	; (8004d84 <_cbSendTaskList+0x88>)
 8004d1a:	687a      	ldr	r2, [r7, #4]
 8004d1c:	4613      	mov	r3, r2
 8004d1e:	009b      	lsls	r3, r3, #2
 8004d20:	4413      	add	r3, r2
 8004d22:	009b      	lsls	r3, r3, #2
 8004d24:	440b      	add	r3, r1
 8004d26:	3304      	adds	r3, #4
 8004d28:	6819      	ldr	r1, [r3, #0]
 8004d2a:	4c16      	ldr	r4, [pc, #88]	; (8004d84 <_cbSendTaskList+0x88>)
 8004d2c:	687a      	ldr	r2, [r7, #4]
 8004d2e:	4613      	mov	r3, r2
 8004d30:	009b      	lsls	r3, r3, #2
 8004d32:	4413      	add	r3, r2
 8004d34:	009b      	lsls	r3, r3, #2
 8004d36:	4423      	add	r3, r4
 8004d38:	3308      	adds	r3, #8
 8004d3a:	681c      	ldr	r4, [r3, #0]
 8004d3c:	4d11      	ldr	r5, [pc, #68]	; (8004d84 <_cbSendTaskList+0x88>)
 8004d3e:	687a      	ldr	r2, [r7, #4]
 8004d40:	4613      	mov	r3, r2
 8004d42:	009b      	lsls	r3, r3, #2
 8004d44:	4413      	add	r3, r2
 8004d46:	009b      	lsls	r3, r3, #2
 8004d48:	442b      	add	r3, r5
 8004d4a:	330c      	adds	r3, #12
 8004d4c:	681d      	ldr	r5, [r3, #0]
 8004d4e:	4e0d      	ldr	r6, [pc, #52]	; (8004d84 <_cbSendTaskList+0x88>)
 8004d50:	687a      	ldr	r2, [r7, #4]
 8004d52:	4613      	mov	r3, r2
 8004d54:	009b      	lsls	r3, r3, #2
 8004d56:	4413      	add	r3, r2
 8004d58:	009b      	lsls	r3, r3, #2
 8004d5a:	4433      	add	r3, r6
 8004d5c:	3310      	adds	r3, #16
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	9300      	str	r3, [sp, #0]
 8004d62:	462b      	mov	r3, r5
 8004d64:	4622      	mov	r2, r4
 8004d66:	f000 f8bd 	bl	8004ee4 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	3301      	adds	r3, #1
 8004d6e:	607b      	str	r3, [r7, #4]
 8004d70:	4b05      	ldr	r3, [pc, #20]	; (8004d88 <_cbSendTaskList+0x8c>)
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	687a      	ldr	r2, [r7, #4]
 8004d76:	429a      	cmp	r2, r3
 8004d78:	d3c6      	bcc.n	8004d08 <_cbSendTaskList+0xc>
  }
}
 8004d7a:	bf00      	nop
 8004d7c:	bf00      	nop
 8004d7e:	370c      	adds	r7, #12
 8004d80:	46bd      	mov	sp, r7
 8004d82:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004d84:	20003ec4 	.word	0x20003ec4
 8004d88:	20003f64 	.word	0x20003f64

08004d8c <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8004d8c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004d90:	b082      	sub	sp, #8
 8004d92:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8004d94:	f7fe fbde 	bl	8003554 <xTaskGetTickCountFromISR>
 8004d98:	4603      	mov	r3, r0
 8004d9a:	2200      	movs	r2, #0
 8004d9c:	469a      	mov	sl, r3
 8004d9e:	4693      	mov	fp, r2
 8004da0:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8004da4:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004da8:	4602      	mov	r2, r0
 8004daa:	460b      	mov	r3, r1
 8004dac:	f04f 0a00 	mov.w	sl, #0
 8004db0:	f04f 0b00 	mov.w	fp, #0
 8004db4:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 8004db8:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 8004dbc:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 8004dc0:	4652      	mov	r2, sl
 8004dc2:	465b      	mov	r3, fp
 8004dc4:	1a14      	subs	r4, r2, r0
 8004dc6:	eb63 0501 	sbc.w	r5, r3, r1
 8004dca:	f04f 0200 	mov.w	r2, #0
 8004dce:	f04f 0300 	mov.w	r3, #0
 8004dd2:	00ab      	lsls	r3, r5, #2
 8004dd4:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 8004dd8:	00a2      	lsls	r2, r4, #2
 8004dda:	4614      	mov	r4, r2
 8004ddc:	461d      	mov	r5, r3
 8004dde:	eb14 0800 	adds.w	r8, r4, r0
 8004de2:	eb45 0901 	adc.w	r9, r5, r1
 8004de6:	f04f 0200 	mov.w	r2, #0
 8004dea:	f04f 0300 	mov.w	r3, #0
 8004dee:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004df2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004df6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004dfa:	4690      	mov	r8, r2
 8004dfc:	4699      	mov	r9, r3
 8004dfe:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 8004e02:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 8004e06:	4610      	mov	r0, r2
 8004e08:	4619      	mov	r1, r3
 8004e0a:	3708      	adds	r7, #8
 8004e0c:	46bd      	mov	sp, r7
 8004e0e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08004e14 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8004e14:	b580      	push	{r7, lr}
 8004e16:	b086      	sub	sp, #24
 8004e18:	af02      	add	r7, sp, #8
 8004e1a:	60f8      	str	r0, [r7, #12]
 8004e1c:	60b9      	str	r1, [r7, #8]
 8004e1e:	607a      	str	r2, [r7, #4]
 8004e20:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8004e22:	2205      	movs	r2, #5
 8004e24:	492b      	ldr	r1, [pc, #172]	; (8004ed4 <SYSVIEW_AddTask+0xc0>)
 8004e26:	68b8      	ldr	r0, [r7, #8]
 8004e28:	f001 ffc2 	bl	8006db0 <memcmp>
 8004e2c:	4603      	mov	r3, r0
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d04b      	beq.n	8004eca <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8004e32:	4b29      	ldr	r3, [pc, #164]	; (8004ed8 <SYSVIEW_AddTask+0xc4>)
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	2b07      	cmp	r3, #7
 8004e38:	d903      	bls.n	8004e42 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 8004e3a:	4828      	ldr	r0, [pc, #160]	; (8004edc <SYSVIEW_AddTask+0xc8>)
 8004e3c:	f001 ff38 	bl	8006cb0 <SEGGER_SYSVIEW_Warn>
    return;
 8004e40:	e044      	b.n	8004ecc <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8004e42:	4b25      	ldr	r3, [pc, #148]	; (8004ed8 <SYSVIEW_AddTask+0xc4>)
 8004e44:	681a      	ldr	r2, [r3, #0]
 8004e46:	4926      	ldr	r1, [pc, #152]	; (8004ee0 <SYSVIEW_AddTask+0xcc>)
 8004e48:	4613      	mov	r3, r2
 8004e4a:	009b      	lsls	r3, r3, #2
 8004e4c:	4413      	add	r3, r2
 8004e4e:	009b      	lsls	r3, r3, #2
 8004e50:	440b      	add	r3, r1
 8004e52:	68fa      	ldr	r2, [r7, #12]
 8004e54:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 8004e56:	4b20      	ldr	r3, [pc, #128]	; (8004ed8 <SYSVIEW_AddTask+0xc4>)
 8004e58:	681a      	ldr	r2, [r3, #0]
 8004e5a:	4921      	ldr	r1, [pc, #132]	; (8004ee0 <SYSVIEW_AddTask+0xcc>)
 8004e5c:	4613      	mov	r3, r2
 8004e5e:	009b      	lsls	r3, r3, #2
 8004e60:	4413      	add	r3, r2
 8004e62:	009b      	lsls	r3, r3, #2
 8004e64:	440b      	add	r3, r1
 8004e66:	3304      	adds	r3, #4
 8004e68:	68ba      	ldr	r2, [r7, #8]
 8004e6a:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8004e6c:	4b1a      	ldr	r3, [pc, #104]	; (8004ed8 <SYSVIEW_AddTask+0xc4>)
 8004e6e:	681a      	ldr	r2, [r3, #0]
 8004e70:	491b      	ldr	r1, [pc, #108]	; (8004ee0 <SYSVIEW_AddTask+0xcc>)
 8004e72:	4613      	mov	r3, r2
 8004e74:	009b      	lsls	r3, r3, #2
 8004e76:	4413      	add	r3, r2
 8004e78:	009b      	lsls	r3, r3, #2
 8004e7a:	440b      	add	r3, r1
 8004e7c:	3308      	adds	r3, #8
 8004e7e:	687a      	ldr	r2, [r7, #4]
 8004e80:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8004e82:	4b15      	ldr	r3, [pc, #84]	; (8004ed8 <SYSVIEW_AddTask+0xc4>)
 8004e84:	681a      	ldr	r2, [r3, #0]
 8004e86:	4916      	ldr	r1, [pc, #88]	; (8004ee0 <SYSVIEW_AddTask+0xcc>)
 8004e88:	4613      	mov	r3, r2
 8004e8a:	009b      	lsls	r3, r3, #2
 8004e8c:	4413      	add	r3, r2
 8004e8e:	009b      	lsls	r3, r3, #2
 8004e90:	440b      	add	r3, r1
 8004e92:	330c      	adds	r3, #12
 8004e94:	683a      	ldr	r2, [r7, #0]
 8004e96:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 8004e98:	4b0f      	ldr	r3, [pc, #60]	; (8004ed8 <SYSVIEW_AddTask+0xc4>)
 8004e9a:	681a      	ldr	r2, [r3, #0]
 8004e9c:	4910      	ldr	r1, [pc, #64]	; (8004ee0 <SYSVIEW_AddTask+0xcc>)
 8004e9e:	4613      	mov	r3, r2
 8004ea0:	009b      	lsls	r3, r3, #2
 8004ea2:	4413      	add	r3, r2
 8004ea4:	009b      	lsls	r3, r3, #2
 8004ea6:	440b      	add	r3, r1
 8004ea8:	3310      	adds	r3, #16
 8004eaa:	69ba      	ldr	r2, [r7, #24]
 8004eac:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 8004eae:	4b0a      	ldr	r3, [pc, #40]	; (8004ed8 <SYSVIEW_AddTask+0xc4>)
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	3301      	adds	r3, #1
 8004eb4:	4a08      	ldr	r2, [pc, #32]	; (8004ed8 <SYSVIEW_AddTask+0xc4>)
 8004eb6:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 8004eb8:	69bb      	ldr	r3, [r7, #24]
 8004eba:	9300      	str	r3, [sp, #0]
 8004ebc:	683b      	ldr	r3, [r7, #0]
 8004ebe:	687a      	ldr	r2, [r7, #4]
 8004ec0:	68b9      	ldr	r1, [r7, #8]
 8004ec2:	68f8      	ldr	r0, [r7, #12]
 8004ec4:	f000 f80e 	bl	8004ee4 <SYSVIEW_SendTaskInfo>
 8004ec8:	e000      	b.n	8004ecc <SYSVIEW_AddTask+0xb8>
    return;
 8004eca:	bf00      	nop

}
 8004ecc:	3710      	adds	r7, #16
 8004ece:	46bd      	mov	sp, r7
 8004ed0:	bd80      	pop	{r7, pc}
 8004ed2:	bf00      	nop
 8004ed4:	080077c0 	.word	0x080077c0
 8004ed8:	20003f64 	.word	0x20003f64
 8004edc:	080077c8 	.word	0x080077c8
 8004ee0:	20003ec4 	.word	0x20003ec4

08004ee4 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8004ee4:	b580      	push	{r7, lr}
 8004ee6:	b08a      	sub	sp, #40	; 0x28
 8004ee8:	af00      	add	r7, sp, #0
 8004eea:	60f8      	str	r0, [r7, #12]
 8004eec:	60b9      	str	r1, [r7, #8]
 8004eee:	607a      	str	r2, [r7, #4]
 8004ef0:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8004ef2:	f107 0314 	add.w	r3, r7, #20
 8004ef6:	2214      	movs	r2, #20
 8004ef8:	2100      	movs	r1, #0
 8004efa:	4618      	mov	r0, r3
 8004efc:	f001 ff76 	bl	8006dec <memset>
  TaskInfo.TaskID     = TaskID;
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 8004f04:	68bb      	ldr	r3, [r7, #8]
 8004f06:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 8004f0c:	683b      	ldr	r3, [r7, #0]
 8004f0e:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8004f10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f12:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8004f14:	f107 0314 	add.w	r3, r7, #20
 8004f18:	4618      	mov	r0, r3
 8004f1a:	f001 fb1f 	bl	800655c <SEGGER_SYSVIEW_SendTaskInfo>
}
 8004f1e:	bf00      	nop
 8004f20:	3728      	adds	r7, #40	; 0x28
 8004f22:	46bd      	mov	sp, r7
 8004f24:	bd80      	pop	{r7, pc}
	...

08004f28 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 8004f28:	b480      	push	{r7}
 8004f2a:	b083      	sub	sp, #12
 8004f2c:	af00      	add	r7, sp, #0
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 8004f2e:	4b24      	ldr	r3, [pc, #144]	; (8004fc0 <_DoInit+0x98>)
 8004f30:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	2203      	movs	r2, #3
 8004f36:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	2203      	movs	r2, #3
 8004f3c:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	4a20      	ldr	r2, [pc, #128]	; (8004fc4 <_DoInit+0x9c>)
 8004f42:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	4a20      	ldr	r2, [pc, #128]	; (8004fc8 <_DoInit+0xa0>)
 8004f48:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004f50:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	2200      	movs	r2, #0
 8004f56:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	2200      	movs	r2, #0
 8004f5c:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	2200      	movs	r2, #0
 8004f62:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	4a17      	ldr	r2, [pc, #92]	; (8004fc4 <_DoInit+0x9c>)
 8004f68:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	4a17      	ldr	r2, [pc, #92]	; (8004fcc <_DoInit+0xa4>)
 8004f6e:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	2210      	movs	r2, #16
 8004f74:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	2200      	movs	r2, #0
 8004f7a:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	2200      	movs	r2, #0
 8004f80:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	2200      	movs	r2, #0
 8004f86:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	3307      	adds	r3, #7
 8004f8c:	4a10      	ldr	r2, [pc, #64]	; (8004fd0 <_DoInit+0xa8>)
 8004f8e:	6810      	ldr	r0, [r2, #0]
 8004f90:	6018      	str	r0, [r3, #0]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8004f92:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	4a0e      	ldr	r2, [pc, #56]	; (8004fd4 <_DoInit+0xac>)
 8004f9a:	6810      	ldr	r0, [r2, #0]
 8004f9c:	6018      	str	r0, [r3, #0]
 8004f9e:	8891      	ldrh	r1, [r2, #4]
 8004fa0:	7992      	ldrb	r2, [r2, #6]
 8004fa2:	8099      	strh	r1, [r3, #4]
 8004fa4:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8004fa6:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	2220      	movs	r2, #32
 8004fae:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8004fb0:	f3bf 8f5f 	dmb	sy
}
 8004fb4:	bf00      	nop
 8004fb6:	370c      	adds	r7, #12
 8004fb8:	46bd      	mov	sp, r7
 8004fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fbe:	4770      	bx	lr
 8004fc0:	20003f68 	.word	0x20003f68
 8004fc4:	08007818 	.word	0x08007818
 8004fc8:	20004010 	.word	0x20004010
 8004fcc:	20004410 	.word	0x20004410
 8004fd0:	08007824 	.word	0x08007824
 8004fd4:	08007828 	.word	0x08007828

08004fd8 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8004fd8:	b580      	push	{r7, lr}
 8004fda:	b08c      	sub	sp, #48	; 0x30
 8004fdc:	af00      	add	r7, sp, #0
 8004fde:	60f8      	str	r0, [r7, #12]
 8004fe0:	60b9      	str	r1, [r7, #8]
 8004fe2:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8004fe4:	4b3e      	ldr	r3, [pc, #248]	; (80050e0 <SEGGER_RTT_ReadNoLock+0x108>)
 8004fe6:	623b      	str	r3, [r7, #32]
 8004fe8:	6a3b      	ldr	r3, [r7, #32]
 8004fea:	781b      	ldrb	r3, [r3, #0]
 8004fec:	b2db      	uxtb	r3, r3
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d101      	bne.n	8004ff6 <SEGGER_RTT_ReadNoLock+0x1e>
 8004ff2:	f7ff ff99 	bl	8004f28 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8004ff6:	68fa      	ldr	r2, [r7, #12]
 8004ff8:	4613      	mov	r3, r2
 8004ffa:	005b      	lsls	r3, r3, #1
 8004ffc:	4413      	add	r3, r2
 8004ffe:	00db      	lsls	r3, r3, #3
 8005000:	3360      	adds	r3, #96	; 0x60
 8005002:	4a37      	ldr	r2, [pc, #220]	; (80050e0 <SEGGER_RTT_ReadNoLock+0x108>)
 8005004:	4413      	add	r3, r2
 8005006:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8005008:	68bb      	ldr	r3, [r7, #8]
 800500a:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 800500c:	69fb      	ldr	r3, [r7, #28]
 800500e:	691b      	ldr	r3, [r3, #16]
 8005010:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 8005012:	69fb      	ldr	r3, [r7, #28]
 8005014:	68db      	ldr	r3, [r3, #12]
 8005016:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8005018:	2300      	movs	r3, #0
 800501a:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 800501c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800501e:	69bb      	ldr	r3, [r7, #24]
 8005020:	429a      	cmp	r2, r3
 8005022:	d92b      	bls.n	800507c <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8005024:	69fb      	ldr	r3, [r7, #28]
 8005026:	689a      	ldr	r2, [r3, #8]
 8005028:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800502a:	1ad3      	subs	r3, r2, r3
 800502c:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 800502e:	697a      	ldr	r2, [r7, #20]
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	4293      	cmp	r3, r2
 8005034:	bf28      	it	cs
 8005036:	4613      	movcs	r3, r2
 8005038:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800503a:	69fb      	ldr	r3, [r7, #28]
 800503c:	685a      	ldr	r2, [r3, #4]
 800503e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005040:	4413      	add	r3, r2
 8005042:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8005044:	697a      	ldr	r2, [r7, #20]
 8005046:	6939      	ldr	r1, [r7, #16]
 8005048:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800504a:	f001 fec1 	bl	8006dd0 <memcpy>
    NumBytesRead += NumBytesRem;
 800504e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005050:	697b      	ldr	r3, [r7, #20]
 8005052:	4413      	add	r3, r2
 8005054:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8005056:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005058:	697b      	ldr	r3, [r7, #20]
 800505a:	4413      	add	r3, r2
 800505c:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 800505e:	687a      	ldr	r2, [r7, #4]
 8005060:	697b      	ldr	r3, [r7, #20]
 8005062:	1ad3      	subs	r3, r2, r3
 8005064:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8005066:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005068:	697b      	ldr	r3, [r7, #20]
 800506a:	4413      	add	r3, r2
 800506c:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 800506e:	69fb      	ldr	r3, [r7, #28]
 8005070:	689b      	ldr	r3, [r3, #8]
 8005072:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005074:	429a      	cmp	r2, r3
 8005076:	d101      	bne.n	800507c <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 8005078:	2300      	movs	r3, #0
 800507a:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 800507c:	69ba      	ldr	r2, [r7, #24]
 800507e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005080:	1ad3      	subs	r3, r2, r3
 8005082:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8005084:	697a      	ldr	r2, [r7, #20]
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	4293      	cmp	r3, r2
 800508a:	bf28      	it	cs
 800508c:	4613      	movcs	r3, r2
 800508e:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8005090:	697b      	ldr	r3, [r7, #20]
 8005092:	2b00      	cmp	r3, #0
 8005094:	d019      	beq.n	80050ca <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8005096:	69fb      	ldr	r3, [r7, #28]
 8005098:	685a      	ldr	r2, [r3, #4]
 800509a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800509c:	4413      	add	r3, r2
 800509e:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 80050a0:	697a      	ldr	r2, [r7, #20]
 80050a2:	6939      	ldr	r1, [r7, #16]
 80050a4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80050a6:	f001 fe93 	bl	8006dd0 <memcpy>
    NumBytesRead += NumBytesRem;
 80050aa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80050ac:	697b      	ldr	r3, [r7, #20]
 80050ae:	4413      	add	r3, r2
 80050b0:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 80050b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80050b4:	697b      	ldr	r3, [r7, #20]
 80050b6:	4413      	add	r3, r2
 80050b8:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 80050ba:	687a      	ldr	r2, [r7, #4]
 80050bc:	697b      	ldr	r3, [r7, #20]
 80050be:	1ad3      	subs	r3, r2, r3
 80050c0:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 80050c2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80050c4:	697b      	ldr	r3, [r7, #20]
 80050c6:	4413      	add	r3, r2
 80050c8:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 80050ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d002      	beq.n	80050d6 <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 80050d0:	69fb      	ldr	r3, [r7, #28]
 80050d2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80050d4:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 80050d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80050d8:	4618      	mov	r0, r3
 80050da:	3730      	adds	r7, #48	; 0x30
 80050dc:	46bd      	mov	sp, r7
 80050de:	bd80      	pop	{r7, pc}
 80050e0:	20003f68 	.word	0x20003f68

080050e4 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 80050e4:	b580      	push	{r7, lr}
 80050e6:	b088      	sub	sp, #32
 80050e8:	af00      	add	r7, sp, #0
 80050ea:	60f8      	str	r0, [r7, #12]
 80050ec:	60b9      	str	r1, [r7, #8]
 80050ee:	607a      	str	r2, [r7, #4]
 80050f0:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 80050f2:	4b3d      	ldr	r3, [pc, #244]	; (80051e8 <SEGGER_RTT_AllocUpBuffer+0x104>)
 80050f4:	61bb      	str	r3, [r7, #24]
 80050f6:	69bb      	ldr	r3, [r7, #24]
 80050f8:	781b      	ldrb	r3, [r3, #0]
 80050fa:	b2db      	uxtb	r3, r3
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d101      	bne.n	8005104 <SEGGER_RTT_AllocUpBuffer+0x20>
 8005100:	f7ff ff12 	bl	8004f28 <_DoInit>
  SEGGER_RTT_LOCK();
 8005104:	f3ef 8311 	mrs	r3, BASEPRI
 8005108:	f04f 0120 	mov.w	r1, #32
 800510c:	f381 8811 	msr	BASEPRI, r1
 8005110:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8005112:	4b35      	ldr	r3, [pc, #212]	; (80051e8 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8005114:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 8005116:	2300      	movs	r3, #0
 8005118:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 800511a:	6939      	ldr	r1, [r7, #16]
 800511c:	69fb      	ldr	r3, [r7, #28]
 800511e:	1c5a      	adds	r2, r3, #1
 8005120:	4613      	mov	r3, r2
 8005122:	005b      	lsls	r3, r3, #1
 8005124:	4413      	add	r3, r2
 8005126:	00db      	lsls	r3, r3, #3
 8005128:	440b      	add	r3, r1
 800512a:	3304      	adds	r3, #4
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	2b00      	cmp	r3, #0
 8005130:	d008      	beq.n	8005144 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 8005132:	69fb      	ldr	r3, [r7, #28]
 8005134:	3301      	adds	r3, #1
 8005136:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 8005138:	693b      	ldr	r3, [r7, #16]
 800513a:	691b      	ldr	r3, [r3, #16]
 800513c:	69fa      	ldr	r2, [r7, #28]
 800513e:	429a      	cmp	r2, r3
 8005140:	dbeb      	blt.n	800511a <SEGGER_RTT_AllocUpBuffer+0x36>
 8005142:	e000      	b.n	8005146 <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 8005144:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 8005146:	693b      	ldr	r3, [r7, #16]
 8005148:	691b      	ldr	r3, [r3, #16]
 800514a:	69fa      	ldr	r2, [r7, #28]
 800514c:	429a      	cmp	r2, r3
 800514e:	da3f      	bge.n	80051d0 <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 8005150:	6939      	ldr	r1, [r7, #16]
 8005152:	69fb      	ldr	r3, [r7, #28]
 8005154:	1c5a      	adds	r2, r3, #1
 8005156:	4613      	mov	r3, r2
 8005158:	005b      	lsls	r3, r3, #1
 800515a:	4413      	add	r3, r2
 800515c:	00db      	lsls	r3, r3, #3
 800515e:	440b      	add	r3, r1
 8005160:	68fa      	ldr	r2, [r7, #12]
 8005162:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8005164:	6939      	ldr	r1, [r7, #16]
 8005166:	69fb      	ldr	r3, [r7, #28]
 8005168:	1c5a      	adds	r2, r3, #1
 800516a:	4613      	mov	r3, r2
 800516c:	005b      	lsls	r3, r3, #1
 800516e:	4413      	add	r3, r2
 8005170:	00db      	lsls	r3, r3, #3
 8005172:	440b      	add	r3, r1
 8005174:	3304      	adds	r3, #4
 8005176:	68ba      	ldr	r2, [r7, #8]
 8005178:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 800517a:	6939      	ldr	r1, [r7, #16]
 800517c:	69fa      	ldr	r2, [r7, #28]
 800517e:	4613      	mov	r3, r2
 8005180:	005b      	lsls	r3, r3, #1
 8005182:	4413      	add	r3, r2
 8005184:	00db      	lsls	r3, r3, #3
 8005186:	440b      	add	r3, r1
 8005188:	3320      	adds	r3, #32
 800518a:	687a      	ldr	r2, [r7, #4]
 800518c:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 800518e:	6939      	ldr	r1, [r7, #16]
 8005190:	69fa      	ldr	r2, [r7, #28]
 8005192:	4613      	mov	r3, r2
 8005194:	005b      	lsls	r3, r3, #1
 8005196:	4413      	add	r3, r2
 8005198:	00db      	lsls	r3, r3, #3
 800519a:	440b      	add	r3, r1
 800519c:	3328      	adds	r3, #40	; 0x28
 800519e:	2200      	movs	r2, #0
 80051a0:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 80051a2:	6939      	ldr	r1, [r7, #16]
 80051a4:	69fa      	ldr	r2, [r7, #28]
 80051a6:	4613      	mov	r3, r2
 80051a8:	005b      	lsls	r3, r3, #1
 80051aa:	4413      	add	r3, r2
 80051ac:	00db      	lsls	r3, r3, #3
 80051ae:	440b      	add	r3, r1
 80051b0:	3324      	adds	r3, #36	; 0x24
 80051b2:	2200      	movs	r2, #0
 80051b4:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 80051b6:	6939      	ldr	r1, [r7, #16]
 80051b8:	69fa      	ldr	r2, [r7, #28]
 80051ba:	4613      	mov	r3, r2
 80051bc:	005b      	lsls	r3, r3, #1
 80051be:	4413      	add	r3, r2
 80051c0:	00db      	lsls	r3, r3, #3
 80051c2:	440b      	add	r3, r1
 80051c4:	332c      	adds	r3, #44	; 0x2c
 80051c6:	683a      	ldr	r2, [r7, #0]
 80051c8:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80051ca:	f3bf 8f5f 	dmb	sy
 80051ce:	e002      	b.n	80051d6 <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 80051d0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80051d4:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 80051d6:	697b      	ldr	r3, [r7, #20]
 80051d8:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 80051dc:	69fb      	ldr	r3, [r7, #28]
}
 80051de:	4618      	mov	r0, r3
 80051e0:	3720      	adds	r7, #32
 80051e2:	46bd      	mov	sp, r7
 80051e4:	bd80      	pop	{r7, pc}
 80051e6:	bf00      	nop
 80051e8:	20003f68 	.word	0x20003f68

080051ec <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 80051ec:	b580      	push	{r7, lr}
 80051ee:	b088      	sub	sp, #32
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	60f8      	str	r0, [r7, #12]
 80051f4:	60b9      	str	r1, [r7, #8]
 80051f6:	607a      	str	r2, [r7, #4]
 80051f8:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 80051fa:	4b33      	ldr	r3, [pc, #204]	; (80052c8 <SEGGER_RTT_ConfigDownBuffer+0xdc>)
 80051fc:	61bb      	str	r3, [r7, #24]
 80051fe:	69bb      	ldr	r3, [r7, #24]
 8005200:	781b      	ldrb	r3, [r3, #0]
 8005202:	b2db      	uxtb	r3, r3
 8005204:	2b00      	cmp	r3, #0
 8005206:	d101      	bne.n	800520c <SEGGER_RTT_ConfigDownBuffer+0x20>
 8005208:	f7ff fe8e 	bl	8004f28 <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800520c:	4b2e      	ldr	r3, [pc, #184]	; (80052c8 <SEGGER_RTT_ConfigDownBuffer+0xdc>)
 800520e:	617b      	str	r3, [r7, #20]
  if (BufferIndex < (unsigned)pRTTCB->MaxNumDownBuffers) {
 8005210:	697b      	ldr	r3, [r7, #20]
 8005212:	695b      	ldr	r3, [r3, #20]
 8005214:	461a      	mov	r2, r3
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	4293      	cmp	r3, r2
 800521a:	d24d      	bcs.n	80052b8 <SEGGER_RTT_ConfigDownBuffer+0xcc>
    SEGGER_RTT_LOCK();
 800521c:	f3ef 8311 	mrs	r3, BASEPRI
 8005220:	f04f 0120 	mov.w	r1, #32
 8005224:	f381 8811 	msr	BASEPRI, r1
 8005228:	613b      	str	r3, [r7, #16]
    if (BufferIndex > 0u) {
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	2b00      	cmp	r3, #0
 800522e:	d031      	beq.n	8005294 <SEGGER_RTT_ConfigDownBuffer+0xa8>
      pRTTCB->aDown[BufferIndex].sName        = sName;
 8005230:	6979      	ldr	r1, [r7, #20]
 8005232:	68fa      	ldr	r2, [r7, #12]
 8005234:	4613      	mov	r3, r2
 8005236:	005b      	lsls	r3, r3, #1
 8005238:	4413      	add	r3, r2
 800523a:	00db      	lsls	r3, r3, #3
 800523c:	440b      	add	r3, r1
 800523e:	3360      	adds	r3, #96	; 0x60
 8005240:	68ba      	ldr	r2, [r7, #8]
 8005242:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].pBuffer      = (char*)pBuffer;
 8005244:	6979      	ldr	r1, [r7, #20]
 8005246:	68fa      	ldr	r2, [r7, #12]
 8005248:	4613      	mov	r3, r2
 800524a:	005b      	lsls	r3, r3, #1
 800524c:	4413      	add	r3, r2
 800524e:	00db      	lsls	r3, r3, #3
 8005250:	440b      	add	r3, r1
 8005252:	3364      	adds	r3, #100	; 0x64
 8005254:	687a      	ldr	r2, [r7, #4]
 8005256:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].SizeOfBuffer = BufferSize;
 8005258:	6979      	ldr	r1, [r7, #20]
 800525a:	68fa      	ldr	r2, [r7, #12]
 800525c:	4613      	mov	r3, r2
 800525e:	005b      	lsls	r3, r3, #1
 8005260:	4413      	add	r3, r2
 8005262:	00db      	lsls	r3, r3, #3
 8005264:	440b      	add	r3, r1
 8005266:	3368      	adds	r3, #104	; 0x68
 8005268:	683a      	ldr	r2, [r7, #0]
 800526a:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].RdOff        = 0u;
 800526c:	6979      	ldr	r1, [r7, #20]
 800526e:	68fa      	ldr	r2, [r7, #12]
 8005270:	4613      	mov	r3, r2
 8005272:	005b      	lsls	r3, r3, #1
 8005274:	4413      	add	r3, r2
 8005276:	00db      	lsls	r3, r3, #3
 8005278:	440b      	add	r3, r1
 800527a:	3370      	adds	r3, #112	; 0x70
 800527c:	2200      	movs	r2, #0
 800527e:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].WrOff        = 0u;
 8005280:	6979      	ldr	r1, [r7, #20]
 8005282:	68fa      	ldr	r2, [r7, #12]
 8005284:	4613      	mov	r3, r2
 8005286:	005b      	lsls	r3, r3, #1
 8005288:	4413      	add	r3, r2
 800528a:	00db      	lsls	r3, r3, #3
 800528c:	440b      	add	r3, r1
 800528e:	336c      	adds	r3, #108	; 0x6c
 8005290:	2200      	movs	r2, #0
 8005292:	601a      	str	r2, [r3, #0]
    }
    pRTTCB->aDown[BufferIndex].Flags          = Flags;
 8005294:	6979      	ldr	r1, [r7, #20]
 8005296:	68fa      	ldr	r2, [r7, #12]
 8005298:	4613      	mov	r3, r2
 800529a:	005b      	lsls	r3, r3, #1
 800529c:	4413      	add	r3, r2
 800529e:	00db      	lsls	r3, r3, #3
 80052a0:	440b      	add	r3, r1
 80052a2:	3374      	adds	r3, #116	; 0x74
 80052a4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80052a6:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80052a8:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 80052ac:	693b      	ldr	r3, [r7, #16]
 80052ae:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 80052b2:	2300      	movs	r3, #0
 80052b4:	61fb      	str	r3, [r7, #28]
 80052b6:	e002      	b.n	80052be <SEGGER_RTT_ConfigDownBuffer+0xd2>
  } else {
    r = -1;
 80052b8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80052bc:	61fb      	str	r3, [r7, #28]
  }
  return r;
 80052be:	69fb      	ldr	r3, [r7, #28]
}
 80052c0:	4618      	mov	r0, r3
 80052c2:	3720      	adds	r7, #32
 80052c4:	46bd      	mov	sp, r7
 80052c6:	bd80      	pop	{r7, pc}
 80052c8:	20003f68 	.word	0x20003f68

080052cc <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 80052cc:	b480      	push	{r7}
 80052ce:	b087      	sub	sp, #28
 80052d0:	af00      	add	r7, sp, #0
 80052d2:	60f8      	str	r0, [r7, #12]
 80052d4:	60b9      	str	r1, [r7, #8]
 80052d6:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 80052d8:	2300      	movs	r3, #0
 80052da:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 80052dc:	e002      	b.n	80052e4 <_EncodeStr+0x18>
    Len++;
 80052de:	693b      	ldr	r3, [r7, #16]
 80052e0:	3301      	adds	r3, #1
 80052e2:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 80052e4:	68ba      	ldr	r2, [r7, #8]
 80052e6:	693b      	ldr	r3, [r7, #16]
 80052e8:	4413      	add	r3, r2
 80052ea:	781b      	ldrb	r3, [r3, #0]
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d1f6      	bne.n	80052de <_EncodeStr+0x12>
  }
  if (Len > Limit) {
 80052f0:	693a      	ldr	r2, [r7, #16]
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	429a      	cmp	r2, r3
 80052f6:	d901      	bls.n	80052fc <_EncodeStr+0x30>
    Len = Limit;
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	613b      	str	r3, [r7, #16]
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 80052fc:	693b      	ldr	r3, [r7, #16]
 80052fe:	2bfe      	cmp	r3, #254	; 0xfe
 8005300:	d806      	bhi.n	8005310 <_EncodeStr+0x44>
    *pPayload++ = Len; 
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	1c5a      	adds	r2, r3, #1
 8005306:	60fa      	str	r2, [r7, #12]
 8005308:	693a      	ldr	r2, [r7, #16]
 800530a:	b2d2      	uxtb	r2, r2
 800530c:	701a      	strb	r2, [r3, #0]
 800530e:	e011      	b.n	8005334 <_EncodeStr+0x68>
  } else {
    *pPayload++ = 255;
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	1c5a      	adds	r2, r3, #1
 8005314:	60fa      	str	r2, [r7, #12]
 8005316:	22ff      	movs	r2, #255	; 0xff
 8005318:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	1c5a      	adds	r2, r3, #1
 800531e:	60fa      	str	r2, [r7, #12]
 8005320:	693a      	ldr	r2, [r7, #16]
 8005322:	b2d2      	uxtb	r2, r2
 8005324:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 8005326:	693b      	ldr	r3, [r7, #16]
 8005328:	0a19      	lsrs	r1, r3, #8
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	1c5a      	adds	r2, r3, #1
 800532e:	60fa      	str	r2, [r7, #12]
 8005330:	b2ca      	uxtb	r2, r1
 8005332:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 8005334:	2300      	movs	r3, #0
 8005336:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8005338:	e00a      	b.n	8005350 <_EncodeStr+0x84>
    *pPayload++ = *pText++;
 800533a:	68ba      	ldr	r2, [r7, #8]
 800533c:	1c53      	adds	r3, r2, #1
 800533e:	60bb      	str	r3, [r7, #8]
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	1c59      	adds	r1, r3, #1
 8005344:	60f9      	str	r1, [r7, #12]
 8005346:	7812      	ldrb	r2, [r2, #0]
 8005348:	701a      	strb	r2, [r3, #0]
    n++;
 800534a:	697b      	ldr	r3, [r7, #20]
 800534c:	3301      	adds	r3, #1
 800534e:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8005350:	697a      	ldr	r2, [r7, #20]
 8005352:	693b      	ldr	r3, [r7, #16]
 8005354:	429a      	cmp	r2, r3
 8005356:	d3f0      	bcc.n	800533a <_EncodeStr+0x6e>
  }
  return pPayload;
 8005358:	68fb      	ldr	r3, [r7, #12]
}
 800535a:	4618      	mov	r0, r3
 800535c:	371c      	adds	r7, #28
 800535e:	46bd      	mov	sp, r7
 8005360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005364:	4770      	bx	lr

08005366 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8005366:	b480      	push	{r7}
 8005368:	b083      	sub	sp, #12
 800536a:	af00      	add	r7, sp, #0
 800536c:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	3304      	adds	r3, #4
}
 8005372:	4618      	mov	r0, r3
 8005374:	370c      	adds	r7, #12
 8005376:	46bd      	mov	sp, r7
 8005378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800537c:	4770      	bx	lr
	...

08005380 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8005380:	b580      	push	{r7, lr}
 8005382:	b082      	sub	sp, #8
 8005384:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8005386:	4b36      	ldr	r3, [pc, #216]	; (8005460 <_HandleIncomingPacket+0xe0>)
 8005388:	7e1b      	ldrb	r3, [r3, #24]
 800538a:	4618      	mov	r0, r3
 800538c:	1cfb      	adds	r3, r7, #3
 800538e:	2201      	movs	r2, #1
 8005390:	4619      	mov	r1, r3
 8005392:	f7ff fe21 	bl	8004fd8 <SEGGER_RTT_ReadNoLock>
 8005396:	4603      	mov	r3, r0
 8005398:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	2b00      	cmp	r3, #0
 800539e:	dd54      	ble.n	800544a <_HandleIncomingPacket+0xca>
    switch (Cmd) {
 80053a0:	78fb      	ldrb	r3, [r7, #3]
 80053a2:	2b80      	cmp	r3, #128	; 0x80
 80053a4:	d032      	beq.n	800540c <_HandleIncomingPacket+0x8c>
 80053a6:	2b80      	cmp	r3, #128	; 0x80
 80053a8:	dc42      	bgt.n	8005430 <_HandleIncomingPacket+0xb0>
 80053aa:	2b07      	cmp	r3, #7
 80053ac:	dc16      	bgt.n	80053dc <_HandleIncomingPacket+0x5c>
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	dd3e      	ble.n	8005430 <_HandleIncomingPacket+0xb0>
 80053b2:	3b01      	subs	r3, #1
 80053b4:	2b06      	cmp	r3, #6
 80053b6:	d83b      	bhi.n	8005430 <_HandleIncomingPacket+0xb0>
 80053b8:	a201      	add	r2, pc, #4	; (adr r2, 80053c0 <_HandleIncomingPacket+0x40>)
 80053ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053be:	bf00      	nop
 80053c0:	080053e3 	.word	0x080053e3
 80053c4:	080053e9 	.word	0x080053e9
 80053c8:	080053ef 	.word	0x080053ef
 80053cc:	080053f5 	.word	0x080053f5
 80053d0:	080053fb 	.word	0x080053fb
 80053d4:	08005401 	.word	0x08005401
 80053d8:	08005407 	.word	0x08005407
 80053dc:	2b7f      	cmp	r3, #127	; 0x7f
 80053de:	d036      	beq.n	800544e <_HandleIncomingPacket+0xce>
 80053e0:	e026      	b.n	8005430 <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 80053e2:	f000 ff41 	bl	8006268 <SEGGER_SYSVIEW_Start>
      break;
 80053e6:	e037      	b.n	8005458 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 80053e8:	f000 fff8 	bl	80063dc <SEGGER_SYSVIEW_Stop>
      break;
 80053ec:	e034      	b.n	8005458 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 80053ee:	f001 f9d1 	bl	8006794 <SEGGER_SYSVIEW_RecordSystime>
      break;
 80053f2:	e031      	b.n	8005458 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 80053f4:	f001 f996 	bl	8006724 <SEGGER_SYSVIEW_SendTaskList>
      break;
 80053f8:	e02e      	b.n	8005458 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 80053fa:	f001 f815 	bl	8006428 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 80053fe:	e02b      	b.n	8005458 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8005400:	f001 fc04 	bl	8006c0c <SEGGER_SYSVIEW_SendNumModules>
      break;
 8005404:	e028      	b.n	8005458 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 8005406:	f001 fbe3 	bl	8006bd0 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 800540a:	e025      	b.n	8005458 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800540c:	4b14      	ldr	r3, [pc, #80]	; (8005460 <_HandleIncomingPacket+0xe0>)
 800540e:	7e1b      	ldrb	r3, [r3, #24]
 8005410:	4618      	mov	r0, r3
 8005412:	1cfb      	adds	r3, r7, #3
 8005414:	2201      	movs	r2, #1
 8005416:	4619      	mov	r1, r3
 8005418:	f7ff fdde 	bl	8004fd8 <SEGGER_RTT_ReadNoLock>
 800541c:	4603      	mov	r3, r0
 800541e:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	2b00      	cmp	r3, #0
 8005424:	dd15      	ble.n	8005452 <_HandleIncomingPacket+0xd2>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8005426:	78fb      	ldrb	r3, [r7, #3]
 8005428:	4618      	mov	r0, r3
 800542a:	f001 fb51 	bl	8006ad0 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 800542e:	e010      	b.n	8005452 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 8005430:	78fb      	ldrb	r3, [r7, #3]
 8005432:	b25b      	sxtb	r3, r3
 8005434:	2b00      	cmp	r3, #0
 8005436:	da0e      	bge.n	8005456 <_HandleIncomingPacket+0xd6>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8005438:	4b09      	ldr	r3, [pc, #36]	; (8005460 <_HandleIncomingPacket+0xe0>)
 800543a:	7e1b      	ldrb	r3, [r3, #24]
 800543c:	4618      	mov	r0, r3
 800543e:	1cfb      	adds	r3, r7, #3
 8005440:	2201      	movs	r2, #1
 8005442:	4619      	mov	r1, r3
 8005444:	f7ff fdc8 	bl	8004fd8 <SEGGER_RTT_ReadNoLock>
      }
      break;
 8005448:	e005      	b.n	8005456 <_HandleIncomingPacket+0xd6>
    }
  }
 800544a:	bf00      	nop
 800544c:	e004      	b.n	8005458 <_HandleIncomingPacket+0xd8>
      break;
 800544e:	bf00      	nop
 8005450:	e002      	b.n	8005458 <_HandleIncomingPacket+0xd8>
      break;
 8005452:	bf00      	nop
 8005454:	e000      	b.n	8005458 <_HandleIncomingPacket+0xd8>
      break;
 8005456:	bf00      	nop
}
 8005458:	bf00      	nop
 800545a:	3708      	adds	r7, #8
 800545c:	46bd      	mov	sp, r7
 800545e:	bd80      	pop	{r7, pc}
 8005460:	20005428 	.word	0x20005428

08005464 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8005464:	b580      	push	{r7, lr}
 8005466:	b08c      	sub	sp, #48	; 0x30
 8005468:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 800546a:	2301      	movs	r3, #1
 800546c:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 800546e:	1d3b      	adds	r3, r7, #4
 8005470:	3301      	adds	r3, #1
 8005472:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8005474:	69fb      	ldr	r3, [r7, #28]
 8005476:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005478:	4b31      	ldr	r3, [pc, #196]	; (8005540 <_TrySendOverflowPacket+0xdc>)
 800547a:	695b      	ldr	r3, [r3, #20]
 800547c:	62bb      	str	r3, [r7, #40]	; 0x28
 800547e:	e00b      	b.n	8005498 <_TrySendOverflowPacket+0x34>
 8005480:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005482:	b2da      	uxtb	r2, r3
 8005484:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005486:	1c59      	adds	r1, r3, #1
 8005488:	62f9      	str	r1, [r7, #44]	; 0x2c
 800548a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800548e:	b2d2      	uxtb	r2, r2
 8005490:	701a      	strb	r2, [r3, #0]
 8005492:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005494:	09db      	lsrs	r3, r3, #7
 8005496:	62bb      	str	r3, [r7, #40]	; 0x28
 8005498:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800549a:	2b7f      	cmp	r3, #127	; 0x7f
 800549c:	d8f0      	bhi.n	8005480 <_TrySendOverflowPacket+0x1c>
 800549e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054a0:	1c5a      	adds	r2, r3, #1
 80054a2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80054a4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80054a6:	b2d2      	uxtb	r2, r2
 80054a8:	701a      	strb	r2, [r3, #0]
 80054aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054ac:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80054ae:	4b25      	ldr	r3, [pc, #148]	; (8005544 <_TrySendOverflowPacket+0xe0>)
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 80054b4:	4b22      	ldr	r3, [pc, #136]	; (8005540 <_TrySendOverflowPacket+0xdc>)
 80054b6:	68db      	ldr	r3, [r3, #12]
 80054b8:	69ba      	ldr	r2, [r7, #24]
 80054ba:	1ad3      	subs	r3, r2, r3
 80054bc:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 80054be:	69fb      	ldr	r3, [r7, #28]
 80054c0:	627b      	str	r3, [r7, #36]	; 0x24
 80054c2:	697b      	ldr	r3, [r7, #20]
 80054c4:	623b      	str	r3, [r7, #32]
 80054c6:	e00b      	b.n	80054e0 <_TrySendOverflowPacket+0x7c>
 80054c8:	6a3b      	ldr	r3, [r7, #32]
 80054ca:	b2da      	uxtb	r2, r3
 80054cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054ce:	1c59      	adds	r1, r3, #1
 80054d0:	6279      	str	r1, [r7, #36]	; 0x24
 80054d2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80054d6:	b2d2      	uxtb	r2, r2
 80054d8:	701a      	strb	r2, [r3, #0]
 80054da:	6a3b      	ldr	r3, [r7, #32]
 80054dc:	09db      	lsrs	r3, r3, #7
 80054de:	623b      	str	r3, [r7, #32]
 80054e0:	6a3b      	ldr	r3, [r7, #32]
 80054e2:	2b7f      	cmp	r3, #127	; 0x7f
 80054e4:	d8f0      	bhi.n	80054c8 <_TrySendOverflowPacket+0x64>
 80054e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054e8:	1c5a      	adds	r2, r3, #1
 80054ea:	627a      	str	r2, [r7, #36]	; 0x24
 80054ec:	6a3a      	ldr	r2, [r7, #32]
 80054ee:	b2d2      	uxtb	r2, r2
 80054f0:	701a      	strb	r2, [r3, #0]
 80054f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054f4:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 80054f6:	4b12      	ldr	r3, [pc, #72]	; (8005540 <_TrySendOverflowPacket+0xdc>)
 80054f8:	785b      	ldrb	r3, [r3, #1]
 80054fa:	4618      	mov	r0, r3
 80054fc:	1d3b      	adds	r3, r7, #4
 80054fe:	69fa      	ldr	r2, [r7, #28]
 8005500:	1ad3      	subs	r3, r2, r3
 8005502:	461a      	mov	r2, r3
 8005504:	1d3b      	adds	r3, r7, #4
 8005506:	4619      	mov	r1, r3
 8005508:	f7fa fe62 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 800550c:	4603      	mov	r3, r0
 800550e:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
  if (Status) {
 8005510:	693b      	ldr	r3, [r7, #16]
 8005512:	2b00      	cmp	r3, #0
 8005514:	d009      	beq.n	800552a <_TrySendOverflowPacket+0xc6>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8005516:	4a0a      	ldr	r2, [pc, #40]	; (8005540 <_TrySendOverflowPacket+0xdc>)
 8005518:	69bb      	ldr	r3, [r7, #24]
 800551a:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 800551c:	4b08      	ldr	r3, [pc, #32]	; (8005540 <_TrySendOverflowPacket+0xdc>)
 800551e:	781b      	ldrb	r3, [r3, #0]
 8005520:	3b01      	subs	r3, #1
 8005522:	b2da      	uxtb	r2, r3
 8005524:	4b06      	ldr	r3, [pc, #24]	; (8005540 <_TrySendOverflowPacket+0xdc>)
 8005526:	701a      	strb	r2, [r3, #0]
 8005528:	e004      	b.n	8005534 <_TrySendOverflowPacket+0xd0>
  } else {
    _SYSVIEW_Globals.DropCount++;
 800552a:	4b05      	ldr	r3, [pc, #20]	; (8005540 <_TrySendOverflowPacket+0xdc>)
 800552c:	695b      	ldr	r3, [r3, #20]
 800552e:	3301      	adds	r3, #1
 8005530:	4a03      	ldr	r2, [pc, #12]	; (8005540 <_TrySendOverflowPacket+0xdc>)
 8005532:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8005534:	693b      	ldr	r3, [r7, #16]
}
 8005536:	4618      	mov	r0, r3
 8005538:	3730      	adds	r7, #48	; 0x30
 800553a:	46bd      	mov	sp, r7
 800553c:	bd80      	pop	{r7, pc}
 800553e:	bf00      	nop
 8005540:	20005428 	.word	0x20005428
 8005544:	e0001004 	.word	0xe0001004

08005548 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8005548:	b580      	push	{r7, lr}
 800554a:	b08a      	sub	sp, #40	; 0x28
 800554c:	af00      	add	r7, sp, #0
 800554e:	60f8      	str	r0, [r7, #12]
 8005550:	60b9      	str	r1, [r7, #8]
 8005552:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8005554:	4b6c      	ldr	r3, [pc, #432]	; (8005708 <_SendPacket+0x1c0>)
 8005556:	781b      	ldrb	r3, [r3, #0]
 8005558:	2b01      	cmp	r3, #1
 800555a:	d010      	beq.n	800557e <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 800555c:	4b6a      	ldr	r3, [pc, #424]	; (8005708 <_SendPacket+0x1c0>)
 800555e:	781b      	ldrb	r3, [r3, #0]
 8005560:	2b00      	cmp	r3, #0
 8005562:	f000 80a3 	beq.w	80056ac <_SendPacket+0x164>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 8005566:	4b68      	ldr	r3, [pc, #416]	; (8005708 <_SendPacket+0x1c0>)
 8005568:	781b      	ldrb	r3, [r3, #0]
 800556a:	2b02      	cmp	r3, #2
 800556c:	d109      	bne.n	8005582 <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 800556e:	f7ff ff79 	bl	8005464 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 8005572:	4b65      	ldr	r3, [pc, #404]	; (8005708 <_SendPacket+0x1c0>)
 8005574:	781b      	ldrb	r3, [r3, #0]
 8005576:	2b01      	cmp	r3, #1
 8005578:	f040 809a 	bne.w	80056b0 <_SendPacket+0x168>
      goto SendDone;
    }
  }
Send:
 800557c:	e001      	b.n	8005582 <_SendPacket+0x3a>
    goto Send;
 800557e:	bf00      	nop
 8005580:	e000      	b.n	8005584 <_SendPacket+0x3c>
Send:
 8005582:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	2b1f      	cmp	r3, #31
 8005588:	d809      	bhi.n	800559e <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 800558a:	4b5f      	ldr	r3, [pc, #380]	; (8005708 <_SendPacket+0x1c0>)
 800558c:	69da      	ldr	r2, [r3, #28]
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	fa22 f303 	lsr.w	r3, r2, r3
 8005594:	f003 0301 	and.w	r3, r3, #1
 8005598:	2b00      	cmp	r3, #0
 800559a:	f040 808b 	bne.w	80056b4 <_SendPacket+0x16c>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	2b17      	cmp	r3, #23
 80055a2:	d807      	bhi.n	80055b4 <_SendPacket+0x6c>
    *--pStartPacket = EventId;
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	3b01      	subs	r3, #1
 80055a8:	60fb      	str	r3, [r7, #12]
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	b2da      	uxtb	r2, r3
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	701a      	strb	r2, [r3, #0]
 80055b2:	e03d      	b.n	8005630 <_SendPacket+0xe8>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 80055b4:	68ba      	ldr	r2, [r7, #8]
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	1ad3      	subs	r3, r2, r3
 80055ba:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 80055bc:	69fb      	ldr	r3, [r7, #28]
 80055be:	2b7f      	cmp	r3, #127	; 0x7f
 80055c0:	d912      	bls.n	80055e8 <_SendPacket+0xa0>
      *--pStartPacket = (NumBytes >> 7);
 80055c2:	69fb      	ldr	r3, [r7, #28]
 80055c4:	09da      	lsrs	r2, r3, #7
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	3b01      	subs	r3, #1
 80055ca:	60fb      	str	r3, [r7, #12]
 80055cc:	b2d2      	uxtb	r2, r2
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 80055d2:	69fb      	ldr	r3, [r7, #28]
 80055d4:	b2db      	uxtb	r3, r3
 80055d6:	68fa      	ldr	r2, [r7, #12]
 80055d8:	3a01      	subs	r2, #1
 80055da:	60fa      	str	r2, [r7, #12]
 80055dc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80055e0:	b2da      	uxtb	r2, r3
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	701a      	strb	r2, [r3, #0]
 80055e6:	e006      	b.n	80055f6 <_SendPacket+0xae>
    } else {
      *--pStartPacket = NumBytes;
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	3b01      	subs	r3, #1
 80055ec:	60fb      	str	r3, [r7, #12]
 80055ee:	69fb      	ldr	r3, [r7, #28]
 80055f0:	b2da      	uxtb	r2, r3
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	2b7f      	cmp	r3, #127	; 0x7f
 80055fa:	d912      	bls.n	8005622 <_SendPacket+0xda>
      *--pStartPacket = (EventId >> 7);
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	09da      	lsrs	r2, r3, #7
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	3b01      	subs	r3, #1
 8005604:	60fb      	str	r3, [r7, #12]
 8005606:	b2d2      	uxtb	r2, r2
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	b2db      	uxtb	r3, r3
 8005610:	68fa      	ldr	r2, [r7, #12]
 8005612:	3a01      	subs	r2, #1
 8005614:	60fa      	str	r2, [r7, #12]
 8005616:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800561a:	b2da      	uxtb	r2, r3
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	701a      	strb	r2, [r3, #0]
 8005620:	e006      	b.n	8005630 <_SendPacket+0xe8>
    } else {
      *--pStartPacket = EventId;
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	3b01      	subs	r3, #1
 8005626:	60fb      	str	r3, [r7, #12]
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	b2da      	uxtb	r2, r3
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8005630:	4b36      	ldr	r3, [pc, #216]	; (800570c <_SendPacket+0x1c4>)
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8005636:	4b34      	ldr	r3, [pc, #208]	; (8005708 <_SendPacket+0x1c0>)
 8005638:	68db      	ldr	r3, [r3, #12]
 800563a:	69ba      	ldr	r2, [r7, #24]
 800563c:	1ad3      	subs	r3, r2, r3
 800563e:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8005640:	68bb      	ldr	r3, [r7, #8]
 8005642:	627b      	str	r3, [r7, #36]	; 0x24
 8005644:	697b      	ldr	r3, [r7, #20]
 8005646:	623b      	str	r3, [r7, #32]
 8005648:	e00b      	b.n	8005662 <_SendPacket+0x11a>
 800564a:	6a3b      	ldr	r3, [r7, #32]
 800564c:	b2da      	uxtb	r2, r3
 800564e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005650:	1c59      	adds	r1, r3, #1
 8005652:	6279      	str	r1, [r7, #36]	; 0x24
 8005654:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005658:	b2d2      	uxtb	r2, r2
 800565a:	701a      	strb	r2, [r3, #0]
 800565c:	6a3b      	ldr	r3, [r7, #32]
 800565e:	09db      	lsrs	r3, r3, #7
 8005660:	623b      	str	r3, [r7, #32]
 8005662:	6a3b      	ldr	r3, [r7, #32]
 8005664:	2b7f      	cmp	r3, #127	; 0x7f
 8005666:	d8f0      	bhi.n	800564a <_SendPacket+0x102>
 8005668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800566a:	1c5a      	adds	r2, r3, #1
 800566c:	627a      	str	r2, [r7, #36]	; 0x24
 800566e:	6a3a      	ldr	r2, [r7, #32]
 8005670:	b2d2      	uxtb	r2, r2
 8005672:	701a      	strb	r2, [r3, #0]
 8005674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005676:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 8005678:	4b23      	ldr	r3, [pc, #140]	; (8005708 <_SendPacket+0x1c0>)
 800567a:	785b      	ldrb	r3, [r3, #1]
 800567c:	4618      	mov	r0, r3
 800567e:	68ba      	ldr	r2, [r7, #8]
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	1ad3      	subs	r3, r2, r3
 8005684:	461a      	mov	r2, r3
 8005686:	68f9      	ldr	r1, [r7, #12]
 8005688:	f7fa fda2 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 800568c:	4603      	mov	r3, r0
 800568e:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
  if (Status) {
 8005690:	693b      	ldr	r3, [r7, #16]
 8005692:	2b00      	cmp	r3, #0
 8005694:	d003      	beq.n	800569e <_SendPacket+0x156>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8005696:	4a1c      	ldr	r2, [pc, #112]	; (8005708 <_SendPacket+0x1c0>)
 8005698:	69bb      	ldr	r3, [r7, #24]
 800569a:	60d3      	str	r3, [r2, #12]
 800569c:	e00b      	b.n	80056b6 <_SendPacket+0x16e>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 800569e:	4b1a      	ldr	r3, [pc, #104]	; (8005708 <_SendPacket+0x1c0>)
 80056a0:	781b      	ldrb	r3, [r3, #0]
 80056a2:	3301      	adds	r3, #1
 80056a4:	b2da      	uxtb	r2, r3
 80056a6:	4b18      	ldr	r3, [pc, #96]	; (8005708 <_SendPacket+0x1c0>)
 80056a8:	701a      	strb	r2, [r3, #0]
 80056aa:	e004      	b.n	80056b6 <_SendPacket+0x16e>
    goto SendDone;
 80056ac:	bf00      	nop
 80056ae:	e002      	b.n	80056b6 <_SendPacket+0x16e>
      goto SendDone;
 80056b0:	bf00      	nop
 80056b2:	e000      	b.n	80056b6 <_SendPacket+0x16e>
      goto SendDone;
 80056b4:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 80056b6:	4b14      	ldr	r3, [pc, #80]	; (8005708 <_SendPacket+0x1c0>)
 80056b8:	7e1b      	ldrb	r3, [r3, #24]
 80056ba:	4619      	mov	r1, r3
 80056bc:	4a14      	ldr	r2, [pc, #80]	; (8005710 <_SendPacket+0x1c8>)
 80056be:	460b      	mov	r3, r1
 80056c0:	005b      	lsls	r3, r3, #1
 80056c2:	440b      	add	r3, r1
 80056c4:	00db      	lsls	r3, r3, #3
 80056c6:	4413      	add	r3, r2
 80056c8:	336c      	adds	r3, #108	; 0x6c
 80056ca:	681a      	ldr	r2, [r3, #0]
 80056cc:	4b0e      	ldr	r3, [pc, #56]	; (8005708 <_SendPacket+0x1c0>)
 80056ce:	7e1b      	ldrb	r3, [r3, #24]
 80056d0:	4618      	mov	r0, r3
 80056d2:	490f      	ldr	r1, [pc, #60]	; (8005710 <_SendPacket+0x1c8>)
 80056d4:	4603      	mov	r3, r0
 80056d6:	005b      	lsls	r3, r3, #1
 80056d8:	4403      	add	r3, r0
 80056da:	00db      	lsls	r3, r3, #3
 80056dc:	440b      	add	r3, r1
 80056de:	3370      	adds	r3, #112	; 0x70
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	429a      	cmp	r2, r3
 80056e4:	d00b      	beq.n	80056fe <_SendPacket+0x1b6>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 80056e6:	4b08      	ldr	r3, [pc, #32]	; (8005708 <_SendPacket+0x1c0>)
 80056e8:	789b      	ldrb	r3, [r3, #2]
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d107      	bne.n	80056fe <_SendPacket+0x1b6>
      _SYSVIEW_Globals.RecursionCnt = 1;
 80056ee:	4b06      	ldr	r3, [pc, #24]	; (8005708 <_SendPacket+0x1c0>)
 80056f0:	2201      	movs	r2, #1
 80056f2:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 80056f4:	f7ff fe44 	bl	8005380 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 80056f8:	4b03      	ldr	r3, [pc, #12]	; (8005708 <_SendPacket+0x1c0>)
 80056fa:	2200      	movs	r2, #0
 80056fc:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 80056fe:	bf00      	nop
 8005700:	3728      	adds	r7, #40	; 0x28
 8005702:	46bd      	mov	sp, r7
 8005704:	bd80      	pop	{r7, pc}
 8005706:	bf00      	nop
 8005708:	20005428 	.word	0x20005428
 800570c:	e0001004 	.word	0xe0001004
 8005710:	20003f68 	.word	0x20003f68

08005714 <_StoreChar>:
*
*  Parameters
*    p            Pointer to the buffer description.
*    c            Character to be printed.
*/
static void _StoreChar(SEGGER_SYSVIEW_PRINTF_DESC * p, char c) {
 8005714:	b580      	push	{r7, lr}
 8005716:	b08a      	sub	sp, #40	; 0x28
 8005718:	af00      	add	r7, sp, #0
 800571a:	6078      	str	r0, [r7, #4]
 800571c:	460b      	mov	r3, r1
 800571e:	70fb      	strb	r3, [r7, #3]
  unsigned int  Cnt;
  U8*           pPayload;
  U32           Options;

  Cnt = p->Cnt;
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	691b      	ldr	r3, [r3, #16]
 8005724:	617b      	str	r3, [r7, #20]
  if ((Cnt + 1u) <= SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8005726:	697b      	ldr	r3, [r7, #20]
 8005728:	3301      	adds	r3, #1
 800572a:	2b80      	cmp	r3, #128	; 0x80
 800572c:	d80a      	bhi.n	8005744 <_StoreChar+0x30>
    *(p->pPayload++) = c;
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	685b      	ldr	r3, [r3, #4]
 8005732:	1c59      	adds	r1, r3, #1
 8005734:	687a      	ldr	r2, [r7, #4]
 8005736:	6051      	str	r1, [r2, #4]
 8005738:	78fa      	ldrb	r2, [r7, #3]
 800573a:	701a      	strb	r2, [r3, #0]
    p->Cnt = Cnt + 1u;
 800573c:	697b      	ldr	r3, [r7, #20]
 800573e:	1c5a      	adds	r2, r3, #1
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	611a      	str	r2, [r3, #16]
  }
  //
  // Write part of string, when the buffer is full
  //
  if (p->Cnt == SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	691b      	ldr	r3, [r3, #16]
 8005748:	2b80      	cmp	r3, #128	; 0x80
 800574a:	d15a      	bne.n	8005802 <_StoreChar+0xee>
    *(p->pPayloadStart) = p->Cnt;
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	691a      	ldr	r2, [r3, #16]
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	689b      	ldr	r3, [r3, #8]
 8005754:	b2d2      	uxtb	r2, r2
 8005756:	701a      	strb	r2, [r3, #0]
    pPayload = p->pPayload;
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	685b      	ldr	r3, [r3, #4]
 800575c:	613b      	str	r3, [r7, #16]
    Options = p->Options;
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	68db      	ldr	r3, [r3, #12]
 8005762:	60fb      	str	r3, [r7, #12]
    ENCODE_U32(pPayload, Options);
 8005764:	693b      	ldr	r3, [r7, #16]
 8005766:	627b      	str	r3, [r7, #36]	; 0x24
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	623b      	str	r3, [r7, #32]
 800576c:	e00b      	b.n	8005786 <_StoreChar+0x72>
 800576e:	6a3b      	ldr	r3, [r7, #32]
 8005770:	b2da      	uxtb	r2, r3
 8005772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005774:	1c59      	adds	r1, r3, #1
 8005776:	6279      	str	r1, [r7, #36]	; 0x24
 8005778:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800577c:	b2d2      	uxtb	r2, r2
 800577e:	701a      	strb	r2, [r3, #0]
 8005780:	6a3b      	ldr	r3, [r7, #32]
 8005782:	09db      	lsrs	r3, r3, #7
 8005784:	623b      	str	r3, [r7, #32]
 8005786:	6a3b      	ldr	r3, [r7, #32]
 8005788:	2b7f      	cmp	r3, #127	; 0x7f
 800578a:	d8f0      	bhi.n	800576e <_StoreChar+0x5a>
 800578c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800578e:	1c5a      	adds	r2, r3, #1
 8005790:	627a      	str	r2, [r7, #36]	; 0x24
 8005792:	6a3a      	ldr	r2, [r7, #32]
 8005794:	b2d2      	uxtb	r2, r2
 8005796:	701a      	strb	r2, [r3, #0]
 8005798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800579a:	613b      	str	r3, [r7, #16]
    ENCODE_U32(pPayload, 0);
 800579c:	693b      	ldr	r3, [r7, #16]
 800579e:	61fb      	str	r3, [r7, #28]
 80057a0:	2300      	movs	r3, #0
 80057a2:	61bb      	str	r3, [r7, #24]
 80057a4:	e00b      	b.n	80057be <_StoreChar+0xaa>
 80057a6:	69bb      	ldr	r3, [r7, #24]
 80057a8:	b2da      	uxtb	r2, r3
 80057aa:	69fb      	ldr	r3, [r7, #28]
 80057ac:	1c59      	adds	r1, r3, #1
 80057ae:	61f9      	str	r1, [r7, #28]
 80057b0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80057b4:	b2d2      	uxtb	r2, r2
 80057b6:	701a      	strb	r2, [r3, #0]
 80057b8:	69bb      	ldr	r3, [r7, #24]
 80057ba:	09db      	lsrs	r3, r3, #7
 80057bc:	61bb      	str	r3, [r7, #24]
 80057be:	69bb      	ldr	r3, [r7, #24]
 80057c0:	2b7f      	cmp	r3, #127	; 0x7f
 80057c2:	d8f0      	bhi.n	80057a6 <_StoreChar+0x92>
 80057c4:	69fb      	ldr	r3, [r7, #28]
 80057c6:	1c5a      	adds	r2, r3, #1
 80057c8:	61fa      	str	r2, [r7, #28]
 80057ca:	69ba      	ldr	r2, [r7, #24]
 80057cc:	b2d2      	uxtb	r2, r2
 80057ce:	701a      	strb	r2, [r3, #0]
 80057d0:	69fb      	ldr	r3, [r7, #28]
 80057d2:	613b      	str	r3, [r7, #16]
    _SendPacket(p->pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	689b      	ldr	r3, [r3, #8]
 80057d8:	221a      	movs	r2, #26
 80057da:	6939      	ldr	r1, [r7, #16]
 80057dc:	4618      	mov	r0, r3
 80057de:	f7ff feb3 	bl	8005548 <_SendPacket>
    p->pPayloadStart = _PreparePacket(p->pBuffer);
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	4618      	mov	r0, r3
 80057e8:	f7ff fdbd 	bl	8005366 <_PreparePacket>
 80057ec:	4602      	mov	r2, r0
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	609a      	str	r2, [r3, #8]
    p->pPayload = p->pPayloadStart + 1u;
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	689b      	ldr	r3, [r3, #8]
 80057f6:	1c5a      	adds	r2, r3, #1
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	605a      	str	r2, [r3, #4]
    p->Cnt = 0u;
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	2200      	movs	r2, #0
 8005800:	611a      	str	r2, [r3, #16]
  }
}
 8005802:	bf00      	nop
 8005804:	3728      	adds	r7, #40	; 0x28
 8005806:	46bd      	mov	sp, r7
 8005808:	bd80      	pop	{r7, pc}
	...

0800580c <_PrintUnsigned>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintUnsigned(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, unsigned int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 800580c:	b580      	push	{r7, lr}
 800580e:	b08a      	sub	sp, #40	; 0x28
 8005810:	af00      	add	r7, sp, #0
 8005812:	60f8      	str	r0, [r7, #12]
 8005814:	60b9      	str	r1, [r7, #8]
 8005816:	607a      	str	r2, [r7, #4]
 8005818:	603b      	str	r3, [r7, #0]
  unsigned int      Digit;
  unsigned int      Number;
  unsigned int      Width;
  char              c;

  Number = v;
 800581a:	68bb      	ldr	r3, [r7, #8]
 800581c:	623b      	str	r3, [r7, #32]
  Digit = 1u;
 800581e:	2301      	movs	r3, #1
 8005820:	627b      	str	r3, [r7, #36]	; 0x24
  //
  // Get actual field width
  //
  Width = 1u;
 8005822:	2301      	movs	r3, #1
 8005824:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 8005826:	e007      	b.n	8005838 <_PrintUnsigned+0x2c>
    Number = (Number / Base);
 8005828:	6a3a      	ldr	r2, [r7, #32]
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005830:	623b      	str	r3, [r7, #32]
    Width++;
 8005832:	69fb      	ldr	r3, [r7, #28]
 8005834:	3301      	adds	r3, #1
 8005836:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 8005838:	6a3a      	ldr	r2, [r7, #32]
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	429a      	cmp	r2, r3
 800583e:	d2f3      	bcs.n	8005828 <_PrintUnsigned+0x1c>
  }
  if (NumDigits > Width) {
 8005840:	683a      	ldr	r2, [r7, #0]
 8005842:	69fb      	ldr	r3, [r7, #28]
 8005844:	429a      	cmp	r2, r3
 8005846:	d901      	bls.n	800584c <_PrintUnsigned+0x40>
    Width = NumDigits;
 8005848:	683b      	ldr	r3, [r7, #0]
 800584a:	61fb      	str	r3, [r7, #28]
  }
  //
  // Print leading chars if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) {
 800584c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800584e:	f003 0301 	and.w	r3, r3, #1
 8005852:	2b00      	cmp	r3, #0
 8005854:	d11f      	bne.n	8005896 <_PrintUnsigned+0x8a>
    if (FieldWidth != 0u) {
 8005856:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005858:	2b00      	cmp	r3, #0
 800585a:	d01c      	beq.n	8005896 <_PrintUnsigned+0x8a>
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && (NumDigits == 0u)) {
 800585c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800585e:	f003 0302 	and.w	r3, r3, #2
 8005862:	2b00      	cmp	r3, #0
 8005864:	d005      	beq.n	8005872 <_PrintUnsigned+0x66>
 8005866:	683b      	ldr	r3, [r7, #0]
 8005868:	2b00      	cmp	r3, #0
 800586a:	d102      	bne.n	8005872 <_PrintUnsigned+0x66>
        c = '0';
 800586c:	2330      	movs	r3, #48	; 0x30
 800586e:	76fb      	strb	r3, [r7, #27]
 8005870:	e001      	b.n	8005876 <_PrintUnsigned+0x6a>
      } else {
        c = ' ';
 8005872:	2320      	movs	r3, #32
 8005874:	76fb      	strb	r3, [r7, #27]
      }
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005876:	e007      	b.n	8005888 <_PrintUnsigned+0x7c>
        FieldWidth--;
 8005878:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800587a:	3b01      	subs	r3, #1
 800587c:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, c);
 800587e:	7efb      	ldrb	r3, [r7, #27]
 8005880:	4619      	mov	r1, r3
 8005882:	68f8      	ldr	r0, [r7, #12]
 8005884:	f7ff ff46 	bl	8005714 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005888:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800588a:	2b00      	cmp	r3, #0
 800588c:	d003      	beq.n	8005896 <_PrintUnsigned+0x8a>
 800588e:	69fa      	ldr	r2, [r7, #28]
 8005890:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005892:	429a      	cmp	r2, r3
 8005894:	d3f0      	bcc.n	8005878 <_PrintUnsigned+0x6c>
  // Compute Digit.
  // Loop until Digit has the value of the highest digit required.
  // Example: If the output is 345 (Base 10), loop 2 times until Digit is 100.
  //
  while (1) {
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 8005896:	683b      	ldr	r3, [r7, #0]
 8005898:	2b01      	cmp	r3, #1
 800589a:	d903      	bls.n	80058a4 <_PrintUnsigned+0x98>
      NumDigits--;
 800589c:	683b      	ldr	r3, [r7, #0]
 800589e:	3b01      	subs	r3, #1
 80058a0:	603b      	str	r3, [r7, #0]
 80058a2:	e009      	b.n	80058b8 <_PrintUnsigned+0xac>
    } else {
      Div = v / Digit;
 80058a4:	68ba      	ldr	r2, [r7, #8]
 80058a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80058ac:	617b      	str	r3, [r7, #20]
      if (Div < Base) {        // Is our divider big enough to extract the highest digit from value? => Done
 80058ae:	697a      	ldr	r2, [r7, #20]
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	429a      	cmp	r2, r3
 80058b4:	d200      	bcs.n	80058b8 <_PrintUnsigned+0xac>
        break;
 80058b6:	e005      	b.n	80058c4 <_PrintUnsigned+0xb8>
      }
    }
    Digit *= Base;
 80058b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058ba:	687a      	ldr	r2, [r7, #4]
 80058bc:	fb02 f303 	mul.w	r3, r2, r3
 80058c0:	627b      	str	r3, [r7, #36]	; 0x24
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 80058c2:	e7e8      	b.n	8005896 <_PrintUnsigned+0x8a>
  }
  //
  // Output digits
  //
  do {
    Div = v / Digit;
 80058c4:	68ba      	ldr	r2, [r7, #8]
 80058c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80058cc:	617b      	str	r3, [r7, #20]
    v -= Div * Digit;
 80058ce:	697b      	ldr	r3, [r7, #20]
 80058d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80058d2:	fb02 f303 	mul.w	r3, r2, r3
 80058d6:	68ba      	ldr	r2, [r7, #8]
 80058d8:	1ad3      	subs	r3, r2, r3
 80058da:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, _aV2C[Div]);
 80058dc:	4a15      	ldr	r2, [pc, #84]	; (8005934 <_PrintUnsigned+0x128>)
 80058de:	697b      	ldr	r3, [r7, #20]
 80058e0:	4413      	add	r3, r2
 80058e2:	781b      	ldrb	r3, [r3, #0]
 80058e4:	4619      	mov	r1, r3
 80058e6:	68f8      	ldr	r0, [r7, #12]
 80058e8:	f7ff ff14 	bl	8005714 <_StoreChar>
    Digit /= Base;
 80058ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80058f4:	627b      	str	r3, [r7, #36]	; 0x24
  } while (Digit);
 80058f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d1e3      	bne.n	80058c4 <_PrintUnsigned+0xb8>
  //
  // Print trailing spaces if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == FORMAT_FLAG_LEFT_JUSTIFY) {
 80058fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058fe:	f003 0301 	and.w	r3, r3, #1
 8005902:	2b00      	cmp	r3, #0
 8005904:	d011      	beq.n	800592a <_PrintUnsigned+0x11e>
    if (FieldWidth != 0u) {
 8005906:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005908:	2b00      	cmp	r3, #0
 800590a:	d00e      	beq.n	800592a <_PrintUnsigned+0x11e>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 800590c:	e006      	b.n	800591c <_PrintUnsigned+0x110>
        FieldWidth--;
 800590e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005910:	3b01      	subs	r3, #1
 8005912:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, ' ');
 8005914:	2120      	movs	r1, #32
 8005916:	68f8      	ldr	r0, [r7, #12]
 8005918:	f7ff fefc 	bl	8005714 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 800591c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800591e:	2b00      	cmp	r3, #0
 8005920:	d003      	beq.n	800592a <_PrintUnsigned+0x11e>
 8005922:	69fa      	ldr	r2, [r7, #28]
 8005924:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005926:	429a      	cmp	r2, r3
 8005928:	d3f1      	bcc.n	800590e <_PrintUnsigned+0x102>
      }
    }
  }
}
 800592a:	bf00      	nop
 800592c:	3728      	adds	r7, #40	; 0x28
 800592e:	46bd      	mov	sp, r7
 8005930:	bd80      	pop	{r7, pc}
 8005932:	bf00      	nop
 8005934:	08007884 	.word	0x08007884

08005938 <_PrintInt>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintInt(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 8005938:	b580      	push	{r7, lr}
 800593a:	b088      	sub	sp, #32
 800593c:	af02      	add	r7, sp, #8
 800593e:	60f8      	str	r0, [r7, #12]
 8005940:	60b9      	str	r1, [r7, #8]
 8005942:	607a      	str	r2, [r7, #4]
 8005944:	603b      	str	r3, [r7, #0]
  unsigned int  Width;
  int           Number;

  Number = (v < 0) ? -v : v;
 8005946:	68bb      	ldr	r3, [r7, #8]
 8005948:	2b00      	cmp	r3, #0
 800594a:	bfb8      	it	lt
 800594c:	425b      	neglt	r3, r3
 800594e:	613b      	str	r3, [r7, #16]

  //
  // Get actual field width
  //
  Width = 1u;
 8005950:	2301      	movs	r3, #1
 8005952:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 8005954:	e007      	b.n	8005966 <_PrintInt+0x2e>
    Number = (Number / (int)Base);
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	693a      	ldr	r2, [r7, #16]
 800595a:	fb92 f3f3 	sdiv	r3, r2, r3
 800595e:	613b      	str	r3, [r7, #16]
    Width++;
 8005960:	697b      	ldr	r3, [r7, #20]
 8005962:	3301      	adds	r3, #1
 8005964:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	693a      	ldr	r2, [r7, #16]
 800596a:	429a      	cmp	r2, r3
 800596c:	daf3      	bge.n	8005956 <_PrintInt+0x1e>
  }
  if (NumDigits > Width) {
 800596e:	683a      	ldr	r2, [r7, #0]
 8005970:	697b      	ldr	r3, [r7, #20]
 8005972:	429a      	cmp	r2, r3
 8005974:	d901      	bls.n	800597a <_PrintInt+0x42>
    Width = NumDigits;
 8005976:	683b      	ldr	r3, [r7, #0]
 8005978:	617b      	str	r3, [r7, #20]
  }
  if ((FieldWidth > 0u) && ((v < 0) || ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN))) {
 800597a:	6a3b      	ldr	r3, [r7, #32]
 800597c:	2b00      	cmp	r3, #0
 800597e:	d00a      	beq.n	8005996 <_PrintInt+0x5e>
 8005980:	68bb      	ldr	r3, [r7, #8]
 8005982:	2b00      	cmp	r3, #0
 8005984:	db04      	blt.n	8005990 <_PrintInt+0x58>
 8005986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005988:	f003 0304 	and.w	r3, r3, #4
 800598c:	2b00      	cmp	r3, #0
 800598e:	d002      	beq.n	8005996 <_PrintInt+0x5e>
    FieldWidth--;
 8005990:	6a3b      	ldr	r3, [r7, #32]
 8005992:	3b01      	subs	r3, #1
 8005994:	623b      	str	r3, [r7, #32]
  }

  //
  // Print leading spaces if necessary
  //
  if ((((FormatFlags & FORMAT_FLAG_PAD_ZERO) == 0u) || (NumDigits != 0u)) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u)) {
 8005996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005998:	f003 0302 	and.w	r3, r3, #2
 800599c:	2b00      	cmp	r3, #0
 800599e:	d002      	beq.n	80059a6 <_PrintInt+0x6e>
 80059a0:	683b      	ldr	r3, [r7, #0]
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d016      	beq.n	80059d4 <_PrintInt+0x9c>
 80059a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059a8:	f003 0301 	and.w	r3, r3, #1
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d111      	bne.n	80059d4 <_PrintInt+0x9c>
    if (FieldWidth != 0u) {
 80059b0:	6a3b      	ldr	r3, [r7, #32]
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d00e      	beq.n	80059d4 <_PrintInt+0x9c>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80059b6:	e006      	b.n	80059c6 <_PrintInt+0x8e>
        FieldWidth--;
 80059b8:	6a3b      	ldr	r3, [r7, #32]
 80059ba:	3b01      	subs	r3, #1
 80059bc:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, ' ');
 80059be:	2120      	movs	r1, #32
 80059c0:	68f8      	ldr	r0, [r7, #12]
 80059c2:	f7ff fea7 	bl	8005714 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80059c6:	6a3b      	ldr	r3, [r7, #32]
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d003      	beq.n	80059d4 <_PrintInt+0x9c>
 80059cc:	697a      	ldr	r2, [r7, #20]
 80059ce:	6a3b      	ldr	r3, [r7, #32]
 80059d0:	429a      	cmp	r2, r3
 80059d2:	d3f1      	bcc.n	80059b8 <_PrintInt+0x80>
    }
  }
  //
  // Print sign if necessary
  //
  if (v < 0) {
 80059d4:	68bb      	ldr	r3, [r7, #8]
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	da07      	bge.n	80059ea <_PrintInt+0xb2>
    v = -v;
 80059da:	68bb      	ldr	r3, [r7, #8]
 80059dc:	425b      	negs	r3, r3
 80059de:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, '-');
 80059e0:	212d      	movs	r1, #45	; 0x2d
 80059e2:	68f8      	ldr	r0, [r7, #12]
 80059e4:	f7ff fe96 	bl	8005714 <_StoreChar>
 80059e8:	e008      	b.n	80059fc <_PrintInt+0xc4>
  } else if ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN) {
 80059ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059ec:	f003 0304 	and.w	r3, r3, #4
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d003      	beq.n	80059fc <_PrintInt+0xc4>
    _StoreChar(pBufferDesc, '+');
 80059f4:	212b      	movs	r1, #43	; 0x2b
 80059f6:	68f8      	ldr	r0, [r7, #12]
 80059f8:	f7ff fe8c 	bl	8005714 <_StoreChar>

  }
  //
  // Print leading zeros if necessary
  //
  if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) && (NumDigits == 0u)) {
 80059fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059fe:	f003 0302 	and.w	r3, r3, #2
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d019      	beq.n	8005a3a <_PrintInt+0x102>
 8005a06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a08:	f003 0301 	and.w	r3, r3, #1
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d114      	bne.n	8005a3a <_PrintInt+0x102>
 8005a10:	683b      	ldr	r3, [r7, #0]
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d111      	bne.n	8005a3a <_PrintInt+0x102>
    if (FieldWidth != 0u) {
 8005a16:	6a3b      	ldr	r3, [r7, #32]
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d00e      	beq.n	8005a3a <_PrintInt+0x102>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005a1c:	e006      	b.n	8005a2c <_PrintInt+0xf4>
        FieldWidth--;
 8005a1e:	6a3b      	ldr	r3, [r7, #32]
 8005a20:	3b01      	subs	r3, #1
 8005a22:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, '0');
 8005a24:	2130      	movs	r1, #48	; 0x30
 8005a26:	68f8      	ldr	r0, [r7, #12]
 8005a28:	f7ff fe74 	bl	8005714 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005a2c:	6a3b      	ldr	r3, [r7, #32]
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d003      	beq.n	8005a3a <_PrintInt+0x102>
 8005a32:	697a      	ldr	r2, [r7, #20]
 8005a34:	6a3b      	ldr	r3, [r7, #32]
 8005a36:	429a      	cmp	r2, r3
 8005a38:	d3f1      	bcc.n	8005a1e <_PrintInt+0xe6>
    }
  }
  //
  // Print number without sign
  //
  _PrintUnsigned(pBufferDesc, (unsigned int)v, Base, NumDigits, FieldWidth, FormatFlags);
 8005a3a:	68b9      	ldr	r1, [r7, #8]
 8005a3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a3e:	9301      	str	r3, [sp, #4]
 8005a40:	6a3b      	ldr	r3, [r7, #32]
 8005a42:	9300      	str	r3, [sp, #0]
 8005a44:	683b      	ldr	r3, [r7, #0]
 8005a46:	687a      	ldr	r2, [r7, #4]
 8005a48:	68f8      	ldr	r0, [r7, #12]
 8005a4a:	f7ff fedf 	bl	800580c <_PrintUnsigned>
}
 8005a4e:	bf00      	nop
 8005a50:	3718      	adds	r7, #24
 8005a52:	46bd      	mov	sp, r7
 8005a54:	bd80      	pop	{r7, pc}
	...

08005a58 <_VPrintTarget>:
*  Parameters
*    sFormat      Pointer to format string.
*    Options      Options to be sent to the host.
*    pParamList   Pointer to the list of arguments for the format string.
*/
static void _VPrintTarget(const char* sFormat, U32 Options, va_list* pParamList) {
 8005a58:	b580      	push	{r7, lr}
 8005a5a:	b098      	sub	sp, #96	; 0x60
 8005a5c:	af02      	add	r7, sp, #8
 8005a5e:	60f8      	str	r0, [r7, #12]
 8005a60:	60b9      	str	r1, [r7, #8]
 8005a62:	607a      	str	r2, [r7, #4]
  U8*           pPayloadStart;
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
  SEGGER_SYSVIEW_LOCK();
#else
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8005a64:	f3ef 8311 	mrs	r3, BASEPRI
 8005a68:	f04f 0120 	mov.w	r1, #32
 8005a6c:	f381 8811 	msr	BASEPRI, r1
 8005a70:	633b      	str	r3, [r7, #48]	; 0x30
 8005a72:	48b7      	ldr	r0, [pc, #732]	; (8005d50 <_VPrintTarget+0x2f8>)
 8005a74:	f7ff fc77 	bl	8005366 <_PreparePacket>
 8005a78:	62f8      	str	r0, [r7, #44]	; 0x2c
#endif

#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  BufferDesc.pBuffer        = aPacket;
#else
  BufferDesc.pBuffer        = _aPacket;
 8005a7a:	4bb5      	ldr	r3, [pc, #724]	; (8005d50 <_VPrintTarget+0x2f8>)
 8005a7c:	617b      	str	r3, [r7, #20]
#endif
  BufferDesc.Cnt            = 0u;
 8005a7e:	2300      	movs	r3, #0
 8005a80:	627b      	str	r3, [r7, #36]	; 0x24
  BufferDesc.pPayloadStart  = pPayloadStart;
 8005a82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a84:	61fb      	str	r3, [r7, #28]
  BufferDesc.pPayload       = BufferDesc.pPayloadStart + 1u;
 8005a86:	69fb      	ldr	r3, [r7, #28]
 8005a88:	3301      	adds	r3, #1
 8005a8a:	61bb      	str	r3, [r7, #24]
  BufferDesc.Options        =  Options;
 8005a8c:	68bb      	ldr	r3, [r7, #8]
 8005a8e:	623b      	str	r3, [r7, #32]

  do {
    c = *sFormat;
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	781b      	ldrb	r3, [r3, #0]
 8005a94:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    sFormat++;
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	3301      	adds	r3, #1
 8005a9c:	60fb      	str	r3, [r7, #12]
    if (c == 0u) {
 8005a9e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	f000 8183 	beq.w	8005dae <_VPrintTarget+0x356>
      break;
    }
    if (c == '%') {
 8005aa8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005aac:	2b25      	cmp	r3, #37	; 0x25
 8005aae:	f040 8170 	bne.w	8005d92 <_VPrintTarget+0x33a>
      //
      // Filter out flags
      //
      FormatFlags = 0u;
 8005ab2:	2300      	movs	r3, #0
 8005ab4:	64bb      	str	r3, [r7, #72]	; 0x48
      v = 1;
 8005ab6:	2301      	movs	r3, #1
 8005ab8:	653b      	str	r3, [r7, #80]	; 0x50
      do {
        c = *sFormat;
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	781b      	ldrb	r3, [r3, #0]
 8005abe:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        switch (c) {
 8005ac2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005ac6:	3b23      	subs	r3, #35	; 0x23
 8005ac8:	2b0d      	cmp	r3, #13
 8005aca:	d83f      	bhi.n	8005b4c <_VPrintTarget+0xf4>
 8005acc:	a201      	add	r2, pc, #4	; (adr r2, 8005ad4 <_VPrintTarget+0x7c>)
 8005ace:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ad2:	bf00      	nop
 8005ad4:	08005b3d 	.word	0x08005b3d
 8005ad8:	08005b4d 	.word	0x08005b4d
 8005adc:	08005b4d 	.word	0x08005b4d
 8005ae0:	08005b4d 	.word	0x08005b4d
 8005ae4:	08005b4d 	.word	0x08005b4d
 8005ae8:	08005b4d 	.word	0x08005b4d
 8005aec:	08005b4d 	.word	0x08005b4d
 8005af0:	08005b4d 	.word	0x08005b4d
 8005af4:	08005b2d 	.word	0x08005b2d
 8005af8:	08005b4d 	.word	0x08005b4d
 8005afc:	08005b0d 	.word	0x08005b0d
 8005b00:	08005b4d 	.word	0x08005b4d
 8005b04:	08005b4d 	.word	0x08005b4d
 8005b08:	08005b1d 	.word	0x08005b1d
        case '-': FormatFlags |= FORMAT_FLAG_LEFT_JUSTIFY; sFormat++; break;
 8005b0c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005b0e:	f043 0301 	orr.w	r3, r3, #1
 8005b12:	64bb      	str	r3, [r7, #72]	; 0x48
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	3301      	adds	r3, #1
 8005b18:	60fb      	str	r3, [r7, #12]
 8005b1a:	e01a      	b.n	8005b52 <_VPrintTarget+0xfa>
        case '0': FormatFlags |= FORMAT_FLAG_PAD_ZERO;     sFormat++; break;
 8005b1c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005b1e:	f043 0302 	orr.w	r3, r3, #2
 8005b22:	64bb      	str	r3, [r7, #72]	; 0x48
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	3301      	adds	r3, #1
 8005b28:	60fb      	str	r3, [r7, #12]
 8005b2a:	e012      	b.n	8005b52 <_VPrintTarget+0xfa>
        case '+': FormatFlags |= FORMAT_FLAG_PRINT_SIGN;   sFormat++; break;
 8005b2c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005b2e:	f043 0304 	orr.w	r3, r3, #4
 8005b32:	64bb      	str	r3, [r7, #72]	; 0x48
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	3301      	adds	r3, #1
 8005b38:	60fb      	str	r3, [r7, #12]
 8005b3a:	e00a      	b.n	8005b52 <_VPrintTarget+0xfa>
        case '#': FormatFlags |= FORMAT_FLAG_ALTERNATE;    sFormat++; break;
 8005b3c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005b3e:	f043 0308 	orr.w	r3, r3, #8
 8005b42:	64bb      	str	r3, [r7, #72]	; 0x48
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	3301      	adds	r3, #1
 8005b48:	60fb      	str	r3, [r7, #12]
 8005b4a:	e002      	b.n	8005b52 <_VPrintTarget+0xfa>
        default:  v = 0; break;
 8005b4c:	2300      	movs	r3, #0
 8005b4e:	653b      	str	r3, [r7, #80]	; 0x50
 8005b50:	bf00      	nop
        }
      } while (v);
 8005b52:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d1b0      	bne.n	8005aba <_VPrintTarget+0x62>
      //
      // filter out field with
      //
      FieldWidth = 0u;
 8005b58:	2300      	movs	r3, #0
 8005b5a:	647b      	str	r3, [r7, #68]	; 0x44
      do {
        c = *sFormat;
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	781b      	ldrb	r3, [r3, #0]
 8005b60:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        if ((c < '0') || (c > '9')) {
 8005b64:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005b68:	2b2f      	cmp	r3, #47	; 0x2f
 8005b6a:	d912      	bls.n	8005b92 <_VPrintTarget+0x13a>
 8005b6c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005b70:	2b39      	cmp	r3, #57	; 0x39
 8005b72:	d80e      	bhi.n	8005b92 <_VPrintTarget+0x13a>
          break;
        }
        sFormat++;
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	3301      	adds	r3, #1
 8005b78:	60fb      	str	r3, [r7, #12]
        FieldWidth = (FieldWidth * 10u) + ((unsigned int)c - '0');
 8005b7a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005b7c:	4613      	mov	r3, r2
 8005b7e:	009b      	lsls	r3, r3, #2
 8005b80:	4413      	add	r3, r2
 8005b82:	005b      	lsls	r3, r3, #1
 8005b84:	461a      	mov	r2, r3
 8005b86:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005b8a:	4413      	add	r3, r2
 8005b8c:	3b30      	subs	r3, #48	; 0x30
 8005b8e:	647b      	str	r3, [r7, #68]	; 0x44
        c = *sFormat;
 8005b90:	e7e4      	b.n	8005b5c <_VPrintTarget+0x104>
      } while (1);

      //
      // Filter out precision (number of digits to display)
      //
      NumDigits = 0u;
 8005b92:	2300      	movs	r3, #0
 8005b94:	64fb      	str	r3, [r7, #76]	; 0x4c
      c = *sFormat;
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	781b      	ldrb	r3, [r3, #0]
 8005b9a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
      if (c == '.') {
 8005b9e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005ba2:	2b2e      	cmp	r3, #46	; 0x2e
 8005ba4:	d11d      	bne.n	8005be2 <_VPrintTarget+0x18a>
        sFormat++;
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	3301      	adds	r3, #1
 8005baa:	60fb      	str	r3, [r7, #12]
        do {
          c = *sFormat;
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	781b      	ldrb	r3, [r3, #0]
 8005bb0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          if ((c < '0') || (c > '9')) {
 8005bb4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005bb8:	2b2f      	cmp	r3, #47	; 0x2f
 8005bba:	d912      	bls.n	8005be2 <_VPrintTarget+0x18a>
 8005bbc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005bc0:	2b39      	cmp	r3, #57	; 0x39
 8005bc2:	d80e      	bhi.n	8005be2 <_VPrintTarget+0x18a>
            break;
          }
          sFormat++;
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	3301      	adds	r3, #1
 8005bc8:	60fb      	str	r3, [r7, #12]
          NumDigits = NumDigits * 10u + ((unsigned int)c - '0');
 8005bca:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005bcc:	4613      	mov	r3, r2
 8005bce:	009b      	lsls	r3, r3, #2
 8005bd0:	4413      	add	r3, r2
 8005bd2:	005b      	lsls	r3, r3, #1
 8005bd4:	461a      	mov	r2, r3
 8005bd6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005bda:	4413      	add	r3, r2
 8005bdc:	3b30      	subs	r3, #48	; 0x30
 8005bde:	64fb      	str	r3, [r7, #76]	; 0x4c
          c = *sFormat;
 8005be0:	e7e4      	b.n	8005bac <_VPrintTarget+0x154>
        } while (1);
      }
      //
      // Filter out length modifier
      //
      c = *sFormat;
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	781b      	ldrb	r3, [r3, #0]
 8005be6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
      do {
        if ((c == 'l') || (c == 'h')) {
 8005bea:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005bee:	2b6c      	cmp	r3, #108	; 0x6c
 8005bf0:	d003      	beq.n	8005bfa <_VPrintTarget+0x1a2>
 8005bf2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005bf6:	2b68      	cmp	r3, #104	; 0x68
 8005bf8:	d107      	bne.n	8005c0a <_VPrintTarget+0x1b2>
          c = *sFormat;
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	781b      	ldrb	r3, [r3, #0]
 8005bfe:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          sFormat++;
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	3301      	adds	r3, #1
 8005c06:	60fb      	str	r3, [r7, #12]
        if ((c == 'l') || (c == 'h')) {
 8005c08:	e7ef      	b.n	8005bea <_VPrintTarget+0x192>
        }
      } while (1);
      //
      // Handle specifiers
      //
      switch (c) {
 8005c0a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005c0e:	2b25      	cmp	r3, #37	; 0x25
 8005c10:	f000 80b3 	beq.w	8005d7a <_VPrintTarget+0x322>
 8005c14:	2b25      	cmp	r3, #37	; 0x25
 8005c16:	f2c0 80b7 	blt.w	8005d88 <_VPrintTarget+0x330>
 8005c1a:	2b78      	cmp	r3, #120	; 0x78
 8005c1c:	f300 80b4 	bgt.w	8005d88 <_VPrintTarget+0x330>
 8005c20:	2b58      	cmp	r3, #88	; 0x58
 8005c22:	f2c0 80b1 	blt.w	8005d88 <_VPrintTarget+0x330>
 8005c26:	3b58      	subs	r3, #88	; 0x58
 8005c28:	2b20      	cmp	r3, #32
 8005c2a:	f200 80ad 	bhi.w	8005d88 <_VPrintTarget+0x330>
 8005c2e:	a201      	add	r2, pc, #4	; (adr r2, 8005c34 <_VPrintTarget+0x1dc>)
 8005c30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c34:	08005d2b 	.word	0x08005d2b
 8005c38:	08005d89 	.word	0x08005d89
 8005c3c:	08005d89 	.word	0x08005d89
 8005c40:	08005d89 	.word	0x08005d89
 8005c44:	08005d89 	.word	0x08005d89
 8005c48:	08005d89 	.word	0x08005d89
 8005c4c:	08005d89 	.word	0x08005d89
 8005c50:	08005d89 	.word	0x08005d89
 8005c54:	08005d89 	.word	0x08005d89
 8005c58:	08005d89 	.word	0x08005d89
 8005c5c:	08005d89 	.word	0x08005d89
 8005c60:	08005cb9 	.word	0x08005cb9
 8005c64:	08005cdf 	.word	0x08005cdf
 8005c68:	08005d89 	.word	0x08005d89
 8005c6c:	08005d89 	.word	0x08005d89
 8005c70:	08005d89 	.word	0x08005d89
 8005c74:	08005d89 	.word	0x08005d89
 8005c78:	08005d89 	.word	0x08005d89
 8005c7c:	08005d89 	.word	0x08005d89
 8005c80:	08005d89 	.word	0x08005d89
 8005c84:	08005d89 	.word	0x08005d89
 8005c88:	08005d89 	.word	0x08005d89
 8005c8c:	08005d89 	.word	0x08005d89
 8005c90:	08005d89 	.word	0x08005d89
 8005c94:	08005d55 	.word	0x08005d55
 8005c98:	08005d89 	.word	0x08005d89
 8005c9c:	08005d89 	.word	0x08005d89
 8005ca0:	08005d89 	.word	0x08005d89
 8005ca4:	08005d89 	.word	0x08005d89
 8005ca8:	08005d05 	.word	0x08005d05
 8005cac:	08005d89 	.word	0x08005d89
 8005cb0:	08005d89 	.word	0x08005d89
 8005cb4:	08005d2b 	.word	0x08005d2b
      case 'c': {
        char c0;
        v = va_arg(*pParamList, int);
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	1d19      	adds	r1, r3, #4
 8005cbe:	687a      	ldr	r2, [r7, #4]
 8005cc0:	6011      	str	r1, [r2, #0]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	653b      	str	r3, [r7, #80]	; 0x50
        c0 = (char)v;
 8005cc6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005cc8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        _StoreChar(&BufferDesc, c0);
 8005ccc:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8005cd0:	f107 0314 	add.w	r3, r7, #20
 8005cd4:	4611      	mov	r1, r2
 8005cd6:	4618      	mov	r0, r3
 8005cd8:	f7ff fd1c 	bl	8005714 <_StoreChar>
        break;
 8005cdc:	e055      	b.n	8005d8a <_VPrintTarget+0x332>
      }
      case 'd':
        v = va_arg(*pParamList, int);
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	1d19      	adds	r1, r3, #4
 8005ce4:	687a      	ldr	r2, [r7, #4]
 8005ce6:	6011      	str	r1, [r2, #0]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintInt(&BufferDesc, v, 10u, NumDigits, FieldWidth, FormatFlags);
 8005cec:	f107 0014 	add.w	r0, r7, #20
 8005cf0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005cf2:	9301      	str	r3, [sp, #4]
 8005cf4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005cf6:	9300      	str	r3, [sp, #0]
 8005cf8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005cfa:	220a      	movs	r2, #10
 8005cfc:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005cfe:	f7ff fe1b 	bl	8005938 <_PrintInt>
        break;
 8005d02:	e042      	b.n	8005d8a <_VPrintTarget+0x332>
      case 'u':
        v = va_arg(*pParamList, int);
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	1d19      	adds	r1, r3, #4
 8005d0a:	687a      	ldr	r2, [r7, #4]
 8005d0c:	6011      	str	r1, [r2, #0]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 10u, NumDigits, FieldWidth, FormatFlags);
 8005d12:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005d14:	f107 0014 	add.w	r0, r7, #20
 8005d18:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005d1a:	9301      	str	r3, [sp, #4]
 8005d1c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005d1e:	9300      	str	r3, [sp, #0]
 8005d20:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005d22:	220a      	movs	r2, #10
 8005d24:	f7ff fd72 	bl	800580c <_PrintUnsigned>
        break;
 8005d28:	e02f      	b.n	8005d8a <_VPrintTarget+0x332>
      case 'x':
      case 'X':
        v = va_arg(*pParamList, int);
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	1d19      	adds	r1, r3, #4
 8005d30:	687a      	ldr	r2, [r7, #4]
 8005d32:	6011      	str	r1, [r2, #0]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, NumDigits, FieldWidth, FormatFlags);
 8005d38:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005d3a:	f107 0014 	add.w	r0, r7, #20
 8005d3e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005d40:	9301      	str	r3, [sp, #4]
 8005d42:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005d44:	9300      	str	r3, [sp, #0]
 8005d46:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005d48:	2210      	movs	r2, #16
 8005d4a:	f7ff fd5f 	bl	800580c <_PrintUnsigned>
        break;
 8005d4e:	e01c      	b.n	8005d8a <_VPrintTarget+0x332>
 8005d50:	20005458 	.word	0x20005458
      case 'p':
        v = va_arg(*pParamList, int);
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	1d19      	adds	r1, r3, #4
 8005d5a:	687a      	ldr	r2, [r7, #4]
 8005d5c:	6011      	str	r1, [r2, #0]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, 8u, 8u, 0u);
 8005d62:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005d64:	f107 0014 	add.w	r0, r7, #20
 8005d68:	2300      	movs	r3, #0
 8005d6a:	9301      	str	r3, [sp, #4]
 8005d6c:	2308      	movs	r3, #8
 8005d6e:	9300      	str	r3, [sp, #0]
 8005d70:	2308      	movs	r3, #8
 8005d72:	2210      	movs	r2, #16
 8005d74:	f7ff fd4a 	bl	800580c <_PrintUnsigned>
        break;
 8005d78:	e007      	b.n	8005d8a <_VPrintTarget+0x332>
      case '%':
        _StoreChar(&BufferDesc, '%');
 8005d7a:	f107 0314 	add.w	r3, r7, #20
 8005d7e:	2125      	movs	r1, #37	; 0x25
 8005d80:	4618      	mov	r0, r3
 8005d82:	f7ff fcc7 	bl	8005714 <_StoreChar>
        break;
 8005d86:	e000      	b.n	8005d8a <_VPrintTarget+0x332>
      default:
        break;
 8005d88:	bf00      	nop
      }
      sFormat++;
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	3301      	adds	r3, #1
 8005d8e:	60fb      	str	r3, [r7, #12]
 8005d90:	e007      	b.n	8005da2 <_VPrintTarget+0x34a>
    } else {
      _StoreChar(&BufferDesc, c);
 8005d92:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8005d96:	f107 0314 	add.w	r3, r7, #20
 8005d9a:	4611      	mov	r1, r2
 8005d9c:	4618      	mov	r0, r3
 8005d9e:	f7ff fcb9 	bl	8005714 <_StoreChar>
    }
  } while (*sFormat);
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	781b      	ldrb	r3, [r3, #0]
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	f47f ae72 	bne.w	8005a90 <_VPrintTarget+0x38>
 8005dac:	e000      	b.n	8005db0 <_VPrintTarget+0x358>
      break;
 8005dae:	bf00      	nop

  //
  // Write remaining data, if any
  //
  if (BufferDesc.Cnt != 0u) {
 8005db0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d041      	beq.n	8005e3a <_VPrintTarget+0x3e2>
    *(BufferDesc.pPayloadStart) = BufferDesc.Cnt;
 8005db6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005db8:	69fb      	ldr	r3, [r7, #28]
 8005dba:	b2d2      	uxtb	r2, r2
 8005dbc:	701a      	strb	r2, [r3, #0]
    ENCODE_U32(BufferDesc.pPayload, BufferDesc.Options);
 8005dbe:	69bb      	ldr	r3, [r7, #24]
 8005dc0:	643b      	str	r3, [r7, #64]	; 0x40
 8005dc2:	6a3b      	ldr	r3, [r7, #32]
 8005dc4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005dc6:	e00b      	b.n	8005de0 <_VPrintTarget+0x388>
 8005dc8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005dca:	b2da      	uxtb	r2, r3
 8005dcc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005dce:	1c59      	adds	r1, r3, #1
 8005dd0:	6439      	str	r1, [r7, #64]	; 0x40
 8005dd2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005dd6:	b2d2      	uxtb	r2, r2
 8005dd8:	701a      	strb	r2, [r3, #0]
 8005dda:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ddc:	09db      	lsrs	r3, r3, #7
 8005dde:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005de0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005de2:	2b7f      	cmp	r3, #127	; 0x7f
 8005de4:	d8f0      	bhi.n	8005dc8 <_VPrintTarget+0x370>
 8005de6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005de8:	1c5a      	adds	r2, r3, #1
 8005dea:	643a      	str	r2, [r7, #64]	; 0x40
 8005dec:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005dee:	b2d2      	uxtb	r2, r2
 8005df0:	701a      	strb	r2, [r3, #0]
 8005df2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005df4:	61bb      	str	r3, [r7, #24]
    ENCODE_U32(BufferDesc.pPayload, 0);
 8005df6:	69bb      	ldr	r3, [r7, #24]
 8005df8:	63bb      	str	r3, [r7, #56]	; 0x38
 8005dfa:	2300      	movs	r3, #0
 8005dfc:	637b      	str	r3, [r7, #52]	; 0x34
 8005dfe:	e00b      	b.n	8005e18 <_VPrintTarget+0x3c0>
 8005e00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e02:	b2da      	uxtb	r2, r3
 8005e04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e06:	1c59      	adds	r1, r3, #1
 8005e08:	63b9      	str	r1, [r7, #56]	; 0x38
 8005e0a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005e0e:	b2d2      	uxtb	r2, r2
 8005e10:	701a      	strb	r2, [r3, #0]
 8005e12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e14:	09db      	lsrs	r3, r3, #7
 8005e16:	637b      	str	r3, [r7, #52]	; 0x34
 8005e18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e1a:	2b7f      	cmp	r3, #127	; 0x7f
 8005e1c:	d8f0      	bhi.n	8005e00 <_VPrintTarget+0x3a8>
 8005e1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e20:	1c5a      	adds	r2, r3, #1
 8005e22:	63ba      	str	r2, [r7, #56]	; 0x38
 8005e24:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005e26:	b2d2      	uxtb	r2, r2
 8005e28:	701a      	strb	r2, [r3, #0]
 8005e2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e2c:	61bb      	str	r3, [r7, #24]
    _SendPacket(BufferDesc.pPayloadStart, BufferDesc.pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8005e2e:	69fb      	ldr	r3, [r7, #28]
 8005e30:	69b9      	ldr	r1, [r7, #24]
 8005e32:	221a      	movs	r2, #26
 8005e34:	4618      	mov	r0, r3
 8005e36:	f7ff fb87 	bl	8005548 <_SendPacket>
  }
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  SEGGER_SYSVIEW_UNLOCK();
  RECORD_END();
#else
  RECORD_END();
 8005e3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e3c:	f383 8811 	msr	BASEPRI, r3
#endif
}
 8005e40:	bf00      	nop
 8005e42:	3758      	adds	r7, #88	; 0x58
 8005e44:	46bd      	mov	sp, r7
 8005e46:	bd80      	pop	{r7, pc}

08005e48 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software 
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 8005e48:	b580      	push	{r7, lr}
 8005e4a:	b086      	sub	sp, #24
 8005e4c:	af02      	add	r7, sp, #8
 8005e4e:	60f8      	str	r0, [r7, #12]
 8005e50:	60b9      	str	r1, [r7, #8]
 8005e52:	607a      	str	r2, [r7, #4]
 8005e54:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8005e56:	2300      	movs	r3, #0
 8005e58:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005e5c:	4917      	ldr	r1, [pc, #92]	; (8005ebc <SEGGER_SYSVIEW_Init+0x74>)
 8005e5e:	4818      	ldr	r0, [pc, #96]	; (8005ec0 <SEGGER_SYSVIEW_Init+0x78>)
 8005e60:	f7ff f940 	bl	80050e4 <SEGGER_RTT_AllocUpBuffer>
 8005e64:	4603      	mov	r3, r0
 8005e66:	b2da      	uxtb	r2, r3
 8005e68:	4b16      	ldr	r3, [pc, #88]	; (8005ec4 <SEGGER_SYSVIEW_Init+0x7c>)
 8005e6a:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 8005e6c:	4b15      	ldr	r3, [pc, #84]	; (8005ec4 <SEGGER_SYSVIEW_Init+0x7c>)
 8005e6e:	785a      	ldrb	r2, [r3, #1]
 8005e70:	4b14      	ldr	r3, [pc, #80]	; (8005ec4 <SEGGER_SYSVIEW_Init+0x7c>)
 8005e72:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8005e74:	4b13      	ldr	r3, [pc, #76]	; (8005ec4 <SEGGER_SYSVIEW_Init+0x7c>)
 8005e76:	7e1b      	ldrb	r3, [r3, #24]
 8005e78:	4618      	mov	r0, r3
 8005e7a:	2300      	movs	r3, #0
 8005e7c:	9300      	str	r3, [sp, #0]
 8005e7e:	2308      	movs	r3, #8
 8005e80:	4a11      	ldr	r2, [pc, #68]	; (8005ec8 <SEGGER_SYSVIEW_Init+0x80>)
 8005e82:	490f      	ldr	r1, [pc, #60]	; (8005ec0 <SEGGER_SYSVIEW_Init+0x78>)
 8005e84:	f7ff f9b2 	bl	80051ec <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 8005e88:	4b0e      	ldr	r3, [pc, #56]	; (8005ec4 <SEGGER_SYSVIEW_Init+0x7c>)
 8005e8a:	2200      	movs	r2, #0
 8005e8c:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8005e8e:	4b0f      	ldr	r3, [pc, #60]	; (8005ecc <SEGGER_SYSVIEW_Init+0x84>)
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	4a0c      	ldr	r2, [pc, #48]	; (8005ec4 <SEGGER_SYSVIEW_Init+0x7c>)
 8005e94:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 8005e96:	4a0b      	ldr	r2, [pc, #44]	; (8005ec4 <SEGGER_SYSVIEW_Init+0x7c>)
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 8005e9c:	4a09      	ldr	r2, [pc, #36]	; (8005ec4 <SEGGER_SYSVIEW_Init+0x7c>)
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 8005ea2:	4a08      	ldr	r2, [pc, #32]	; (8005ec4 <SEGGER_SYSVIEW_Init+0x7c>)
 8005ea4:	68bb      	ldr	r3, [r7, #8]
 8005ea6:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 8005ea8:	4a06      	ldr	r2, [pc, #24]	; (8005ec4 <SEGGER_SYSVIEW_Init+0x7c>)
 8005eaa:	683b      	ldr	r3, [r7, #0]
 8005eac:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 8005eae:	4b05      	ldr	r3, [pc, #20]	; (8005ec4 <SEGGER_SYSVIEW_Init+0x7c>)
 8005eb0:	2200      	movs	r2, #0
 8005eb2:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 8005eb4:	bf00      	nop
 8005eb6:	3710      	adds	r7, #16
 8005eb8:	46bd      	mov	sp, r7
 8005eba:	bd80      	pop	{r7, pc}
 8005ebc:	20004420 	.word	0x20004420
 8005ec0:	08007830 	.word	0x08007830
 8005ec4:	20005428 	.word	0x20005428
 8005ec8:	20005420 	.word	0x20005420
 8005ecc:	e0001004 	.word	0xe0001004

08005ed0 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 8005ed0:	b480      	push	{r7}
 8005ed2:	b083      	sub	sp, #12
 8005ed4:	af00      	add	r7, sp, #0
 8005ed6:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 8005ed8:	4a04      	ldr	r2, [pc, #16]	; (8005eec <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	6113      	str	r3, [r2, #16]
}
 8005ede:	bf00      	nop
 8005ee0:	370c      	adds	r7, #12
 8005ee2:	46bd      	mov	sp, r7
 8005ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee8:	4770      	bx	lr
 8005eea:	bf00      	nop
 8005eec:	20005428 	.word	0x20005428

08005ef0 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8005ef0:	b580      	push	{r7, lr}
 8005ef2:	b084      	sub	sp, #16
 8005ef4:	af00      	add	r7, sp, #0
 8005ef6:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005ef8:	f3ef 8311 	mrs	r3, BASEPRI
 8005efc:	f04f 0120 	mov.w	r1, #32
 8005f00:	f381 8811 	msr	BASEPRI, r1
 8005f04:	60fb      	str	r3, [r7, #12]
 8005f06:	4808      	ldr	r0, [pc, #32]	; (8005f28 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8005f08:	f7ff fa2d 	bl	8005366 <_PreparePacket>
 8005f0c:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 8005f0e:	687a      	ldr	r2, [r7, #4]
 8005f10:	68b9      	ldr	r1, [r7, #8]
 8005f12:	68b8      	ldr	r0, [r7, #8]
 8005f14:	f7ff fb18 	bl	8005548 <_SendPacket>
  RECORD_END();
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	f383 8811 	msr	BASEPRI, r3
}
 8005f1e:	bf00      	nop
 8005f20:	3710      	adds	r7, #16
 8005f22:	46bd      	mov	sp, r7
 8005f24:	bd80      	pop	{r7, pc}
 8005f26:	bf00      	nop
 8005f28:	20005458 	.word	0x20005458

08005f2c <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8005f2c:	b580      	push	{r7, lr}
 8005f2e:	b088      	sub	sp, #32
 8005f30:	af00      	add	r7, sp, #0
 8005f32:	6078      	str	r0, [r7, #4]
 8005f34:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005f36:	f3ef 8311 	mrs	r3, BASEPRI
 8005f3a:	f04f 0120 	mov.w	r1, #32
 8005f3e:	f381 8811 	msr	BASEPRI, r1
 8005f42:	617b      	str	r3, [r7, #20]
 8005f44:	4816      	ldr	r0, [pc, #88]	; (8005fa0 <SEGGER_SYSVIEW_RecordU32+0x74>)
 8005f46:	f7ff fa0e 	bl	8005366 <_PreparePacket>
 8005f4a:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005f4c:	693b      	ldr	r3, [r7, #16]
 8005f4e:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	61fb      	str	r3, [r7, #28]
 8005f54:	683b      	ldr	r3, [r7, #0]
 8005f56:	61bb      	str	r3, [r7, #24]
 8005f58:	e00b      	b.n	8005f72 <SEGGER_SYSVIEW_RecordU32+0x46>
 8005f5a:	69bb      	ldr	r3, [r7, #24]
 8005f5c:	b2da      	uxtb	r2, r3
 8005f5e:	69fb      	ldr	r3, [r7, #28]
 8005f60:	1c59      	adds	r1, r3, #1
 8005f62:	61f9      	str	r1, [r7, #28]
 8005f64:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005f68:	b2d2      	uxtb	r2, r2
 8005f6a:	701a      	strb	r2, [r3, #0]
 8005f6c:	69bb      	ldr	r3, [r7, #24]
 8005f6e:	09db      	lsrs	r3, r3, #7
 8005f70:	61bb      	str	r3, [r7, #24]
 8005f72:	69bb      	ldr	r3, [r7, #24]
 8005f74:	2b7f      	cmp	r3, #127	; 0x7f
 8005f76:	d8f0      	bhi.n	8005f5a <SEGGER_SYSVIEW_RecordU32+0x2e>
 8005f78:	69fb      	ldr	r3, [r7, #28]
 8005f7a:	1c5a      	adds	r2, r3, #1
 8005f7c:	61fa      	str	r2, [r7, #28]
 8005f7e:	69ba      	ldr	r2, [r7, #24]
 8005f80:	b2d2      	uxtb	r2, r2
 8005f82:	701a      	strb	r2, [r3, #0]
 8005f84:	69fb      	ldr	r3, [r7, #28]
 8005f86:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8005f88:	687a      	ldr	r2, [r7, #4]
 8005f8a:	68f9      	ldr	r1, [r7, #12]
 8005f8c:	6938      	ldr	r0, [r7, #16]
 8005f8e:	f7ff fadb 	bl	8005548 <_SendPacket>
  RECORD_END();
 8005f92:	697b      	ldr	r3, [r7, #20]
 8005f94:	f383 8811 	msr	BASEPRI, r3
}
 8005f98:	bf00      	nop
 8005f9a:	3720      	adds	r7, #32
 8005f9c:	46bd      	mov	sp, r7
 8005f9e:	bd80      	pop	{r7, pc}
 8005fa0:	20005458 	.word	0x20005458

08005fa4 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8005fa4:	b580      	push	{r7, lr}
 8005fa6:	b08c      	sub	sp, #48	; 0x30
 8005fa8:	af00      	add	r7, sp, #0
 8005faa:	60f8      	str	r0, [r7, #12]
 8005fac:	60b9      	str	r1, [r7, #8]
 8005fae:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8005fb0:	f3ef 8311 	mrs	r3, BASEPRI
 8005fb4:	f04f 0120 	mov.w	r1, #32
 8005fb8:	f381 8811 	msr	BASEPRI, r1
 8005fbc:	61fb      	str	r3, [r7, #28]
 8005fbe:	4825      	ldr	r0, [pc, #148]	; (8006054 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8005fc0:	f7ff f9d1 	bl	8005366 <_PreparePacket>
 8005fc4:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8005fc6:	69bb      	ldr	r3, [r7, #24]
 8005fc8:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8005fca:	697b      	ldr	r3, [r7, #20]
 8005fcc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005fce:	68bb      	ldr	r3, [r7, #8]
 8005fd0:	62bb      	str	r3, [r7, #40]	; 0x28
 8005fd2:	e00b      	b.n	8005fec <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8005fd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fd6:	b2da      	uxtb	r2, r3
 8005fd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fda:	1c59      	adds	r1, r3, #1
 8005fdc:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005fde:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005fe2:	b2d2      	uxtb	r2, r2
 8005fe4:	701a      	strb	r2, [r3, #0]
 8005fe6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fe8:	09db      	lsrs	r3, r3, #7
 8005fea:	62bb      	str	r3, [r7, #40]	; 0x28
 8005fec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fee:	2b7f      	cmp	r3, #127	; 0x7f
 8005ff0:	d8f0      	bhi.n	8005fd4 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 8005ff2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ff4:	1c5a      	adds	r2, r3, #1
 8005ff6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005ff8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005ffa:	b2d2      	uxtb	r2, r2
 8005ffc:	701a      	strb	r2, [r3, #0]
 8005ffe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006000:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8006002:	697b      	ldr	r3, [r7, #20]
 8006004:	627b      	str	r3, [r7, #36]	; 0x24
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	623b      	str	r3, [r7, #32]
 800600a:	e00b      	b.n	8006024 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 800600c:	6a3b      	ldr	r3, [r7, #32]
 800600e:	b2da      	uxtb	r2, r3
 8006010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006012:	1c59      	adds	r1, r3, #1
 8006014:	6279      	str	r1, [r7, #36]	; 0x24
 8006016:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800601a:	b2d2      	uxtb	r2, r2
 800601c:	701a      	strb	r2, [r3, #0]
 800601e:	6a3b      	ldr	r3, [r7, #32]
 8006020:	09db      	lsrs	r3, r3, #7
 8006022:	623b      	str	r3, [r7, #32]
 8006024:	6a3b      	ldr	r3, [r7, #32]
 8006026:	2b7f      	cmp	r3, #127	; 0x7f
 8006028:	d8f0      	bhi.n	800600c <SEGGER_SYSVIEW_RecordU32x2+0x68>
 800602a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800602c:	1c5a      	adds	r2, r3, #1
 800602e:	627a      	str	r2, [r7, #36]	; 0x24
 8006030:	6a3a      	ldr	r2, [r7, #32]
 8006032:	b2d2      	uxtb	r2, r2
 8006034:	701a      	strb	r2, [r3, #0]
 8006036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006038:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800603a:	68fa      	ldr	r2, [r7, #12]
 800603c:	6979      	ldr	r1, [r7, #20]
 800603e:	69b8      	ldr	r0, [r7, #24]
 8006040:	f7ff fa82 	bl	8005548 <_SendPacket>
  RECORD_END();
 8006044:	69fb      	ldr	r3, [r7, #28]
 8006046:	f383 8811 	msr	BASEPRI, r3
}
 800604a:	bf00      	nop
 800604c:	3730      	adds	r7, #48	; 0x30
 800604e:	46bd      	mov	sp, r7
 8006050:	bd80      	pop	{r7, pc}
 8006052:	bf00      	nop
 8006054:	20005458 	.word	0x20005458

08006058 <SEGGER_SYSVIEW_RecordU32x3>:
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 8006058:	b580      	push	{r7, lr}
 800605a:	b08e      	sub	sp, #56	; 0x38
 800605c:	af00      	add	r7, sp, #0
 800605e:	60f8      	str	r0, [r7, #12]
 8006060:	60b9      	str	r1, [r7, #8]
 8006062:	607a      	str	r2, [r7, #4]
 8006064:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 8006066:	f3ef 8311 	mrs	r3, BASEPRI
 800606a:	f04f 0120 	mov.w	r1, #32
 800606e:	f381 8811 	msr	BASEPRI, r1
 8006072:	61fb      	str	r3, [r7, #28]
 8006074:	4832      	ldr	r0, [pc, #200]	; (8006140 <SEGGER_SYSVIEW_RecordU32x3+0xe8>)
 8006076:	f7ff f976 	bl	8005366 <_PreparePacket>
 800607a:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 800607c:	69bb      	ldr	r3, [r7, #24]
 800607e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8006080:	697b      	ldr	r3, [r7, #20]
 8006082:	637b      	str	r3, [r7, #52]	; 0x34
 8006084:	68bb      	ldr	r3, [r7, #8]
 8006086:	633b      	str	r3, [r7, #48]	; 0x30
 8006088:	e00b      	b.n	80060a2 <SEGGER_SYSVIEW_RecordU32x3+0x4a>
 800608a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800608c:	b2da      	uxtb	r2, r3
 800608e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006090:	1c59      	adds	r1, r3, #1
 8006092:	6379      	str	r1, [r7, #52]	; 0x34
 8006094:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006098:	b2d2      	uxtb	r2, r2
 800609a:	701a      	strb	r2, [r3, #0]
 800609c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800609e:	09db      	lsrs	r3, r3, #7
 80060a0:	633b      	str	r3, [r7, #48]	; 0x30
 80060a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060a4:	2b7f      	cmp	r3, #127	; 0x7f
 80060a6:	d8f0      	bhi.n	800608a <SEGGER_SYSVIEW_RecordU32x3+0x32>
 80060a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80060aa:	1c5a      	adds	r2, r3, #1
 80060ac:	637a      	str	r2, [r7, #52]	; 0x34
 80060ae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80060b0:	b2d2      	uxtb	r2, r2
 80060b2:	701a      	strb	r2, [r3, #0]
 80060b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80060b6:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 80060b8:	697b      	ldr	r3, [r7, #20]
 80060ba:	62fb      	str	r3, [r7, #44]	; 0x2c
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	62bb      	str	r3, [r7, #40]	; 0x28
 80060c0:	e00b      	b.n	80060da <SEGGER_SYSVIEW_RecordU32x3+0x82>
 80060c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060c4:	b2da      	uxtb	r2, r3
 80060c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060c8:	1c59      	adds	r1, r3, #1
 80060ca:	62f9      	str	r1, [r7, #44]	; 0x2c
 80060cc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80060d0:	b2d2      	uxtb	r2, r2
 80060d2:	701a      	strb	r2, [r3, #0]
 80060d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060d6:	09db      	lsrs	r3, r3, #7
 80060d8:	62bb      	str	r3, [r7, #40]	; 0x28
 80060da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060dc:	2b7f      	cmp	r3, #127	; 0x7f
 80060de:	d8f0      	bhi.n	80060c2 <SEGGER_SYSVIEW_RecordU32x3+0x6a>
 80060e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060e2:	1c5a      	adds	r2, r3, #1
 80060e4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80060e6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80060e8:	b2d2      	uxtb	r2, r2
 80060ea:	701a      	strb	r2, [r3, #0]
 80060ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060ee:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 80060f0:	697b      	ldr	r3, [r7, #20]
 80060f2:	627b      	str	r3, [r7, #36]	; 0x24
 80060f4:	683b      	ldr	r3, [r7, #0]
 80060f6:	623b      	str	r3, [r7, #32]
 80060f8:	e00b      	b.n	8006112 <SEGGER_SYSVIEW_RecordU32x3+0xba>
 80060fa:	6a3b      	ldr	r3, [r7, #32]
 80060fc:	b2da      	uxtb	r2, r3
 80060fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006100:	1c59      	adds	r1, r3, #1
 8006102:	6279      	str	r1, [r7, #36]	; 0x24
 8006104:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006108:	b2d2      	uxtb	r2, r2
 800610a:	701a      	strb	r2, [r3, #0]
 800610c:	6a3b      	ldr	r3, [r7, #32]
 800610e:	09db      	lsrs	r3, r3, #7
 8006110:	623b      	str	r3, [r7, #32]
 8006112:	6a3b      	ldr	r3, [r7, #32]
 8006114:	2b7f      	cmp	r3, #127	; 0x7f
 8006116:	d8f0      	bhi.n	80060fa <SEGGER_SYSVIEW_RecordU32x3+0xa2>
 8006118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800611a:	1c5a      	adds	r2, r3, #1
 800611c:	627a      	str	r2, [r7, #36]	; 0x24
 800611e:	6a3a      	ldr	r2, [r7, #32]
 8006120:	b2d2      	uxtb	r2, r2
 8006122:	701a      	strb	r2, [r3, #0]
 8006124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006126:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8006128:	68fa      	ldr	r2, [r7, #12]
 800612a:	6979      	ldr	r1, [r7, #20]
 800612c:	69b8      	ldr	r0, [r7, #24]
 800612e:	f7ff fa0b 	bl	8005548 <_SendPacket>
  RECORD_END();
 8006132:	69fb      	ldr	r3, [r7, #28]
 8006134:	f383 8811 	msr	BASEPRI, r3
}
 8006138:	bf00      	nop
 800613a:	3738      	adds	r7, #56	; 0x38
 800613c:	46bd      	mov	sp, r7
 800613e:	bd80      	pop	{r7, pc}
 8006140:	20005458 	.word	0x20005458

08006144 <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 8006144:	b580      	push	{r7, lr}
 8006146:	b090      	sub	sp, #64	; 0x40
 8006148:	af00      	add	r7, sp, #0
 800614a:	60f8      	str	r0, [r7, #12]
 800614c:	60b9      	str	r1, [r7, #8]
 800614e:	607a      	str	r2, [r7, #4]
 8006150:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8006152:	f3ef 8311 	mrs	r3, BASEPRI
 8006156:	f04f 0120 	mov.w	r1, #32
 800615a:	f381 8811 	msr	BASEPRI, r1
 800615e:	61fb      	str	r3, [r7, #28]
 8006160:	4840      	ldr	r0, [pc, #256]	; (8006264 <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 8006162:	f7ff f900 	bl	8005366 <_PreparePacket>
 8006166:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8006168:	69bb      	ldr	r3, [r7, #24]
 800616a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 800616c:	697b      	ldr	r3, [r7, #20]
 800616e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006170:	68bb      	ldr	r3, [r7, #8]
 8006172:	63bb      	str	r3, [r7, #56]	; 0x38
 8006174:	e00b      	b.n	800618e <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 8006176:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006178:	b2da      	uxtb	r2, r3
 800617a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800617c:	1c59      	adds	r1, r3, #1
 800617e:	63f9      	str	r1, [r7, #60]	; 0x3c
 8006180:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006184:	b2d2      	uxtb	r2, r2
 8006186:	701a      	strb	r2, [r3, #0]
 8006188:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800618a:	09db      	lsrs	r3, r3, #7
 800618c:	63bb      	str	r3, [r7, #56]	; 0x38
 800618e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006190:	2b7f      	cmp	r3, #127	; 0x7f
 8006192:	d8f0      	bhi.n	8006176 <SEGGER_SYSVIEW_RecordU32x4+0x32>
 8006194:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006196:	1c5a      	adds	r2, r3, #1
 8006198:	63fa      	str	r2, [r7, #60]	; 0x3c
 800619a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800619c:	b2d2      	uxtb	r2, r2
 800619e:	701a      	strb	r2, [r3, #0]
 80061a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80061a2:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 80061a4:	697b      	ldr	r3, [r7, #20]
 80061a6:	637b      	str	r3, [r7, #52]	; 0x34
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	633b      	str	r3, [r7, #48]	; 0x30
 80061ac:	e00b      	b.n	80061c6 <SEGGER_SYSVIEW_RecordU32x4+0x82>
 80061ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061b0:	b2da      	uxtb	r2, r3
 80061b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80061b4:	1c59      	adds	r1, r3, #1
 80061b6:	6379      	str	r1, [r7, #52]	; 0x34
 80061b8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80061bc:	b2d2      	uxtb	r2, r2
 80061be:	701a      	strb	r2, [r3, #0]
 80061c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061c2:	09db      	lsrs	r3, r3, #7
 80061c4:	633b      	str	r3, [r7, #48]	; 0x30
 80061c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061c8:	2b7f      	cmp	r3, #127	; 0x7f
 80061ca:	d8f0      	bhi.n	80061ae <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 80061cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80061ce:	1c5a      	adds	r2, r3, #1
 80061d0:	637a      	str	r2, [r7, #52]	; 0x34
 80061d2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80061d4:	b2d2      	uxtb	r2, r2
 80061d6:	701a      	strb	r2, [r3, #0]
 80061d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80061da:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 80061dc:	697b      	ldr	r3, [r7, #20]
 80061de:	62fb      	str	r3, [r7, #44]	; 0x2c
 80061e0:	683b      	ldr	r3, [r7, #0]
 80061e2:	62bb      	str	r3, [r7, #40]	; 0x28
 80061e4:	e00b      	b.n	80061fe <SEGGER_SYSVIEW_RecordU32x4+0xba>
 80061e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061e8:	b2da      	uxtb	r2, r3
 80061ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061ec:	1c59      	adds	r1, r3, #1
 80061ee:	62f9      	str	r1, [r7, #44]	; 0x2c
 80061f0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80061f4:	b2d2      	uxtb	r2, r2
 80061f6:	701a      	strb	r2, [r3, #0]
 80061f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061fa:	09db      	lsrs	r3, r3, #7
 80061fc:	62bb      	str	r3, [r7, #40]	; 0x28
 80061fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006200:	2b7f      	cmp	r3, #127	; 0x7f
 8006202:	d8f0      	bhi.n	80061e6 <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 8006204:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006206:	1c5a      	adds	r2, r3, #1
 8006208:	62fa      	str	r2, [r7, #44]	; 0x2c
 800620a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800620c:	b2d2      	uxtb	r2, r2
 800620e:	701a      	strb	r2, [r3, #0]
 8006210:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006212:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 8006214:	697b      	ldr	r3, [r7, #20]
 8006216:	627b      	str	r3, [r7, #36]	; 0x24
 8006218:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800621a:	623b      	str	r3, [r7, #32]
 800621c:	e00b      	b.n	8006236 <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 800621e:	6a3b      	ldr	r3, [r7, #32]
 8006220:	b2da      	uxtb	r2, r3
 8006222:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006224:	1c59      	adds	r1, r3, #1
 8006226:	6279      	str	r1, [r7, #36]	; 0x24
 8006228:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800622c:	b2d2      	uxtb	r2, r2
 800622e:	701a      	strb	r2, [r3, #0]
 8006230:	6a3b      	ldr	r3, [r7, #32]
 8006232:	09db      	lsrs	r3, r3, #7
 8006234:	623b      	str	r3, [r7, #32]
 8006236:	6a3b      	ldr	r3, [r7, #32]
 8006238:	2b7f      	cmp	r3, #127	; 0x7f
 800623a:	d8f0      	bhi.n	800621e <SEGGER_SYSVIEW_RecordU32x4+0xda>
 800623c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800623e:	1c5a      	adds	r2, r3, #1
 8006240:	627a      	str	r2, [r7, #36]	; 0x24
 8006242:	6a3a      	ldr	r2, [r7, #32]
 8006244:	b2d2      	uxtb	r2, r2
 8006246:	701a      	strb	r2, [r3, #0]
 8006248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800624a:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800624c:	68fa      	ldr	r2, [r7, #12]
 800624e:	6979      	ldr	r1, [r7, #20]
 8006250:	69b8      	ldr	r0, [r7, #24]
 8006252:	f7ff f979 	bl	8005548 <_SendPacket>
  RECORD_END();
 8006256:	69fb      	ldr	r3, [r7, #28]
 8006258:	f383 8811 	msr	BASEPRI, r3
}
 800625c:	bf00      	nop
 800625e:	3740      	adds	r7, #64	; 0x40
 8006260:	46bd      	mov	sp, r7
 8006262:	bd80      	pop	{r7, pc}
 8006264:	20005458 	.word	0x20005458

08006268 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 8006268:	b580      	push	{r7, lr}
 800626a:	b08c      	sub	sp, #48	; 0x30
 800626c:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 800626e:	4b58      	ldr	r3, [pc, #352]	; (80063d0 <SEGGER_SYSVIEW_Start+0x168>)
 8006270:	2201      	movs	r2, #1
 8006272:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8006274:	f3ef 8311 	mrs	r3, BASEPRI
 8006278:	f04f 0120 	mov.w	r1, #32
 800627c:	f381 8811 	msr	BASEPRI, r1
 8006280:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 8006282:	4b53      	ldr	r3, [pc, #332]	; (80063d0 <SEGGER_SYSVIEW_Start+0x168>)
 8006284:	785b      	ldrb	r3, [r3, #1]
 8006286:	220a      	movs	r2, #10
 8006288:	4952      	ldr	r1, [pc, #328]	; (80063d4 <SEGGER_SYSVIEW_Start+0x16c>)
 800628a:	4618      	mov	r0, r3
 800628c:	f7f9 ffa0 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 8006296:	200a      	movs	r0, #10
 8006298:	f7ff fe2a 	bl	8005ef0 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800629c:	f3ef 8311 	mrs	r3, BASEPRI
 80062a0:	f04f 0120 	mov.w	r1, #32
 80062a4:	f381 8811 	msr	BASEPRI, r1
 80062a8:	60bb      	str	r3, [r7, #8]
 80062aa:	484b      	ldr	r0, [pc, #300]	; (80063d8 <SEGGER_SYSVIEW_Start+0x170>)
 80062ac:	f7ff f85b 	bl	8005366 <_PreparePacket>
 80062b0:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 80062b6:	683b      	ldr	r3, [r7, #0]
 80062b8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80062ba:	4b45      	ldr	r3, [pc, #276]	; (80063d0 <SEGGER_SYSVIEW_Start+0x168>)
 80062bc:	685b      	ldr	r3, [r3, #4]
 80062be:	62bb      	str	r3, [r7, #40]	; 0x28
 80062c0:	e00b      	b.n	80062da <SEGGER_SYSVIEW_Start+0x72>
 80062c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062c4:	b2da      	uxtb	r2, r3
 80062c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062c8:	1c59      	adds	r1, r3, #1
 80062ca:	62f9      	str	r1, [r7, #44]	; 0x2c
 80062cc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80062d0:	b2d2      	uxtb	r2, r2
 80062d2:	701a      	strb	r2, [r3, #0]
 80062d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062d6:	09db      	lsrs	r3, r3, #7
 80062d8:	62bb      	str	r3, [r7, #40]	; 0x28
 80062da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062dc:	2b7f      	cmp	r3, #127	; 0x7f
 80062de:	d8f0      	bhi.n	80062c2 <SEGGER_SYSVIEW_Start+0x5a>
 80062e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062e2:	1c5a      	adds	r2, r3, #1
 80062e4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80062e6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80062e8:	b2d2      	uxtb	r2, r2
 80062ea:	701a      	strb	r2, [r3, #0]
 80062ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062ee:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 80062f0:	683b      	ldr	r3, [r7, #0]
 80062f2:	627b      	str	r3, [r7, #36]	; 0x24
 80062f4:	4b36      	ldr	r3, [pc, #216]	; (80063d0 <SEGGER_SYSVIEW_Start+0x168>)
 80062f6:	689b      	ldr	r3, [r3, #8]
 80062f8:	623b      	str	r3, [r7, #32]
 80062fa:	e00b      	b.n	8006314 <SEGGER_SYSVIEW_Start+0xac>
 80062fc:	6a3b      	ldr	r3, [r7, #32]
 80062fe:	b2da      	uxtb	r2, r3
 8006300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006302:	1c59      	adds	r1, r3, #1
 8006304:	6279      	str	r1, [r7, #36]	; 0x24
 8006306:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800630a:	b2d2      	uxtb	r2, r2
 800630c:	701a      	strb	r2, [r3, #0]
 800630e:	6a3b      	ldr	r3, [r7, #32]
 8006310:	09db      	lsrs	r3, r3, #7
 8006312:	623b      	str	r3, [r7, #32]
 8006314:	6a3b      	ldr	r3, [r7, #32]
 8006316:	2b7f      	cmp	r3, #127	; 0x7f
 8006318:	d8f0      	bhi.n	80062fc <SEGGER_SYSVIEW_Start+0x94>
 800631a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800631c:	1c5a      	adds	r2, r3, #1
 800631e:	627a      	str	r2, [r7, #36]	; 0x24
 8006320:	6a3a      	ldr	r2, [r7, #32]
 8006322:	b2d2      	uxtb	r2, r2
 8006324:	701a      	strb	r2, [r3, #0]
 8006326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006328:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 800632a:	683b      	ldr	r3, [r7, #0]
 800632c:	61fb      	str	r3, [r7, #28]
 800632e:	4b28      	ldr	r3, [pc, #160]	; (80063d0 <SEGGER_SYSVIEW_Start+0x168>)
 8006330:	691b      	ldr	r3, [r3, #16]
 8006332:	61bb      	str	r3, [r7, #24]
 8006334:	e00b      	b.n	800634e <SEGGER_SYSVIEW_Start+0xe6>
 8006336:	69bb      	ldr	r3, [r7, #24]
 8006338:	b2da      	uxtb	r2, r3
 800633a:	69fb      	ldr	r3, [r7, #28]
 800633c:	1c59      	adds	r1, r3, #1
 800633e:	61f9      	str	r1, [r7, #28]
 8006340:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006344:	b2d2      	uxtb	r2, r2
 8006346:	701a      	strb	r2, [r3, #0]
 8006348:	69bb      	ldr	r3, [r7, #24]
 800634a:	09db      	lsrs	r3, r3, #7
 800634c:	61bb      	str	r3, [r7, #24]
 800634e:	69bb      	ldr	r3, [r7, #24]
 8006350:	2b7f      	cmp	r3, #127	; 0x7f
 8006352:	d8f0      	bhi.n	8006336 <SEGGER_SYSVIEW_Start+0xce>
 8006354:	69fb      	ldr	r3, [r7, #28]
 8006356:	1c5a      	adds	r2, r3, #1
 8006358:	61fa      	str	r2, [r7, #28]
 800635a:	69ba      	ldr	r2, [r7, #24]
 800635c:	b2d2      	uxtb	r2, r2
 800635e:	701a      	strb	r2, [r3, #0]
 8006360:	69fb      	ldr	r3, [r7, #28]
 8006362:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8006364:	683b      	ldr	r3, [r7, #0]
 8006366:	617b      	str	r3, [r7, #20]
 8006368:	2300      	movs	r3, #0
 800636a:	613b      	str	r3, [r7, #16]
 800636c:	e00b      	b.n	8006386 <SEGGER_SYSVIEW_Start+0x11e>
 800636e:	693b      	ldr	r3, [r7, #16]
 8006370:	b2da      	uxtb	r2, r3
 8006372:	697b      	ldr	r3, [r7, #20]
 8006374:	1c59      	adds	r1, r3, #1
 8006376:	6179      	str	r1, [r7, #20]
 8006378:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800637c:	b2d2      	uxtb	r2, r2
 800637e:	701a      	strb	r2, [r3, #0]
 8006380:	693b      	ldr	r3, [r7, #16]
 8006382:	09db      	lsrs	r3, r3, #7
 8006384:	613b      	str	r3, [r7, #16]
 8006386:	693b      	ldr	r3, [r7, #16]
 8006388:	2b7f      	cmp	r3, #127	; 0x7f
 800638a:	d8f0      	bhi.n	800636e <SEGGER_SYSVIEW_Start+0x106>
 800638c:	697b      	ldr	r3, [r7, #20]
 800638e:	1c5a      	adds	r2, r3, #1
 8006390:	617a      	str	r2, [r7, #20]
 8006392:	693a      	ldr	r2, [r7, #16]
 8006394:	b2d2      	uxtb	r2, r2
 8006396:	701a      	strb	r2, [r3, #0]
 8006398:	697b      	ldr	r3, [r7, #20]
 800639a:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 800639c:	2218      	movs	r2, #24
 800639e:	6839      	ldr	r1, [r7, #0]
 80063a0:	6878      	ldr	r0, [r7, #4]
 80063a2:	f7ff f8d1 	bl	8005548 <_SendPacket>
      RECORD_END();
 80063a6:	68bb      	ldr	r3, [r7, #8]
 80063a8:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 80063ac:	4b08      	ldr	r3, [pc, #32]	; (80063d0 <SEGGER_SYSVIEW_Start+0x168>)
 80063ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d002      	beq.n	80063ba <SEGGER_SYSVIEW_Start+0x152>
      _SYSVIEW_Globals.pfSendSysDesc();
 80063b4:	4b06      	ldr	r3, [pc, #24]	; (80063d0 <SEGGER_SYSVIEW_Start+0x168>)
 80063b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063b8:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 80063ba:	f000 f9eb 	bl	8006794 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 80063be:	f000 f9b1 	bl	8006724 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 80063c2:	f000 fc23 	bl	8006c0c <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 80063c6:	bf00      	nop
 80063c8:	3730      	adds	r7, #48	; 0x30
 80063ca:	46bd      	mov	sp, r7
 80063cc:	bd80      	pop	{r7, pc}
 80063ce:	bf00      	nop
 80063d0:	20005428 	.word	0x20005428
 80063d4:	08007878 	.word	0x08007878
 80063d8:	20005458 	.word	0x20005458

080063dc <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 80063dc:	b580      	push	{r7, lr}
 80063de:	b082      	sub	sp, #8
 80063e0:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80063e2:	f3ef 8311 	mrs	r3, BASEPRI
 80063e6:	f04f 0120 	mov.w	r1, #32
 80063ea:	f381 8811 	msr	BASEPRI, r1
 80063ee:	607b      	str	r3, [r7, #4]
 80063f0:	480b      	ldr	r0, [pc, #44]	; (8006420 <SEGGER_SYSVIEW_Stop+0x44>)
 80063f2:	f7fe ffb8 	bl	8005366 <_PreparePacket>
 80063f6:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 80063f8:	4b0a      	ldr	r3, [pc, #40]	; (8006424 <SEGGER_SYSVIEW_Stop+0x48>)
 80063fa:	781b      	ldrb	r3, [r3, #0]
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d007      	beq.n	8006410 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8006400:	220b      	movs	r2, #11
 8006402:	6839      	ldr	r1, [r7, #0]
 8006404:	6838      	ldr	r0, [r7, #0]
 8006406:	f7ff f89f 	bl	8005548 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 800640a:	4b06      	ldr	r3, [pc, #24]	; (8006424 <SEGGER_SYSVIEW_Stop+0x48>)
 800640c:	2200      	movs	r2, #0
 800640e:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	f383 8811 	msr	BASEPRI, r3
}
 8006416:	bf00      	nop
 8006418:	3708      	adds	r7, #8
 800641a:	46bd      	mov	sp, r7
 800641c:	bd80      	pop	{r7, pc}
 800641e:	bf00      	nop
 8006420:	20005458 	.word	0x20005458
 8006424:	20005428 	.word	0x20005428

08006428 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8006428:	b580      	push	{r7, lr}
 800642a:	b08c      	sub	sp, #48	; 0x30
 800642c:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800642e:	f3ef 8311 	mrs	r3, BASEPRI
 8006432:	f04f 0120 	mov.w	r1, #32
 8006436:	f381 8811 	msr	BASEPRI, r1
 800643a:	60fb      	str	r3, [r7, #12]
 800643c:	4845      	ldr	r0, [pc, #276]	; (8006554 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 800643e:	f7fe ff92 	bl	8005366 <_PreparePacket>
 8006442:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8006444:	68bb      	ldr	r3, [r7, #8]
 8006446:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800644c:	4b42      	ldr	r3, [pc, #264]	; (8006558 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800644e:	685b      	ldr	r3, [r3, #4]
 8006450:	62bb      	str	r3, [r7, #40]	; 0x28
 8006452:	e00b      	b.n	800646c <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8006454:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006456:	b2da      	uxtb	r2, r3
 8006458:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800645a:	1c59      	adds	r1, r3, #1
 800645c:	62f9      	str	r1, [r7, #44]	; 0x2c
 800645e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006462:	b2d2      	uxtb	r2, r2
 8006464:	701a      	strb	r2, [r3, #0]
 8006466:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006468:	09db      	lsrs	r3, r3, #7
 800646a:	62bb      	str	r3, [r7, #40]	; 0x28
 800646c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800646e:	2b7f      	cmp	r3, #127	; 0x7f
 8006470:	d8f0      	bhi.n	8006454 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 8006472:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006474:	1c5a      	adds	r2, r3, #1
 8006476:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006478:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800647a:	b2d2      	uxtb	r2, r2
 800647c:	701a      	strb	r2, [r3, #0]
 800647e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006480:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	627b      	str	r3, [r7, #36]	; 0x24
 8006486:	4b34      	ldr	r3, [pc, #208]	; (8006558 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006488:	689b      	ldr	r3, [r3, #8]
 800648a:	623b      	str	r3, [r7, #32]
 800648c:	e00b      	b.n	80064a6 <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 800648e:	6a3b      	ldr	r3, [r7, #32]
 8006490:	b2da      	uxtb	r2, r3
 8006492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006494:	1c59      	adds	r1, r3, #1
 8006496:	6279      	str	r1, [r7, #36]	; 0x24
 8006498:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800649c:	b2d2      	uxtb	r2, r2
 800649e:	701a      	strb	r2, [r3, #0]
 80064a0:	6a3b      	ldr	r3, [r7, #32]
 80064a2:	09db      	lsrs	r3, r3, #7
 80064a4:	623b      	str	r3, [r7, #32]
 80064a6:	6a3b      	ldr	r3, [r7, #32]
 80064a8:	2b7f      	cmp	r3, #127	; 0x7f
 80064aa:	d8f0      	bhi.n	800648e <SEGGER_SYSVIEW_GetSysDesc+0x66>
 80064ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064ae:	1c5a      	adds	r2, r3, #1
 80064b0:	627a      	str	r2, [r7, #36]	; 0x24
 80064b2:	6a3a      	ldr	r2, [r7, #32]
 80064b4:	b2d2      	uxtb	r2, r2
 80064b6:	701a      	strb	r2, [r3, #0]
 80064b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064ba:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	61fb      	str	r3, [r7, #28]
 80064c0:	4b25      	ldr	r3, [pc, #148]	; (8006558 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80064c2:	691b      	ldr	r3, [r3, #16]
 80064c4:	61bb      	str	r3, [r7, #24]
 80064c6:	e00b      	b.n	80064e0 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 80064c8:	69bb      	ldr	r3, [r7, #24]
 80064ca:	b2da      	uxtb	r2, r3
 80064cc:	69fb      	ldr	r3, [r7, #28]
 80064ce:	1c59      	adds	r1, r3, #1
 80064d0:	61f9      	str	r1, [r7, #28]
 80064d2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80064d6:	b2d2      	uxtb	r2, r2
 80064d8:	701a      	strb	r2, [r3, #0]
 80064da:	69bb      	ldr	r3, [r7, #24]
 80064dc:	09db      	lsrs	r3, r3, #7
 80064de:	61bb      	str	r3, [r7, #24]
 80064e0:	69bb      	ldr	r3, [r7, #24]
 80064e2:	2b7f      	cmp	r3, #127	; 0x7f
 80064e4:	d8f0      	bhi.n	80064c8 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 80064e6:	69fb      	ldr	r3, [r7, #28]
 80064e8:	1c5a      	adds	r2, r3, #1
 80064ea:	61fa      	str	r2, [r7, #28]
 80064ec:	69ba      	ldr	r2, [r7, #24]
 80064ee:	b2d2      	uxtb	r2, r2
 80064f0:	701a      	strb	r2, [r3, #0]
 80064f2:	69fb      	ldr	r3, [r7, #28]
 80064f4:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	617b      	str	r3, [r7, #20]
 80064fa:	2300      	movs	r3, #0
 80064fc:	613b      	str	r3, [r7, #16]
 80064fe:	e00b      	b.n	8006518 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8006500:	693b      	ldr	r3, [r7, #16]
 8006502:	b2da      	uxtb	r2, r3
 8006504:	697b      	ldr	r3, [r7, #20]
 8006506:	1c59      	adds	r1, r3, #1
 8006508:	6179      	str	r1, [r7, #20]
 800650a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800650e:	b2d2      	uxtb	r2, r2
 8006510:	701a      	strb	r2, [r3, #0]
 8006512:	693b      	ldr	r3, [r7, #16]
 8006514:	09db      	lsrs	r3, r3, #7
 8006516:	613b      	str	r3, [r7, #16]
 8006518:	693b      	ldr	r3, [r7, #16]
 800651a:	2b7f      	cmp	r3, #127	; 0x7f
 800651c:	d8f0      	bhi.n	8006500 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 800651e:	697b      	ldr	r3, [r7, #20]
 8006520:	1c5a      	adds	r2, r3, #1
 8006522:	617a      	str	r2, [r7, #20]
 8006524:	693a      	ldr	r2, [r7, #16]
 8006526:	b2d2      	uxtb	r2, r2
 8006528:	701a      	strb	r2, [r3, #0]
 800652a:	697b      	ldr	r3, [r7, #20]
 800652c:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 800652e:	2218      	movs	r2, #24
 8006530:	6879      	ldr	r1, [r7, #4]
 8006532:	68b8      	ldr	r0, [r7, #8]
 8006534:	f7ff f808 	bl	8005548 <_SendPacket>
  RECORD_END();
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 800653e:	4b06      	ldr	r3, [pc, #24]	; (8006558 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006540:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006542:	2b00      	cmp	r3, #0
 8006544:	d002      	beq.n	800654c <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 8006546:	4b04      	ldr	r3, [pc, #16]	; (8006558 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006548:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800654a:	4798      	blx	r3
  }
}
 800654c:	bf00      	nop
 800654e:	3730      	adds	r7, #48	; 0x30
 8006550:	46bd      	mov	sp, r7
 8006552:	bd80      	pop	{r7, pc}
 8006554:	20005458 	.word	0x20005458
 8006558:	20005428 	.word	0x20005428

0800655c <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 800655c:	b580      	push	{r7, lr}
 800655e:	b092      	sub	sp, #72	; 0x48
 8006560:	af00      	add	r7, sp, #0
 8006562:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8006564:	f3ef 8311 	mrs	r3, BASEPRI
 8006568:	f04f 0120 	mov.w	r1, #32
 800656c:	f381 8811 	msr	BASEPRI, r1
 8006570:	617b      	str	r3, [r7, #20]
 8006572:	486a      	ldr	r0, [pc, #424]	; (800671c <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 8006574:	f7fe fef7 	bl	8005366 <_PreparePacket>
 8006578:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800657a:	693b      	ldr	r3, [r7, #16]
 800657c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	647b      	str	r3, [r7, #68]	; 0x44
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681a      	ldr	r2, [r3, #0]
 8006586:	4b66      	ldr	r3, [pc, #408]	; (8006720 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8006588:	691b      	ldr	r3, [r3, #16]
 800658a:	1ad3      	subs	r3, r2, r3
 800658c:	643b      	str	r3, [r7, #64]	; 0x40
 800658e:	e00b      	b.n	80065a8 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 8006590:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006592:	b2da      	uxtb	r2, r3
 8006594:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006596:	1c59      	adds	r1, r3, #1
 8006598:	6479      	str	r1, [r7, #68]	; 0x44
 800659a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800659e:	b2d2      	uxtb	r2, r2
 80065a0:	701a      	strb	r2, [r3, #0]
 80065a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80065a4:	09db      	lsrs	r3, r3, #7
 80065a6:	643b      	str	r3, [r7, #64]	; 0x40
 80065a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80065aa:	2b7f      	cmp	r3, #127	; 0x7f
 80065ac:	d8f0      	bhi.n	8006590 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 80065ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80065b0:	1c5a      	adds	r2, r3, #1
 80065b2:	647a      	str	r2, [r7, #68]	; 0x44
 80065b4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80065b6:	b2d2      	uxtb	r2, r2
 80065b8:	701a      	strb	r2, [r3, #0]
 80065ba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80065bc:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	689b      	ldr	r3, [r3, #8]
 80065c6:	63bb      	str	r3, [r7, #56]	; 0x38
 80065c8:	e00b      	b.n	80065e2 <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 80065ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065cc:	b2da      	uxtb	r2, r3
 80065ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80065d0:	1c59      	adds	r1, r3, #1
 80065d2:	63f9      	str	r1, [r7, #60]	; 0x3c
 80065d4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80065d8:	b2d2      	uxtb	r2, r2
 80065da:	701a      	strb	r2, [r3, #0]
 80065dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065de:	09db      	lsrs	r3, r3, #7
 80065e0:	63bb      	str	r3, [r7, #56]	; 0x38
 80065e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065e4:	2b7f      	cmp	r3, #127	; 0x7f
 80065e6:	d8f0      	bhi.n	80065ca <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 80065e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80065ea:	1c5a      	adds	r2, r3, #1
 80065ec:	63fa      	str	r2, [r7, #60]	; 0x3c
 80065ee:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80065f0:	b2d2      	uxtb	r2, r2
 80065f2:	701a      	strb	r2, [r3, #0]
 80065f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80065f6:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	685b      	ldr	r3, [r3, #4]
 80065fc:	2220      	movs	r2, #32
 80065fe:	4619      	mov	r1, r3
 8006600:	68f8      	ldr	r0, [r7, #12]
 8006602:	f7fe fe63 	bl	80052cc <_EncodeStr>
 8006606:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8006608:	2209      	movs	r2, #9
 800660a:	68f9      	ldr	r1, [r7, #12]
 800660c:	6938      	ldr	r0, [r7, #16]
 800660e:	f7fe ff9b 	bl	8005548 <_SendPacket>
  //
  pPayload = pPayloadStart;
 8006612:	693b      	ldr	r3, [r7, #16]
 8006614:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	637b      	str	r3, [r7, #52]	; 0x34
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681a      	ldr	r2, [r3, #0]
 800661e:	4b40      	ldr	r3, [pc, #256]	; (8006720 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8006620:	691b      	ldr	r3, [r3, #16]
 8006622:	1ad3      	subs	r3, r2, r3
 8006624:	633b      	str	r3, [r7, #48]	; 0x30
 8006626:	e00b      	b.n	8006640 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 8006628:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800662a:	b2da      	uxtb	r2, r3
 800662c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800662e:	1c59      	adds	r1, r3, #1
 8006630:	6379      	str	r1, [r7, #52]	; 0x34
 8006632:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006636:	b2d2      	uxtb	r2, r2
 8006638:	701a      	strb	r2, [r3, #0]
 800663a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800663c:	09db      	lsrs	r3, r3, #7
 800663e:	633b      	str	r3, [r7, #48]	; 0x30
 8006640:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006642:	2b7f      	cmp	r3, #127	; 0x7f
 8006644:	d8f0      	bhi.n	8006628 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 8006646:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006648:	1c5a      	adds	r2, r3, #1
 800664a:	637a      	str	r2, [r7, #52]	; 0x34
 800664c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800664e:	b2d2      	uxtb	r2, r2
 8006650:	701a      	strb	r2, [r3, #0]
 8006652:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006654:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	62fb      	str	r3, [r7, #44]	; 0x2c
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	68db      	ldr	r3, [r3, #12]
 800665e:	62bb      	str	r3, [r7, #40]	; 0x28
 8006660:	e00b      	b.n	800667a <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 8006662:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006664:	b2da      	uxtb	r2, r3
 8006666:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006668:	1c59      	adds	r1, r3, #1
 800666a:	62f9      	str	r1, [r7, #44]	; 0x2c
 800666c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006670:	b2d2      	uxtb	r2, r2
 8006672:	701a      	strb	r2, [r3, #0]
 8006674:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006676:	09db      	lsrs	r3, r3, #7
 8006678:	62bb      	str	r3, [r7, #40]	; 0x28
 800667a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800667c:	2b7f      	cmp	r3, #127	; 0x7f
 800667e:	d8f0      	bhi.n	8006662 <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 8006680:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006682:	1c5a      	adds	r2, r3, #1
 8006684:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006686:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006688:	b2d2      	uxtb	r2, r2
 800668a:	701a      	strb	r2, [r3, #0]
 800668c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800668e:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	627b      	str	r3, [r7, #36]	; 0x24
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	691b      	ldr	r3, [r3, #16]
 8006698:	623b      	str	r3, [r7, #32]
 800669a:	e00b      	b.n	80066b4 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 800669c:	6a3b      	ldr	r3, [r7, #32]
 800669e:	b2da      	uxtb	r2, r3
 80066a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066a2:	1c59      	adds	r1, r3, #1
 80066a4:	6279      	str	r1, [r7, #36]	; 0x24
 80066a6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80066aa:	b2d2      	uxtb	r2, r2
 80066ac:	701a      	strb	r2, [r3, #0]
 80066ae:	6a3b      	ldr	r3, [r7, #32]
 80066b0:	09db      	lsrs	r3, r3, #7
 80066b2:	623b      	str	r3, [r7, #32]
 80066b4:	6a3b      	ldr	r3, [r7, #32]
 80066b6:	2b7f      	cmp	r3, #127	; 0x7f
 80066b8:	d8f0      	bhi.n	800669c <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 80066ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066bc:	1c5a      	adds	r2, r3, #1
 80066be:	627a      	str	r2, [r7, #36]	; 0x24
 80066c0:	6a3a      	ldr	r2, [r7, #32]
 80066c2:	b2d2      	uxtb	r2, r2
 80066c4:	701a      	strb	r2, [r3, #0]
 80066c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066c8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	61fb      	str	r3, [r7, #28]
 80066ce:	2300      	movs	r3, #0
 80066d0:	61bb      	str	r3, [r7, #24]
 80066d2:	e00b      	b.n	80066ec <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 80066d4:	69bb      	ldr	r3, [r7, #24]
 80066d6:	b2da      	uxtb	r2, r3
 80066d8:	69fb      	ldr	r3, [r7, #28]
 80066da:	1c59      	adds	r1, r3, #1
 80066dc:	61f9      	str	r1, [r7, #28]
 80066de:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80066e2:	b2d2      	uxtb	r2, r2
 80066e4:	701a      	strb	r2, [r3, #0]
 80066e6:	69bb      	ldr	r3, [r7, #24]
 80066e8:	09db      	lsrs	r3, r3, #7
 80066ea:	61bb      	str	r3, [r7, #24]
 80066ec:	69bb      	ldr	r3, [r7, #24]
 80066ee:	2b7f      	cmp	r3, #127	; 0x7f
 80066f0:	d8f0      	bhi.n	80066d4 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 80066f2:	69fb      	ldr	r3, [r7, #28]
 80066f4:	1c5a      	adds	r2, r3, #1
 80066f6:	61fa      	str	r2, [r7, #28]
 80066f8:	69ba      	ldr	r2, [r7, #24]
 80066fa:	b2d2      	uxtb	r2, r2
 80066fc:	701a      	strb	r2, [r3, #0]
 80066fe:	69fb      	ldr	r3, [r7, #28]
 8006700:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 8006702:	2215      	movs	r2, #21
 8006704:	68f9      	ldr	r1, [r7, #12]
 8006706:	6938      	ldr	r0, [r7, #16]
 8006708:	f7fe ff1e 	bl	8005548 <_SendPacket>
  RECORD_END();
 800670c:	697b      	ldr	r3, [r7, #20]
 800670e:	f383 8811 	msr	BASEPRI, r3
}
 8006712:	bf00      	nop
 8006714:	3748      	adds	r7, #72	; 0x48
 8006716:	46bd      	mov	sp, r7
 8006718:	bd80      	pop	{r7, pc}
 800671a:	bf00      	nop
 800671c:	20005458 	.word	0x20005458
 8006720:	20005428 	.word	0x20005428

08006724 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8006724:	b580      	push	{r7, lr}
 8006726:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8006728:	4b07      	ldr	r3, [pc, #28]	; (8006748 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800672a:	6a1b      	ldr	r3, [r3, #32]
 800672c:	2b00      	cmp	r3, #0
 800672e:	d008      	beq.n	8006742 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8006730:	4b05      	ldr	r3, [pc, #20]	; (8006748 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8006732:	6a1b      	ldr	r3, [r3, #32]
 8006734:	685b      	ldr	r3, [r3, #4]
 8006736:	2b00      	cmp	r3, #0
 8006738:	d003      	beq.n	8006742 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 800673a:	4b03      	ldr	r3, [pc, #12]	; (8006748 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800673c:	6a1b      	ldr	r3, [r3, #32]
 800673e:	685b      	ldr	r3, [r3, #4]
 8006740:	4798      	blx	r3
  }
}
 8006742:	bf00      	nop
 8006744:	bd80      	pop	{r7, pc}
 8006746:	bf00      	nop
 8006748:	20005428 	.word	0x20005428

0800674c <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 800674c:	b580      	push	{r7, lr}
 800674e:	b086      	sub	sp, #24
 8006750:	af00      	add	r7, sp, #0
 8006752:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006754:	f3ef 8311 	mrs	r3, BASEPRI
 8006758:	f04f 0120 	mov.w	r1, #32
 800675c:	f381 8811 	msr	BASEPRI, r1
 8006760:	617b      	str	r3, [r7, #20]
 8006762:	480b      	ldr	r0, [pc, #44]	; (8006790 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 8006764:	f7fe fdff 	bl	8005366 <_PreparePacket>
 8006768:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800676a:	2280      	movs	r2, #128	; 0x80
 800676c:	6879      	ldr	r1, [r7, #4]
 800676e:	6938      	ldr	r0, [r7, #16]
 8006770:	f7fe fdac 	bl	80052cc <_EncodeStr>
 8006774:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 8006776:	220e      	movs	r2, #14
 8006778:	68f9      	ldr	r1, [r7, #12]
 800677a:	6938      	ldr	r0, [r7, #16]
 800677c:	f7fe fee4 	bl	8005548 <_SendPacket>
  RECORD_END();
 8006780:	697b      	ldr	r3, [r7, #20]
 8006782:	f383 8811 	msr	BASEPRI, r3
}
 8006786:	bf00      	nop
 8006788:	3718      	adds	r7, #24
 800678a:	46bd      	mov	sp, r7
 800678c:	bd80      	pop	{r7, pc}
 800678e:	bf00      	nop
 8006790:	20005458 	.word	0x20005458

08006794 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8006794:	b590      	push	{r4, r7, lr}
 8006796:	b083      	sub	sp, #12
 8006798:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 800679a:	4b15      	ldr	r3, [pc, #84]	; (80067f0 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 800679c:	6a1b      	ldr	r3, [r3, #32]
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d01a      	beq.n	80067d8 <SEGGER_SYSVIEW_RecordSystime+0x44>
 80067a2:	4b13      	ldr	r3, [pc, #76]	; (80067f0 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 80067a4:	6a1b      	ldr	r3, [r3, #32]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d015      	beq.n	80067d8 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 80067ac:	4b10      	ldr	r3, [pc, #64]	; (80067f0 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 80067ae:	6a1b      	ldr	r3, [r3, #32]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	4798      	blx	r3
 80067b4:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 80067b8:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 80067ba:	e9d7 0100 	ldrd	r0, r1, [r7]
 80067be:	f04f 0200 	mov.w	r2, #0
 80067c2:	f04f 0300 	mov.w	r3, #0
 80067c6:	000a      	movs	r2, r1
 80067c8:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 80067ca:	4613      	mov	r3, r2
 80067cc:	461a      	mov	r2, r3
 80067ce:	4621      	mov	r1, r4
 80067d0:	200d      	movs	r0, #13
 80067d2:	f7ff fbe7 	bl	8005fa4 <SEGGER_SYSVIEW_RecordU32x2>
 80067d6:	e006      	b.n	80067e6 <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 80067d8:	4b06      	ldr	r3, [pc, #24]	; (80067f4 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	4619      	mov	r1, r3
 80067de:	200c      	movs	r0, #12
 80067e0:	f7ff fba4 	bl	8005f2c <SEGGER_SYSVIEW_RecordU32>
  }
}
 80067e4:	bf00      	nop
 80067e6:	bf00      	nop
 80067e8:	370c      	adds	r7, #12
 80067ea:	46bd      	mov	sp, r7
 80067ec:	bd90      	pop	{r4, r7, pc}
 80067ee:	bf00      	nop
 80067f0:	20005428 	.word	0x20005428
 80067f4:	e0001004 	.word	0xe0001004

080067f8 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 80067f8:	b580      	push	{r7, lr}
 80067fa:	b086      	sub	sp, #24
 80067fc:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80067fe:	f3ef 8311 	mrs	r3, BASEPRI
 8006802:	f04f 0120 	mov.w	r1, #32
 8006806:	f381 8811 	msr	BASEPRI, r1
 800680a:	60fb      	str	r3, [r7, #12]
 800680c:	4819      	ldr	r0, [pc, #100]	; (8006874 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 800680e:	f7fe fdaa 	bl	8005366 <_PreparePacket>
 8006812:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8006814:	68bb      	ldr	r3, [r7, #8]
 8006816:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 8006818:	4b17      	ldr	r3, [pc, #92]	; (8006878 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006820:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	617b      	str	r3, [r7, #20]
 8006826:	683b      	ldr	r3, [r7, #0]
 8006828:	613b      	str	r3, [r7, #16]
 800682a:	e00b      	b.n	8006844 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 800682c:	693b      	ldr	r3, [r7, #16]
 800682e:	b2da      	uxtb	r2, r3
 8006830:	697b      	ldr	r3, [r7, #20]
 8006832:	1c59      	adds	r1, r3, #1
 8006834:	6179      	str	r1, [r7, #20]
 8006836:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800683a:	b2d2      	uxtb	r2, r2
 800683c:	701a      	strb	r2, [r3, #0]
 800683e:	693b      	ldr	r3, [r7, #16]
 8006840:	09db      	lsrs	r3, r3, #7
 8006842:	613b      	str	r3, [r7, #16]
 8006844:	693b      	ldr	r3, [r7, #16]
 8006846:	2b7f      	cmp	r3, #127	; 0x7f
 8006848:	d8f0      	bhi.n	800682c <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 800684a:	697b      	ldr	r3, [r7, #20]
 800684c:	1c5a      	adds	r2, r3, #1
 800684e:	617a      	str	r2, [r7, #20]
 8006850:	693a      	ldr	r2, [r7, #16]
 8006852:	b2d2      	uxtb	r2, r2
 8006854:	701a      	strb	r2, [r3, #0]
 8006856:	697b      	ldr	r3, [r7, #20]
 8006858:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 800685a:	2202      	movs	r2, #2
 800685c:	6879      	ldr	r1, [r7, #4]
 800685e:	68b8      	ldr	r0, [r7, #8]
 8006860:	f7fe fe72 	bl	8005548 <_SendPacket>
  RECORD_END();
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	f383 8811 	msr	BASEPRI, r3
}
 800686a:	bf00      	nop
 800686c:	3718      	adds	r7, #24
 800686e:	46bd      	mov	sp, r7
 8006870:	bd80      	pop	{r7, pc}
 8006872:	bf00      	nop
 8006874:	20005458 	.word	0x20005458
 8006878:	e000ed04 	.word	0xe000ed04

0800687c <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 800687c:	b580      	push	{r7, lr}
 800687e:	b082      	sub	sp, #8
 8006880:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006882:	f3ef 8311 	mrs	r3, BASEPRI
 8006886:	f04f 0120 	mov.w	r1, #32
 800688a:	f381 8811 	msr	BASEPRI, r1
 800688e:	607b      	str	r3, [r7, #4]
 8006890:	4807      	ldr	r0, [pc, #28]	; (80068b0 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 8006892:	f7fe fd68 	bl	8005366 <_PreparePacket>
 8006896:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 8006898:	2203      	movs	r2, #3
 800689a:	6839      	ldr	r1, [r7, #0]
 800689c:	6838      	ldr	r0, [r7, #0]
 800689e:	f7fe fe53 	bl	8005548 <_SendPacket>
  RECORD_END();
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	f383 8811 	msr	BASEPRI, r3
}
 80068a8:	bf00      	nop
 80068aa:	3708      	adds	r7, #8
 80068ac:	46bd      	mov	sp, r7
 80068ae:	bd80      	pop	{r7, pc}
 80068b0:	20005458 	.word	0x20005458

080068b4 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 80068b4:	b580      	push	{r7, lr}
 80068b6:	b082      	sub	sp, #8
 80068b8:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80068ba:	f3ef 8311 	mrs	r3, BASEPRI
 80068be:	f04f 0120 	mov.w	r1, #32
 80068c2:	f381 8811 	msr	BASEPRI, r1
 80068c6:	607b      	str	r3, [r7, #4]
 80068c8:	4807      	ldr	r0, [pc, #28]	; (80068e8 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 80068ca:	f7fe fd4c 	bl	8005366 <_PreparePacket>
 80068ce:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 80068d0:	2212      	movs	r2, #18
 80068d2:	6839      	ldr	r1, [r7, #0]
 80068d4:	6838      	ldr	r0, [r7, #0]
 80068d6:	f7fe fe37 	bl	8005548 <_SendPacket>
  RECORD_END();
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	f383 8811 	msr	BASEPRI, r3
}
 80068e0:	bf00      	nop
 80068e2:	3708      	adds	r7, #8
 80068e4:	46bd      	mov	sp, r7
 80068e6:	bd80      	pop	{r7, pc}
 80068e8:	20005458 	.word	0x20005458

080068ec <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 80068ec:	b580      	push	{r7, lr}
 80068ee:	b082      	sub	sp, #8
 80068f0:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80068f2:	f3ef 8311 	mrs	r3, BASEPRI
 80068f6:	f04f 0120 	mov.w	r1, #32
 80068fa:	f381 8811 	msr	BASEPRI, r1
 80068fe:	607b      	str	r3, [r7, #4]
 8006900:	4807      	ldr	r0, [pc, #28]	; (8006920 <SEGGER_SYSVIEW_OnIdle+0x34>)
 8006902:	f7fe fd30 	bl	8005366 <_PreparePacket>
 8006906:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8006908:	2211      	movs	r2, #17
 800690a:	6839      	ldr	r1, [r7, #0]
 800690c:	6838      	ldr	r0, [r7, #0]
 800690e:	f7fe fe1b 	bl	8005548 <_SendPacket>
  RECORD_END();
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	f383 8811 	msr	BASEPRI, r3
}
 8006918:	bf00      	nop
 800691a:	3708      	adds	r7, #8
 800691c:	46bd      	mov	sp, r7
 800691e:	bd80      	pop	{r7, pc}
 8006920:	20005458 	.word	0x20005458

08006924 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 8006924:	b580      	push	{r7, lr}
 8006926:	b088      	sub	sp, #32
 8006928:	af00      	add	r7, sp, #0
 800692a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800692c:	f3ef 8311 	mrs	r3, BASEPRI
 8006930:	f04f 0120 	mov.w	r1, #32
 8006934:	f381 8811 	msr	BASEPRI, r1
 8006938:	617b      	str	r3, [r7, #20]
 800693a:	4819      	ldr	r0, [pc, #100]	; (80069a0 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 800693c:	f7fe fd13 	bl	8005366 <_PreparePacket>
 8006940:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006942:	693b      	ldr	r3, [r7, #16]
 8006944:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006946:	4b17      	ldr	r3, [pc, #92]	; (80069a4 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 8006948:	691b      	ldr	r3, [r3, #16]
 800694a:	687a      	ldr	r2, [r7, #4]
 800694c:	1ad3      	subs	r3, r2, r3
 800694e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	61fb      	str	r3, [r7, #28]
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	61bb      	str	r3, [r7, #24]
 8006958:	e00b      	b.n	8006972 <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 800695a:	69bb      	ldr	r3, [r7, #24]
 800695c:	b2da      	uxtb	r2, r3
 800695e:	69fb      	ldr	r3, [r7, #28]
 8006960:	1c59      	adds	r1, r3, #1
 8006962:	61f9      	str	r1, [r7, #28]
 8006964:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006968:	b2d2      	uxtb	r2, r2
 800696a:	701a      	strb	r2, [r3, #0]
 800696c:	69bb      	ldr	r3, [r7, #24]
 800696e:	09db      	lsrs	r3, r3, #7
 8006970:	61bb      	str	r3, [r7, #24]
 8006972:	69bb      	ldr	r3, [r7, #24]
 8006974:	2b7f      	cmp	r3, #127	; 0x7f
 8006976:	d8f0      	bhi.n	800695a <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 8006978:	69fb      	ldr	r3, [r7, #28]
 800697a:	1c5a      	adds	r2, r3, #1
 800697c:	61fa      	str	r2, [r7, #28]
 800697e:	69ba      	ldr	r2, [r7, #24]
 8006980:	b2d2      	uxtb	r2, r2
 8006982:	701a      	strb	r2, [r3, #0]
 8006984:	69fb      	ldr	r3, [r7, #28]
 8006986:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 8006988:	2208      	movs	r2, #8
 800698a:	68f9      	ldr	r1, [r7, #12]
 800698c:	6938      	ldr	r0, [r7, #16]
 800698e:	f7fe fddb 	bl	8005548 <_SendPacket>
  RECORD_END();
 8006992:	697b      	ldr	r3, [r7, #20]
 8006994:	f383 8811 	msr	BASEPRI, r3
}
 8006998:	bf00      	nop
 800699a:	3720      	adds	r7, #32
 800699c:	46bd      	mov	sp, r7
 800699e:	bd80      	pop	{r7, pc}
 80069a0:	20005458 	.word	0x20005458
 80069a4:	20005428 	.word	0x20005428

080069a8 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 80069a8:	b580      	push	{r7, lr}
 80069aa:	b088      	sub	sp, #32
 80069ac:	af00      	add	r7, sp, #0
 80069ae:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80069b0:	f3ef 8311 	mrs	r3, BASEPRI
 80069b4:	f04f 0120 	mov.w	r1, #32
 80069b8:	f381 8811 	msr	BASEPRI, r1
 80069bc:	617b      	str	r3, [r7, #20]
 80069be:	4819      	ldr	r0, [pc, #100]	; (8006a24 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 80069c0:	f7fe fcd1 	bl	8005366 <_PreparePacket>
 80069c4:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80069c6:	693b      	ldr	r3, [r7, #16]
 80069c8:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80069ca:	4b17      	ldr	r3, [pc, #92]	; (8006a28 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 80069cc:	691b      	ldr	r3, [r3, #16]
 80069ce:	687a      	ldr	r2, [r7, #4]
 80069d0:	1ad3      	subs	r3, r2, r3
 80069d2:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	61fb      	str	r3, [r7, #28]
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	61bb      	str	r3, [r7, #24]
 80069dc:	e00b      	b.n	80069f6 <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 80069de:	69bb      	ldr	r3, [r7, #24]
 80069e0:	b2da      	uxtb	r2, r3
 80069e2:	69fb      	ldr	r3, [r7, #28]
 80069e4:	1c59      	adds	r1, r3, #1
 80069e6:	61f9      	str	r1, [r7, #28]
 80069e8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80069ec:	b2d2      	uxtb	r2, r2
 80069ee:	701a      	strb	r2, [r3, #0]
 80069f0:	69bb      	ldr	r3, [r7, #24]
 80069f2:	09db      	lsrs	r3, r3, #7
 80069f4:	61bb      	str	r3, [r7, #24]
 80069f6:	69bb      	ldr	r3, [r7, #24]
 80069f8:	2b7f      	cmp	r3, #127	; 0x7f
 80069fa:	d8f0      	bhi.n	80069de <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 80069fc:	69fb      	ldr	r3, [r7, #28]
 80069fe:	1c5a      	adds	r2, r3, #1
 8006a00:	61fa      	str	r2, [r7, #28]
 8006a02:	69ba      	ldr	r2, [r7, #24]
 8006a04:	b2d2      	uxtb	r2, r2
 8006a06:	701a      	strb	r2, [r3, #0]
 8006a08:	69fb      	ldr	r3, [r7, #28]
 8006a0a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8006a0c:	2204      	movs	r2, #4
 8006a0e:	68f9      	ldr	r1, [r7, #12]
 8006a10:	6938      	ldr	r0, [r7, #16]
 8006a12:	f7fe fd99 	bl	8005548 <_SendPacket>
  RECORD_END();
 8006a16:	697b      	ldr	r3, [r7, #20]
 8006a18:	f383 8811 	msr	BASEPRI, r3
}
 8006a1c:	bf00      	nop
 8006a1e:	3720      	adds	r7, #32
 8006a20:	46bd      	mov	sp, r7
 8006a22:	bd80      	pop	{r7, pc}
 8006a24:	20005458 	.word	0x20005458
 8006a28:	20005428 	.word	0x20005428

08006a2c <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8006a2c:	b580      	push	{r7, lr}
 8006a2e:	b088      	sub	sp, #32
 8006a30:	af00      	add	r7, sp, #0
 8006a32:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006a34:	f3ef 8311 	mrs	r3, BASEPRI
 8006a38:	f04f 0120 	mov.w	r1, #32
 8006a3c:	f381 8811 	msr	BASEPRI, r1
 8006a40:	617b      	str	r3, [r7, #20]
 8006a42:	4819      	ldr	r0, [pc, #100]	; (8006aa8 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 8006a44:	f7fe fc8f 	bl	8005366 <_PreparePacket>
 8006a48:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006a4a:	693b      	ldr	r3, [r7, #16]
 8006a4c:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006a4e:	4b17      	ldr	r3, [pc, #92]	; (8006aac <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8006a50:	691b      	ldr	r3, [r3, #16]
 8006a52:	687a      	ldr	r2, [r7, #4]
 8006a54:	1ad3      	subs	r3, r2, r3
 8006a56:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	61fb      	str	r3, [r7, #28]
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	61bb      	str	r3, [r7, #24]
 8006a60:	e00b      	b.n	8006a7a <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 8006a62:	69bb      	ldr	r3, [r7, #24]
 8006a64:	b2da      	uxtb	r2, r3
 8006a66:	69fb      	ldr	r3, [r7, #28]
 8006a68:	1c59      	adds	r1, r3, #1
 8006a6a:	61f9      	str	r1, [r7, #28]
 8006a6c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006a70:	b2d2      	uxtb	r2, r2
 8006a72:	701a      	strb	r2, [r3, #0]
 8006a74:	69bb      	ldr	r3, [r7, #24]
 8006a76:	09db      	lsrs	r3, r3, #7
 8006a78:	61bb      	str	r3, [r7, #24]
 8006a7a:	69bb      	ldr	r3, [r7, #24]
 8006a7c:	2b7f      	cmp	r3, #127	; 0x7f
 8006a7e:	d8f0      	bhi.n	8006a62 <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 8006a80:	69fb      	ldr	r3, [r7, #28]
 8006a82:	1c5a      	adds	r2, r3, #1
 8006a84:	61fa      	str	r2, [r7, #28]
 8006a86:	69ba      	ldr	r2, [r7, #24]
 8006a88:	b2d2      	uxtb	r2, r2
 8006a8a:	701a      	strb	r2, [r3, #0]
 8006a8c:	69fb      	ldr	r3, [r7, #28]
 8006a8e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8006a90:	2206      	movs	r2, #6
 8006a92:	68f9      	ldr	r1, [r7, #12]
 8006a94:	6938      	ldr	r0, [r7, #16]
 8006a96:	f7fe fd57 	bl	8005548 <_SendPacket>
  RECORD_END();
 8006a9a:	697b      	ldr	r3, [r7, #20]
 8006a9c:	f383 8811 	msr	BASEPRI, r3
}
 8006aa0:	bf00      	nop
 8006aa2:	3720      	adds	r7, #32
 8006aa4:	46bd      	mov	sp, r7
 8006aa6:	bd80      	pop	{r7, pc}
 8006aa8:	20005458 	.word	0x20005458
 8006aac:	20005428 	.word	0x20005428

08006ab0 <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 8006ab0:	b480      	push	{r7}
 8006ab2:	b083      	sub	sp, #12
 8006ab4:	af00      	add	r7, sp, #0
 8006ab6:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 8006ab8:	4b04      	ldr	r3, [pc, #16]	; (8006acc <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 8006aba:	691b      	ldr	r3, [r3, #16]
 8006abc:	687a      	ldr	r2, [r7, #4]
 8006abe:	1ad3      	subs	r3, r2, r3
}
 8006ac0:	4618      	mov	r0, r3
 8006ac2:	370c      	adds	r7, #12
 8006ac4:	46bd      	mov	sp, r7
 8006ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aca:	4770      	bx	lr
 8006acc:	20005428 	.word	0x20005428

08006ad0 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8006ad0:	b580      	push	{r7, lr}
 8006ad2:	b08c      	sub	sp, #48	; 0x30
 8006ad4:	af00      	add	r7, sp, #0
 8006ad6:	4603      	mov	r3, r0
 8006ad8:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 8006ada:	4b3b      	ldr	r3, [pc, #236]	; (8006bc8 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d06d      	beq.n	8006bbe <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 8006ae2:	4b39      	ldr	r3, [pc, #228]	; (8006bc8 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 8006ae8:	2300      	movs	r3, #0
 8006aea:	62bb      	str	r3, [r7, #40]	; 0x28
 8006aec:	e008      	b.n	8006b00 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 8006aee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006af0:	691b      	ldr	r3, [r3, #16]
 8006af2:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 8006af4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d007      	beq.n	8006b0a <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 8006afa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006afc:	3301      	adds	r3, #1
 8006afe:	62bb      	str	r3, [r7, #40]	; 0x28
 8006b00:	79fb      	ldrb	r3, [r7, #7]
 8006b02:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006b04:	429a      	cmp	r2, r3
 8006b06:	d3f2      	bcc.n	8006aee <SEGGER_SYSVIEW_SendModule+0x1e>
 8006b08:	e000      	b.n	8006b0c <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 8006b0a:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8006b0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d055      	beq.n	8006bbe <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006b12:	f3ef 8311 	mrs	r3, BASEPRI
 8006b16:	f04f 0120 	mov.w	r1, #32
 8006b1a:	f381 8811 	msr	BASEPRI, r1
 8006b1e:	617b      	str	r3, [r7, #20]
 8006b20:	482a      	ldr	r0, [pc, #168]	; (8006bcc <SEGGER_SYSVIEW_SendModule+0xfc>)
 8006b22:	f7fe fc20 	bl	8005366 <_PreparePacket>
 8006b26:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8006b28:	693b      	ldr	r3, [r7, #16]
 8006b2a:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	627b      	str	r3, [r7, #36]	; 0x24
 8006b30:	79fb      	ldrb	r3, [r7, #7]
 8006b32:	623b      	str	r3, [r7, #32]
 8006b34:	e00b      	b.n	8006b4e <SEGGER_SYSVIEW_SendModule+0x7e>
 8006b36:	6a3b      	ldr	r3, [r7, #32]
 8006b38:	b2da      	uxtb	r2, r3
 8006b3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b3c:	1c59      	adds	r1, r3, #1
 8006b3e:	6279      	str	r1, [r7, #36]	; 0x24
 8006b40:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006b44:	b2d2      	uxtb	r2, r2
 8006b46:	701a      	strb	r2, [r3, #0]
 8006b48:	6a3b      	ldr	r3, [r7, #32]
 8006b4a:	09db      	lsrs	r3, r3, #7
 8006b4c:	623b      	str	r3, [r7, #32]
 8006b4e:	6a3b      	ldr	r3, [r7, #32]
 8006b50:	2b7f      	cmp	r3, #127	; 0x7f
 8006b52:	d8f0      	bhi.n	8006b36 <SEGGER_SYSVIEW_SendModule+0x66>
 8006b54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b56:	1c5a      	adds	r2, r3, #1
 8006b58:	627a      	str	r2, [r7, #36]	; 0x24
 8006b5a:	6a3a      	ldr	r2, [r7, #32]
 8006b5c:	b2d2      	uxtb	r2, r2
 8006b5e:	701a      	strb	r2, [r3, #0]
 8006b60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b62:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	61fb      	str	r3, [r7, #28]
 8006b68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b6a:	689b      	ldr	r3, [r3, #8]
 8006b6c:	61bb      	str	r3, [r7, #24]
 8006b6e:	e00b      	b.n	8006b88 <SEGGER_SYSVIEW_SendModule+0xb8>
 8006b70:	69bb      	ldr	r3, [r7, #24]
 8006b72:	b2da      	uxtb	r2, r3
 8006b74:	69fb      	ldr	r3, [r7, #28]
 8006b76:	1c59      	adds	r1, r3, #1
 8006b78:	61f9      	str	r1, [r7, #28]
 8006b7a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006b7e:	b2d2      	uxtb	r2, r2
 8006b80:	701a      	strb	r2, [r3, #0]
 8006b82:	69bb      	ldr	r3, [r7, #24]
 8006b84:	09db      	lsrs	r3, r3, #7
 8006b86:	61bb      	str	r3, [r7, #24]
 8006b88:	69bb      	ldr	r3, [r7, #24]
 8006b8a:	2b7f      	cmp	r3, #127	; 0x7f
 8006b8c:	d8f0      	bhi.n	8006b70 <SEGGER_SYSVIEW_SendModule+0xa0>
 8006b8e:	69fb      	ldr	r3, [r7, #28]
 8006b90:	1c5a      	adds	r2, r3, #1
 8006b92:	61fa      	str	r2, [r7, #28]
 8006b94:	69ba      	ldr	r2, [r7, #24]
 8006b96:	b2d2      	uxtb	r2, r2
 8006b98:	701a      	strb	r2, [r3, #0]
 8006b9a:	69fb      	ldr	r3, [r7, #28]
 8006b9c:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006b9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	2280      	movs	r2, #128	; 0x80
 8006ba4:	4619      	mov	r1, r3
 8006ba6:	68f8      	ldr	r0, [r7, #12]
 8006ba8:	f7fe fb90 	bl	80052cc <_EncodeStr>
 8006bac:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 8006bae:	2216      	movs	r2, #22
 8006bb0:	68f9      	ldr	r1, [r7, #12]
 8006bb2:	6938      	ldr	r0, [r7, #16]
 8006bb4:	f7fe fcc8 	bl	8005548 <_SendPacket>
      RECORD_END();
 8006bb8:	697b      	ldr	r3, [r7, #20]
 8006bba:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 8006bbe:	bf00      	nop
 8006bc0:	3730      	adds	r7, #48	; 0x30
 8006bc2:	46bd      	mov	sp, r7
 8006bc4:	bd80      	pop	{r7, pc}
 8006bc6:	bf00      	nop
 8006bc8:	20005450 	.word	0x20005450
 8006bcc:	20005458 	.word	0x20005458

08006bd0 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8006bd0:	b580      	push	{r7, lr}
 8006bd2:	b082      	sub	sp, #8
 8006bd4:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 8006bd6:	4b0c      	ldr	r3, [pc, #48]	; (8006c08 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d00f      	beq.n	8006bfe <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 8006bde:	4b0a      	ldr	r3, [pc, #40]	; (8006c08 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	68db      	ldr	r3, [r3, #12]
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d002      	beq.n	8006bf2 <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	68db      	ldr	r3, [r3, #12]
 8006bf0:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	691b      	ldr	r3, [r3, #16]
 8006bf6:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d1f2      	bne.n	8006be4 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 8006bfe:	bf00      	nop
 8006c00:	3708      	adds	r7, #8
 8006c02:	46bd      	mov	sp, r7
 8006c04:	bd80      	pop	{r7, pc}
 8006c06:	bf00      	nop
 8006c08:	20005450 	.word	0x20005450

08006c0c <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8006c0c:	b580      	push	{r7, lr}
 8006c0e:	b086      	sub	sp, #24
 8006c10:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 8006c12:	f3ef 8311 	mrs	r3, BASEPRI
 8006c16:	f04f 0120 	mov.w	r1, #32
 8006c1a:	f381 8811 	msr	BASEPRI, r1
 8006c1e:	60fb      	str	r3, [r7, #12]
 8006c20:	4817      	ldr	r0, [pc, #92]	; (8006c80 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 8006c22:	f7fe fba0 	bl	8005366 <_PreparePacket>
 8006c26:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8006c28:	68bb      	ldr	r3, [r7, #8]
 8006c2a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	617b      	str	r3, [r7, #20]
 8006c30:	4b14      	ldr	r3, [pc, #80]	; (8006c84 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 8006c32:	781b      	ldrb	r3, [r3, #0]
 8006c34:	613b      	str	r3, [r7, #16]
 8006c36:	e00b      	b.n	8006c50 <SEGGER_SYSVIEW_SendNumModules+0x44>
 8006c38:	693b      	ldr	r3, [r7, #16]
 8006c3a:	b2da      	uxtb	r2, r3
 8006c3c:	697b      	ldr	r3, [r7, #20]
 8006c3e:	1c59      	adds	r1, r3, #1
 8006c40:	6179      	str	r1, [r7, #20]
 8006c42:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006c46:	b2d2      	uxtb	r2, r2
 8006c48:	701a      	strb	r2, [r3, #0]
 8006c4a:	693b      	ldr	r3, [r7, #16]
 8006c4c:	09db      	lsrs	r3, r3, #7
 8006c4e:	613b      	str	r3, [r7, #16]
 8006c50:	693b      	ldr	r3, [r7, #16]
 8006c52:	2b7f      	cmp	r3, #127	; 0x7f
 8006c54:	d8f0      	bhi.n	8006c38 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 8006c56:	697b      	ldr	r3, [r7, #20]
 8006c58:	1c5a      	adds	r2, r3, #1
 8006c5a:	617a      	str	r2, [r7, #20]
 8006c5c:	693a      	ldr	r2, [r7, #16]
 8006c5e:	b2d2      	uxtb	r2, r2
 8006c60:	701a      	strb	r2, [r3, #0]
 8006c62:	697b      	ldr	r3, [r7, #20]
 8006c64:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 8006c66:	221b      	movs	r2, #27
 8006c68:	6879      	ldr	r1, [r7, #4]
 8006c6a:	68b8      	ldr	r0, [r7, #8]
 8006c6c:	f7fe fc6c 	bl	8005548 <_SendPacket>
  RECORD_END();
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	f383 8811 	msr	BASEPRI, r3
}
 8006c76:	bf00      	nop
 8006c78:	3718      	adds	r7, #24
 8006c7a:	46bd      	mov	sp, r7
 8006c7c:	bd80      	pop	{r7, pc}
 8006c7e:	bf00      	nop
 8006c80:	20005458 	.word	0x20005458
 8006c84:	20005454 	.word	0x20005454

08006c88 <SEGGER_SYSVIEW_PrintfTarget>:
*    the host.
*
*  Parameters
*    s        - String to be formatted.
*/
void SEGGER_SYSVIEW_PrintfTarget(const char* s, ...) {
 8006c88:	b40f      	push	{r0, r1, r2, r3}
 8006c8a:	b580      	push	{r7, lr}
 8006c8c:	b082      	sub	sp, #8
 8006c8e:	af00      	add	r7, sp, #0
  va_list ParamList;

  va_start(ParamList, s);
 8006c90:	f107 0314 	add.w	r3, r7, #20
 8006c94:	607b      	str	r3, [r7, #4]
  _VPrintTarget(s, SEGGER_SYSVIEW_LOG, &ParamList);
 8006c96:	1d3b      	adds	r3, r7, #4
 8006c98:	461a      	mov	r2, r3
 8006c9a:	2100      	movs	r1, #0
 8006c9c:	6938      	ldr	r0, [r7, #16]
 8006c9e:	f7fe fedb 	bl	8005a58 <_VPrintTarget>
  va_end(ParamList);
}
 8006ca2:	bf00      	nop
 8006ca4:	3708      	adds	r7, #8
 8006ca6:	46bd      	mov	sp, r7
 8006ca8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006cac:	b004      	add	sp, #16
 8006cae:	4770      	bx	lr

08006cb0 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 8006cb0:	b580      	push	{r7, lr}
 8006cb2:	b08a      	sub	sp, #40	; 0x28
 8006cb4:	af00      	add	r7, sp, #0
 8006cb6:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006cb8:	f3ef 8311 	mrs	r3, BASEPRI
 8006cbc:	f04f 0120 	mov.w	r1, #32
 8006cc0:	f381 8811 	msr	BASEPRI, r1
 8006cc4:	617b      	str	r3, [r7, #20]
 8006cc6:	4827      	ldr	r0, [pc, #156]	; (8006d64 <SEGGER_SYSVIEW_Warn+0xb4>)
 8006cc8:	f7fe fb4d 	bl	8005366 <_PreparePacket>
 8006ccc:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006cce:	2280      	movs	r2, #128	; 0x80
 8006cd0:	6879      	ldr	r1, [r7, #4]
 8006cd2:	6938      	ldr	r0, [r7, #16]
 8006cd4:	f7fe fafa 	bl	80052cc <_EncodeStr>
 8006cd8:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	627b      	str	r3, [r7, #36]	; 0x24
 8006cde:	2301      	movs	r3, #1
 8006ce0:	623b      	str	r3, [r7, #32]
 8006ce2:	e00b      	b.n	8006cfc <SEGGER_SYSVIEW_Warn+0x4c>
 8006ce4:	6a3b      	ldr	r3, [r7, #32]
 8006ce6:	b2da      	uxtb	r2, r3
 8006ce8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cea:	1c59      	adds	r1, r3, #1
 8006cec:	6279      	str	r1, [r7, #36]	; 0x24
 8006cee:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006cf2:	b2d2      	uxtb	r2, r2
 8006cf4:	701a      	strb	r2, [r3, #0]
 8006cf6:	6a3b      	ldr	r3, [r7, #32]
 8006cf8:	09db      	lsrs	r3, r3, #7
 8006cfa:	623b      	str	r3, [r7, #32]
 8006cfc:	6a3b      	ldr	r3, [r7, #32]
 8006cfe:	2b7f      	cmp	r3, #127	; 0x7f
 8006d00:	d8f0      	bhi.n	8006ce4 <SEGGER_SYSVIEW_Warn+0x34>
 8006d02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d04:	1c5a      	adds	r2, r3, #1
 8006d06:	627a      	str	r2, [r7, #36]	; 0x24
 8006d08:	6a3a      	ldr	r2, [r7, #32]
 8006d0a:	b2d2      	uxtb	r2, r2
 8006d0c:	701a      	strb	r2, [r3, #0]
 8006d0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d10:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	61fb      	str	r3, [r7, #28]
 8006d16:	2300      	movs	r3, #0
 8006d18:	61bb      	str	r3, [r7, #24]
 8006d1a:	e00b      	b.n	8006d34 <SEGGER_SYSVIEW_Warn+0x84>
 8006d1c:	69bb      	ldr	r3, [r7, #24]
 8006d1e:	b2da      	uxtb	r2, r3
 8006d20:	69fb      	ldr	r3, [r7, #28]
 8006d22:	1c59      	adds	r1, r3, #1
 8006d24:	61f9      	str	r1, [r7, #28]
 8006d26:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006d2a:	b2d2      	uxtb	r2, r2
 8006d2c:	701a      	strb	r2, [r3, #0]
 8006d2e:	69bb      	ldr	r3, [r7, #24]
 8006d30:	09db      	lsrs	r3, r3, #7
 8006d32:	61bb      	str	r3, [r7, #24]
 8006d34:	69bb      	ldr	r3, [r7, #24]
 8006d36:	2b7f      	cmp	r3, #127	; 0x7f
 8006d38:	d8f0      	bhi.n	8006d1c <SEGGER_SYSVIEW_Warn+0x6c>
 8006d3a:	69fb      	ldr	r3, [r7, #28]
 8006d3c:	1c5a      	adds	r2, r3, #1
 8006d3e:	61fa      	str	r2, [r7, #28]
 8006d40:	69ba      	ldr	r2, [r7, #24]
 8006d42:	b2d2      	uxtb	r2, r2
 8006d44:	701a      	strb	r2, [r3, #0]
 8006d46:	69fb      	ldr	r3, [r7, #28]
 8006d48:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8006d4a:	221a      	movs	r2, #26
 8006d4c:	68f9      	ldr	r1, [r7, #12]
 8006d4e:	6938      	ldr	r0, [r7, #16]
 8006d50:	f7fe fbfa 	bl	8005548 <_SendPacket>
  RECORD_END();
 8006d54:	697b      	ldr	r3, [r7, #20]
 8006d56:	f383 8811 	msr	BASEPRI, r3
}
 8006d5a:	bf00      	nop
 8006d5c:	3728      	adds	r7, #40	; 0x28
 8006d5e:	46bd      	mov	sp, r7
 8006d60:	bd80      	pop	{r7, pc}
 8006d62:	bf00      	nop
 8006d64:	20005458 	.word	0x20005458

08006d68 <__libc_init_array>:
 8006d68:	b570      	push	{r4, r5, r6, lr}
 8006d6a:	4d0d      	ldr	r5, [pc, #52]	; (8006da0 <__libc_init_array+0x38>)
 8006d6c:	4c0d      	ldr	r4, [pc, #52]	; (8006da4 <__libc_init_array+0x3c>)
 8006d6e:	1b64      	subs	r4, r4, r5
 8006d70:	10a4      	asrs	r4, r4, #2
 8006d72:	2600      	movs	r6, #0
 8006d74:	42a6      	cmp	r6, r4
 8006d76:	d109      	bne.n	8006d8c <__libc_init_array+0x24>
 8006d78:	4d0b      	ldr	r5, [pc, #44]	; (8006da8 <__libc_init_array+0x40>)
 8006d7a:	4c0c      	ldr	r4, [pc, #48]	; (8006dac <__libc_init_array+0x44>)
 8006d7c:	f000 fcc0 	bl	8007700 <_init>
 8006d80:	1b64      	subs	r4, r4, r5
 8006d82:	10a4      	asrs	r4, r4, #2
 8006d84:	2600      	movs	r6, #0
 8006d86:	42a6      	cmp	r6, r4
 8006d88:	d105      	bne.n	8006d96 <__libc_init_array+0x2e>
 8006d8a:	bd70      	pop	{r4, r5, r6, pc}
 8006d8c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006d90:	4798      	blx	r3
 8006d92:	3601      	adds	r6, #1
 8006d94:	e7ee      	b.n	8006d74 <__libc_init_array+0xc>
 8006d96:	f855 3b04 	ldr.w	r3, [r5], #4
 8006d9a:	4798      	blx	r3
 8006d9c:	3601      	adds	r6, #1
 8006d9e:	e7f2      	b.n	8006d86 <__libc_init_array+0x1e>
 8006da0:	080078c8 	.word	0x080078c8
 8006da4:	080078c8 	.word	0x080078c8
 8006da8:	080078c8 	.word	0x080078c8
 8006dac:	080078cc 	.word	0x080078cc

08006db0 <memcmp>:
 8006db0:	b510      	push	{r4, lr}
 8006db2:	3901      	subs	r1, #1
 8006db4:	4402      	add	r2, r0
 8006db6:	4290      	cmp	r0, r2
 8006db8:	d101      	bne.n	8006dbe <memcmp+0xe>
 8006dba:	2000      	movs	r0, #0
 8006dbc:	e005      	b.n	8006dca <memcmp+0x1a>
 8006dbe:	7803      	ldrb	r3, [r0, #0]
 8006dc0:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8006dc4:	42a3      	cmp	r3, r4
 8006dc6:	d001      	beq.n	8006dcc <memcmp+0x1c>
 8006dc8:	1b18      	subs	r0, r3, r4
 8006dca:	bd10      	pop	{r4, pc}
 8006dcc:	3001      	adds	r0, #1
 8006dce:	e7f2      	b.n	8006db6 <memcmp+0x6>

08006dd0 <memcpy>:
 8006dd0:	440a      	add	r2, r1
 8006dd2:	4291      	cmp	r1, r2
 8006dd4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8006dd8:	d100      	bne.n	8006ddc <memcpy+0xc>
 8006dda:	4770      	bx	lr
 8006ddc:	b510      	push	{r4, lr}
 8006dde:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006de2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006de6:	4291      	cmp	r1, r2
 8006de8:	d1f9      	bne.n	8006dde <memcpy+0xe>
 8006dea:	bd10      	pop	{r4, pc}

08006dec <memset>:
 8006dec:	4402      	add	r2, r0
 8006dee:	4603      	mov	r3, r0
 8006df0:	4293      	cmp	r3, r2
 8006df2:	d100      	bne.n	8006df6 <memset+0xa>
 8006df4:	4770      	bx	lr
 8006df6:	f803 1b01 	strb.w	r1, [r3], #1
 8006dfa:	e7f9      	b.n	8006df0 <memset+0x4>

08006dfc <sniprintf>:
 8006dfc:	b40c      	push	{r2, r3}
 8006dfe:	b530      	push	{r4, r5, lr}
 8006e00:	4b17      	ldr	r3, [pc, #92]	; (8006e60 <sniprintf+0x64>)
 8006e02:	1e0c      	subs	r4, r1, #0
 8006e04:	681d      	ldr	r5, [r3, #0]
 8006e06:	b09d      	sub	sp, #116	; 0x74
 8006e08:	da08      	bge.n	8006e1c <sniprintf+0x20>
 8006e0a:	238b      	movs	r3, #139	; 0x8b
 8006e0c:	602b      	str	r3, [r5, #0]
 8006e0e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006e12:	b01d      	add	sp, #116	; 0x74
 8006e14:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006e18:	b002      	add	sp, #8
 8006e1a:	4770      	bx	lr
 8006e1c:	f44f 7302 	mov.w	r3, #520	; 0x208
 8006e20:	f8ad 3014 	strh.w	r3, [sp, #20]
 8006e24:	bf14      	ite	ne
 8006e26:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 8006e2a:	4623      	moveq	r3, r4
 8006e2c:	9304      	str	r3, [sp, #16]
 8006e2e:	9307      	str	r3, [sp, #28]
 8006e30:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006e34:	9002      	str	r0, [sp, #8]
 8006e36:	9006      	str	r0, [sp, #24]
 8006e38:	f8ad 3016 	strh.w	r3, [sp, #22]
 8006e3c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8006e3e:	ab21      	add	r3, sp, #132	; 0x84
 8006e40:	a902      	add	r1, sp, #8
 8006e42:	4628      	mov	r0, r5
 8006e44:	9301      	str	r3, [sp, #4]
 8006e46:	f000 f869 	bl	8006f1c <_svfiprintf_r>
 8006e4a:	1c43      	adds	r3, r0, #1
 8006e4c:	bfbc      	itt	lt
 8006e4e:	238b      	movlt	r3, #139	; 0x8b
 8006e50:	602b      	strlt	r3, [r5, #0]
 8006e52:	2c00      	cmp	r4, #0
 8006e54:	d0dd      	beq.n	8006e12 <sniprintf+0x16>
 8006e56:	9b02      	ldr	r3, [sp, #8]
 8006e58:	2200      	movs	r2, #0
 8006e5a:	701a      	strb	r2, [r3, #0]
 8006e5c:	e7d9      	b.n	8006e12 <sniprintf+0x16>
 8006e5e:	bf00      	nop
 8006e60:	20000014 	.word	0x20000014

08006e64 <__ssputs_r>:
 8006e64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006e68:	688e      	ldr	r6, [r1, #8]
 8006e6a:	429e      	cmp	r6, r3
 8006e6c:	4682      	mov	sl, r0
 8006e6e:	460c      	mov	r4, r1
 8006e70:	4690      	mov	r8, r2
 8006e72:	461f      	mov	r7, r3
 8006e74:	d838      	bhi.n	8006ee8 <__ssputs_r+0x84>
 8006e76:	898a      	ldrh	r2, [r1, #12]
 8006e78:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006e7c:	d032      	beq.n	8006ee4 <__ssputs_r+0x80>
 8006e7e:	6825      	ldr	r5, [r4, #0]
 8006e80:	6909      	ldr	r1, [r1, #16]
 8006e82:	eba5 0901 	sub.w	r9, r5, r1
 8006e86:	6965      	ldr	r5, [r4, #20]
 8006e88:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006e8c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006e90:	3301      	adds	r3, #1
 8006e92:	444b      	add	r3, r9
 8006e94:	106d      	asrs	r5, r5, #1
 8006e96:	429d      	cmp	r5, r3
 8006e98:	bf38      	it	cc
 8006e9a:	461d      	movcc	r5, r3
 8006e9c:	0553      	lsls	r3, r2, #21
 8006e9e:	d531      	bpl.n	8006f04 <__ssputs_r+0xa0>
 8006ea0:	4629      	mov	r1, r5
 8006ea2:	f000 fb55 	bl	8007550 <_malloc_r>
 8006ea6:	4606      	mov	r6, r0
 8006ea8:	b950      	cbnz	r0, 8006ec0 <__ssputs_r+0x5c>
 8006eaa:	230c      	movs	r3, #12
 8006eac:	f8ca 3000 	str.w	r3, [sl]
 8006eb0:	89a3      	ldrh	r3, [r4, #12]
 8006eb2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006eb6:	81a3      	strh	r3, [r4, #12]
 8006eb8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006ebc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ec0:	6921      	ldr	r1, [r4, #16]
 8006ec2:	464a      	mov	r2, r9
 8006ec4:	f7ff ff84 	bl	8006dd0 <memcpy>
 8006ec8:	89a3      	ldrh	r3, [r4, #12]
 8006eca:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006ece:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006ed2:	81a3      	strh	r3, [r4, #12]
 8006ed4:	6126      	str	r6, [r4, #16]
 8006ed6:	6165      	str	r5, [r4, #20]
 8006ed8:	444e      	add	r6, r9
 8006eda:	eba5 0509 	sub.w	r5, r5, r9
 8006ede:	6026      	str	r6, [r4, #0]
 8006ee0:	60a5      	str	r5, [r4, #8]
 8006ee2:	463e      	mov	r6, r7
 8006ee4:	42be      	cmp	r6, r7
 8006ee6:	d900      	bls.n	8006eea <__ssputs_r+0x86>
 8006ee8:	463e      	mov	r6, r7
 8006eea:	6820      	ldr	r0, [r4, #0]
 8006eec:	4632      	mov	r2, r6
 8006eee:	4641      	mov	r1, r8
 8006ef0:	f000 faa8 	bl	8007444 <memmove>
 8006ef4:	68a3      	ldr	r3, [r4, #8]
 8006ef6:	1b9b      	subs	r3, r3, r6
 8006ef8:	60a3      	str	r3, [r4, #8]
 8006efa:	6823      	ldr	r3, [r4, #0]
 8006efc:	4433      	add	r3, r6
 8006efe:	6023      	str	r3, [r4, #0]
 8006f00:	2000      	movs	r0, #0
 8006f02:	e7db      	b.n	8006ebc <__ssputs_r+0x58>
 8006f04:	462a      	mov	r2, r5
 8006f06:	f000 fb97 	bl	8007638 <_realloc_r>
 8006f0a:	4606      	mov	r6, r0
 8006f0c:	2800      	cmp	r0, #0
 8006f0e:	d1e1      	bne.n	8006ed4 <__ssputs_r+0x70>
 8006f10:	6921      	ldr	r1, [r4, #16]
 8006f12:	4650      	mov	r0, sl
 8006f14:	f000 fab0 	bl	8007478 <_free_r>
 8006f18:	e7c7      	b.n	8006eaa <__ssputs_r+0x46>
	...

08006f1c <_svfiprintf_r>:
 8006f1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f20:	4698      	mov	r8, r3
 8006f22:	898b      	ldrh	r3, [r1, #12]
 8006f24:	061b      	lsls	r3, r3, #24
 8006f26:	b09d      	sub	sp, #116	; 0x74
 8006f28:	4607      	mov	r7, r0
 8006f2a:	460d      	mov	r5, r1
 8006f2c:	4614      	mov	r4, r2
 8006f2e:	d50e      	bpl.n	8006f4e <_svfiprintf_r+0x32>
 8006f30:	690b      	ldr	r3, [r1, #16]
 8006f32:	b963      	cbnz	r3, 8006f4e <_svfiprintf_r+0x32>
 8006f34:	2140      	movs	r1, #64	; 0x40
 8006f36:	f000 fb0b 	bl	8007550 <_malloc_r>
 8006f3a:	6028      	str	r0, [r5, #0]
 8006f3c:	6128      	str	r0, [r5, #16]
 8006f3e:	b920      	cbnz	r0, 8006f4a <_svfiprintf_r+0x2e>
 8006f40:	230c      	movs	r3, #12
 8006f42:	603b      	str	r3, [r7, #0]
 8006f44:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006f48:	e0d1      	b.n	80070ee <_svfiprintf_r+0x1d2>
 8006f4a:	2340      	movs	r3, #64	; 0x40
 8006f4c:	616b      	str	r3, [r5, #20]
 8006f4e:	2300      	movs	r3, #0
 8006f50:	9309      	str	r3, [sp, #36]	; 0x24
 8006f52:	2320      	movs	r3, #32
 8006f54:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006f58:	f8cd 800c 	str.w	r8, [sp, #12]
 8006f5c:	2330      	movs	r3, #48	; 0x30
 8006f5e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8007108 <_svfiprintf_r+0x1ec>
 8006f62:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006f66:	f04f 0901 	mov.w	r9, #1
 8006f6a:	4623      	mov	r3, r4
 8006f6c:	469a      	mov	sl, r3
 8006f6e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006f72:	b10a      	cbz	r2, 8006f78 <_svfiprintf_r+0x5c>
 8006f74:	2a25      	cmp	r2, #37	; 0x25
 8006f76:	d1f9      	bne.n	8006f6c <_svfiprintf_r+0x50>
 8006f78:	ebba 0b04 	subs.w	fp, sl, r4
 8006f7c:	d00b      	beq.n	8006f96 <_svfiprintf_r+0x7a>
 8006f7e:	465b      	mov	r3, fp
 8006f80:	4622      	mov	r2, r4
 8006f82:	4629      	mov	r1, r5
 8006f84:	4638      	mov	r0, r7
 8006f86:	f7ff ff6d 	bl	8006e64 <__ssputs_r>
 8006f8a:	3001      	adds	r0, #1
 8006f8c:	f000 80aa 	beq.w	80070e4 <_svfiprintf_r+0x1c8>
 8006f90:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006f92:	445a      	add	r2, fp
 8006f94:	9209      	str	r2, [sp, #36]	; 0x24
 8006f96:	f89a 3000 	ldrb.w	r3, [sl]
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	f000 80a2 	beq.w	80070e4 <_svfiprintf_r+0x1c8>
 8006fa0:	2300      	movs	r3, #0
 8006fa2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006fa6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006faa:	f10a 0a01 	add.w	sl, sl, #1
 8006fae:	9304      	str	r3, [sp, #16]
 8006fb0:	9307      	str	r3, [sp, #28]
 8006fb2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006fb6:	931a      	str	r3, [sp, #104]	; 0x68
 8006fb8:	4654      	mov	r4, sl
 8006fba:	2205      	movs	r2, #5
 8006fbc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006fc0:	4851      	ldr	r0, [pc, #324]	; (8007108 <_svfiprintf_r+0x1ec>)
 8006fc2:	f7f9 f955 	bl	8000270 <memchr>
 8006fc6:	9a04      	ldr	r2, [sp, #16]
 8006fc8:	b9d8      	cbnz	r0, 8007002 <_svfiprintf_r+0xe6>
 8006fca:	06d0      	lsls	r0, r2, #27
 8006fcc:	bf44      	itt	mi
 8006fce:	2320      	movmi	r3, #32
 8006fd0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006fd4:	0711      	lsls	r1, r2, #28
 8006fd6:	bf44      	itt	mi
 8006fd8:	232b      	movmi	r3, #43	; 0x2b
 8006fda:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006fde:	f89a 3000 	ldrb.w	r3, [sl]
 8006fe2:	2b2a      	cmp	r3, #42	; 0x2a
 8006fe4:	d015      	beq.n	8007012 <_svfiprintf_r+0xf6>
 8006fe6:	9a07      	ldr	r2, [sp, #28]
 8006fe8:	4654      	mov	r4, sl
 8006fea:	2000      	movs	r0, #0
 8006fec:	f04f 0c0a 	mov.w	ip, #10
 8006ff0:	4621      	mov	r1, r4
 8006ff2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006ff6:	3b30      	subs	r3, #48	; 0x30
 8006ff8:	2b09      	cmp	r3, #9
 8006ffa:	d94e      	bls.n	800709a <_svfiprintf_r+0x17e>
 8006ffc:	b1b0      	cbz	r0, 800702c <_svfiprintf_r+0x110>
 8006ffe:	9207      	str	r2, [sp, #28]
 8007000:	e014      	b.n	800702c <_svfiprintf_r+0x110>
 8007002:	eba0 0308 	sub.w	r3, r0, r8
 8007006:	fa09 f303 	lsl.w	r3, r9, r3
 800700a:	4313      	orrs	r3, r2
 800700c:	9304      	str	r3, [sp, #16]
 800700e:	46a2      	mov	sl, r4
 8007010:	e7d2      	b.n	8006fb8 <_svfiprintf_r+0x9c>
 8007012:	9b03      	ldr	r3, [sp, #12]
 8007014:	1d19      	adds	r1, r3, #4
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	9103      	str	r1, [sp, #12]
 800701a:	2b00      	cmp	r3, #0
 800701c:	bfbb      	ittet	lt
 800701e:	425b      	neglt	r3, r3
 8007020:	f042 0202 	orrlt.w	r2, r2, #2
 8007024:	9307      	strge	r3, [sp, #28]
 8007026:	9307      	strlt	r3, [sp, #28]
 8007028:	bfb8      	it	lt
 800702a:	9204      	strlt	r2, [sp, #16]
 800702c:	7823      	ldrb	r3, [r4, #0]
 800702e:	2b2e      	cmp	r3, #46	; 0x2e
 8007030:	d10c      	bne.n	800704c <_svfiprintf_r+0x130>
 8007032:	7863      	ldrb	r3, [r4, #1]
 8007034:	2b2a      	cmp	r3, #42	; 0x2a
 8007036:	d135      	bne.n	80070a4 <_svfiprintf_r+0x188>
 8007038:	9b03      	ldr	r3, [sp, #12]
 800703a:	1d1a      	adds	r2, r3, #4
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	9203      	str	r2, [sp, #12]
 8007040:	2b00      	cmp	r3, #0
 8007042:	bfb8      	it	lt
 8007044:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8007048:	3402      	adds	r4, #2
 800704a:	9305      	str	r3, [sp, #20]
 800704c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007118 <_svfiprintf_r+0x1fc>
 8007050:	7821      	ldrb	r1, [r4, #0]
 8007052:	2203      	movs	r2, #3
 8007054:	4650      	mov	r0, sl
 8007056:	f7f9 f90b 	bl	8000270 <memchr>
 800705a:	b140      	cbz	r0, 800706e <_svfiprintf_r+0x152>
 800705c:	2340      	movs	r3, #64	; 0x40
 800705e:	eba0 000a 	sub.w	r0, r0, sl
 8007062:	fa03 f000 	lsl.w	r0, r3, r0
 8007066:	9b04      	ldr	r3, [sp, #16]
 8007068:	4303      	orrs	r3, r0
 800706a:	3401      	adds	r4, #1
 800706c:	9304      	str	r3, [sp, #16]
 800706e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007072:	4826      	ldr	r0, [pc, #152]	; (800710c <_svfiprintf_r+0x1f0>)
 8007074:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007078:	2206      	movs	r2, #6
 800707a:	f7f9 f8f9 	bl	8000270 <memchr>
 800707e:	2800      	cmp	r0, #0
 8007080:	d038      	beq.n	80070f4 <_svfiprintf_r+0x1d8>
 8007082:	4b23      	ldr	r3, [pc, #140]	; (8007110 <_svfiprintf_r+0x1f4>)
 8007084:	bb1b      	cbnz	r3, 80070ce <_svfiprintf_r+0x1b2>
 8007086:	9b03      	ldr	r3, [sp, #12]
 8007088:	3307      	adds	r3, #7
 800708a:	f023 0307 	bic.w	r3, r3, #7
 800708e:	3308      	adds	r3, #8
 8007090:	9303      	str	r3, [sp, #12]
 8007092:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007094:	4433      	add	r3, r6
 8007096:	9309      	str	r3, [sp, #36]	; 0x24
 8007098:	e767      	b.n	8006f6a <_svfiprintf_r+0x4e>
 800709a:	fb0c 3202 	mla	r2, ip, r2, r3
 800709e:	460c      	mov	r4, r1
 80070a0:	2001      	movs	r0, #1
 80070a2:	e7a5      	b.n	8006ff0 <_svfiprintf_r+0xd4>
 80070a4:	2300      	movs	r3, #0
 80070a6:	3401      	adds	r4, #1
 80070a8:	9305      	str	r3, [sp, #20]
 80070aa:	4619      	mov	r1, r3
 80070ac:	f04f 0c0a 	mov.w	ip, #10
 80070b0:	4620      	mov	r0, r4
 80070b2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80070b6:	3a30      	subs	r2, #48	; 0x30
 80070b8:	2a09      	cmp	r2, #9
 80070ba:	d903      	bls.n	80070c4 <_svfiprintf_r+0x1a8>
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d0c5      	beq.n	800704c <_svfiprintf_r+0x130>
 80070c0:	9105      	str	r1, [sp, #20]
 80070c2:	e7c3      	b.n	800704c <_svfiprintf_r+0x130>
 80070c4:	fb0c 2101 	mla	r1, ip, r1, r2
 80070c8:	4604      	mov	r4, r0
 80070ca:	2301      	movs	r3, #1
 80070cc:	e7f0      	b.n	80070b0 <_svfiprintf_r+0x194>
 80070ce:	ab03      	add	r3, sp, #12
 80070d0:	9300      	str	r3, [sp, #0]
 80070d2:	462a      	mov	r2, r5
 80070d4:	4b0f      	ldr	r3, [pc, #60]	; (8007114 <_svfiprintf_r+0x1f8>)
 80070d6:	a904      	add	r1, sp, #16
 80070d8:	4638      	mov	r0, r7
 80070da:	f3af 8000 	nop.w
 80070de:	1c42      	adds	r2, r0, #1
 80070e0:	4606      	mov	r6, r0
 80070e2:	d1d6      	bne.n	8007092 <_svfiprintf_r+0x176>
 80070e4:	89ab      	ldrh	r3, [r5, #12]
 80070e6:	065b      	lsls	r3, r3, #25
 80070e8:	f53f af2c 	bmi.w	8006f44 <_svfiprintf_r+0x28>
 80070ec:	9809      	ldr	r0, [sp, #36]	; 0x24
 80070ee:	b01d      	add	sp, #116	; 0x74
 80070f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80070f4:	ab03      	add	r3, sp, #12
 80070f6:	9300      	str	r3, [sp, #0]
 80070f8:	462a      	mov	r2, r5
 80070fa:	4b06      	ldr	r3, [pc, #24]	; (8007114 <_svfiprintf_r+0x1f8>)
 80070fc:	a904      	add	r1, sp, #16
 80070fe:	4638      	mov	r0, r7
 8007100:	f000 f87a 	bl	80071f8 <_printf_i>
 8007104:	e7eb      	b.n	80070de <_svfiprintf_r+0x1c2>
 8007106:	bf00      	nop
 8007108:	08007894 	.word	0x08007894
 800710c:	0800789e 	.word	0x0800789e
 8007110:	00000000 	.word	0x00000000
 8007114:	08006e65 	.word	0x08006e65
 8007118:	0800789a 	.word	0x0800789a

0800711c <_printf_common>:
 800711c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007120:	4616      	mov	r6, r2
 8007122:	4699      	mov	r9, r3
 8007124:	688a      	ldr	r2, [r1, #8]
 8007126:	690b      	ldr	r3, [r1, #16]
 8007128:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800712c:	4293      	cmp	r3, r2
 800712e:	bfb8      	it	lt
 8007130:	4613      	movlt	r3, r2
 8007132:	6033      	str	r3, [r6, #0]
 8007134:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007138:	4607      	mov	r7, r0
 800713a:	460c      	mov	r4, r1
 800713c:	b10a      	cbz	r2, 8007142 <_printf_common+0x26>
 800713e:	3301      	adds	r3, #1
 8007140:	6033      	str	r3, [r6, #0]
 8007142:	6823      	ldr	r3, [r4, #0]
 8007144:	0699      	lsls	r1, r3, #26
 8007146:	bf42      	ittt	mi
 8007148:	6833      	ldrmi	r3, [r6, #0]
 800714a:	3302      	addmi	r3, #2
 800714c:	6033      	strmi	r3, [r6, #0]
 800714e:	6825      	ldr	r5, [r4, #0]
 8007150:	f015 0506 	ands.w	r5, r5, #6
 8007154:	d106      	bne.n	8007164 <_printf_common+0x48>
 8007156:	f104 0a19 	add.w	sl, r4, #25
 800715a:	68e3      	ldr	r3, [r4, #12]
 800715c:	6832      	ldr	r2, [r6, #0]
 800715e:	1a9b      	subs	r3, r3, r2
 8007160:	42ab      	cmp	r3, r5
 8007162:	dc26      	bgt.n	80071b2 <_printf_common+0x96>
 8007164:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007168:	1e13      	subs	r3, r2, #0
 800716a:	6822      	ldr	r2, [r4, #0]
 800716c:	bf18      	it	ne
 800716e:	2301      	movne	r3, #1
 8007170:	0692      	lsls	r2, r2, #26
 8007172:	d42b      	bmi.n	80071cc <_printf_common+0xb0>
 8007174:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007178:	4649      	mov	r1, r9
 800717a:	4638      	mov	r0, r7
 800717c:	47c0      	blx	r8
 800717e:	3001      	adds	r0, #1
 8007180:	d01e      	beq.n	80071c0 <_printf_common+0xa4>
 8007182:	6823      	ldr	r3, [r4, #0]
 8007184:	68e5      	ldr	r5, [r4, #12]
 8007186:	6832      	ldr	r2, [r6, #0]
 8007188:	f003 0306 	and.w	r3, r3, #6
 800718c:	2b04      	cmp	r3, #4
 800718e:	bf08      	it	eq
 8007190:	1aad      	subeq	r5, r5, r2
 8007192:	68a3      	ldr	r3, [r4, #8]
 8007194:	6922      	ldr	r2, [r4, #16]
 8007196:	bf0c      	ite	eq
 8007198:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800719c:	2500      	movne	r5, #0
 800719e:	4293      	cmp	r3, r2
 80071a0:	bfc4      	itt	gt
 80071a2:	1a9b      	subgt	r3, r3, r2
 80071a4:	18ed      	addgt	r5, r5, r3
 80071a6:	2600      	movs	r6, #0
 80071a8:	341a      	adds	r4, #26
 80071aa:	42b5      	cmp	r5, r6
 80071ac:	d11a      	bne.n	80071e4 <_printf_common+0xc8>
 80071ae:	2000      	movs	r0, #0
 80071b0:	e008      	b.n	80071c4 <_printf_common+0xa8>
 80071b2:	2301      	movs	r3, #1
 80071b4:	4652      	mov	r2, sl
 80071b6:	4649      	mov	r1, r9
 80071b8:	4638      	mov	r0, r7
 80071ba:	47c0      	blx	r8
 80071bc:	3001      	adds	r0, #1
 80071be:	d103      	bne.n	80071c8 <_printf_common+0xac>
 80071c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80071c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80071c8:	3501      	adds	r5, #1
 80071ca:	e7c6      	b.n	800715a <_printf_common+0x3e>
 80071cc:	18e1      	adds	r1, r4, r3
 80071ce:	1c5a      	adds	r2, r3, #1
 80071d0:	2030      	movs	r0, #48	; 0x30
 80071d2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80071d6:	4422      	add	r2, r4
 80071d8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80071dc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80071e0:	3302      	adds	r3, #2
 80071e2:	e7c7      	b.n	8007174 <_printf_common+0x58>
 80071e4:	2301      	movs	r3, #1
 80071e6:	4622      	mov	r2, r4
 80071e8:	4649      	mov	r1, r9
 80071ea:	4638      	mov	r0, r7
 80071ec:	47c0      	blx	r8
 80071ee:	3001      	adds	r0, #1
 80071f0:	d0e6      	beq.n	80071c0 <_printf_common+0xa4>
 80071f2:	3601      	adds	r6, #1
 80071f4:	e7d9      	b.n	80071aa <_printf_common+0x8e>
	...

080071f8 <_printf_i>:
 80071f8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80071fc:	7e0f      	ldrb	r7, [r1, #24]
 80071fe:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007200:	2f78      	cmp	r7, #120	; 0x78
 8007202:	4691      	mov	r9, r2
 8007204:	4680      	mov	r8, r0
 8007206:	460c      	mov	r4, r1
 8007208:	469a      	mov	sl, r3
 800720a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800720e:	d807      	bhi.n	8007220 <_printf_i+0x28>
 8007210:	2f62      	cmp	r7, #98	; 0x62
 8007212:	d80a      	bhi.n	800722a <_printf_i+0x32>
 8007214:	2f00      	cmp	r7, #0
 8007216:	f000 80d8 	beq.w	80073ca <_printf_i+0x1d2>
 800721a:	2f58      	cmp	r7, #88	; 0x58
 800721c:	f000 80a3 	beq.w	8007366 <_printf_i+0x16e>
 8007220:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007224:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007228:	e03a      	b.n	80072a0 <_printf_i+0xa8>
 800722a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800722e:	2b15      	cmp	r3, #21
 8007230:	d8f6      	bhi.n	8007220 <_printf_i+0x28>
 8007232:	a101      	add	r1, pc, #4	; (adr r1, 8007238 <_printf_i+0x40>)
 8007234:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007238:	08007291 	.word	0x08007291
 800723c:	080072a5 	.word	0x080072a5
 8007240:	08007221 	.word	0x08007221
 8007244:	08007221 	.word	0x08007221
 8007248:	08007221 	.word	0x08007221
 800724c:	08007221 	.word	0x08007221
 8007250:	080072a5 	.word	0x080072a5
 8007254:	08007221 	.word	0x08007221
 8007258:	08007221 	.word	0x08007221
 800725c:	08007221 	.word	0x08007221
 8007260:	08007221 	.word	0x08007221
 8007264:	080073b1 	.word	0x080073b1
 8007268:	080072d5 	.word	0x080072d5
 800726c:	08007393 	.word	0x08007393
 8007270:	08007221 	.word	0x08007221
 8007274:	08007221 	.word	0x08007221
 8007278:	080073d3 	.word	0x080073d3
 800727c:	08007221 	.word	0x08007221
 8007280:	080072d5 	.word	0x080072d5
 8007284:	08007221 	.word	0x08007221
 8007288:	08007221 	.word	0x08007221
 800728c:	0800739b 	.word	0x0800739b
 8007290:	682b      	ldr	r3, [r5, #0]
 8007292:	1d1a      	adds	r2, r3, #4
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	602a      	str	r2, [r5, #0]
 8007298:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800729c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80072a0:	2301      	movs	r3, #1
 80072a2:	e0a3      	b.n	80073ec <_printf_i+0x1f4>
 80072a4:	6820      	ldr	r0, [r4, #0]
 80072a6:	6829      	ldr	r1, [r5, #0]
 80072a8:	0606      	lsls	r6, r0, #24
 80072aa:	f101 0304 	add.w	r3, r1, #4
 80072ae:	d50a      	bpl.n	80072c6 <_printf_i+0xce>
 80072b0:	680e      	ldr	r6, [r1, #0]
 80072b2:	602b      	str	r3, [r5, #0]
 80072b4:	2e00      	cmp	r6, #0
 80072b6:	da03      	bge.n	80072c0 <_printf_i+0xc8>
 80072b8:	232d      	movs	r3, #45	; 0x2d
 80072ba:	4276      	negs	r6, r6
 80072bc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80072c0:	485e      	ldr	r0, [pc, #376]	; (800743c <_printf_i+0x244>)
 80072c2:	230a      	movs	r3, #10
 80072c4:	e019      	b.n	80072fa <_printf_i+0x102>
 80072c6:	680e      	ldr	r6, [r1, #0]
 80072c8:	602b      	str	r3, [r5, #0]
 80072ca:	f010 0f40 	tst.w	r0, #64	; 0x40
 80072ce:	bf18      	it	ne
 80072d0:	b236      	sxthne	r6, r6
 80072d2:	e7ef      	b.n	80072b4 <_printf_i+0xbc>
 80072d4:	682b      	ldr	r3, [r5, #0]
 80072d6:	6820      	ldr	r0, [r4, #0]
 80072d8:	1d19      	adds	r1, r3, #4
 80072da:	6029      	str	r1, [r5, #0]
 80072dc:	0601      	lsls	r1, r0, #24
 80072de:	d501      	bpl.n	80072e4 <_printf_i+0xec>
 80072e0:	681e      	ldr	r6, [r3, #0]
 80072e2:	e002      	b.n	80072ea <_printf_i+0xf2>
 80072e4:	0646      	lsls	r6, r0, #25
 80072e6:	d5fb      	bpl.n	80072e0 <_printf_i+0xe8>
 80072e8:	881e      	ldrh	r6, [r3, #0]
 80072ea:	4854      	ldr	r0, [pc, #336]	; (800743c <_printf_i+0x244>)
 80072ec:	2f6f      	cmp	r7, #111	; 0x6f
 80072ee:	bf0c      	ite	eq
 80072f0:	2308      	moveq	r3, #8
 80072f2:	230a      	movne	r3, #10
 80072f4:	2100      	movs	r1, #0
 80072f6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80072fa:	6865      	ldr	r5, [r4, #4]
 80072fc:	60a5      	str	r5, [r4, #8]
 80072fe:	2d00      	cmp	r5, #0
 8007300:	bfa2      	ittt	ge
 8007302:	6821      	ldrge	r1, [r4, #0]
 8007304:	f021 0104 	bicge.w	r1, r1, #4
 8007308:	6021      	strge	r1, [r4, #0]
 800730a:	b90e      	cbnz	r6, 8007310 <_printf_i+0x118>
 800730c:	2d00      	cmp	r5, #0
 800730e:	d04d      	beq.n	80073ac <_printf_i+0x1b4>
 8007310:	4615      	mov	r5, r2
 8007312:	fbb6 f1f3 	udiv	r1, r6, r3
 8007316:	fb03 6711 	mls	r7, r3, r1, r6
 800731a:	5dc7      	ldrb	r7, [r0, r7]
 800731c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007320:	4637      	mov	r7, r6
 8007322:	42bb      	cmp	r3, r7
 8007324:	460e      	mov	r6, r1
 8007326:	d9f4      	bls.n	8007312 <_printf_i+0x11a>
 8007328:	2b08      	cmp	r3, #8
 800732a:	d10b      	bne.n	8007344 <_printf_i+0x14c>
 800732c:	6823      	ldr	r3, [r4, #0]
 800732e:	07de      	lsls	r6, r3, #31
 8007330:	d508      	bpl.n	8007344 <_printf_i+0x14c>
 8007332:	6923      	ldr	r3, [r4, #16]
 8007334:	6861      	ldr	r1, [r4, #4]
 8007336:	4299      	cmp	r1, r3
 8007338:	bfde      	ittt	le
 800733a:	2330      	movle	r3, #48	; 0x30
 800733c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007340:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8007344:	1b52      	subs	r2, r2, r5
 8007346:	6122      	str	r2, [r4, #16]
 8007348:	f8cd a000 	str.w	sl, [sp]
 800734c:	464b      	mov	r3, r9
 800734e:	aa03      	add	r2, sp, #12
 8007350:	4621      	mov	r1, r4
 8007352:	4640      	mov	r0, r8
 8007354:	f7ff fee2 	bl	800711c <_printf_common>
 8007358:	3001      	adds	r0, #1
 800735a:	d14c      	bne.n	80073f6 <_printf_i+0x1fe>
 800735c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007360:	b004      	add	sp, #16
 8007362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007366:	4835      	ldr	r0, [pc, #212]	; (800743c <_printf_i+0x244>)
 8007368:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800736c:	6829      	ldr	r1, [r5, #0]
 800736e:	6823      	ldr	r3, [r4, #0]
 8007370:	f851 6b04 	ldr.w	r6, [r1], #4
 8007374:	6029      	str	r1, [r5, #0]
 8007376:	061d      	lsls	r5, r3, #24
 8007378:	d514      	bpl.n	80073a4 <_printf_i+0x1ac>
 800737a:	07df      	lsls	r7, r3, #31
 800737c:	bf44      	itt	mi
 800737e:	f043 0320 	orrmi.w	r3, r3, #32
 8007382:	6023      	strmi	r3, [r4, #0]
 8007384:	b91e      	cbnz	r6, 800738e <_printf_i+0x196>
 8007386:	6823      	ldr	r3, [r4, #0]
 8007388:	f023 0320 	bic.w	r3, r3, #32
 800738c:	6023      	str	r3, [r4, #0]
 800738e:	2310      	movs	r3, #16
 8007390:	e7b0      	b.n	80072f4 <_printf_i+0xfc>
 8007392:	6823      	ldr	r3, [r4, #0]
 8007394:	f043 0320 	orr.w	r3, r3, #32
 8007398:	6023      	str	r3, [r4, #0]
 800739a:	2378      	movs	r3, #120	; 0x78
 800739c:	4828      	ldr	r0, [pc, #160]	; (8007440 <_printf_i+0x248>)
 800739e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80073a2:	e7e3      	b.n	800736c <_printf_i+0x174>
 80073a4:	0659      	lsls	r1, r3, #25
 80073a6:	bf48      	it	mi
 80073a8:	b2b6      	uxthmi	r6, r6
 80073aa:	e7e6      	b.n	800737a <_printf_i+0x182>
 80073ac:	4615      	mov	r5, r2
 80073ae:	e7bb      	b.n	8007328 <_printf_i+0x130>
 80073b0:	682b      	ldr	r3, [r5, #0]
 80073b2:	6826      	ldr	r6, [r4, #0]
 80073b4:	6961      	ldr	r1, [r4, #20]
 80073b6:	1d18      	adds	r0, r3, #4
 80073b8:	6028      	str	r0, [r5, #0]
 80073ba:	0635      	lsls	r5, r6, #24
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	d501      	bpl.n	80073c4 <_printf_i+0x1cc>
 80073c0:	6019      	str	r1, [r3, #0]
 80073c2:	e002      	b.n	80073ca <_printf_i+0x1d2>
 80073c4:	0670      	lsls	r0, r6, #25
 80073c6:	d5fb      	bpl.n	80073c0 <_printf_i+0x1c8>
 80073c8:	8019      	strh	r1, [r3, #0]
 80073ca:	2300      	movs	r3, #0
 80073cc:	6123      	str	r3, [r4, #16]
 80073ce:	4615      	mov	r5, r2
 80073d0:	e7ba      	b.n	8007348 <_printf_i+0x150>
 80073d2:	682b      	ldr	r3, [r5, #0]
 80073d4:	1d1a      	adds	r2, r3, #4
 80073d6:	602a      	str	r2, [r5, #0]
 80073d8:	681d      	ldr	r5, [r3, #0]
 80073da:	6862      	ldr	r2, [r4, #4]
 80073dc:	2100      	movs	r1, #0
 80073de:	4628      	mov	r0, r5
 80073e0:	f7f8 ff46 	bl	8000270 <memchr>
 80073e4:	b108      	cbz	r0, 80073ea <_printf_i+0x1f2>
 80073e6:	1b40      	subs	r0, r0, r5
 80073e8:	6060      	str	r0, [r4, #4]
 80073ea:	6863      	ldr	r3, [r4, #4]
 80073ec:	6123      	str	r3, [r4, #16]
 80073ee:	2300      	movs	r3, #0
 80073f0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80073f4:	e7a8      	b.n	8007348 <_printf_i+0x150>
 80073f6:	6923      	ldr	r3, [r4, #16]
 80073f8:	462a      	mov	r2, r5
 80073fa:	4649      	mov	r1, r9
 80073fc:	4640      	mov	r0, r8
 80073fe:	47d0      	blx	sl
 8007400:	3001      	adds	r0, #1
 8007402:	d0ab      	beq.n	800735c <_printf_i+0x164>
 8007404:	6823      	ldr	r3, [r4, #0]
 8007406:	079b      	lsls	r3, r3, #30
 8007408:	d413      	bmi.n	8007432 <_printf_i+0x23a>
 800740a:	68e0      	ldr	r0, [r4, #12]
 800740c:	9b03      	ldr	r3, [sp, #12]
 800740e:	4298      	cmp	r0, r3
 8007410:	bfb8      	it	lt
 8007412:	4618      	movlt	r0, r3
 8007414:	e7a4      	b.n	8007360 <_printf_i+0x168>
 8007416:	2301      	movs	r3, #1
 8007418:	4632      	mov	r2, r6
 800741a:	4649      	mov	r1, r9
 800741c:	4640      	mov	r0, r8
 800741e:	47d0      	blx	sl
 8007420:	3001      	adds	r0, #1
 8007422:	d09b      	beq.n	800735c <_printf_i+0x164>
 8007424:	3501      	adds	r5, #1
 8007426:	68e3      	ldr	r3, [r4, #12]
 8007428:	9903      	ldr	r1, [sp, #12]
 800742a:	1a5b      	subs	r3, r3, r1
 800742c:	42ab      	cmp	r3, r5
 800742e:	dcf2      	bgt.n	8007416 <_printf_i+0x21e>
 8007430:	e7eb      	b.n	800740a <_printf_i+0x212>
 8007432:	2500      	movs	r5, #0
 8007434:	f104 0619 	add.w	r6, r4, #25
 8007438:	e7f5      	b.n	8007426 <_printf_i+0x22e>
 800743a:	bf00      	nop
 800743c:	080078a5 	.word	0x080078a5
 8007440:	080078b6 	.word	0x080078b6

08007444 <memmove>:
 8007444:	4288      	cmp	r0, r1
 8007446:	b510      	push	{r4, lr}
 8007448:	eb01 0402 	add.w	r4, r1, r2
 800744c:	d902      	bls.n	8007454 <memmove+0x10>
 800744e:	4284      	cmp	r4, r0
 8007450:	4623      	mov	r3, r4
 8007452:	d807      	bhi.n	8007464 <memmove+0x20>
 8007454:	1e43      	subs	r3, r0, #1
 8007456:	42a1      	cmp	r1, r4
 8007458:	d008      	beq.n	800746c <memmove+0x28>
 800745a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800745e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007462:	e7f8      	b.n	8007456 <memmove+0x12>
 8007464:	4402      	add	r2, r0
 8007466:	4601      	mov	r1, r0
 8007468:	428a      	cmp	r2, r1
 800746a:	d100      	bne.n	800746e <memmove+0x2a>
 800746c:	bd10      	pop	{r4, pc}
 800746e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007472:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007476:	e7f7      	b.n	8007468 <memmove+0x24>

08007478 <_free_r>:
 8007478:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800747a:	2900      	cmp	r1, #0
 800747c:	d044      	beq.n	8007508 <_free_r+0x90>
 800747e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007482:	9001      	str	r0, [sp, #4]
 8007484:	2b00      	cmp	r3, #0
 8007486:	f1a1 0404 	sub.w	r4, r1, #4
 800748a:	bfb8      	it	lt
 800748c:	18e4      	addlt	r4, r4, r3
 800748e:	f000 f913 	bl	80076b8 <__malloc_lock>
 8007492:	4a1e      	ldr	r2, [pc, #120]	; (800750c <_free_r+0x94>)
 8007494:	9801      	ldr	r0, [sp, #4]
 8007496:	6813      	ldr	r3, [r2, #0]
 8007498:	b933      	cbnz	r3, 80074a8 <_free_r+0x30>
 800749a:	6063      	str	r3, [r4, #4]
 800749c:	6014      	str	r4, [r2, #0]
 800749e:	b003      	add	sp, #12
 80074a0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80074a4:	f000 b90e 	b.w	80076c4 <__malloc_unlock>
 80074a8:	42a3      	cmp	r3, r4
 80074aa:	d908      	bls.n	80074be <_free_r+0x46>
 80074ac:	6825      	ldr	r5, [r4, #0]
 80074ae:	1961      	adds	r1, r4, r5
 80074b0:	428b      	cmp	r3, r1
 80074b2:	bf01      	itttt	eq
 80074b4:	6819      	ldreq	r1, [r3, #0]
 80074b6:	685b      	ldreq	r3, [r3, #4]
 80074b8:	1949      	addeq	r1, r1, r5
 80074ba:	6021      	streq	r1, [r4, #0]
 80074bc:	e7ed      	b.n	800749a <_free_r+0x22>
 80074be:	461a      	mov	r2, r3
 80074c0:	685b      	ldr	r3, [r3, #4]
 80074c2:	b10b      	cbz	r3, 80074c8 <_free_r+0x50>
 80074c4:	42a3      	cmp	r3, r4
 80074c6:	d9fa      	bls.n	80074be <_free_r+0x46>
 80074c8:	6811      	ldr	r1, [r2, #0]
 80074ca:	1855      	adds	r5, r2, r1
 80074cc:	42a5      	cmp	r5, r4
 80074ce:	d10b      	bne.n	80074e8 <_free_r+0x70>
 80074d0:	6824      	ldr	r4, [r4, #0]
 80074d2:	4421      	add	r1, r4
 80074d4:	1854      	adds	r4, r2, r1
 80074d6:	42a3      	cmp	r3, r4
 80074d8:	6011      	str	r1, [r2, #0]
 80074da:	d1e0      	bne.n	800749e <_free_r+0x26>
 80074dc:	681c      	ldr	r4, [r3, #0]
 80074de:	685b      	ldr	r3, [r3, #4]
 80074e0:	6053      	str	r3, [r2, #4]
 80074e2:	4421      	add	r1, r4
 80074e4:	6011      	str	r1, [r2, #0]
 80074e6:	e7da      	b.n	800749e <_free_r+0x26>
 80074e8:	d902      	bls.n	80074f0 <_free_r+0x78>
 80074ea:	230c      	movs	r3, #12
 80074ec:	6003      	str	r3, [r0, #0]
 80074ee:	e7d6      	b.n	800749e <_free_r+0x26>
 80074f0:	6825      	ldr	r5, [r4, #0]
 80074f2:	1961      	adds	r1, r4, r5
 80074f4:	428b      	cmp	r3, r1
 80074f6:	bf04      	itt	eq
 80074f8:	6819      	ldreq	r1, [r3, #0]
 80074fa:	685b      	ldreq	r3, [r3, #4]
 80074fc:	6063      	str	r3, [r4, #4]
 80074fe:	bf04      	itt	eq
 8007500:	1949      	addeq	r1, r1, r5
 8007502:	6021      	streq	r1, [r4, #0]
 8007504:	6054      	str	r4, [r2, #4]
 8007506:	e7ca      	b.n	800749e <_free_r+0x26>
 8007508:	b003      	add	sp, #12
 800750a:	bd30      	pop	{r4, r5, pc}
 800750c:	2000553c 	.word	0x2000553c

08007510 <sbrk_aligned>:
 8007510:	b570      	push	{r4, r5, r6, lr}
 8007512:	4e0e      	ldr	r6, [pc, #56]	; (800754c <sbrk_aligned+0x3c>)
 8007514:	460c      	mov	r4, r1
 8007516:	6831      	ldr	r1, [r6, #0]
 8007518:	4605      	mov	r5, r0
 800751a:	b911      	cbnz	r1, 8007522 <sbrk_aligned+0x12>
 800751c:	f000 f8bc 	bl	8007698 <_sbrk_r>
 8007520:	6030      	str	r0, [r6, #0]
 8007522:	4621      	mov	r1, r4
 8007524:	4628      	mov	r0, r5
 8007526:	f000 f8b7 	bl	8007698 <_sbrk_r>
 800752a:	1c43      	adds	r3, r0, #1
 800752c:	d00a      	beq.n	8007544 <sbrk_aligned+0x34>
 800752e:	1cc4      	adds	r4, r0, #3
 8007530:	f024 0403 	bic.w	r4, r4, #3
 8007534:	42a0      	cmp	r0, r4
 8007536:	d007      	beq.n	8007548 <sbrk_aligned+0x38>
 8007538:	1a21      	subs	r1, r4, r0
 800753a:	4628      	mov	r0, r5
 800753c:	f000 f8ac 	bl	8007698 <_sbrk_r>
 8007540:	3001      	adds	r0, #1
 8007542:	d101      	bne.n	8007548 <sbrk_aligned+0x38>
 8007544:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8007548:	4620      	mov	r0, r4
 800754a:	bd70      	pop	{r4, r5, r6, pc}
 800754c:	20005540 	.word	0x20005540

08007550 <_malloc_r>:
 8007550:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007554:	1ccd      	adds	r5, r1, #3
 8007556:	f025 0503 	bic.w	r5, r5, #3
 800755a:	3508      	adds	r5, #8
 800755c:	2d0c      	cmp	r5, #12
 800755e:	bf38      	it	cc
 8007560:	250c      	movcc	r5, #12
 8007562:	2d00      	cmp	r5, #0
 8007564:	4607      	mov	r7, r0
 8007566:	db01      	blt.n	800756c <_malloc_r+0x1c>
 8007568:	42a9      	cmp	r1, r5
 800756a:	d905      	bls.n	8007578 <_malloc_r+0x28>
 800756c:	230c      	movs	r3, #12
 800756e:	603b      	str	r3, [r7, #0]
 8007570:	2600      	movs	r6, #0
 8007572:	4630      	mov	r0, r6
 8007574:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007578:	4e2e      	ldr	r6, [pc, #184]	; (8007634 <_malloc_r+0xe4>)
 800757a:	f000 f89d 	bl	80076b8 <__malloc_lock>
 800757e:	6833      	ldr	r3, [r6, #0]
 8007580:	461c      	mov	r4, r3
 8007582:	bb34      	cbnz	r4, 80075d2 <_malloc_r+0x82>
 8007584:	4629      	mov	r1, r5
 8007586:	4638      	mov	r0, r7
 8007588:	f7ff ffc2 	bl	8007510 <sbrk_aligned>
 800758c:	1c43      	adds	r3, r0, #1
 800758e:	4604      	mov	r4, r0
 8007590:	d14d      	bne.n	800762e <_malloc_r+0xde>
 8007592:	6834      	ldr	r4, [r6, #0]
 8007594:	4626      	mov	r6, r4
 8007596:	2e00      	cmp	r6, #0
 8007598:	d140      	bne.n	800761c <_malloc_r+0xcc>
 800759a:	6823      	ldr	r3, [r4, #0]
 800759c:	4631      	mov	r1, r6
 800759e:	4638      	mov	r0, r7
 80075a0:	eb04 0803 	add.w	r8, r4, r3
 80075a4:	f000 f878 	bl	8007698 <_sbrk_r>
 80075a8:	4580      	cmp	r8, r0
 80075aa:	d13a      	bne.n	8007622 <_malloc_r+0xd2>
 80075ac:	6821      	ldr	r1, [r4, #0]
 80075ae:	3503      	adds	r5, #3
 80075b0:	1a6d      	subs	r5, r5, r1
 80075b2:	f025 0503 	bic.w	r5, r5, #3
 80075b6:	3508      	adds	r5, #8
 80075b8:	2d0c      	cmp	r5, #12
 80075ba:	bf38      	it	cc
 80075bc:	250c      	movcc	r5, #12
 80075be:	4629      	mov	r1, r5
 80075c0:	4638      	mov	r0, r7
 80075c2:	f7ff ffa5 	bl	8007510 <sbrk_aligned>
 80075c6:	3001      	adds	r0, #1
 80075c8:	d02b      	beq.n	8007622 <_malloc_r+0xd2>
 80075ca:	6823      	ldr	r3, [r4, #0]
 80075cc:	442b      	add	r3, r5
 80075ce:	6023      	str	r3, [r4, #0]
 80075d0:	e00e      	b.n	80075f0 <_malloc_r+0xa0>
 80075d2:	6822      	ldr	r2, [r4, #0]
 80075d4:	1b52      	subs	r2, r2, r5
 80075d6:	d41e      	bmi.n	8007616 <_malloc_r+0xc6>
 80075d8:	2a0b      	cmp	r2, #11
 80075da:	d916      	bls.n	800760a <_malloc_r+0xba>
 80075dc:	1961      	adds	r1, r4, r5
 80075de:	42a3      	cmp	r3, r4
 80075e0:	6025      	str	r5, [r4, #0]
 80075e2:	bf18      	it	ne
 80075e4:	6059      	strne	r1, [r3, #4]
 80075e6:	6863      	ldr	r3, [r4, #4]
 80075e8:	bf08      	it	eq
 80075ea:	6031      	streq	r1, [r6, #0]
 80075ec:	5162      	str	r2, [r4, r5]
 80075ee:	604b      	str	r3, [r1, #4]
 80075f0:	4638      	mov	r0, r7
 80075f2:	f104 060b 	add.w	r6, r4, #11
 80075f6:	f000 f865 	bl	80076c4 <__malloc_unlock>
 80075fa:	f026 0607 	bic.w	r6, r6, #7
 80075fe:	1d23      	adds	r3, r4, #4
 8007600:	1af2      	subs	r2, r6, r3
 8007602:	d0b6      	beq.n	8007572 <_malloc_r+0x22>
 8007604:	1b9b      	subs	r3, r3, r6
 8007606:	50a3      	str	r3, [r4, r2]
 8007608:	e7b3      	b.n	8007572 <_malloc_r+0x22>
 800760a:	6862      	ldr	r2, [r4, #4]
 800760c:	42a3      	cmp	r3, r4
 800760e:	bf0c      	ite	eq
 8007610:	6032      	streq	r2, [r6, #0]
 8007612:	605a      	strne	r2, [r3, #4]
 8007614:	e7ec      	b.n	80075f0 <_malloc_r+0xa0>
 8007616:	4623      	mov	r3, r4
 8007618:	6864      	ldr	r4, [r4, #4]
 800761a:	e7b2      	b.n	8007582 <_malloc_r+0x32>
 800761c:	4634      	mov	r4, r6
 800761e:	6876      	ldr	r6, [r6, #4]
 8007620:	e7b9      	b.n	8007596 <_malloc_r+0x46>
 8007622:	230c      	movs	r3, #12
 8007624:	603b      	str	r3, [r7, #0]
 8007626:	4638      	mov	r0, r7
 8007628:	f000 f84c 	bl	80076c4 <__malloc_unlock>
 800762c:	e7a1      	b.n	8007572 <_malloc_r+0x22>
 800762e:	6025      	str	r5, [r4, #0]
 8007630:	e7de      	b.n	80075f0 <_malloc_r+0xa0>
 8007632:	bf00      	nop
 8007634:	2000553c 	.word	0x2000553c

08007638 <_realloc_r>:
 8007638:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800763c:	4680      	mov	r8, r0
 800763e:	4614      	mov	r4, r2
 8007640:	460e      	mov	r6, r1
 8007642:	b921      	cbnz	r1, 800764e <_realloc_r+0x16>
 8007644:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007648:	4611      	mov	r1, r2
 800764a:	f7ff bf81 	b.w	8007550 <_malloc_r>
 800764e:	b92a      	cbnz	r2, 800765c <_realloc_r+0x24>
 8007650:	f7ff ff12 	bl	8007478 <_free_r>
 8007654:	4625      	mov	r5, r4
 8007656:	4628      	mov	r0, r5
 8007658:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800765c:	f000 f838 	bl	80076d0 <_malloc_usable_size_r>
 8007660:	4284      	cmp	r4, r0
 8007662:	4607      	mov	r7, r0
 8007664:	d802      	bhi.n	800766c <_realloc_r+0x34>
 8007666:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800766a:	d812      	bhi.n	8007692 <_realloc_r+0x5a>
 800766c:	4621      	mov	r1, r4
 800766e:	4640      	mov	r0, r8
 8007670:	f7ff ff6e 	bl	8007550 <_malloc_r>
 8007674:	4605      	mov	r5, r0
 8007676:	2800      	cmp	r0, #0
 8007678:	d0ed      	beq.n	8007656 <_realloc_r+0x1e>
 800767a:	42bc      	cmp	r4, r7
 800767c:	4622      	mov	r2, r4
 800767e:	4631      	mov	r1, r6
 8007680:	bf28      	it	cs
 8007682:	463a      	movcs	r2, r7
 8007684:	f7ff fba4 	bl	8006dd0 <memcpy>
 8007688:	4631      	mov	r1, r6
 800768a:	4640      	mov	r0, r8
 800768c:	f7ff fef4 	bl	8007478 <_free_r>
 8007690:	e7e1      	b.n	8007656 <_realloc_r+0x1e>
 8007692:	4635      	mov	r5, r6
 8007694:	e7df      	b.n	8007656 <_realloc_r+0x1e>
	...

08007698 <_sbrk_r>:
 8007698:	b538      	push	{r3, r4, r5, lr}
 800769a:	4d06      	ldr	r5, [pc, #24]	; (80076b4 <_sbrk_r+0x1c>)
 800769c:	2300      	movs	r3, #0
 800769e:	4604      	mov	r4, r0
 80076a0:	4608      	mov	r0, r1
 80076a2:	602b      	str	r3, [r5, #0]
 80076a4:	f000 f81e 	bl	80076e4 <_sbrk>
 80076a8:	1c43      	adds	r3, r0, #1
 80076aa:	d102      	bne.n	80076b2 <_sbrk_r+0x1a>
 80076ac:	682b      	ldr	r3, [r5, #0]
 80076ae:	b103      	cbz	r3, 80076b2 <_sbrk_r+0x1a>
 80076b0:	6023      	str	r3, [r4, #0]
 80076b2:	bd38      	pop	{r3, r4, r5, pc}
 80076b4:	20005544 	.word	0x20005544

080076b8 <__malloc_lock>:
 80076b8:	4801      	ldr	r0, [pc, #4]	; (80076c0 <__malloc_lock+0x8>)
 80076ba:	f000 b811 	b.w	80076e0 <__retarget_lock_acquire_recursive>
 80076be:	bf00      	nop
 80076c0:	20005548 	.word	0x20005548

080076c4 <__malloc_unlock>:
 80076c4:	4801      	ldr	r0, [pc, #4]	; (80076cc <__malloc_unlock+0x8>)
 80076c6:	f000 b80c 	b.w	80076e2 <__retarget_lock_release_recursive>
 80076ca:	bf00      	nop
 80076cc:	20005548 	.word	0x20005548

080076d0 <_malloc_usable_size_r>:
 80076d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80076d4:	1f18      	subs	r0, r3, #4
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	bfbc      	itt	lt
 80076da:	580b      	ldrlt	r3, [r1, r0]
 80076dc:	18c0      	addlt	r0, r0, r3
 80076de:	4770      	bx	lr

080076e0 <__retarget_lock_acquire_recursive>:
 80076e0:	4770      	bx	lr

080076e2 <__retarget_lock_release_recursive>:
 80076e2:	4770      	bx	lr

080076e4 <_sbrk>:
 80076e4:	4a04      	ldr	r2, [pc, #16]	; (80076f8 <_sbrk+0x14>)
 80076e6:	6811      	ldr	r1, [r2, #0]
 80076e8:	4603      	mov	r3, r0
 80076ea:	b909      	cbnz	r1, 80076f0 <_sbrk+0xc>
 80076ec:	4903      	ldr	r1, [pc, #12]	; (80076fc <_sbrk+0x18>)
 80076ee:	6011      	str	r1, [r2, #0]
 80076f0:	6810      	ldr	r0, [r2, #0]
 80076f2:	4403      	add	r3, r0
 80076f4:	6013      	str	r3, [r2, #0]
 80076f6:	4770      	bx	lr
 80076f8:	2000554c 	.word	0x2000554c
 80076fc:	20005550 	.word	0x20005550

08007700 <_init>:
 8007700:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007702:	bf00      	nop
 8007704:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007706:	bc08      	pop	{r3}
 8007708:	469e      	mov	lr, r3
 800770a:	4770      	bx	lr

0800770c <_fini>:
 800770c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800770e:	bf00      	nop
 8007710:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007712:	bc08      	pop	{r3}
 8007714:	469e      	mov	lr, r3
 8007716:	4770      	bx	lr
