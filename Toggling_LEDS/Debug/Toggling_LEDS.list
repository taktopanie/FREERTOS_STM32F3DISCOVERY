
Toggling_LEDS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006604  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000188  08006794  08006794  00016794  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800691c  0800691c  00020014  2**0
                  CONTENTS
  4 .ARM          00000000  0800691c  0800691c  00020014  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800691c  0800691c  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800691c  0800691c  0001691c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006920  08006920  00016920  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08006924  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020014  2**0
                  CONTENTS
 10 .bss          000084c4  20000014  20000014  00020014  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200084d8  200084d8  00020014  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY
 14 .debug_info   00013d48  00000000  00000000  00020087  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00002ed2  00000000  00000000  00033dcf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001330  00000000  00000000  00036ca8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000ec1  00000000  00000000  00037fd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00020189  00000000  00000000  00038e99  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00015a57  00000000  00000000  00059022  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000c1925  00000000  00000000  0006ea79  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  0000502c  00000000  00000000  001303a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 000000f2  00000000  00000000  001353cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000014 	.word	0x20000014
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800677c 	.word	0x0800677c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000018 	.word	0x20000018
 80001cc:	0800677c 	.word	0x0800677c

080001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001d0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001d2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001d6:	f8df 0088 	ldr.w	r0, [pc, #136]	; 8000260 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001da:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001de:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 80001e2:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 80001e4:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 80001e6:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 80001e8:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 80001ea:	d332      	bcc.n	8000252 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 80001ec:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 80001ee:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 80001f0:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 80001f2:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 80001f4:	d314      	bcc.n	8000220 <_CheckCase2>

080001f6 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 80001f6:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 80001f8:	19d0      	adds	r0, r2, r7
 80001fa:	bf00      	nop

080001fc <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 80001fc:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000200:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000204:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000206:	d005      	beq.n	8000214 <_CSDone>
        LDRB     R3,[R1], #+1
 8000208:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800020c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000210:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000212:	d1f3      	bne.n	80001fc <_LoopCopyStraight>

08000214 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000214:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000218:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800021a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800021c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800021e:	4770      	bx	lr

08000220 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000220:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000222:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000224:	d319      	bcc.n	800025a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000226:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000228:	1b12      	subs	r2, r2, r4

0800022a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800022a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800022e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000232:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000234:	d1f9      	bne.n	800022a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000236:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000238:	d005      	beq.n	8000246 <_No2ChunkNeeded>

0800023a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800023a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800023e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000242:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000244:	d1f9      	bne.n	800023a <_LoopCopyAfterWrapAround>

08000246 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000246:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800024a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800024c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800024e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000250:	4770      	bx	lr

08000252 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000252:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000254:	3801      	subs	r0, #1
        CMP      R0,R2
 8000256:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000258:	d2cd      	bcs.n	80001f6 <_Case4>

0800025a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800025a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800025c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800025e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000260:	20003f04 	.word	0x20003f04

08000264 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000264:	b580      	push	{r7, lr}
 8000266:	b08a      	sub	sp, #40	; 0x28
 8000268:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800026a:	f000 faad 	bl	80007c8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800026e:	f000 f873 	bl	8000358 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000272:	f000 f8b3 	bl	80003dc <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  DWT_CTRL |= (1 << 0);
 8000276:	4b2e      	ldr	r3, [pc, #184]	; (8000330 <main+0xcc>)
 8000278:	681b      	ldr	r3, [r3, #0]
 800027a:	4a2d      	ldr	r2, [pc, #180]	; (8000330 <main+0xcc>)
 800027c:	f043 0301 	orr.w	r3, r3, #1
 8000280:	6013      	str	r3, [r2, #0]


  SEGGER_SYSVIEW_Conf();
 8000282:	f004 fd95 	bl	8004db0 <SEGGER_SYSVIEW_Conf>

  SEGGER_SYSVIEW_Start();
 8000286:	f005 fcc3 	bl	8005c10 <SEGGER_SYSVIEW_Start>

  Status = xTaskCreate(toggle_LED1_handler, "Toggle LED 1", configMINIMAL_STACK_SIZE, "LED 1 toggled", 2, &toggle_LED1_handle );
 800028a:	f107 030c 	add.w	r3, r7, #12
 800028e:	9301      	str	r3, [sp, #4]
 8000290:	2302      	movs	r3, #2
 8000292:	9300      	str	r3, [sp, #0]
 8000294:	4b27      	ldr	r3, [pc, #156]	; (8000334 <main+0xd0>)
 8000296:	f44f 7280 	mov.w	r2, #256	; 0x100
 800029a:	4927      	ldr	r1, [pc, #156]	; (8000338 <main+0xd4>)
 800029c:	4827      	ldr	r0, [pc, #156]	; (800033c <main+0xd8>)
 800029e:	f002 fe5d 	bl	8002f5c <xTaskCreate>
 80002a2:	61f8      	str	r0, [r7, #28]
  configASSERT(Status == pdPASS);
 80002a4:	69fb      	ldr	r3, [r7, #28]
 80002a6:	2b01      	cmp	r3, #1
 80002a8:	d00a      	beq.n	80002c0 <main+0x5c>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 80002aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80002ae:	f383 8811 	msr	BASEPRI, r3
 80002b2:	f3bf 8f6f 	isb	sy
 80002b6:	f3bf 8f4f 	dsb	sy
 80002ba:	61bb      	str	r3, [r7, #24]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 80002bc:	bf00      	nop
 80002be:	e7fe      	b.n	80002be <main+0x5a>

  Status = xTaskCreate(toggle_LED2_handler, "Toggle LED 2", configMINIMAL_STACK_SIZE, "LED 2 toggled", 2, &toggle_LED2_handle );
 80002c0:	f107 0308 	add.w	r3, r7, #8
 80002c4:	9301      	str	r3, [sp, #4]
 80002c6:	2302      	movs	r3, #2
 80002c8:	9300      	str	r3, [sp, #0]
 80002ca:	4b1d      	ldr	r3, [pc, #116]	; (8000340 <main+0xdc>)
 80002cc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80002d0:	491c      	ldr	r1, [pc, #112]	; (8000344 <main+0xe0>)
 80002d2:	481d      	ldr	r0, [pc, #116]	; (8000348 <main+0xe4>)
 80002d4:	f002 fe42 	bl	8002f5c <xTaskCreate>
 80002d8:	61f8      	str	r0, [r7, #28]
  configASSERT(Status == pdPASS);
 80002da:	69fb      	ldr	r3, [r7, #28]
 80002dc:	2b01      	cmp	r3, #1
 80002de:	d00a      	beq.n	80002f6 <main+0x92>
        __asm volatile
 80002e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80002e4:	f383 8811 	msr	BASEPRI, r3
 80002e8:	f3bf 8f6f 	isb	sy
 80002ec:	f3bf 8f4f 	dsb	sy
 80002f0:	617b      	str	r3, [r7, #20]
    }
 80002f2:	bf00      	nop
 80002f4:	e7fe      	b.n	80002f4 <main+0x90>

  Status = xTaskCreate(toggle_LED3_handler, "Toggle LED 3", configMINIMAL_STACK_SIZE, "LED 3 toggled", 2, &toggle_LED3_handle );
 80002f6:	1d3b      	adds	r3, r7, #4
 80002f8:	9301      	str	r3, [sp, #4]
 80002fa:	2302      	movs	r3, #2
 80002fc:	9300      	str	r3, [sp, #0]
 80002fe:	4b13      	ldr	r3, [pc, #76]	; (800034c <main+0xe8>)
 8000300:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000304:	4912      	ldr	r1, [pc, #72]	; (8000350 <main+0xec>)
 8000306:	4813      	ldr	r0, [pc, #76]	; (8000354 <main+0xf0>)
 8000308:	f002 fe28 	bl	8002f5c <xTaskCreate>
 800030c:	61f8      	str	r0, [r7, #28]
  configASSERT(Status == pdPASS);
 800030e:	69fb      	ldr	r3, [r7, #28]
 8000310:	2b01      	cmp	r3, #1
 8000312:	d00a      	beq.n	800032a <main+0xc6>
        __asm volatile
 8000314:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000318:	f383 8811 	msr	BASEPRI, r3
 800031c:	f3bf 8f6f 	isb	sy
 8000320:	f3bf 8f4f 	dsb	sy
 8000324:	613b      	str	r3, [r7, #16]
    }
 8000326:	bf00      	nop
 8000328:	e7fe      	b.n	8000328 <main+0xc4>
//  configASSERT(Status == pdPASS);



  //START SCHEDULER
  vTaskStartScheduler();
 800032a:	f002 ffd7 	bl	80032dc <vTaskStartScheduler>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800032e:	e7fe      	b.n	800032e <main+0xca>
 8000330:	e0001000 	.word	0xe0001000
 8000334:	08006794 	.word	0x08006794
 8000338:	080067a4 	.word	0x080067a4
 800033c:	08000545 	.word	0x08000545
 8000340:	080067b4 	.word	0x080067b4
 8000344:	080067c4 	.word	0x080067c4
 8000348:	08000565 	.word	0x08000565
 800034c:	080067d4 	.word	0x080067d4
 8000350:	080067e4 	.word	0x080067e4
 8000354:	08000585 	.word	0x08000585

08000358 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000358:	b580      	push	{r7, lr}
 800035a:	b090      	sub	sp, #64	; 0x40
 800035c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800035e:	f107 0318 	add.w	r3, r7, #24
 8000362:	2228      	movs	r2, #40	; 0x28
 8000364:	2100      	movs	r1, #0
 8000366:	4618      	mov	r0, r3
 8000368:	f006 f9ce 	bl	8006708 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800036c:	1d3b      	adds	r3, r7, #4
 800036e:	2200      	movs	r2, #0
 8000370:	601a      	str	r2, [r3, #0]
 8000372:	605a      	str	r2, [r3, #4]
 8000374:	609a      	str	r2, [r3, #8]
 8000376:	60da      	str	r2, [r3, #12]
 8000378:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800037a:	2302      	movs	r3, #2
 800037c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800037e:	2301      	movs	r3, #1
 8000380:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000382:	2310      	movs	r3, #16
 8000384:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000386:	2302      	movs	r3, #2
 8000388:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800038a:	2300      	movs	r3, #0
 800038c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 800038e:	f44f 1320 	mov.w	r3, #2621440	; 0x280000
 8000392:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000394:	f107 0318 	add.w	r3, r7, #24
 8000398:	4618      	mov	r0, r3
 800039a:	f000 fcd9 	bl	8000d50 <HAL_RCC_OscConfig>
 800039e:	4603      	mov	r3, r0
 80003a0:	2b00      	cmp	r3, #0
 80003a2:	d001      	beq.n	80003a8 <SystemClock_Config+0x50>
  {
    Error_Handler();
 80003a4:	f000 f910 	bl	80005c8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003a8:	230f      	movs	r3, #15
 80003aa:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80003ac:	2302      	movs	r3, #2
 80003ae:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003b0:	2300      	movs	r3, #0
 80003b2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80003b4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80003b8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80003ba:	2300      	movs	r3, #0
 80003bc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80003be:	1d3b      	adds	r3, r7, #4
 80003c0:	2101      	movs	r1, #1
 80003c2:	4618      	mov	r0, r3
 80003c4:	f001 fd02 	bl	8001dcc <HAL_RCC_ClockConfig>
 80003c8:	4603      	mov	r3, r0
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d001      	beq.n	80003d2 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 80003ce:	f000 f8fb 	bl	80005c8 <Error_Handler>
  }
}
 80003d2:	bf00      	nop
 80003d4:	3740      	adds	r7, #64	; 0x40
 80003d6:	46bd      	mov	sp, r7
 80003d8:	bd80      	pop	{r7, pc}
	...

080003dc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003dc:	b580      	push	{r7, lr}
 80003de:	b08a      	sub	sp, #40	; 0x28
 80003e0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003e2:	f107 0314 	add.w	r3, r7, #20
 80003e6:	2200      	movs	r2, #0
 80003e8:	601a      	str	r2, [r3, #0]
 80003ea:	605a      	str	r2, [r3, #4]
 80003ec:	609a      	str	r2, [r3, #8]
 80003ee:	60da      	str	r2, [r3, #12]
 80003f0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80003f2:	4b51      	ldr	r3, [pc, #324]	; (8000538 <MX_GPIO_Init+0x15c>)
 80003f4:	695b      	ldr	r3, [r3, #20]
 80003f6:	4a50      	ldr	r2, [pc, #320]	; (8000538 <MX_GPIO_Init+0x15c>)
 80003f8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80003fc:	6153      	str	r3, [r2, #20]
 80003fe:	4b4e      	ldr	r3, [pc, #312]	; (8000538 <MX_GPIO_Init+0x15c>)
 8000400:	695b      	ldr	r3, [r3, #20]
 8000402:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000406:	613b      	str	r3, [r7, #16]
 8000408:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800040a:	4b4b      	ldr	r3, [pc, #300]	; (8000538 <MX_GPIO_Init+0x15c>)
 800040c:	695b      	ldr	r3, [r3, #20]
 800040e:	4a4a      	ldr	r2, [pc, #296]	; (8000538 <MX_GPIO_Init+0x15c>)
 8000410:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000414:	6153      	str	r3, [r2, #20]
 8000416:	4b48      	ldr	r3, [pc, #288]	; (8000538 <MX_GPIO_Init+0x15c>)
 8000418:	695b      	ldr	r3, [r3, #20]
 800041a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800041e:	60fb      	str	r3, [r7, #12]
 8000420:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000422:	4b45      	ldr	r3, [pc, #276]	; (8000538 <MX_GPIO_Init+0x15c>)
 8000424:	695b      	ldr	r3, [r3, #20]
 8000426:	4a44      	ldr	r2, [pc, #272]	; (8000538 <MX_GPIO_Init+0x15c>)
 8000428:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800042c:	6153      	str	r3, [r2, #20]
 800042e:	4b42      	ldr	r3, [pc, #264]	; (8000538 <MX_GPIO_Init+0x15c>)
 8000430:	695b      	ldr	r3, [r3, #20]
 8000432:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000436:	60bb      	str	r3, [r7, #8]
 8000438:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800043a:	4b3f      	ldr	r3, [pc, #252]	; (8000538 <MX_GPIO_Init+0x15c>)
 800043c:	695b      	ldr	r3, [r3, #20]
 800043e:	4a3e      	ldr	r2, [pc, #248]	; (8000538 <MX_GPIO_Init+0x15c>)
 8000440:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000444:	6153      	str	r3, [r2, #20]
 8000446:	4b3c      	ldr	r3, [pc, #240]	; (8000538 <MX_GPIO_Init+0x15c>)
 8000448:	695b      	ldr	r3, [r3, #20]
 800044a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800044e:	607b      	str	r3, [r7, #4]
 8000450:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000452:	4b39      	ldr	r3, [pc, #228]	; (8000538 <MX_GPIO_Init+0x15c>)
 8000454:	695b      	ldr	r3, [r3, #20]
 8000456:	4a38      	ldr	r2, [pc, #224]	; (8000538 <MX_GPIO_Init+0x15c>)
 8000458:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800045c:	6153      	str	r3, [r2, #20]
 800045e:	4b36      	ldr	r3, [pc, #216]	; (8000538 <MX_GPIO_Init+0x15c>)
 8000460:	695b      	ldr	r3, [r3, #20]
 8000462:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000466:	603b      	str	r3, [r7, #0]
 8000468:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 800046a:	2200      	movs	r2, #0
 800046c:	f64f 7108 	movw	r1, #65288	; 0xff08
 8000470:	4832      	ldr	r0, [pc, #200]	; (800053c <MX_GPIO_Init+0x160>)
 8000472:	f000 fc3b 	bl	8000cec <HAL_GPIO_WritePin>
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : DRDY_Pin MEMS_INT3_Pin MEMS_INT4_Pin MEMS_INT1_Pin
                           MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = DRDY_Pin|MEMS_INT3_Pin|MEMS_INT4_Pin|MEMS_INT1_Pin
 8000476:	2337      	movs	r3, #55	; 0x37
 8000478:	617b      	str	r3, [r7, #20]
                          |MEMS_INT2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800047a:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 800047e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000480:	2300      	movs	r3, #0
 8000482:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000484:	f107 0314 	add.w	r3, r7, #20
 8000488:	4619      	mov	r1, r3
 800048a:	482c      	ldr	r0, [pc, #176]	; (800053c <MX_GPIO_Init+0x160>)
 800048c:	f000 fab4 	bl	80009f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_I2C_SPI_Pin LD4_Pin LD3_Pin LD5_Pin
                           LD7_Pin LD9_Pin LD10_Pin LD8_Pin
                           LD6_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 8000490:	f64f 7308 	movw	r3, #65288	; 0xff08
 8000494:	617b      	str	r3, [r7, #20]
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000496:	2301      	movs	r3, #1
 8000498:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800049a:	2300      	movs	r3, #0
 800049c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800049e:	2300      	movs	r3, #0
 80004a0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80004a2:	f107 0314 	add.w	r3, r7, #20
 80004a6:	4619      	mov	r1, r3
 80004a8:	4824      	ldr	r0, [pc, #144]	; (800053c <MX_GPIO_Init+0x160>)
 80004aa:	f000 faa5 	bl	80009f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80004ae:	2301      	movs	r3, #1
 80004b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80004b2:	2300      	movs	r3, #0
 80004b4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004b6:	2300      	movs	r3, #0
 80004b8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80004ba:	f107 0314 	add.w	r3, r7, #20
 80004be:	4619      	mov	r1, r3
 80004c0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80004c4:	f000 fa98 	bl	80009f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MISOA7_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MISOA7_Pin;
 80004c8:	23e0      	movs	r3, #224	; 0xe0
 80004ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80004cc:	2302      	movs	r3, #2
 80004ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004d0:	2300      	movs	r3, #0
 80004d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004d4:	2300      	movs	r3, #0
 80004d6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80004d8:	2305      	movs	r3, #5
 80004da:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004dc:	f107 0314 	add.w	r3, r7, #20
 80004e0:	4619      	mov	r1, r3
 80004e2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80004e6:	f000 fa87 	bl	80009f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : DM_Pin DP_Pin */
  GPIO_InitStruct.Pin = DM_Pin|DP_Pin;
 80004ea:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80004ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80004f0:	2302      	movs	r3, #2
 80004f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004f4:	2300      	movs	r3, #0
 80004f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80004f8:	2303      	movs	r3, #3
 80004fa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 80004fc:	230e      	movs	r3, #14
 80004fe:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000500:	f107 0314 	add.w	r3, r7, #20
 8000504:	4619      	mov	r1, r3
 8000506:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800050a:	f000 fa75 	bl	80009f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2C1_SCL_Pin I2C1_SDA_Pin */
  GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 800050e:	23c0      	movs	r3, #192	; 0xc0
 8000510:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000512:	2312      	movs	r3, #18
 8000514:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000516:	2300      	movs	r3, #0
 8000518:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800051a:	2300      	movs	r3, #0
 800051c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800051e:	2304      	movs	r3, #4
 8000520:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000522:	f107 0314 	add.w	r3, r7, #20
 8000526:	4619      	mov	r1, r3
 8000528:	4805      	ldr	r0, [pc, #20]	; (8000540 <MX_GPIO_Init+0x164>)
 800052a:	f000 fa65 	bl	80009f8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800052e:	bf00      	nop
 8000530:	3728      	adds	r7, #40	; 0x28
 8000532:	46bd      	mov	sp, r7
 8000534:	bd80      	pop	{r7, pc}
 8000536:	bf00      	nop
 8000538:	40021000 	.word	0x40021000
 800053c:	48001000 	.word	0x48001000
 8000540:	48000400 	.word	0x48000400

08000544 <toggle_LED1_handler>:

/* USER CODE BEGIN 4 */
static void toggle_LED1_handler(void* parameters){
 8000544:	b580      	push	{r7, lr}
 8000546:	b082      	sub	sp, #8
 8000548:	af00      	add	r7, sp, #0
 800054a:	6078      	str	r0, [r7, #4]
//	char msg[100];
	while(1){
		//printf("%s\n", (char*) parameters);
//		snprintf(msg, 100, "%s\n", (char*)parameters);
//		SEGGER_SYSVIEW_PrintfTarget(msg);
		HAL_GPIO_TogglePin(GPIOE,GPIO_PIN_8);
 800054c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000550:	4803      	ldr	r0, [pc, #12]	; (8000560 <toggle_LED1_handler+0x1c>)
 8000552:	f000 fbe3 	bl	8000d1c <HAL_GPIO_TogglePin>
		vTaskDelay(5);
 8000556:	2005      	movs	r0, #5
 8000558:	f002 fe88 	bl	800326c <vTaskDelay>
		HAL_GPIO_TogglePin(GPIOE,GPIO_PIN_8);
 800055c:	e7f6      	b.n	800054c <toggle_LED1_handler+0x8>
 800055e:	bf00      	nop
 8000560:	48001000 	.word	0x48001000

08000564 <toggle_LED2_handler>:
		//taskYIELD();
	}
}

static void toggle_LED2_handler(void* parameters){
 8000564:	b580      	push	{r7, lr}
 8000566:	b082      	sub	sp, #8
 8000568:	af00      	add	r7, sp, #0
 800056a:	6078      	str	r0, [r7, #4]
	while(1){
		//printf("%s\n", (char*) parameters);
//		snprintf(msg, 100, "%s\n", (char*)parameters);
//		SEGGER_SYSVIEW_PrintfTarget(msg);
		//taskYIELD();
		HAL_GPIO_TogglePin(GPIOE,GPIO_PIN_9);
 800056c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000570:	4803      	ldr	r0, [pc, #12]	; (8000580 <toggle_LED2_handler+0x1c>)
 8000572:	f000 fbd3 	bl	8000d1c <HAL_GPIO_TogglePin>
		vTaskDelay(10);
 8000576:	200a      	movs	r0, #10
 8000578:	f002 fe78 	bl	800326c <vTaskDelay>
		HAL_GPIO_TogglePin(GPIOE,GPIO_PIN_9);
 800057c:	e7f6      	b.n	800056c <toggle_LED2_handler+0x8>
 800057e:	bf00      	nop
 8000580:	48001000 	.word	0x48001000

08000584 <toggle_LED3_handler>:
	}
}

static void toggle_LED3_handler(void* parameters){
 8000584:	b580      	push	{r7, lr}
 8000586:	b082      	sub	sp, #8
 8000588:	af00      	add	r7, sp, #0
 800058a:	6078      	str	r0, [r7, #4]

//	char msg[100];
	while(1){
		HAL_GPIO_TogglePin(GPIOE,GPIO_PIN_10);
 800058c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000590:	4803      	ldr	r0, [pc, #12]	; (80005a0 <toggle_LED3_handler+0x1c>)
 8000592:	f000 fbc3 	bl	8000d1c <HAL_GPIO_TogglePin>
		vTaskDelay(15);
 8000596:	200f      	movs	r0, #15
 8000598:	f002 fe68 	bl	800326c <vTaskDelay>
		HAL_GPIO_TogglePin(GPIOE,GPIO_PIN_10);
 800059c:	e7f6      	b.n	800058c <toggle_LED3_handler+0x8>
 800059e:	bf00      	nop
 80005a0:	48001000 	.word	0x48001000

080005a4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b082      	sub	sp, #8
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	4a04      	ldr	r2, [pc, #16]	; (80005c4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80005b2:	4293      	cmp	r3, r2
 80005b4:	d101      	bne.n	80005ba <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80005b6:	f000 f91d 	bl	80007f4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80005ba:	bf00      	nop
 80005bc:	3708      	adds	r7, #8
 80005be:	46bd      	mov	sp, r7
 80005c0:	bd80      	pop	{r7, pc}
 80005c2:	bf00      	nop
 80005c4:	40001000 	.word	0x40001000

080005c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80005c8:	b480      	push	{r7}
 80005ca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005cc:	b672      	cpsid	i
}
 80005ce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80005d0:	e7fe      	b.n	80005d0 <Error_Handler+0x8>
	...

080005d4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b082      	sub	sp, #8
 80005d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80005da:	4b0f      	ldr	r3, [pc, #60]	; (8000618 <HAL_MspInit+0x44>)
 80005dc:	699b      	ldr	r3, [r3, #24]
 80005de:	4a0e      	ldr	r2, [pc, #56]	; (8000618 <HAL_MspInit+0x44>)
 80005e0:	f043 0301 	orr.w	r3, r3, #1
 80005e4:	6193      	str	r3, [r2, #24]
 80005e6:	4b0c      	ldr	r3, [pc, #48]	; (8000618 <HAL_MspInit+0x44>)
 80005e8:	699b      	ldr	r3, [r3, #24]
 80005ea:	f003 0301 	and.w	r3, r3, #1
 80005ee:	607b      	str	r3, [r7, #4]
 80005f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80005f2:	4b09      	ldr	r3, [pc, #36]	; (8000618 <HAL_MspInit+0x44>)
 80005f4:	69db      	ldr	r3, [r3, #28]
 80005f6:	4a08      	ldr	r2, [pc, #32]	; (8000618 <HAL_MspInit+0x44>)
 80005f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005fc:	61d3      	str	r3, [r2, #28]
 80005fe:	4b06      	ldr	r3, [pc, #24]	; (8000618 <HAL_MspInit+0x44>)
 8000600:	69db      	ldr	r3, [r3, #28]
 8000602:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000606:	603b      	str	r3, [r7, #0]
 8000608:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */
  vInitPrioGroupValue();
 800060a:	f004 f84d 	bl	80046a8 <vInitPrioGroupValue>
  /* USER CODE END MspInit 1 */
}
 800060e:	bf00      	nop
 8000610:	3708      	adds	r7, #8
 8000612:	46bd      	mov	sp, r7
 8000614:	bd80      	pop	{r7, pc}
 8000616:	bf00      	nop
 8000618:	40021000 	.word	0x40021000

0800061c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b08e      	sub	sp, #56	; 0x38
 8000620:	af00      	add	r7, sp, #0
 8000622:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000624:	2300      	movs	r3, #0
 8000626:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000628:	2300      	movs	r3, #0
 800062a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800062c:	4b33      	ldr	r3, [pc, #204]	; (80006fc <HAL_InitTick+0xe0>)
 800062e:	69db      	ldr	r3, [r3, #28]
 8000630:	4a32      	ldr	r2, [pc, #200]	; (80006fc <HAL_InitTick+0xe0>)
 8000632:	f043 0310 	orr.w	r3, r3, #16
 8000636:	61d3      	str	r3, [r2, #28]
 8000638:	4b30      	ldr	r3, [pc, #192]	; (80006fc <HAL_InitTick+0xe0>)
 800063a:	69db      	ldr	r3, [r3, #28]
 800063c:	f003 0310 	and.w	r3, r3, #16
 8000640:	60fb      	str	r3, [r7, #12]
 8000642:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000644:	f107 0210 	add.w	r2, r7, #16
 8000648:	f107 0314 	add.w	r3, r7, #20
 800064c:	4611      	mov	r1, r2
 800064e:	4618      	mov	r0, r3
 8000650:	f001 fdd0 	bl	80021f4 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000654:	6a3b      	ldr	r3, [r7, #32]
 8000656:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000658:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800065a:	2b00      	cmp	r3, #0
 800065c:	d103      	bne.n	8000666 <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800065e:	f001 fda7 	bl	80021b0 <HAL_RCC_GetPCLK1Freq>
 8000662:	6378      	str	r0, [r7, #52]	; 0x34
 8000664:	e004      	b.n	8000670 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000666:	f001 fda3 	bl	80021b0 <HAL_RCC_GetPCLK1Freq>
 800066a:	4603      	mov	r3, r0
 800066c:	005b      	lsls	r3, r3, #1
 800066e:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000670:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000672:	4a23      	ldr	r2, [pc, #140]	; (8000700 <HAL_InitTick+0xe4>)
 8000674:	fba2 2303 	umull	r2, r3, r2, r3
 8000678:	0c9b      	lsrs	r3, r3, #18
 800067a:	3b01      	subs	r3, #1
 800067c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800067e:	4b21      	ldr	r3, [pc, #132]	; (8000704 <HAL_InitTick+0xe8>)
 8000680:	4a21      	ldr	r2, [pc, #132]	; (8000708 <HAL_InitTick+0xec>)
 8000682:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000684:	4b1f      	ldr	r3, [pc, #124]	; (8000704 <HAL_InitTick+0xe8>)
 8000686:	f240 32e7 	movw	r2, #999	; 0x3e7
 800068a:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800068c:	4a1d      	ldr	r2, [pc, #116]	; (8000704 <HAL_InitTick+0xe8>)
 800068e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000690:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000692:	4b1c      	ldr	r3, [pc, #112]	; (8000704 <HAL_InitTick+0xe8>)
 8000694:	2200      	movs	r2, #0
 8000696:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000698:	4b1a      	ldr	r3, [pc, #104]	; (8000704 <HAL_InitTick+0xe8>)
 800069a:	2200      	movs	r2, #0
 800069c:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800069e:	4b19      	ldr	r3, [pc, #100]	; (8000704 <HAL_InitTick+0xe8>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 80006a4:	4817      	ldr	r0, [pc, #92]	; (8000704 <HAL_InitTick+0xe8>)
 80006a6:	f001 fdd7 	bl	8002258 <HAL_TIM_Base_Init>
 80006aa:	4603      	mov	r3, r0
 80006ac:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 80006b0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d11b      	bne.n	80006f0 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80006b8:	4812      	ldr	r0, [pc, #72]	; (8000704 <HAL_InitTick+0xe8>)
 80006ba:	f001 fe2f 	bl	800231c <HAL_TIM_Base_Start_IT>
 80006be:	4603      	mov	r3, r0
 80006c0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 80006c4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	d111      	bne.n	80006f0 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80006cc:	2036      	movs	r0, #54	; 0x36
 80006ce:	f000 f985 	bl	80009dc <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	2b0f      	cmp	r3, #15
 80006d6:	d808      	bhi.n	80006ea <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 80006d8:	2200      	movs	r2, #0
 80006da:	6879      	ldr	r1, [r7, #4]
 80006dc:	2036      	movs	r0, #54	; 0x36
 80006de:	f000 f961 	bl	80009a4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80006e2:	4a0a      	ldr	r2, [pc, #40]	; (800070c <HAL_InitTick+0xf0>)
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	6013      	str	r3, [r2, #0]
 80006e8:	e002      	b.n	80006f0 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 80006ea:	2301      	movs	r3, #1
 80006ec:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80006f0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 80006f4:	4618      	mov	r0, r3
 80006f6:	3738      	adds	r7, #56	; 0x38
 80006f8:	46bd      	mov	sp, r7
 80006fa:	bd80      	pop	{r7, pc}
 80006fc:	40021000 	.word	0x40021000
 8000700:	431bde83 	.word	0x431bde83
 8000704:	20000030 	.word	0x20000030
 8000708:	40001000 	.word	0x40001000
 800070c:	20000004 	.word	0x20000004

08000710 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000710:	b480      	push	{r7}
 8000712:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000714:	e7fe      	b.n	8000714 <NMI_Handler+0x4>

08000716 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000716:	b480      	push	{r7}
 8000718:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800071a:	e7fe      	b.n	800071a <HardFault_Handler+0x4>

0800071c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800071c:	b480      	push	{r7}
 800071e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000720:	e7fe      	b.n	8000720 <MemManage_Handler+0x4>

08000722 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000722:	b480      	push	{r7}
 8000724:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000726:	e7fe      	b.n	8000726 <BusFault_Handler+0x4>

08000728 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000728:	b480      	push	{r7}
 800072a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800072c:	e7fe      	b.n	800072c <UsageFault_Handler+0x4>

0800072e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800072e:	b480      	push	{r7}
 8000730:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000732:	bf00      	nop
 8000734:	46bd      	mov	sp, r7
 8000736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800073a:	4770      	bx	lr

0800073c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles Timer 6 interrupt and DAC underrun interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000740:	4802      	ldr	r0, [pc, #8]	; (800074c <TIM6_DAC_IRQHandler+0x10>)
 8000742:	f001 fe55 	bl	80023f0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000746:	bf00      	nop
 8000748:	bd80      	pop	{r7, pc}
 800074a:	bf00      	nop
 800074c:	20000030 	.word	0x20000030

08000750 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000750:	b480      	push	{r7}
 8000752:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000754:	4b06      	ldr	r3, [pc, #24]	; (8000770 <SystemInit+0x20>)
 8000756:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800075a:	4a05      	ldr	r2, [pc, #20]	; (8000770 <SystemInit+0x20>)
 800075c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000760:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000764:	bf00      	nop
 8000766:	46bd      	mov	sp, r7
 8000768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800076c:	4770      	bx	lr
 800076e:	bf00      	nop
 8000770:	e000ed00 	.word	0xe000ed00

08000774 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000774:	f8df d034 	ldr.w	sp, [pc, #52]	; 80007ac <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000778:	f7ff ffea 	bl	8000750 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800077c:	480c      	ldr	r0, [pc, #48]	; (80007b0 <LoopForever+0x6>)
  ldr r1, =_edata
 800077e:	490d      	ldr	r1, [pc, #52]	; (80007b4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000780:	4a0d      	ldr	r2, [pc, #52]	; (80007b8 <LoopForever+0xe>)
  movs r3, #0
 8000782:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000784:	e002      	b.n	800078c <LoopCopyDataInit>

08000786 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000786:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000788:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800078a:	3304      	adds	r3, #4

0800078c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800078c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800078e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000790:	d3f9      	bcc.n	8000786 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000792:	4a0a      	ldr	r2, [pc, #40]	; (80007bc <LoopForever+0x12>)
  ldr r4, =_ebss
 8000794:	4c0a      	ldr	r4, [pc, #40]	; (80007c0 <LoopForever+0x16>)
  movs r3, #0
 8000796:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000798:	e001      	b.n	800079e <LoopFillZerobss>

0800079a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800079a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800079c:	3204      	adds	r2, #4

0800079e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800079e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80007a0:	d3fb      	bcc.n	800079a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80007a2:	f005 ffb9 	bl	8006718 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80007a6:	f7ff fd5d 	bl	8000264 <main>

080007aa <LoopForever>:

LoopForever:
    b LoopForever
 80007aa:	e7fe      	b.n	80007aa <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80007ac:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 80007b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80007b4:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 80007b8:	08006924 	.word	0x08006924
  ldr r2, =_sbss
 80007bc:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 80007c0:	200084d8 	.word	0x200084d8

080007c4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80007c4:	e7fe      	b.n	80007c4 <ADC1_2_IRQHandler>
	...

080007c8 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80007cc:	4b08      	ldr	r3, [pc, #32]	; (80007f0 <HAL_Init+0x28>)
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	4a07      	ldr	r2, [pc, #28]	; (80007f0 <HAL_Init+0x28>)
 80007d2:	f043 0310 	orr.w	r3, r3, #16
 80007d6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80007d8:	2003      	movs	r0, #3
 80007da:	f000 f8d8 	bl	800098e <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80007de:	200f      	movs	r0, #15
 80007e0:	f7ff ff1c 	bl	800061c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80007e4:	f7ff fef6 	bl	80005d4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80007e8:	2300      	movs	r3, #0
}
 80007ea:	4618      	mov	r0, r3
 80007ec:	bd80      	pop	{r7, pc}
 80007ee:	bf00      	nop
 80007f0:	40022000 	.word	0x40022000

080007f4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80007f4:	b480      	push	{r7}
 80007f6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80007f8:	4b06      	ldr	r3, [pc, #24]	; (8000814 <HAL_IncTick+0x20>)
 80007fa:	781b      	ldrb	r3, [r3, #0]
 80007fc:	461a      	mov	r2, r3
 80007fe:	4b06      	ldr	r3, [pc, #24]	; (8000818 <HAL_IncTick+0x24>)
 8000800:	681b      	ldr	r3, [r3, #0]
 8000802:	4413      	add	r3, r2
 8000804:	4a04      	ldr	r2, [pc, #16]	; (8000818 <HAL_IncTick+0x24>)
 8000806:	6013      	str	r3, [r2, #0]
}
 8000808:	bf00      	nop
 800080a:	46bd      	mov	sp, r7
 800080c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000810:	4770      	bx	lr
 8000812:	bf00      	nop
 8000814:	20000008 	.word	0x20000008
 8000818:	2000007c 	.word	0x2000007c

0800081c <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800081c:	b480      	push	{r7}
 800081e:	af00      	add	r7, sp, #0
  return uwTick;  
 8000820:	4b03      	ldr	r3, [pc, #12]	; (8000830 <HAL_GetTick+0x14>)
 8000822:	681b      	ldr	r3, [r3, #0]
}
 8000824:	4618      	mov	r0, r3
 8000826:	46bd      	mov	sp, r7
 8000828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800082c:	4770      	bx	lr
 800082e:	bf00      	nop
 8000830:	2000007c 	.word	0x2000007c

08000834 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000834:	b480      	push	{r7}
 8000836:	b085      	sub	sp, #20
 8000838:	af00      	add	r7, sp, #0
 800083a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	f003 0307 	and.w	r3, r3, #7
 8000842:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000844:	4b0c      	ldr	r3, [pc, #48]	; (8000878 <__NVIC_SetPriorityGrouping+0x44>)
 8000846:	68db      	ldr	r3, [r3, #12]
 8000848:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800084a:	68ba      	ldr	r2, [r7, #8]
 800084c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000850:	4013      	ands	r3, r2
 8000852:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000854:	68fb      	ldr	r3, [r7, #12]
 8000856:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000858:	68bb      	ldr	r3, [r7, #8]
 800085a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800085c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000860:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000864:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000866:	4a04      	ldr	r2, [pc, #16]	; (8000878 <__NVIC_SetPriorityGrouping+0x44>)
 8000868:	68bb      	ldr	r3, [r7, #8]
 800086a:	60d3      	str	r3, [r2, #12]
}
 800086c:	bf00      	nop
 800086e:	3714      	adds	r7, #20
 8000870:	46bd      	mov	sp, r7
 8000872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000876:	4770      	bx	lr
 8000878:	e000ed00 	.word	0xe000ed00

0800087c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800087c:	b480      	push	{r7}
 800087e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000880:	4b04      	ldr	r3, [pc, #16]	; (8000894 <__NVIC_GetPriorityGrouping+0x18>)
 8000882:	68db      	ldr	r3, [r3, #12]
 8000884:	0a1b      	lsrs	r3, r3, #8
 8000886:	f003 0307 	and.w	r3, r3, #7
}
 800088a:	4618      	mov	r0, r3
 800088c:	46bd      	mov	sp, r7
 800088e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000892:	4770      	bx	lr
 8000894:	e000ed00 	.word	0xe000ed00

08000898 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000898:	b480      	push	{r7}
 800089a:	b083      	sub	sp, #12
 800089c:	af00      	add	r7, sp, #0
 800089e:	4603      	mov	r3, r0
 80008a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	db0b      	blt.n	80008c2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80008aa:	79fb      	ldrb	r3, [r7, #7]
 80008ac:	f003 021f 	and.w	r2, r3, #31
 80008b0:	4907      	ldr	r1, [pc, #28]	; (80008d0 <__NVIC_EnableIRQ+0x38>)
 80008b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008b6:	095b      	lsrs	r3, r3, #5
 80008b8:	2001      	movs	r0, #1
 80008ba:	fa00 f202 	lsl.w	r2, r0, r2
 80008be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80008c2:	bf00      	nop
 80008c4:	370c      	adds	r7, #12
 80008c6:	46bd      	mov	sp, r7
 80008c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008cc:	4770      	bx	lr
 80008ce:	bf00      	nop
 80008d0:	e000e100 	.word	0xe000e100

080008d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80008d4:	b480      	push	{r7}
 80008d6:	b083      	sub	sp, #12
 80008d8:	af00      	add	r7, sp, #0
 80008da:	4603      	mov	r3, r0
 80008dc:	6039      	str	r1, [r7, #0]
 80008de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	db0a      	blt.n	80008fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008e8:	683b      	ldr	r3, [r7, #0]
 80008ea:	b2da      	uxtb	r2, r3
 80008ec:	490c      	ldr	r1, [pc, #48]	; (8000920 <__NVIC_SetPriority+0x4c>)
 80008ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008f2:	0112      	lsls	r2, r2, #4
 80008f4:	b2d2      	uxtb	r2, r2
 80008f6:	440b      	add	r3, r1
 80008f8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80008fc:	e00a      	b.n	8000914 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008fe:	683b      	ldr	r3, [r7, #0]
 8000900:	b2da      	uxtb	r2, r3
 8000902:	4908      	ldr	r1, [pc, #32]	; (8000924 <__NVIC_SetPriority+0x50>)
 8000904:	79fb      	ldrb	r3, [r7, #7]
 8000906:	f003 030f 	and.w	r3, r3, #15
 800090a:	3b04      	subs	r3, #4
 800090c:	0112      	lsls	r2, r2, #4
 800090e:	b2d2      	uxtb	r2, r2
 8000910:	440b      	add	r3, r1
 8000912:	761a      	strb	r2, [r3, #24]
}
 8000914:	bf00      	nop
 8000916:	370c      	adds	r7, #12
 8000918:	46bd      	mov	sp, r7
 800091a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800091e:	4770      	bx	lr
 8000920:	e000e100 	.word	0xe000e100
 8000924:	e000ed00 	.word	0xe000ed00

08000928 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000928:	b480      	push	{r7}
 800092a:	b089      	sub	sp, #36	; 0x24
 800092c:	af00      	add	r7, sp, #0
 800092e:	60f8      	str	r0, [r7, #12]
 8000930:	60b9      	str	r1, [r7, #8]
 8000932:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000934:	68fb      	ldr	r3, [r7, #12]
 8000936:	f003 0307 	and.w	r3, r3, #7
 800093a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800093c:	69fb      	ldr	r3, [r7, #28]
 800093e:	f1c3 0307 	rsb	r3, r3, #7
 8000942:	2b04      	cmp	r3, #4
 8000944:	bf28      	it	cs
 8000946:	2304      	movcs	r3, #4
 8000948:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800094a:	69fb      	ldr	r3, [r7, #28]
 800094c:	3304      	adds	r3, #4
 800094e:	2b06      	cmp	r3, #6
 8000950:	d902      	bls.n	8000958 <NVIC_EncodePriority+0x30>
 8000952:	69fb      	ldr	r3, [r7, #28]
 8000954:	3b03      	subs	r3, #3
 8000956:	e000      	b.n	800095a <NVIC_EncodePriority+0x32>
 8000958:	2300      	movs	r3, #0
 800095a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800095c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000960:	69bb      	ldr	r3, [r7, #24]
 8000962:	fa02 f303 	lsl.w	r3, r2, r3
 8000966:	43da      	mvns	r2, r3
 8000968:	68bb      	ldr	r3, [r7, #8]
 800096a:	401a      	ands	r2, r3
 800096c:	697b      	ldr	r3, [r7, #20]
 800096e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000970:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000974:	697b      	ldr	r3, [r7, #20]
 8000976:	fa01 f303 	lsl.w	r3, r1, r3
 800097a:	43d9      	mvns	r1, r3
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000980:	4313      	orrs	r3, r2
         );
}
 8000982:	4618      	mov	r0, r3
 8000984:	3724      	adds	r7, #36	; 0x24
 8000986:	46bd      	mov	sp, r7
 8000988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098c:	4770      	bx	lr

0800098e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800098e:	b580      	push	{r7, lr}
 8000990:	b082      	sub	sp, #8
 8000992:	af00      	add	r7, sp, #0
 8000994:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000996:	6878      	ldr	r0, [r7, #4]
 8000998:	f7ff ff4c 	bl	8000834 <__NVIC_SetPriorityGrouping>
}
 800099c:	bf00      	nop
 800099e:	3708      	adds	r7, #8
 80009a0:	46bd      	mov	sp, r7
 80009a2:	bd80      	pop	{r7, pc}

080009a4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b086      	sub	sp, #24
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	4603      	mov	r3, r0
 80009ac:	60b9      	str	r1, [r7, #8]
 80009ae:	607a      	str	r2, [r7, #4]
 80009b0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80009b2:	2300      	movs	r3, #0
 80009b4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80009b6:	f7ff ff61 	bl	800087c <__NVIC_GetPriorityGrouping>
 80009ba:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80009bc:	687a      	ldr	r2, [r7, #4]
 80009be:	68b9      	ldr	r1, [r7, #8]
 80009c0:	6978      	ldr	r0, [r7, #20]
 80009c2:	f7ff ffb1 	bl	8000928 <NVIC_EncodePriority>
 80009c6:	4602      	mov	r2, r0
 80009c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80009cc:	4611      	mov	r1, r2
 80009ce:	4618      	mov	r0, r3
 80009d0:	f7ff ff80 	bl	80008d4 <__NVIC_SetPriority>
}
 80009d4:	bf00      	nop
 80009d6:	3718      	adds	r7, #24
 80009d8:	46bd      	mov	sp, r7
 80009da:	bd80      	pop	{r7, pc}

080009dc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	b082      	sub	sp, #8
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	4603      	mov	r3, r0
 80009e4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80009e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009ea:	4618      	mov	r0, r3
 80009ec:	f7ff ff54 	bl	8000898 <__NVIC_EnableIRQ>
}
 80009f0:	bf00      	nop
 80009f2:	3708      	adds	r7, #8
 80009f4:	46bd      	mov	sp, r7
 80009f6:	bd80      	pop	{r7, pc}

080009f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80009f8:	b480      	push	{r7}
 80009fa:	b087      	sub	sp, #28
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	6078      	str	r0, [r7, #4]
 8000a00:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000a02:	2300      	movs	r3, #0
 8000a04:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000a06:	e154      	b.n	8000cb2 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000a08:	683b      	ldr	r3, [r7, #0]
 8000a0a:	681a      	ldr	r2, [r3, #0]
 8000a0c:	2101      	movs	r1, #1
 8000a0e:	697b      	ldr	r3, [r7, #20]
 8000a10:	fa01 f303 	lsl.w	r3, r1, r3
 8000a14:	4013      	ands	r3, r2
 8000a16:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000a18:	68fb      	ldr	r3, [r7, #12]
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	f000 8146 	beq.w	8000cac <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000a20:	683b      	ldr	r3, [r7, #0]
 8000a22:	685b      	ldr	r3, [r3, #4]
 8000a24:	f003 0303 	and.w	r3, r3, #3
 8000a28:	2b01      	cmp	r3, #1
 8000a2a:	d005      	beq.n	8000a38 <HAL_GPIO_Init+0x40>
 8000a2c:	683b      	ldr	r3, [r7, #0]
 8000a2e:	685b      	ldr	r3, [r3, #4]
 8000a30:	f003 0303 	and.w	r3, r3, #3
 8000a34:	2b02      	cmp	r3, #2
 8000a36:	d130      	bne.n	8000a9a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	689b      	ldr	r3, [r3, #8]
 8000a3c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000a3e:	697b      	ldr	r3, [r7, #20]
 8000a40:	005b      	lsls	r3, r3, #1
 8000a42:	2203      	movs	r2, #3
 8000a44:	fa02 f303 	lsl.w	r3, r2, r3
 8000a48:	43db      	mvns	r3, r3
 8000a4a:	693a      	ldr	r2, [r7, #16]
 8000a4c:	4013      	ands	r3, r2
 8000a4e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000a50:	683b      	ldr	r3, [r7, #0]
 8000a52:	68da      	ldr	r2, [r3, #12]
 8000a54:	697b      	ldr	r3, [r7, #20]
 8000a56:	005b      	lsls	r3, r3, #1
 8000a58:	fa02 f303 	lsl.w	r3, r2, r3
 8000a5c:	693a      	ldr	r2, [r7, #16]
 8000a5e:	4313      	orrs	r3, r2
 8000a60:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	693a      	ldr	r2, [r7, #16]
 8000a66:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	685b      	ldr	r3, [r3, #4]
 8000a6c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000a6e:	2201      	movs	r2, #1
 8000a70:	697b      	ldr	r3, [r7, #20]
 8000a72:	fa02 f303 	lsl.w	r3, r2, r3
 8000a76:	43db      	mvns	r3, r3
 8000a78:	693a      	ldr	r2, [r7, #16]
 8000a7a:	4013      	ands	r3, r2
 8000a7c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000a7e:	683b      	ldr	r3, [r7, #0]
 8000a80:	685b      	ldr	r3, [r3, #4]
 8000a82:	091b      	lsrs	r3, r3, #4
 8000a84:	f003 0201 	and.w	r2, r3, #1
 8000a88:	697b      	ldr	r3, [r7, #20]
 8000a8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a8e:	693a      	ldr	r2, [r7, #16]
 8000a90:	4313      	orrs	r3, r2
 8000a92:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	693a      	ldr	r2, [r7, #16]
 8000a98:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000a9a:	683b      	ldr	r3, [r7, #0]
 8000a9c:	685b      	ldr	r3, [r3, #4]
 8000a9e:	f003 0303 	and.w	r3, r3, #3
 8000aa2:	2b03      	cmp	r3, #3
 8000aa4:	d017      	beq.n	8000ad6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	68db      	ldr	r3, [r3, #12]
 8000aaa:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000aac:	697b      	ldr	r3, [r7, #20]
 8000aae:	005b      	lsls	r3, r3, #1
 8000ab0:	2203      	movs	r2, #3
 8000ab2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ab6:	43db      	mvns	r3, r3
 8000ab8:	693a      	ldr	r2, [r7, #16]
 8000aba:	4013      	ands	r3, r2
 8000abc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000abe:	683b      	ldr	r3, [r7, #0]
 8000ac0:	689a      	ldr	r2, [r3, #8]
 8000ac2:	697b      	ldr	r3, [r7, #20]
 8000ac4:	005b      	lsls	r3, r3, #1
 8000ac6:	fa02 f303 	lsl.w	r3, r2, r3
 8000aca:	693a      	ldr	r2, [r7, #16]
 8000acc:	4313      	orrs	r3, r2
 8000ace:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	693a      	ldr	r2, [r7, #16]
 8000ad4:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ad6:	683b      	ldr	r3, [r7, #0]
 8000ad8:	685b      	ldr	r3, [r3, #4]
 8000ada:	f003 0303 	and.w	r3, r3, #3
 8000ade:	2b02      	cmp	r3, #2
 8000ae0:	d123      	bne.n	8000b2a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000ae2:	697b      	ldr	r3, [r7, #20]
 8000ae4:	08da      	lsrs	r2, r3, #3
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	3208      	adds	r2, #8
 8000aea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000aee:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000af0:	697b      	ldr	r3, [r7, #20]
 8000af2:	f003 0307 	and.w	r3, r3, #7
 8000af6:	009b      	lsls	r3, r3, #2
 8000af8:	220f      	movs	r2, #15
 8000afa:	fa02 f303 	lsl.w	r3, r2, r3
 8000afe:	43db      	mvns	r3, r3
 8000b00:	693a      	ldr	r2, [r7, #16]
 8000b02:	4013      	ands	r3, r2
 8000b04:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000b06:	683b      	ldr	r3, [r7, #0]
 8000b08:	691a      	ldr	r2, [r3, #16]
 8000b0a:	697b      	ldr	r3, [r7, #20]
 8000b0c:	f003 0307 	and.w	r3, r3, #7
 8000b10:	009b      	lsls	r3, r3, #2
 8000b12:	fa02 f303 	lsl.w	r3, r2, r3
 8000b16:	693a      	ldr	r2, [r7, #16]
 8000b18:	4313      	orrs	r3, r2
 8000b1a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000b1c:	697b      	ldr	r3, [r7, #20]
 8000b1e:	08da      	lsrs	r2, r3, #3
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	3208      	adds	r2, #8
 8000b24:	6939      	ldr	r1, [r7, #16]
 8000b26:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000b30:	697b      	ldr	r3, [r7, #20]
 8000b32:	005b      	lsls	r3, r3, #1
 8000b34:	2203      	movs	r2, #3
 8000b36:	fa02 f303 	lsl.w	r3, r2, r3
 8000b3a:	43db      	mvns	r3, r3
 8000b3c:	693a      	ldr	r2, [r7, #16]
 8000b3e:	4013      	ands	r3, r2
 8000b40:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000b42:	683b      	ldr	r3, [r7, #0]
 8000b44:	685b      	ldr	r3, [r3, #4]
 8000b46:	f003 0203 	and.w	r2, r3, #3
 8000b4a:	697b      	ldr	r3, [r7, #20]
 8000b4c:	005b      	lsls	r3, r3, #1
 8000b4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b52:	693a      	ldr	r2, [r7, #16]
 8000b54:	4313      	orrs	r3, r2
 8000b56:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	693a      	ldr	r2, [r7, #16]
 8000b5c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000b5e:	683b      	ldr	r3, [r7, #0]
 8000b60:	685b      	ldr	r3, [r3, #4]
 8000b62:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	f000 80a0 	beq.w	8000cac <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b6c:	4b58      	ldr	r3, [pc, #352]	; (8000cd0 <HAL_GPIO_Init+0x2d8>)
 8000b6e:	699b      	ldr	r3, [r3, #24]
 8000b70:	4a57      	ldr	r2, [pc, #348]	; (8000cd0 <HAL_GPIO_Init+0x2d8>)
 8000b72:	f043 0301 	orr.w	r3, r3, #1
 8000b76:	6193      	str	r3, [r2, #24]
 8000b78:	4b55      	ldr	r3, [pc, #340]	; (8000cd0 <HAL_GPIO_Init+0x2d8>)
 8000b7a:	699b      	ldr	r3, [r3, #24]
 8000b7c:	f003 0301 	and.w	r3, r3, #1
 8000b80:	60bb      	str	r3, [r7, #8]
 8000b82:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000b84:	4a53      	ldr	r2, [pc, #332]	; (8000cd4 <HAL_GPIO_Init+0x2dc>)
 8000b86:	697b      	ldr	r3, [r7, #20]
 8000b88:	089b      	lsrs	r3, r3, #2
 8000b8a:	3302      	adds	r3, #2
 8000b8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b90:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000b92:	697b      	ldr	r3, [r7, #20]
 8000b94:	f003 0303 	and.w	r3, r3, #3
 8000b98:	009b      	lsls	r3, r3, #2
 8000b9a:	220f      	movs	r2, #15
 8000b9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000ba0:	43db      	mvns	r3, r3
 8000ba2:	693a      	ldr	r2, [r7, #16]
 8000ba4:	4013      	ands	r3, r2
 8000ba6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000bae:	d019      	beq.n	8000be4 <HAL_GPIO_Init+0x1ec>
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	4a49      	ldr	r2, [pc, #292]	; (8000cd8 <HAL_GPIO_Init+0x2e0>)
 8000bb4:	4293      	cmp	r3, r2
 8000bb6:	d013      	beq.n	8000be0 <HAL_GPIO_Init+0x1e8>
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	4a48      	ldr	r2, [pc, #288]	; (8000cdc <HAL_GPIO_Init+0x2e4>)
 8000bbc:	4293      	cmp	r3, r2
 8000bbe:	d00d      	beq.n	8000bdc <HAL_GPIO_Init+0x1e4>
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	4a47      	ldr	r2, [pc, #284]	; (8000ce0 <HAL_GPIO_Init+0x2e8>)
 8000bc4:	4293      	cmp	r3, r2
 8000bc6:	d007      	beq.n	8000bd8 <HAL_GPIO_Init+0x1e0>
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	4a46      	ldr	r2, [pc, #280]	; (8000ce4 <HAL_GPIO_Init+0x2ec>)
 8000bcc:	4293      	cmp	r3, r2
 8000bce:	d101      	bne.n	8000bd4 <HAL_GPIO_Init+0x1dc>
 8000bd0:	2304      	movs	r3, #4
 8000bd2:	e008      	b.n	8000be6 <HAL_GPIO_Init+0x1ee>
 8000bd4:	2305      	movs	r3, #5
 8000bd6:	e006      	b.n	8000be6 <HAL_GPIO_Init+0x1ee>
 8000bd8:	2303      	movs	r3, #3
 8000bda:	e004      	b.n	8000be6 <HAL_GPIO_Init+0x1ee>
 8000bdc:	2302      	movs	r3, #2
 8000bde:	e002      	b.n	8000be6 <HAL_GPIO_Init+0x1ee>
 8000be0:	2301      	movs	r3, #1
 8000be2:	e000      	b.n	8000be6 <HAL_GPIO_Init+0x1ee>
 8000be4:	2300      	movs	r3, #0
 8000be6:	697a      	ldr	r2, [r7, #20]
 8000be8:	f002 0203 	and.w	r2, r2, #3
 8000bec:	0092      	lsls	r2, r2, #2
 8000bee:	4093      	lsls	r3, r2
 8000bf0:	693a      	ldr	r2, [r7, #16]
 8000bf2:	4313      	orrs	r3, r2
 8000bf4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000bf6:	4937      	ldr	r1, [pc, #220]	; (8000cd4 <HAL_GPIO_Init+0x2dc>)
 8000bf8:	697b      	ldr	r3, [r7, #20]
 8000bfa:	089b      	lsrs	r3, r3, #2
 8000bfc:	3302      	adds	r3, #2
 8000bfe:	693a      	ldr	r2, [r7, #16]
 8000c00:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000c04:	4b38      	ldr	r3, [pc, #224]	; (8000ce8 <HAL_GPIO_Init+0x2f0>)
 8000c06:	689b      	ldr	r3, [r3, #8]
 8000c08:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c0a:	68fb      	ldr	r3, [r7, #12]
 8000c0c:	43db      	mvns	r3, r3
 8000c0e:	693a      	ldr	r2, [r7, #16]
 8000c10:	4013      	ands	r3, r2
 8000c12:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000c14:	683b      	ldr	r3, [r7, #0]
 8000c16:	685b      	ldr	r3, [r3, #4]
 8000c18:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d003      	beq.n	8000c28 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8000c20:	693a      	ldr	r2, [r7, #16]
 8000c22:	68fb      	ldr	r3, [r7, #12]
 8000c24:	4313      	orrs	r3, r2
 8000c26:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000c28:	4a2f      	ldr	r2, [pc, #188]	; (8000ce8 <HAL_GPIO_Init+0x2f0>)
 8000c2a:	693b      	ldr	r3, [r7, #16]
 8000c2c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000c2e:	4b2e      	ldr	r3, [pc, #184]	; (8000ce8 <HAL_GPIO_Init+0x2f0>)
 8000c30:	68db      	ldr	r3, [r3, #12]
 8000c32:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c34:	68fb      	ldr	r3, [r7, #12]
 8000c36:	43db      	mvns	r3, r3
 8000c38:	693a      	ldr	r2, [r7, #16]
 8000c3a:	4013      	ands	r3, r2
 8000c3c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000c3e:	683b      	ldr	r3, [r7, #0]
 8000c40:	685b      	ldr	r3, [r3, #4]
 8000c42:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d003      	beq.n	8000c52 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8000c4a:	693a      	ldr	r2, [r7, #16]
 8000c4c:	68fb      	ldr	r3, [r7, #12]
 8000c4e:	4313      	orrs	r3, r2
 8000c50:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000c52:	4a25      	ldr	r2, [pc, #148]	; (8000ce8 <HAL_GPIO_Init+0x2f0>)
 8000c54:	693b      	ldr	r3, [r7, #16]
 8000c56:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000c58:	4b23      	ldr	r3, [pc, #140]	; (8000ce8 <HAL_GPIO_Init+0x2f0>)
 8000c5a:	685b      	ldr	r3, [r3, #4]
 8000c5c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c5e:	68fb      	ldr	r3, [r7, #12]
 8000c60:	43db      	mvns	r3, r3
 8000c62:	693a      	ldr	r2, [r7, #16]
 8000c64:	4013      	ands	r3, r2
 8000c66:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000c68:	683b      	ldr	r3, [r7, #0]
 8000c6a:	685b      	ldr	r3, [r3, #4]
 8000c6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d003      	beq.n	8000c7c <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8000c74:	693a      	ldr	r2, [r7, #16]
 8000c76:	68fb      	ldr	r3, [r7, #12]
 8000c78:	4313      	orrs	r3, r2
 8000c7a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000c7c:	4a1a      	ldr	r2, [pc, #104]	; (8000ce8 <HAL_GPIO_Init+0x2f0>)
 8000c7e:	693b      	ldr	r3, [r7, #16]
 8000c80:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000c82:	4b19      	ldr	r3, [pc, #100]	; (8000ce8 <HAL_GPIO_Init+0x2f0>)
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c88:	68fb      	ldr	r3, [r7, #12]
 8000c8a:	43db      	mvns	r3, r3
 8000c8c:	693a      	ldr	r2, [r7, #16]
 8000c8e:	4013      	ands	r3, r2
 8000c90:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000c92:	683b      	ldr	r3, [r7, #0]
 8000c94:	685b      	ldr	r3, [r3, #4]
 8000c96:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d003      	beq.n	8000ca6 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8000c9e:	693a      	ldr	r2, [r7, #16]
 8000ca0:	68fb      	ldr	r3, [r7, #12]
 8000ca2:	4313      	orrs	r3, r2
 8000ca4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000ca6:	4a10      	ldr	r2, [pc, #64]	; (8000ce8 <HAL_GPIO_Init+0x2f0>)
 8000ca8:	693b      	ldr	r3, [r7, #16]
 8000caa:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000cac:	697b      	ldr	r3, [r7, #20]
 8000cae:	3301      	adds	r3, #1
 8000cb0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000cb2:	683b      	ldr	r3, [r7, #0]
 8000cb4:	681a      	ldr	r2, [r3, #0]
 8000cb6:	697b      	ldr	r3, [r7, #20]
 8000cb8:	fa22 f303 	lsr.w	r3, r2, r3
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	f47f aea3 	bne.w	8000a08 <HAL_GPIO_Init+0x10>
  }
}
 8000cc2:	bf00      	nop
 8000cc4:	bf00      	nop
 8000cc6:	371c      	adds	r7, #28
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cce:	4770      	bx	lr
 8000cd0:	40021000 	.word	0x40021000
 8000cd4:	40010000 	.word	0x40010000
 8000cd8:	48000400 	.word	0x48000400
 8000cdc:	48000800 	.word	0x48000800
 8000ce0:	48000c00 	.word	0x48000c00
 8000ce4:	48001000 	.word	0x48001000
 8000ce8:	40010400 	.word	0x40010400

08000cec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000cec:	b480      	push	{r7}
 8000cee:	b083      	sub	sp, #12
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	6078      	str	r0, [r7, #4]
 8000cf4:	460b      	mov	r3, r1
 8000cf6:	807b      	strh	r3, [r7, #2]
 8000cf8:	4613      	mov	r3, r2
 8000cfa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000cfc:	787b      	ldrb	r3, [r7, #1]
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d003      	beq.n	8000d0a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000d02:	887a      	ldrh	r2, [r7, #2]
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000d08:	e002      	b.n	8000d10 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000d0a:	887a      	ldrh	r2, [r7, #2]
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000d10:	bf00      	nop
 8000d12:	370c      	adds	r7, #12
 8000d14:	46bd      	mov	sp, r7
 8000d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1a:	4770      	bx	lr

08000d1c <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	b085      	sub	sp, #20
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
 8000d24:	460b      	mov	r3, r1
 8000d26:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	695b      	ldr	r3, [r3, #20]
 8000d2c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000d2e:	887a      	ldrh	r2, [r7, #2]
 8000d30:	68fb      	ldr	r3, [r7, #12]
 8000d32:	4013      	ands	r3, r2
 8000d34:	041a      	lsls	r2, r3, #16
 8000d36:	68fb      	ldr	r3, [r7, #12]
 8000d38:	43d9      	mvns	r1, r3
 8000d3a:	887b      	ldrh	r3, [r7, #2]
 8000d3c:	400b      	ands	r3, r1
 8000d3e:	431a      	orrs	r2, r3
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	619a      	str	r2, [r3, #24]
}
 8000d44:	bf00      	nop
 8000d46:	3714      	adds	r7, #20
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4e:	4770      	bx	lr

08000d50 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8000d56:	af00      	add	r7, sp, #0
 8000d58:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000d5c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000d60:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000d62:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000d66:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d102      	bne.n	8000d76 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8000d70:	2301      	movs	r3, #1
 8000d72:	f001 b823 	b.w	8001dbc <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000d76:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000d7a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	f003 0301 	and.w	r3, r3, #1
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	f000 817d 	beq.w	8001086 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000d8c:	4bbc      	ldr	r3, [pc, #752]	; (8001080 <HAL_RCC_OscConfig+0x330>)
 8000d8e:	685b      	ldr	r3, [r3, #4]
 8000d90:	f003 030c 	and.w	r3, r3, #12
 8000d94:	2b04      	cmp	r3, #4
 8000d96:	d00c      	beq.n	8000db2 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000d98:	4bb9      	ldr	r3, [pc, #740]	; (8001080 <HAL_RCC_OscConfig+0x330>)
 8000d9a:	685b      	ldr	r3, [r3, #4]
 8000d9c:	f003 030c 	and.w	r3, r3, #12
 8000da0:	2b08      	cmp	r3, #8
 8000da2:	d15c      	bne.n	8000e5e <HAL_RCC_OscConfig+0x10e>
 8000da4:	4bb6      	ldr	r3, [pc, #728]	; (8001080 <HAL_RCC_OscConfig+0x330>)
 8000da6:	685b      	ldr	r3, [r3, #4]
 8000da8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000dac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000db0:	d155      	bne.n	8000e5e <HAL_RCC_OscConfig+0x10e>
 8000db2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000db6:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000dba:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8000dbe:	fa93 f3a3 	rbit	r3, r3
 8000dc2:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000dc6:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000dca:	fab3 f383 	clz	r3, r3
 8000dce:	b2db      	uxtb	r3, r3
 8000dd0:	095b      	lsrs	r3, r3, #5
 8000dd2:	b2db      	uxtb	r3, r3
 8000dd4:	f043 0301 	orr.w	r3, r3, #1
 8000dd8:	b2db      	uxtb	r3, r3
 8000dda:	2b01      	cmp	r3, #1
 8000ddc:	d102      	bne.n	8000de4 <HAL_RCC_OscConfig+0x94>
 8000dde:	4ba8      	ldr	r3, [pc, #672]	; (8001080 <HAL_RCC_OscConfig+0x330>)
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	e015      	b.n	8000e10 <HAL_RCC_OscConfig+0xc0>
 8000de4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000de8:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000dec:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8000df0:	fa93 f3a3 	rbit	r3, r3
 8000df4:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8000df8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000dfc:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8000e00:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8000e04:	fa93 f3a3 	rbit	r3, r3
 8000e08:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8000e0c:	4b9c      	ldr	r3, [pc, #624]	; (8001080 <HAL_RCC_OscConfig+0x330>)
 8000e0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e10:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000e14:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8000e18:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8000e1c:	fa92 f2a2 	rbit	r2, r2
 8000e20:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8000e24:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8000e28:	fab2 f282 	clz	r2, r2
 8000e2c:	b2d2      	uxtb	r2, r2
 8000e2e:	f042 0220 	orr.w	r2, r2, #32
 8000e32:	b2d2      	uxtb	r2, r2
 8000e34:	f002 021f 	and.w	r2, r2, #31
 8000e38:	2101      	movs	r1, #1
 8000e3a:	fa01 f202 	lsl.w	r2, r1, r2
 8000e3e:	4013      	ands	r3, r2
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	f000 811f 	beq.w	8001084 <HAL_RCC_OscConfig+0x334>
 8000e46:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000e4a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	685b      	ldr	r3, [r3, #4]
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	f040 8116 	bne.w	8001084 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8000e58:	2301      	movs	r3, #1
 8000e5a:	f000 bfaf 	b.w	8001dbc <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e5e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000e62:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	685b      	ldr	r3, [r3, #4]
 8000e6a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000e6e:	d106      	bne.n	8000e7e <HAL_RCC_OscConfig+0x12e>
 8000e70:	4b83      	ldr	r3, [pc, #524]	; (8001080 <HAL_RCC_OscConfig+0x330>)
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	4a82      	ldr	r2, [pc, #520]	; (8001080 <HAL_RCC_OscConfig+0x330>)
 8000e76:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e7a:	6013      	str	r3, [r2, #0]
 8000e7c:	e036      	b.n	8000eec <HAL_RCC_OscConfig+0x19c>
 8000e7e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000e82:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	685b      	ldr	r3, [r3, #4]
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d10c      	bne.n	8000ea8 <HAL_RCC_OscConfig+0x158>
 8000e8e:	4b7c      	ldr	r3, [pc, #496]	; (8001080 <HAL_RCC_OscConfig+0x330>)
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	4a7b      	ldr	r2, [pc, #492]	; (8001080 <HAL_RCC_OscConfig+0x330>)
 8000e94:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000e98:	6013      	str	r3, [r2, #0]
 8000e9a:	4b79      	ldr	r3, [pc, #484]	; (8001080 <HAL_RCC_OscConfig+0x330>)
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	4a78      	ldr	r2, [pc, #480]	; (8001080 <HAL_RCC_OscConfig+0x330>)
 8000ea0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000ea4:	6013      	str	r3, [r2, #0]
 8000ea6:	e021      	b.n	8000eec <HAL_RCC_OscConfig+0x19c>
 8000ea8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000eac:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	685b      	ldr	r3, [r3, #4]
 8000eb4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000eb8:	d10c      	bne.n	8000ed4 <HAL_RCC_OscConfig+0x184>
 8000eba:	4b71      	ldr	r3, [pc, #452]	; (8001080 <HAL_RCC_OscConfig+0x330>)
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	4a70      	ldr	r2, [pc, #448]	; (8001080 <HAL_RCC_OscConfig+0x330>)
 8000ec0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000ec4:	6013      	str	r3, [r2, #0]
 8000ec6:	4b6e      	ldr	r3, [pc, #440]	; (8001080 <HAL_RCC_OscConfig+0x330>)
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	4a6d      	ldr	r2, [pc, #436]	; (8001080 <HAL_RCC_OscConfig+0x330>)
 8000ecc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000ed0:	6013      	str	r3, [r2, #0]
 8000ed2:	e00b      	b.n	8000eec <HAL_RCC_OscConfig+0x19c>
 8000ed4:	4b6a      	ldr	r3, [pc, #424]	; (8001080 <HAL_RCC_OscConfig+0x330>)
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	4a69      	ldr	r2, [pc, #420]	; (8001080 <HAL_RCC_OscConfig+0x330>)
 8000eda:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000ede:	6013      	str	r3, [r2, #0]
 8000ee0:	4b67      	ldr	r3, [pc, #412]	; (8001080 <HAL_RCC_OscConfig+0x330>)
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	4a66      	ldr	r2, [pc, #408]	; (8001080 <HAL_RCC_OscConfig+0x330>)
 8000ee6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000eea:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000eec:	4b64      	ldr	r3, [pc, #400]	; (8001080 <HAL_RCC_OscConfig+0x330>)
 8000eee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ef0:	f023 020f 	bic.w	r2, r3, #15
 8000ef4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000ef8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	689b      	ldr	r3, [r3, #8]
 8000f00:	495f      	ldr	r1, [pc, #380]	; (8001080 <HAL_RCC_OscConfig+0x330>)
 8000f02:	4313      	orrs	r3, r2
 8000f04:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000f06:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000f0a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	685b      	ldr	r3, [r3, #4]
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d059      	beq.n	8000fca <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f16:	f7ff fc81 	bl	800081c <HAL_GetTick>
 8000f1a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f1e:	e00a      	b.n	8000f36 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000f20:	f7ff fc7c 	bl	800081c <HAL_GetTick>
 8000f24:	4602      	mov	r2, r0
 8000f26:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000f2a:	1ad3      	subs	r3, r2, r3
 8000f2c:	2b64      	cmp	r3, #100	; 0x64
 8000f2e:	d902      	bls.n	8000f36 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8000f30:	2303      	movs	r3, #3
 8000f32:	f000 bf43 	b.w	8001dbc <HAL_RCC_OscConfig+0x106c>
 8000f36:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f3a:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f3e:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8000f42:	fa93 f3a3 	rbit	r3, r3
 8000f46:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8000f4a:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f4e:	fab3 f383 	clz	r3, r3
 8000f52:	b2db      	uxtb	r3, r3
 8000f54:	095b      	lsrs	r3, r3, #5
 8000f56:	b2db      	uxtb	r3, r3
 8000f58:	f043 0301 	orr.w	r3, r3, #1
 8000f5c:	b2db      	uxtb	r3, r3
 8000f5e:	2b01      	cmp	r3, #1
 8000f60:	d102      	bne.n	8000f68 <HAL_RCC_OscConfig+0x218>
 8000f62:	4b47      	ldr	r3, [pc, #284]	; (8001080 <HAL_RCC_OscConfig+0x330>)
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	e015      	b.n	8000f94 <HAL_RCC_OscConfig+0x244>
 8000f68:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f6c:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f70:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8000f74:	fa93 f3a3 	rbit	r3, r3
 8000f78:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8000f7c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f80:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8000f84:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8000f88:	fa93 f3a3 	rbit	r3, r3
 8000f8c:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8000f90:	4b3b      	ldr	r3, [pc, #236]	; (8001080 <HAL_RCC_OscConfig+0x330>)
 8000f92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f94:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000f98:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8000f9c:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8000fa0:	fa92 f2a2 	rbit	r2, r2
 8000fa4:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8000fa8:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8000fac:	fab2 f282 	clz	r2, r2
 8000fb0:	b2d2      	uxtb	r2, r2
 8000fb2:	f042 0220 	orr.w	r2, r2, #32
 8000fb6:	b2d2      	uxtb	r2, r2
 8000fb8:	f002 021f 	and.w	r2, r2, #31
 8000fbc:	2101      	movs	r1, #1
 8000fbe:	fa01 f202 	lsl.w	r2, r1, r2
 8000fc2:	4013      	ands	r3, r2
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d0ab      	beq.n	8000f20 <HAL_RCC_OscConfig+0x1d0>
 8000fc8:	e05d      	b.n	8001086 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fca:	f7ff fc27 	bl	800081c <HAL_GetTick>
 8000fce:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000fd2:	e00a      	b.n	8000fea <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000fd4:	f7ff fc22 	bl	800081c <HAL_GetTick>
 8000fd8:	4602      	mov	r2, r0
 8000fda:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000fde:	1ad3      	subs	r3, r2, r3
 8000fe0:	2b64      	cmp	r3, #100	; 0x64
 8000fe2:	d902      	bls.n	8000fea <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8000fe4:	2303      	movs	r3, #3
 8000fe6:	f000 bee9 	b.w	8001dbc <HAL_RCC_OscConfig+0x106c>
 8000fea:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000fee:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ff2:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8000ff6:	fa93 f3a3 	rbit	r3, r3
 8000ffa:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8000ffe:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001002:	fab3 f383 	clz	r3, r3
 8001006:	b2db      	uxtb	r3, r3
 8001008:	095b      	lsrs	r3, r3, #5
 800100a:	b2db      	uxtb	r3, r3
 800100c:	f043 0301 	orr.w	r3, r3, #1
 8001010:	b2db      	uxtb	r3, r3
 8001012:	2b01      	cmp	r3, #1
 8001014:	d102      	bne.n	800101c <HAL_RCC_OscConfig+0x2cc>
 8001016:	4b1a      	ldr	r3, [pc, #104]	; (8001080 <HAL_RCC_OscConfig+0x330>)
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	e015      	b.n	8001048 <HAL_RCC_OscConfig+0x2f8>
 800101c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001020:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001024:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8001028:	fa93 f3a3 	rbit	r3, r3
 800102c:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8001030:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001034:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8001038:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 800103c:	fa93 f3a3 	rbit	r3, r3
 8001040:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8001044:	4b0e      	ldr	r3, [pc, #56]	; (8001080 <HAL_RCC_OscConfig+0x330>)
 8001046:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001048:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800104c:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8001050:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8001054:	fa92 f2a2 	rbit	r2, r2
 8001058:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 800105c:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8001060:	fab2 f282 	clz	r2, r2
 8001064:	b2d2      	uxtb	r2, r2
 8001066:	f042 0220 	orr.w	r2, r2, #32
 800106a:	b2d2      	uxtb	r2, r2
 800106c:	f002 021f 	and.w	r2, r2, #31
 8001070:	2101      	movs	r1, #1
 8001072:	fa01 f202 	lsl.w	r2, r1, r2
 8001076:	4013      	ands	r3, r2
 8001078:	2b00      	cmp	r3, #0
 800107a:	d1ab      	bne.n	8000fd4 <HAL_RCC_OscConfig+0x284>
 800107c:	e003      	b.n	8001086 <HAL_RCC_OscConfig+0x336>
 800107e:	bf00      	nop
 8001080:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001084:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001086:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800108a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	f003 0302 	and.w	r3, r3, #2
 8001096:	2b00      	cmp	r3, #0
 8001098:	f000 817d 	beq.w	8001396 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800109c:	4ba6      	ldr	r3, [pc, #664]	; (8001338 <HAL_RCC_OscConfig+0x5e8>)
 800109e:	685b      	ldr	r3, [r3, #4]
 80010a0:	f003 030c 	and.w	r3, r3, #12
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d00b      	beq.n	80010c0 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80010a8:	4ba3      	ldr	r3, [pc, #652]	; (8001338 <HAL_RCC_OscConfig+0x5e8>)
 80010aa:	685b      	ldr	r3, [r3, #4]
 80010ac:	f003 030c 	and.w	r3, r3, #12
 80010b0:	2b08      	cmp	r3, #8
 80010b2:	d172      	bne.n	800119a <HAL_RCC_OscConfig+0x44a>
 80010b4:	4ba0      	ldr	r3, [pc, #640]	; (8001338 <HAL_RCC_OscConfig+0x5e8>)
 80010b6:	685b      	ldr	r3, [r3, #4]
 80010b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d16c      	bne.n	800119a <HAL_RCC_OscConfig+0x44a>
 80010c0:	2302      	movs	r3, #2
 80010c2:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010c6:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80010ca:	fa93 f3a3 	rbit	r3, r3
 80010ce:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 80010d2:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80010d6:	fab3 f383 	clz	r3, r3
 80010da:	b2db      	uxtb	r3, r3
 80010dc:	095b      	lsrs	r3, r3, #5
 80010de:	b2db      	uxtb	r3, r3
 80010e0:	f043 0301 	orr.w	r3, r3, #1
 80010e4:	b2db      	uxtb	r3, r3
 80010e6:	2b01      	cmp	r3, #1
 80010e8:	d102      	bne.n	80010f0 <HAL_RCC_OscConfig+0x3a0>
 80010ea:	4b93      	ldr	r3, [pc, #588]	; (8001338 <HAL_RCC_OscConfig+0x5e8>)
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	e013      	b.n	8001118 <HAL_RCC_OscConfig+0x3c8>
 80010f0:	2302      	movs	r3, #2
 80010f2:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010f6:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 80010fa:	fa93 f3a3 	rbit	r3, r3
 80010fe:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8001102:	2302      	movs	r3, #2
 8001104:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8001108:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800110c:	fa93 f3a3 	rbit	r3, r3
 8001110:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8001114:	4b88      	ldr	r3, [pc, #544]	; (8001338 <HAL_RCC_OscConfig+0x5e8>)
 8001116:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001118:	2202      	movs	r2, #2
 800111a:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 800111e:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8001122:	fa92 f2a2 	rbit	r2, r2
 8001126:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 800112a:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 800112e:	fab2 f282 	clz	r2, r2
 8001132:	b2d2      	uxtb	r2, r2
 8001134:	f042 0220 	orr.w	r2, r2, #32
 8001138:	b2d2      	uxtb	r2, r2
 800113a:	f002 021f 	and.w	r2, r2, #31
 800113e:	2101      	movs	r1, #1
 8001140:	fa01 f202 	lsl.w	r2, r1, r2
 8001144:	4013      	ands	r3, r2
 8001146:	2b00      	cmp	r3, #0
 8001148:	d00a      	beq.n	8001160 <HAL_RCC_OscConfig+0x410>
 800114a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800114e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	691b      	ldr	r3, [r3, #16]
 8001156:	2b01      	cmp	r3, #1
 8001158:	d002      	beq.n	8001160 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 800115a:	2301      	movs	r3, #1
 800115c:	f000 be2e 	b.w	8001dbc <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001160:	4b75      	ldr	r3, [pc, #468]	; (8001338 <HAL_RCC_OscConfig+0x5e8>)
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001168:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800116c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	695b      	ldr	r3, [r3, #20]
 8001174:	21f8      	movs	r1, #248	; 0xf8
 8001176:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800117a:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 800117e:	fa91 f1a1 	rbit	r1, r1
 8001182:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8001186:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 800118a:	fab1 f181 	clz	r1, r1
 800118e:	b2c9      	uxtb	r1, r1
 8001190:	408b      	lsls	r3, r1
 8001192:	4969      	ldr	r1, [pc, #420]	; (8001338 <HAL_RCC_OscConfig+0x5e8>)
 8001194:	4313      	orrs	r3, r2
 8001196:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001198:	e0fd      	b.n	8001396 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800119a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800119e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	691b      	ldr	r3, [r3, #16]
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	f000 8088 	beq.w	80012bc <HAL_RCC_OscConfig+0x56c>
 80011ac:	2301      	movs	r3, #1
 80011ae:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011b2:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80011b6:	fa93 f3a3 	rbit	r3, r3
 80011ba:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 80011be:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80011c2:	fab3 f383 	clz	r3, r3
 80011c6:	b2db      	uxtb	r3, r3
 80011c8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80011cc:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80011d0:	009b      	lsls	r3, r3, #2
 80011d2:	461a      	mov	r2, r3
 80011d4:	2301      	movs	r3, #1
 80011d6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011d8:	f7ff fb20 	bl	800081c <HAL_GetTick>
 80011dc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011e0:	e00a      	b.n	80011f8 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80011e2:	f7ff fb1b 	bl	800081c <HAL_GetTick>
 80011e6:	4602      	mov	r2, r0
 80011e8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80011ec:	1ad3      	subs	r3, r2, r3
 80011ee:	2b02      	cmp	r3, #2
 80011f0:	d902      	bls.n	80011f8 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 80011f2:	2303      	movs	r3, #3
 80011f4:	f000 bde2 	b.w	8001dbc <HAL_RCC_OscConfig+0x106c>
 80011f8:	2302      	movs	r3, #2
 80011fa:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011fe:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8001202:	fa93 f3a3 	rbit	r3, r3
 8001206:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 800120a:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800120e:	fab3 f383 	clz	r3, r3
 8001212:	b2db      	uxtb	r3, r3
 8001214:	095b      	lsrs	r3, r3, #5
 8001216:	b2db      	uxtb	r3, r3
 8001218:	f043 0301 	orr.w	r3, r3, #1
 800121c:	b2db      	uxtb	r3, r3
 800121e:	2b01      	cmp	r3, #1
 8001220:	d102      	bne.n	8001228 <HAL_RCC_OscConfig+0x4d8>
 8001222:	4b45      	ldr	r3, [pc, #276]	; (8001338 <HAL_RCC_OscConfig+0x5e8>)
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	e013      	b.n	8001250 <HAL_RCC_OscConfig+0x500>
 8001228:	2302      	movs	r3, #2
 800122a:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800122e:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8001232:	fa93 f3a3 	rbit	r3, r3
 8001236:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800123a:	2302      	movs	r3, #2
 800123c:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001240:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8001244:	fa93 f3a3 	rbit	r3, r3
 8001248:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 800124c:	4b3a      	ldr	r3, [pc, #232]	; (8001338 <HAL_RCC_OscConfig+0x5e8>)
 800124e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001250:	2202      	movs	r2, #2
 8001252:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8001256:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800125a:	fa92 f2a2 	rbit	r2, r2
 800125e:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8001262:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8001266:	fab2 f282 	clz	r2, r2
 800126a:	b2d2      	uxtb	r2, r2
 800126c:	f042 0220 	orr.w	r2, r2, #32
 8001270:	b2d2      	uxtb	r2, r2
 8001272:	f002 021f 	and.w	r2, r2, #31
 8001276:	2101      	movs	r1, #1
 8001278:	fa01 f202 	lsl.w	r2, r1, r2
 800127c:	4013      	ands	r3, r2
 800127e:	2b00      	cmp	r3, #0
 8001280:	d0af      	beq.n	80011e2 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001282:	4b2d      	ldr	r3, [pc, #180]	; (8001338 <HAL_RCC_OscConfig+0x5e8>)
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800128a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800128e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	695b      	ldr	r3, [r3, #20]
 8001296:	21f8      	movs	r1, #248	; 0xf8
 8001298:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800129c:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80012a0:	fa91 f1a1 	rbit	r1, r1
 80012a4:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 80012a8:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 80012ac:	fab1 f181 	clz	r1, r1
 80012b0:	b2c9      	uxtb	r1, r1
 80012b2:	408b      	lsls	r3, r1
 80012b4:	4920      	ldr	r1, [pc, #128]	; (8001338 <HAL_RCC_OscConfig+0x5e8>)
 80012b6:	4313      	orrs	r3, r2
 80012b8:	600b      	str	r3, [r1, #0]
 80012ba:	e06c      	b.n	8001396 <HAL_RCC_OscConfig+0x646>
 80012bc:	2301      	movs	r3, #1
 80012be:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012c2:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80012c6:	fa93 f3a3 	rbit	r3, r3
 80012ca:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 80012ce:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80012d2:	fab3 f383 	clz	r3, r3
 80012d6:	b2db      	uxtb	r3, r3
 80012d8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80012dc:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80012e0:	009b      	lsls	r3, r3, #2
 80012e2:	461a      	mov	r2, r3
 80012e4:	2300      	movs	r3, #0
 80012e6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012e8:	f7ff fa98 	bl	800081c <HAL_GetTick>
 80012ec:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012f0:	e00a      	b.n	8001308 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80012f2:	f7ff fa93 	bl	800081c <HAL_GetTick>
 80012f6:	4602      	mov	r2, r0
 80012f8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80012fc:	1ad3      	subs	r3, r2, r3
 80012fe:	2b02      	cmp	r3, #2
 8001300:	d902      	bls.n	8001308 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8001302:	2303      	movs	r3, #3
 8001304:	f000 bd5a 	b.w	8001dbc <HAL_RCC_OscConfig+0x106c>
 8001308:	2302      	movs	r3, #2
 800130a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800130e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8001312:	fa93 f3a3 	rbit	r3, r3
 8001316:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 800131a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800131e:	fab3 f383 	clz	r3, r3
 8001322:	b2db      	uxtb	r3, r3
 8001324:	095b      	lsrs	r3, r3, #5
 8001326:	b2db      	uxtb	r3, r3
 8001328:	f043 0301 	orr.w	r3, r3, #1
 800132c:	b2db      	uxtb	r3, r3
 800132e:	2b01      	cmp	r3, #1
 8001330:	d104      	bne.n	800133c <HAL_RCC_OscConfig+0x5ec>
 8001332:	4b01      	ldr	r3, [pc, #4]	; (8001338 <HAL_RCC_OscConfig+0x5e8>)
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	e015      	b.n	8001364 <HAL_RCC_OscConfig+0x614>
 8001338:	40021000 	.word	0x40021000
 800133c:	2302      	movs	r3, #2
 800133e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001342:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001346:	fa93 f3a3 	rbit	r3, r3
 800134a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800134e:	2302      	movs	r3, #2
 8001350:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001354:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001358:	fa93 f3a3 	rbit	r3, r3
 800135c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8001360:	4bc8      	ldr	r3, [pc, #800]	; (8001684 <HAL_RCC_OscConfig+0x934>)
 8001362:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001364:	2202      	movs	r2, #2
 8001366:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 800136a:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800136e:	fa92 f2a2 	rbit	r2, r2
 8001372:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8001376:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800137a:	fab2 f282 	clz	r2, r2
 800137e:	b2d2      	uxtb	r2, r2
 8001380:	f042 0220 	orr.w	r2, r2, #32
 8001384:	b2d2      	uxtb	r2, r2
 8001386:	f002 021f 	and.w	r2, r2, #31
 800138a:	2101      	movs	r1, #1
 800138c:	fa01 f202 	lsl.w	r2, r1, r2
 8001390:	4013      	ands	r3, r2
 8001392:	2b00      	cmp	r3, #0
 8001394:	d1ad      	bne.n	80012f2 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001396:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800139a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	f003 0308 	and.w	r3, r3, #8
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	f000 8110 	beq.w	80015cc <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80013ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80013b0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	699b      	ldr	r3, [r3, #24]
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d079      	beq.n	80014b0 <HAL_RCC_OscConfig+0x760>
 80013bc:	2301      	movs	r3, #1
 80013be:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013c2:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80013c6:	fa93 f3a3 	rbit	r3, r3
 80013ca:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 80013ce:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80013d2:	fab3 f383 	clz	r3, r3
 80013d6:	b2db      	uxtb	r3, r3
 80013d8:	461a      	mov	r2, r3
 80013da:	4bab      	ldr	r3, [pc, #684]	; (8001688 <HAL_RCC_OscConfig+0x938>)
 80013dc:	4413      	add	r3, r2
 80013de:	009b      	lsls	r3, r3, #2
 80013e0:	461a      	mov	r2, r3
 80013e2:	2301      	movs	r3, #1
 80013e4:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013e6:	f7ff fa19 	bl	800081c <HAL_GetTick>
 80013ea:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013ee:	e00a      	b.n	8001406 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80013f0:	f7ff fa14 	bl	800081c <HAL_GetTick>
 80013f4:	4602      	mov	r2, r0
 80013f6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80013fa:	1ad3      	subs	r3, r2, r3
 80013fc:	2b02      	cmp	r3, #2
 80013fe:	d902      	bls.n	8001406 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8001400:	2303      	movs	r3, #3
 8001402:	f000 bcdb 	b.w	8001dbc <HAL_RCC_OscConfig+0x106c>
 8001406:	2302      	movs	r3, #2
 8001408:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800140c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8001410:	fa93 f3a3 	rbit	r3, r3
 8001414:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8001418:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800141c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001420:	2202      	movs	r2, #2
 8001422:	601a      	str	r2, [r3, #0]
 8001424:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001428:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	fa93 f2a3 	rbit	r2, r3
 8001432:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001436:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800143a:	601a      	str	r2, [r3, #0]
 800143c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001440:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001444:	2202      	movs	r2, #2
 8001446:	601a      	str	r2, [r3, #0]
 8001448:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800144c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	fa93 f2a3 	rbit	r2, r3
 8001456:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800145a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800145e:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001460:	4b88      	ldr	r3, [pc, #544]	; (8001684 <HAL_RCC_OscConfig+0x934>)
 8001462:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001464:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001468:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800146c:	2102      	movs	r1, #2
 800146e:	6019      	str	r1, [r3, #0]
 8001470:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001474:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	fa93 f1a3 	rbit	r1, r3
 800147e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001482:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001486:	6019      	str	r1, [r3, #0]
  return result;
 8001488:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800148c:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	fab3 f383 	clz	r3, r3
 8001496:	b2db      	uxtb	r3, r3
 8001498:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800149c:	b2db      	uxtb	r3, r3
 800149e:	f003 031f 	and.w	r3, r3, #31
 80014a2:	2101      	movs	r1, #1
 80014a4:	fa01 f303 	lsl.w	r3, r1, r3
 80014a8:	4013      	ands	r3, r2
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d0a0      	beq.n	80013f0 <HAL_RCC_OscConfig+0x6a0>
 80014ae:	e08d      	b.n	80015cc <HAL_RCC_OscConfig+0x87c>
 80014b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014b4:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80014b8:	2201      	movs	r2, #1
 80014ba:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014c0:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	fa93 f2a3 	rbit	r2, r3
 80014ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014ce:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80014d2:	601a      	str	r2, [r3, #0]
  return result;
 80014d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014d8:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80014dc:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80014de:	fab3 f383 	clz	r3, r3
 80014e2:	b2db      	uxtb	r3, r3
 80014e4:	461a      	mov	r2, r3
 80014e6:	4b68      	ldr	r3, [pc, #416]	; (8001688 <HAL_RCC_OscConfig+0x938>)
 80014e8:	4413      	add	r3, r2
 80014ea:	009b      	lsls	r3, r3, #2
 80014ec:	461a      	mov	r2, r3
 80014ee:	2300      	movs	r3, #0
 80014f0:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014f2:	f7ff f993 	bl	800081c <HAL_GetTick>
 80014f6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014fa:	e00a      	b.n	8001512 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80014fc:	f7ff f98e 	bl	800081c <HAL_GetTick>
 8001500:	4602      	mov	r2, r0
 8001502:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001506:	1ad3      	subs	r3, r2, r3
 8001508:	2b02      	cmp	r3, #2
 800150a:	d902      	bls.n	8001512 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 800150c:	2303      	movs	r3, #3
 800150e:	f000 bc55 	b.w	8001dbc <HAL_RCC_OscConfig+0x106c>
 8001512:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001516:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800151a:	2202      	movs	r2, #2
 800151c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800151e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001522:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	fa93 f2a3 	rbit	r2, r3
 800152c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001530:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001534:	601a      	str	r2, [r3, #0]
 8001536:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800153a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800153e:	2202      	movs	r2, #2
 8001540:	601a      	str	r2, [r3, #0]
 8001542:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001546:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	fa93 f2a3 	rbit	r2, r3
 8001550:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001554:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001558:	601a      	str	r2, [r3, #0]
 800155a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800155e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001562:	2202      	movs	r2, #2
 8001564:	601a      	str	r2, [r3, #0]
 8001566:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800156a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	fa93 f2a3 	rbit	r2, r3
 8001574:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001578:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800157c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800157e:	4b41      	ldr	r3, [pc, #260]	; (8001684 <HAL_RCC_OscConfig+0x934>)
 8001580:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001582:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001586:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800158a:	2102      	movs	r1, #2
 800158c:	6019      	str	r1, [r3, #0]
 800158e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001592:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	fa93 f1a3 	rbit	r1, r3
 800159c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015a0:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80015a4:	6019      	str	r1, [r3, #0]
  return result;
 80015a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015aa:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	fab3 f383 	clz	r3, r3
 80015b4:	b2db      	uxtb	r3, r3
 80015b6:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80015ba:	b2db      	uxtb	r3, r3
 80015bc:	f003 031f 	and.w	r3, r3, #31
 80015c0:	2101      	movs	r1, #1
 80015c2:	fa01 f303 	lsl.w	r3, r1, r3
 80015c6:	4013      	ands	r3, r2
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d197      	bne.n	80014fc <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80015cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015d0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	f003 0304 	and.w	r3, r3, #4
 80015dc:	2b00      	cmp	r3, #0
 80015de:	f000 81a1 	beq.w	8001924 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80015e2:	2300      	movs	r3, #0
 80015e4:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80015e8:	4b26      	ldr	r3, [pc, #152]	; (8001684 <HAL_RCC_OscConfig+0x934>)
 80015ea:	69db      	ldr	r3, [r3, #28]
 80015ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d116      	bne.n	8001622 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80015f4:	4b23      	ldr	r3, [pc, #140]	; (8001684 <HAL_RCC_OscConfig+0x934>)
 80015f6:	69db      	ldr	r3, [r3, #28]
 80015f8:	4a22      	ldr	r2, [pc, #136]	; (8001684 <HAL_RCC_OscConfig+0x934>)
 80015fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015fe:	61d3      	str	r3, [r2, #28]
 8001600:	4b20      	ldr	r3, [pc, #128]	; (8001684 <HAL_RCC_OscConfig+0x934>)
 8001602:	69db      	ldr	r3, [r3, #28]
 8001604:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8001608:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800160c:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8001610:	601a      	str	r2, [r3, #0]
 8001612:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001616:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 800161a:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 800161c:	2301      	movs	r3, #1
 800161e:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001622:	4b1a      	ldr	r3, [pc, #104]	; (800168c <HAL_RCC_OscConfig+0x93c>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800162a:	2b00      	cmp	r3, #0
 800162c:	d11a      	bne.n	8001664 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800162e:	4b17      	ldr	r3, [pc, #92]	; (800168c <HAL_RCC_OscConfig+0x93c>)
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	4a16      	ldr	r2, [pc, #88]	; (800168c <HAL_RCC_OscConfig+0x93c>)
 8001634:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001638:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800163a:	f7ff f8ef 	bl	800081c <HAL_GetTick>
 800163e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001642:	e009      	b.n	8001658 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001644:	f7ff f8ea 	bl	800081c <HAL_GetTick>
 8001648:	4602      	mov	r2, r0
 800164a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800164e:	1ad3      	subs	r3, r2, r3
 8001650:	2b64      	cmp	r3, #100	; 0x64
 8001652:	d901      	bls.n	8001658 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8001654:	2303      	movs	r3, #3
 8001656:	e3b1      	b.n	8001dbc <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001658:	4b0c      	ldr	r3, [pc, #48]	; (800168c <HAL_RCC_OscConfig+0x93c>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001660:	2b00      	cmp	r3, #0
 8001662:	d0ef      	beq.n	8001644 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001664:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001668:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	68db      	ldr	r3, [r3, #12]
 8001670:	2b01      	cmp	r3, #1
 8001672:	d10d      	bne.n	8001690 <HAL_RCC_OscConfig+0x940>
 8001674:	4b03      	ldr	r3, [pc, #12]	; (8001684 <HAL_RCC_OscConfig+0x934>)
 8001676:	6a1b      	ldr	r3, [r3, #32]
 8001678:	4a02      	ldr	r2, [pc, #8]	; (8001684 <HAL_RCC_OscConfig+0x934>)
 800167a:	f043 0301 	orr.w	r3, r3, #1
 800167e:	6213      	str	r3, [r2, #32]
 8001680:	e03c      	b.n	80016fc <HAL_RCC_OscConfig+0x9ac>
 8001682:	bf00      	nop
 8001684:	40021000 	.word	0x40021000
 8001688:	10908120 	.word	0x10908120
 800168c:	40007000 	.word	0x40007000
 8001690:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001694:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	68db      	ldr	r3, [r3, #12]
 800169c:	2b00      	cmp	r3, #0
 800169e:	d10c      	bne.n	80016ba <HAL_RCC_OscConfig+0x96a>
 80016a0:	4bc1      	ldr	r3, [pc, #772]	; (80019a8 <HAL_RCC_OscConfig+0xc58>)
 80016a2:	6a1b      	ldr	r3, [r3, #32]
 80016a4:	4ac0      	ldr	r2, [pc, #768]	; (80019a8 <HAL_RCC_OscConfig+0xc58>)
 80016a6:	f023 0301 	bic.w	r3, r3, #1
 80016aa:	6213      	str	r3, [r2, #32]
 80016ac:	4bbe      	ldr	r3, [pc, #760]	; (80019a8 <HAL_RCC_OscConfig+0xc58>)
 80016ae:	6a1b      	ldr	r3, [r3, #32]
 80016b0:	4abd      	ldr	r2, [pc, #756]	; (80019a8 <HAL_RCC_OscConfig+0xc58>)
 80016b2:	f023 0304 	bic.w	r3, r3, #4
 80016b6:	6213      	str	r3, [r2, #32]
 80016b8:	e020      	b.n	80016fc <HAL_RCC_OscConfig+0x9ac>
 80016ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016be:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	68db      	ldr	r3, [r3, #12]
 80016c6:	2b05      	cmp	r3, #5
 80016c8:	d10c      	bne.n	80016e4 <HAL_RCC_OscConfig+0x994>
 80016ca:	4bb7      	ldr	r3, [pc, #732]	; (80019a8 <HAL_RCC_OscConfig+0xc58>)
 80016cc:	6a1b      	ldr	r3, [r3, #32]
 80016ce:	4ab6      	ldr	r2, [pc, #728]	; (80019a8 <HAL_RCC_OscConfig+0xc58>)
 80016d0:	f043 0304 	orr.w	r3, r3, #4
 80016d4:	6213      	str	r3, [r2, #32]
 80016d6:	4bb4      	ldr	r3, [pc, #720]	; (80019a8 <HAL_RCC_OscConfig+0xc58>)
 80016d8:	6a1b      	ldr	r3, [r3, #32]
 80016da:	4ab3      	ldr	r2, [pc, #716]	; (80019a8 <HAL_RCC_OscConfig+0xc58>)
 80016dc:	f043 0301 	orr.w	r3, r3, #1
 80016e0:	6213      	str	r3, [r2, #32]
 80016e2:	e00b      	b.n	80016fc <HAL_RCC_OscConfig+0x9ac>
 80016e4:	4bb0      	ldr	r3, [pc, #704]	; (80019a8 <HAL_RCC_OscConfig+0xc58>)
 80016e6:	6a1b      	ldr	r3, [r3, #32]
 80016e8:	4aaf      	ldr	r2, [pc, #700]	; (80019a8 <HAL_RCC_OscConfig+0xc58>)
 80016ea:	f023 0301 	bic.w	r3, r3, #1
 80016ee:	6213      	str	r3, [r2, #32]
 80016f0:	4bad      	ldr	r3, [pc, #692]	; (80019a8 <HAL_RCC_OscConfig+0xc58>)
 80016f2:	6a1b      	ldr	r3, [r3, #32]
 80016f4:	4aac      	ldr	r2, [pc, #688]	; (80019a8 <HAL_RCC_OscConfig+0xc58>)
 80016f6:	f023 0304 	bic.w	r3, r3, #4
 80016fa:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80016fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001700:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	68db      	ldr	r3, [r3, #12]
 8001708:	2b00      	cmp	r3, #0
 800170a:	f000 8081 	beq.w	8001810 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800170e:	f7ff f885 	bl	800081c <HAL_GetTick>
 8001712:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001716:	e00b      	b.n	8001730 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001718:	f7ff f880 	bl	800081c <HAL_GetTick>
 800171c:	4602      	mov	r2, r0
 800171e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001722:	1ad3      	subs	r3, r2, r3
 8001724:	f241 3288 	movw	r2, #5000	; 0x1388
 8001728:	4293      	cmp	r3, r2
 800172a:	d901      	bls.n	8001730 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 800172c:	2303      	movs	r3, #3
 800172e:	e345      	b.n	8001dbc <HAL_RCC_OscConfig+0x106c>
 8001730:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001734:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001738:	2202      	movs	r2, #2
 800173a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800173c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001740:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	fa93 f2a3 	rbit	r2, r3
 800174a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800174e:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8001752:	601a      	str	r2, [r3, #0]
 8001754:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001758:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800175c:	2202      	movs	r2, #2
 800175e:	601a      	str	r2, [r3, #0]
 8001760:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001764:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	fa93 f2a3 	rbit	r2, r3
 800176e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001772:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8001776:	601a      	str	r2, [r3, #0]
  return result;
 8001778:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800177c:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8001780:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001782:	fab3 f383 	clz	r3, r3
 8001786:	b2db      	uxtb	r3, r3
 8001788:	095b      	lsrs	r3, r3, #5
 800178a:	b2db      	uxtb	r3, r3
 800178c:	f043 0302 	orr.w	r3, r3, #2
 8001790:	b2db      	uxtb	r3, r3
 8001792:	2b02      	cmp	r3, #2
 8001794:	d102      	bne.n	800179c <HAL_RCC_OscConfig+0xa4c>
 8001796:	4b84      	ldr	r3, [pc, #528]	; (80019a8 <HAL_RCC_OscConfig+0xc58>)
 8001798:	6a1b      	ldr	r3, [r3, #32]
 800179a:	e013      	b.n	80017c4 <HAL_RCC_OscConfig+0xa74>
 800179c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017a0:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80017a4:	2202      	movs	r2, #2
 80017a6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017ac:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	fa93 f2a3 	rbit	r2, r3
 80017b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017ba:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80017be:	601a      	str	r2, [r3, #0]
 80017c0:	4b79      	ldr	r3, [pc, #484]	; (80019a8 <HAL_RCC_OscConfig+0xc58>)
 80017c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017c4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80017c8:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 80017cc:	2102      	movs	r1, #2
 80017ce:	6011      	str	r1, [r2, #0]
 80017d0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80017d4:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 80017d8:	6812      	ldr	r2, [r2, #0]
 80017da:	fa92 f1a2 	rbit	r1, r2
 80017de:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80017e2:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80017e6:	6011      	str	r1, [r2, #0]
  return result;
 80017e8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80017ec:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80017f0:	6812      	ldr	r2, [r2, #0]
 80017f2:	fab2 f282 	clz	r2, r2
 80017f6:	b2d2      	uxtb	r2, r2
 80017f8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80017fc:	b2d2      	uxtb	r2, r2
 80017fe:	f002 021f 	and.w	r2, r2, #31
 8001802:	2101      	movs	r1, #1
 8001804:	fa01 f202 	lsl.w	r2, r1, r2
 8001808:	4013      	ands	r3, r2
 800180a:	2b00      	cmp	r3, #0
 800180c:	d084      	beq.n	8001718 <HAL_RCC_OscConfig+0x9c8>
 800180e:	e07f      	b.n	8001910 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001810:	f7ff f804 	bl	800081c <HAL_GetTick>
 8001814:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001818:	e00b      	b.n	8001832 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800181a:	f7fe ffff 	bl	800081c <HAL_GetTick>
 800181e:	4602      	mov	r2, r0
 8001820:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001824:	1ad3      	subs	r3, r2, r3
 8001826:	f241 3288 	movw	r2, #5000	; 0x1388
 800182a:	4293      	cmp	r3, r2
 800182c:	d901      	bls.n	8001832 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 800182e:	2303      	movs	r3, #3
 8001830:	e2c4      	b.n	8001dbc <HAL_RCC_OscConfig+0x106c>
 8001832:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001836:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800183a:	2202      	movs	r2, #2
 800183c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800183e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001842:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	fa93 f2a3 	rbit	r2, r3
 800184c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001850:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8001854:	601a      	str	r2, [r3, #0]
 8001856:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800185a:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800185e:	2202      	movs	r2, #2
 8001860:	601a      	str	r2, [r3, #0]
 8001862:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001866:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	fa93 f2a3 	rbit	r2, r3
 8001870:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001874:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8001878:	601a      	str	r2, [r3, #0]
  return result;
 800187a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800187e:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8001882:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001884:	fab3 f383 	clz	r3, r3
 8001888:	b2db      	uxtb	r3, r3
 800188a:	095b      	lsrs	r3, r3, #5
 800188c:	b2db      	uxtb	r3, r3
 800188e:	f043 0302 	orr.w	r3, r3, #2
 8001892:	b2db      	uxtb	r3, r3
 8001894:	2b02      	cmp	r3, #2
 8001896:	d102      	bne.n	800189e <HAL_RCC_OscConfig+0xb4e>
 8001898:	4b43      	ldr	r3, [pc, #268]	; (80019a8 <HAL_RCC_OscConfig+0xc58>)
 800189a:	6a1b      	ldr	r3, [r3, #32]
 800189c:	e013      	b.n	80018c6 <HAL_RCC_OscConfig+0xb76>
 800189e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018a2:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80018a6:	2202      	movs	r2, #2
 80018a8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018ae:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	fa93 f2a3 	rbit	r2, r3
 80018b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018bc:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 80018c0:	601a      	str	r2, [r3, #0]
 80018c2:	4b39      	ldr	r3, [pc, #228]	; (80019a8 <HAL_RCC_OscConfig+0xc58>)
 80018c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018c6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80018ca:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 80018ce:	2102      	movs	r1, #2
 80018d0:	6011      	str	r1, [r2, #0]
 80018d2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80018d6:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 80018da:	6812      	ldr	r2, [r2, #0]
 80018dc:	fa92 f1a2 	rbit	r1, r2
 80018e0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80018e4:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80018e8:	6011      	str	r1, [r2, #0]
  return result;
 80018ea:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80018ee:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80018f2:	6812      	ldr	r2, [r2, #0]
 80018f4:	fab2 f282 	clz	r2, r2
 80018f8:	b2d2      	uxtb	r2, r2
 80018fa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80018fe:	b2d2      	uxtb	r2, r2
 8001900:	f002 021f 	and.w	r2, r2, #31
 8001904:	2101      	movs	r1, #1
 8001906:	fa01 f202 	lsl.w	r2, r1, r2
 800190a:	4013      	ands	r3, r2
 800190c:	2b00      	cmp	r3, #0
 800190e:	d184      	bne.n	800181a <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001910:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8001914:	2b01      	cmp	r3, #1
 8001916:	d105      	bne.n	8001924 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001918:	4b23      	ldr	r3, [pc, #140]	; (80019a8 <HAL_RCC_OscConfig+0xc58>)
 800191a:	69db      	ldr	r3, [r3, #28]
 800191c:	4a22      	ldr	r2, [pc, #136]	; (80019a8 <HAL_RCC_OscConfig+0xc58>)
 800191e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001922:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001924:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001928:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	69db      	ldr	r3, [r3, #28]
 8001930:	2b00      	cmp	r3, #0
 8001932:	f000 8242 	beq.w	8001dba <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001936:	4b1c      	ldr	r3, [pc, #112]	; (80019a8 <HAL_RCC_OscConfig+0xc58>)
 8001938:	685b      	ldr	r3, [r3, #4]
 800193a:	f003 030c 	and.w	r3, r3, #12
 800193e:	2b08      	cmp	r3, #8
 8001940:	f000 8213 	beq.w	8001d6a <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001944:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001948:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	69db      	ldr	r3, [r3, #28]
 8001950:	2b02      	cmp	r3, #2
 8001952:	f040 8162 	bne.w	8001c1a <HAL_RCC_OscConfig+0xeca>
 8001956:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800195a:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 800195e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001962:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001964:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001968:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	fa93 f2a3 	rbit	r2, r3
 8001972:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001976:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800197a:	601a      	str	r2, [r3, #0]
  return result;
 800197c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001980:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8001984:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001986:	fab3 f383 	clz	r3, r3
 800198a:	b2db      	uxtb	r3, r3
 800198c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001990:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001994:	009b      	lsls	r3, r3, #2
 8001996:	461a      	mov	r2, r3
 8001998:	2300      	movs	r3, #0
 800199a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800199c:	f7fe ff3e 	bl	800081c <HAL_GetTick>
 80019a0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019a4:	e00c      	b.n	80019c0 <HAL_RCC_OscConfig+0xc70>
 80019a6:	bf00      	nop
 80019a8:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019ac:	f7fe ff36 	bl	800081c <HAL_GetTick>
 80019b0:	4602      	mov	r2, r0
 80019b2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80019b6:	1ad3      	subs	r3, r2, r3
 80019b8:	2b02      	cmp	r3, #2
 80019ba:	d901      	bls.n	80019c0 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 80019bc:	2303      	movs	r3, #3
 80019be:	e1fd      	b.n	8001dbc <HAL_RCC_OscConfig+0x106c>
 80019c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019c4:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80019c8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80019cc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019d2:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	fa93 f2a3 	rbit	r2, r3
 80019dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019e0:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80019e4:	601a      	str	r2, [r3, #0]
  return result;
 80019e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019ea:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80019ee:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019f0:	fab3 f383 	clz	r3, r3
 80019f4:	b2db      	uxtb	r3, r3
 80019f6:	095b      	lsrs	r3, r3, #5
 80019f8:	b2db      	uxtb	r3, r3
 80019fa:	f043 0301 	orr.w	r3, r3, #1
 80019fe:	b2db      	uxtb	r3, r3
 8001a00:	2b01      	cmp	r3, #1
 8001a02:	d102      	bne.n	8001a0a <HAL_RCC_OscConfig+0xcba>
 8001a04:	4bb0      	ldr	r3, [pc, #704]	; (8001cc8 <HAL_RCC_OscConfig+0xf78>)
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	e027      	b.n	8001a5a <HAL_RCC_OscConfig+0xd0a>
 8001a0a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a0e:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8001a12:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001a16:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a18:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a1c:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	fa93 f2a3 	rbit	r2, r3
 8001a26:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a2a:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8001a2e:	601a      	str	r2, [r3, #0]
 8001a30:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a34:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8001a38:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001a3c:	601a      	str	r2, [r3, #0]
 8001a3e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a42:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	fa93 f2a3 	rbit	r2, r3
 8001a4c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a50:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8001a54:	601a      	str	r2, [r3, #0]
 8001a56:	4b9c      	ldr	r3, [pc, #624]	; (8001cc8 <HAL_RCC_OscConfig+0xf78>)
 8001a58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a5a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001a5e:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8001a62:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001a66:	6011      	str	r1, [r2, #0]
 8001a68:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001a6c:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8001a70:	6812      	ldr	r2, [r2, #0]
 8001a72:	fa92 f1a2 	rbit	r1, r2
 8001a76:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001a7a:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8001a7e:	6011      	str	r1, [r2, #0]
  return result;
 8001a80:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001a84:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8001a88:	6812      	ldr	r2, [r2, #0]
 8001a8a:	fab2 f282 	clz	r2, r2
 8001a8e:	b2d2      	uxtb	r2, r2
 8001a90:	f042 0220 	orr.w	r2, r2, #32
 8001a94:	b2d2      	uxtb	r2, r2
 8001a96:	f002 021f 	and.w	r2, r2, #31
 8001a9a:	2101      	movs	r1, #1
 8001a9c:	fa01 f202 	lsl.w	r2, r1, r2
 8001aa0:	4013      	ands	r3, r2
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d182      	bne.n	80019ac <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001aa6:	4b88      	ldr	r3, [pc, #544]	; (8001cc8 <HAL_RCC_OscConfig+0xf78>)
 8001aa8:	685b      	ldr	r3, [r3, #4]
 8001aaa:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001aae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ab2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8001aba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001abe:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	6a1b      	ldr	r3, [r3, #32]
 8001ac6:	430b      	orrs	r3, r1
 8001ac8:	497f      	ldr	r1, [pc, #508]	; (8001cc8 <HAL_RCC_OscConfig+0xf78>)
 8001aca:	4313      	orrs	r3, r2
 8001acc:	604b      	str	r3, [r1, #4]
 8001ace:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ad2:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8001ad6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001ada:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001adc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ae0:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	fa93 f2a3 	rbit	r2, r3
 8001aea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001aee:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8001af2:	601a      	str	r2, [r3, #0]
  return result;
 8001af4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001af8:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8001afc:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001afe:	fab3 f383 	clz	r3, r3
 8001b02:	b2db      	uxtb	r3, r3
 8001b04:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001b08:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001b0c:	009b      	lsls	r3, r3, #2
 8001b0e:	461a      	mov	r2, r3
 8001b10:	2301      	movs	r3, #1
 8001b12:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b14:	f7fe fe82 	bl	800081c <HAL_GetTick>
 8001b18:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b1c:	e009      	b.n	8001b32 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b1e:	f7fe fe7d 	bl	800081c <HAL_GetTick>
 8001b22:	4602      	mov	r2, r0
 8001b24:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001b28:	1ad3      	subs	r3, r2, r3
 8001b2a:	2b02      	cmp	r3, #2
 8001b2c:	d901      	bls.n	8001b32 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8001b2e:	2303      	movs	r3, #3
 8001b30:	e144      	b.n	8001dbc <HAL_RCC_OscConfig+0x106c>
 8001b32:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b36:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8001b3a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001b3e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b40:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b44:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	fa93 f2a3 	rbit	r2, r3
 8001b4e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b52:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8001b56:	601a      	str	r2, [r3, #0]
  return result;
 8001b58:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b5c:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8001b60:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b62:	fab3 f383 	clz	r3, r3
 8001b66:	b2db      	uxtb	r3, r3
 8001b68:	095b      	lsrs	r3, r3, #5
 8001b6a:	b2db      	uxtb	r3, r3
 8001b6c:	f043 0301 	orr.w	r3, r3, #1
 8001b70:	b2db      	uxtb	r3, r3
 8001b72:	2b01      	cmp	r3, #1
 8001b74:	d102      	bne.n	8001b7c <HAL_RCC_OscConfig+0xe2c>
 8001b76:	4b54      	ldr	r3, [pc, #336]	; (8001cc8 <HAL_RCC_OscConfig+0xf78>)
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	e027      	b.n	8001bcc <HAL_RCC_OscConfig+0xe7c>
 8001b7c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b80:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8001b84:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001b88:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b8a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b8e:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	fa93 f2a3 	rbit	r2, r3
 8001b98:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b9c:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8001ba0:	601a      	str	r2, [r3, #0]
 8001ba2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ba6:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8001baa:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001bae:	601a      	str	r2, [r3, #0]
 8001bb0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bb4:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	fa93 f2a3 	rbit	r2, r3
 8001bbe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bc2:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8001bc6:	601a      	str	r2, [r3, #0]
 8001bc8:	4b3f      	ldr	r3, [pc, #252]	; (8001cc8 <HAL_RCC_OscConfig+0xf78>)
 8001bca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bcc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001bd0:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8001bd4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001bd8:	6011      	str	r1, [r2, #0]
 8001bda:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001bde:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8001be2:	6812      	ldr	r2, [r2, #0]
 8001be4:	fa92 f1a2 	rbit	r1, r2
 8001be8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001bec:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8001bf0:	6011      	str	r1, [r2, #0]
  return result;
 8001bf2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001bf6:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8001bfa:	6812      	ldr	r2, [r2, #0]
 8001bfc:	fab2 f282 	clz	r2, r2
 8001c00:	b2d2      	uxtb	r2, r2
 8001c02:	f042 0220 	orr.w	r2, r2, #32
 8001c06:	b2d2      	uxtb	r2, r2
 8001c08:	f002 021f 	and.w	r2, r2, #31
 8001c0c:	2101      	movs	r1, #1
 8001c0e:	fa01 f202 	lsl.w	r2, r1, r2
 8001c12:	4013      	ands	r3, r2
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d082      	beq.n	8001b1e <HAL_RCC_OscConfig+0xdce>
 8001c18:	e0cf      	b.n	8001dba <HAL_RCC_OscConfig+0x106a>
 8001c1a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c1e:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8001c22:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001c26:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c28:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c2c:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	fa93 f2a3 	rbit	r2, r3
 8001c36:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c3a:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8001c3e:	601a      	str	r2, [r3, #0]
  return result;
 8001c40:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c44:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8001c48:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c4a:	fab3 f383 	clz	r3, r3
 8001c4e:	b2db      	uxtb	r3, r3
 8001c50:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001c54:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001c58:	009b      	lsls	r3, r3, #2
 8001c5a:	461a      	mov	r2, r3
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c60:	f7fe fddc 	bl	800081c <HAL_GetTick>
 8001c64:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c68:	e009      	b.n	8001c7e <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c6a:	f7fe fdd7 	bl	800081c <HAL_GetTick>
 8001c6e:	4602      	mov	r2, r0
 8001c70:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001c74:	1ad3      	subs	r3, r2, r3
 8001c76:	2b02      	cmp	r3, #2
 8001c78:	d901      	bls.n	8001c7e <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8001c7a:	2303      	movs	r3, #3
 8001c7c:	e09e      	b.n	8001dbc <HAL_RCC_OscConfig+0x106c>
 8001c7e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c82:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8001c86:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001c8a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c8c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c90:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	fa93 f2a3 	rbit	r2, r3
 8001c9a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c9e:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8001ca2:	601a      	str	r2, [r3, #0]
  return result;
 8001ca4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ca8:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8001cac:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001cae:	fab3 f383 	clz	r3, r3
 8001cb2:	b2db      	uxtb	r3, r3
 8001cb4:	095b      	lsrs	r3, r3, #5
 8001cb6:	b2db      	uxtb	r3, r3
 8001cb8:	f043 0301 	orr.w	r3, r3, #1
 8001cbc:	b2db      	uxtb	r3, r3
 8001cbe:	2b01      	cmp	r3, #1
 8001cc0:	d104      	bne.n	8001ccc <HAL_RCC_OscConfig+0xf7c>
 8001cc2:	4b01      	ldr	r3, [pc, #4]	; (8001cc8 <HAL_RCC_OscConfig+0xf78>)
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	e029      	b.n	8001d1c <HAL_RCC_OscConfig+0xfcc>
 8001cc8:	40021000 	.word	0x40021000
 8001ccc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cd0:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8001cd4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001cd8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cda:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cde:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	fa93 f2a3 	rbit	r2, r3
 8001ce8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cec:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8001cf0:	601a      	str	r2, [r3, #0]
 8001cf2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cf6:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8001cfa:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001cfe:	601a      	str	r2, [r3, #0]
 8001d00:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d04:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	fa93 f2a3 	rbit	r2, r3
 8001d0e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d12:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8001d16:	601a      	str	r2, [r3, #0]
 8001d18:	4b2b      	ldr	r3, [pc, #172]	; (8001dc8 <HAL_RCC_OscConfig+0x1078>)
 8001d1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d1c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001d20:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8001d24:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001d28:	6011      	str	r1, [r2, #0]
 8001d2a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001d2e:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8001d32:	6812      	ldr	r2, [r2, #0]
 8001d34:	fa92 f1a2 	rbit	r1, r2
 8001d38:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001d3c:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8001d40:	6011      	str	r1, [r2, #0]
  return result;
 8001d42:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001d46:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8001d4a:	6812      	ldr	r2, [r2, #0]
 8001d4c:	fab2 f282 	clz	r2, r2
 8001d50:	b2d2      	uxtb	r2, r2
 8001d52:	f042 0220 	orr.w	r2, r2, #32
 8001d56:	b2d2      	uxtb	r2, r2
 8001d58:	f002 021f 	and.w	r2, r2, #31
 8001d5c:	2101      	movs	r1, #1
 8001d5e:	fa01 f202 	lsl.w	r2, r1, r2
 8001d62:	4013      	ands	r3, r2
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d180      	bne.n	8001c6a <HAL_RCC_OscConfig+0xf1a>
 8001d68:	e027      	b.n	8001dba <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001d6a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d6e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	69db      	ldr	r3, [r3, #28]
 8001d76:	2b01      	cmp	r3, #1
 8001d78:	d101      	bne.n	8001d7e <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8001d7a:	2301      	movs	r3, #1
 8001d7c:	e01e      	b.n	8001dbc <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001d7e:	4b12      	ldr	r3, [pc, #72]	; (8001dc8 <HAL_RCC_OscConfig+0x1078>)
 8001d80:	685b      	ldr	r3, [r3, #4]
 8001d82:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001d86:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001d8a:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001d8e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d92:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	6a1b      	ldr	r3, [r3, #32]
 8001d9a:	429a      	cmp	r2, r3
 8001d9c:	d10b      	bne.n	8001db6 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8001d9e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001da2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001da6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001daa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001db2:	429a      	cmp	r2, r3
 8001db4:	d001      	beq.n	8001dba <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8001db6:	2301      	movs	r3, #1
 8001db8:	e000      	b.n	8001dbc <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8001dba:	2300      	movs	r3, #0
}
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	bd80      	pop	{r7, pc}
 8001dc6:	bf00      	nop
 8001dc8:	40021000 	.word	0x40021000

08001dcc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b09e      	sub	sp, #120	; 0x78
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
 8001dd4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d101      	bne.n	8001de4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001de0:	2301      	movs	r3, #1
 8001de2:	e162      	b.n	80020aa <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001de4:	4b90      	ldr	r3, [pc, #576]	; (8002028 <HAL_RCC_ClockConfig+0x25c>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f003 0307 	and.w	r3, r3, #7
 8001dec:	683a      	ldr	r2, [r7, #0]
 8001dee:	429a      	cmp	r2, r3
 8001df0:	d910      	bls.n	8001e14 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001df2:	4b8d      	ldr	r3, [pc, #564]	; (8002028 <HAL_RCC_ClockConfig+0x25c>)
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f023 0207 	bic.w	r2, r3, #7
 8001dfa:	498b      	ldr	r1, [pc, #556]	; (8002028 <HAL_RCC_ClockConfig+0x25c>)
 8001dfc:	683b      	ldr	r3, [r7, #0]
 8001dfe:	4313      	orrs	r3, r2
 8001e00:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e02:	4b89      	ldr	r3, [pc, #548]	; (8002028 <HAL_RCC_ClockConfig+0x25c>)
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f003 0307 	and.w	r3, r3, #7
 8001e0a:	683a      	ldr	r2, [r7, #0]
 8001e0c:	429a      	cmp	r2, r3
 8001e0e:	d001      	beq.n	8001e14 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001e10:	2301      	movs	r3, #1
 8001e12:	e14a      	b.n	80020aa <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f003 0302 	and.w	r3, r3, #2
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d008      	beq.n	8001e32 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e20:	4b82      	ldr	r3, [pc, #520]	; (800202c <HAL_RCC_ClockConfig+0x260>)
 8001e22:	685b      	ldr	r3, [r3, #4]
 8001e24:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	689b      	ldr	r3, [r3, #8]
 8001e2c:	497f      	ldr	r1, [pc, #508]	; (800202c <HAL_RCC_ClockConfig+0x260>)
 8001e2e:	4313      	orrs	r3, r2
 8001e30:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f003 0301 	and.w	r3, r3, #1
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	f000 80dc 	beq.w	8001ff8 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	685b      	ldr	r3, [r3, #4]
 8001e44:	2b01      	cmp	r3, #1
 8001e46:	d13c      	bne.n	8001ec2 <HAL_RCC_ClockConfig+0xf6>
 8001e48:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001e4c:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e4e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001e50:	fa93 f3a3 	rbit	r3, r3
 8001e54:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8001e56:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e58:	fab3 f383 	clz	r3, r3
 8001e5c:	b2db      	uxtb	r3, r3
 8001e5e:	095b      	lsrs	r3, r3, #5
 8001e60:	b2db      	uxtb	r3, r3
 8001e62:	f043 0301 	orr.w	r3, r3, #1
 8001e66:	b2db      	uxtb	r3, r3
 8001e68:	2b01      	cmp	r3, #1
 8001e6a:	d102      	bne.n	8001e72 <HAL_RCC_ClockConfig+0xa6>
 8001e6c:	4b6f      	ldr	r3, [pc, #444]	; (800202c <HAL_RCC_ClockConfig+0x260>)
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	e00f      	b.n	8001e92 <HAL_RCC_ClockConfig+0xc6>
 8001e72:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001e76:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e78:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001e7a:	fa93 f3a3 	rbit	r3, r3
 8001e7e:	667b      	str	r3, [r7, #100]	; 0x64
 8001e80:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001e84:	663b      	str	r3, [r7, #96]	; 0x60
 8001e86:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001e88:	fa93 f3a3 	rbit	r3, r3
 8001e8c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001e8e:	4b67      	ldr	r3, [pc, #412]	; (800202c <HAL_RCC_ClockConfig+0x260>)
 8001e90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e92:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001e96:	65ba      	str	r2, [r7, #88]	; 0x58
 8001e98:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001e9a:	fa92 f2a2 	rbit	r2, r2
 8001e9e:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8001ea0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001ea2:	fab2 f282 	clz	r2, r2
 8001ea6:	b2d2      	uxtb	r2, r2
 8001ea8:	f042 0220 	orr.w	r2, r2, #32
 8001eac:	b2d2      	uxtb	r2, r2
 8001eae:	f002 021f 	and.w	r2, r2, #31
 8001eb2:	2101      	movs	r1, #1
 8001eb4:	fa01 f202 	lsl.w	r2, r1, r2
 8001eb8:	4013      	ands	r3, r2
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d17b      	bne.n	8001fb6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001ebe:	2301      	movs	r3, #1
 8001ec0:	e0f3      	b.n	80020aa <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	685b      	ldr	r3, [r3, #4]
 8001ec6:	2b02      	cmp	r3, #2
 8001ec8:	d13c      	bne.n	8001f44 <HAL_RCC_ClockConfig+0x178>
 8001eca:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001ece:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ed0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001ed2:	fa93 f3a3 	rbit	r3, r3
 8001ed6:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001ed8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001eda:	fab3 f383 	clz	r3, r3
 8001ede:	b2db      	uxtb	r3, r3
 8001ee0:	095b      	lsrs	r3, r3, #5
 8001ee2:	b2db      	uxtb	r3, r3
 8001ee4:	f043 0301 	orr.w	r3, r3, #1
 8001ee8:	b2db      	uxtb	r3, r3
 8001eea:	2b01      	cmp	r3, #1
 8001eec:	d102      	bne.n	8001ef4 <HAL_RCC_ClockConfig+0x128>
 8001eee:	4b4f      	ldr	r3, [pc, #316]	; (800202c <HAL_RCC_ClockConfig+0x260>)
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	e00f      	b.n	8001f14 <HAL_RCC_ClockConfig+0x148>
 8001ef4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001ef8:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001efa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001efc:	fa93 f3a3 	rbit	r3, r3
 8001f00:	647b      	str	r3, [r7, #68]	; 0x44
 8001f02:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001f06:	643b      	str	r3, [r7, #64]	; 0x40
 8001f08:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001f0a:	fa93 f3a3 	rbit	r3, r3
 8001f0e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001f10:	4b46      	ldr	r3, [pc, #280]	; (800202c <HAL_RCC_ClockConfig+0x260>)
 8001f12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f14:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001f18:	63ba      	str	r2, [r7, #56]	; 0x38
 8001f1a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001f1c:	fa92 f2a2 	rbit	r2, r2
 8001f20:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8001f22:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001f24:	fab2 f282 	clz	r2, r2
 8001f28:	b2d2      	uxtb	r2, r2
 8001f2a:	f042 0220 	orr.w	r2, r2, #32
 8001f2e:	b2d2      	uxtb	r2, r2
 8001f30:	f002 021f 	and.w	r2, r2, #31
 8001f34:	2101      	movs	r1, #1
 8001f36:	fa01 f202 	lsl.w	r2, r1, r2
 8001f3a:	4013      	ands	r3, r2
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d13a      	bne.n	8001fb6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001f40:	2301      	movs	r3, #1
 8001f42:	e0b2      	b.n	80020aa <HAL_RCC_ClockConfig+0x2de>
 8001f44:	2302      	movs	r3, #2
 8001f46:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f4a:	fa93 f3a3 	rbit	r3, r3
 8001f4e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8001f50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f52:	fab3 f383 	clz	r3, r3
 8001f56:	b2db      	uxtb	r3, r3
 8001f58:	095b      	lsrs	r3, r3, #5
 8001f5a:	b2db      	uxtb	r3, r3
 8001f5c:	f043 0301 	orr.w	r3, r3, #1
 8001f60:	b2db      	uxtb	r3, r3
 8001f62:	2b01      	cmp	r3, #1
 8001f64:	d102      	bne.n	8001f6c <HAL_RCC_ClockConfig+0x1a0>
 8001f66:	4b31      	ldr	r3, [pc, #196]	; (800202c <HAL_RCC_ClockConfig+0x260>)
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	e00d      	b.n	8001f88 <HAL_RCC_ClockConfig+0x1bc>
 8001f6c:	2302      	movs	r3, #2
 8001f6e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f72:	fa93 f3a3 	rbit	r3, r3
 8001f76:	627b      	str	r3, [r7, #36]	; 0x24
 8001f78:	2302      	movs	r3, #2
 8001f7a:	623b      	str	r3, [r7, #32]
 8001f7c:	6a3b      	ldr	r3, [r7, #32]
 8001f7e:	fa93 f3a3 	rbit	r3, r3
 8001f82:	61fb      	str	r3, [r7, #28]
 8001f84:	4b29      	ldr	r3, [pc, #164]	; (800202c <HAL_RCC_ClockConfig+0x260>)
 8001f86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f88:	2202      	movs	r2, #2
 8001f8a:	61ba      	str	r2, [r7, #24]
 8001f8c:	69ba      	ldr	r2, [r7, #24]
 8001f8e:	fa92 f2a2 	rbit	r2, r2
 8001f92:	617a      	str	r2, [r7, #20]
  return result;
 8001f94:	697a      	ldr	r2, [r7, #20]
 8001f96:	fab2 f282 	clz	r2, r2
 8001f9a:	b2d2      	uxtb	r2, r2
 8001f9c:	f042 0220 	orr.w	r2, r2, #32
 8001fa0:	b2d2      	uxtb	r2, r2
 8001fa2:	f002 021f 	and.w	r2, r2, #31
 8001fa6:	2101      	movs	r1, #1
 8001fa8:	fa01 f202 	lsl.w	r2, r1, r2
 8001fac:	4013      	ands	r3, r2
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d101      	bne.n	8001fb6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001fb2:	2301      	movs	r3, #1
 8001fb4:	e079      	b.n	80020aa <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001fb6:	4b1d      	ldr	r3, [pc, #116]	; (800202c <HAL_RCC_ClockConfig+0x260>)
 8001fb8:	685b      	ldr	r3, [r3, #4]
 8001fba:	f023 0203 	bic.w	r2, r3, #3
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	685b      	ldr	r3, [r3, #4]
 8001fc2:	491a      	ldr	r1, [pc, #104]	; (800202c <HAL_RCC_ClockConfig+0x260>)
 8001fc4:	4313      	orrs	r3, r2
 8001fc6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001fc8:	f7fe fc28 	bl	800081c <HAL_GetTick>
 8001fcc:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fce:	e00a      	b.n	8001fe6 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001fd0:	f7fe fc24 	bl	800081c <HAL_GetTick>
 8001fd4:	4602      	mov	r2, r0
 8001fd6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001fd8:	1ad3      	subs	r3, r2, r3
 8001fda:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fde:	4293      	cmp	r3, r2
 8001fe0:	d901      	bls.n	8001fe6 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8001fe2:	2303      	movs	r3, #3
 8001fe4:	e061      	b.n	80020aa <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fe6:	4b11      	ldr	r3, [pc, #68]	; (800202c <HAL_RCC_ClockConfig+0x260>)
 8001fe8:	685b      	ldr	r3, [r3, #4]
 8001fea:	f003 020c 	and.w	r2, r3, #12
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	685b      	ldr	r3, [r3, #4]
 8001ff2:	009b      	lsls	r3, r3, #2
 8001ff4:	429a      	cmp	r2, r3
 8001ff6:	d1eb      	bne.n	8001fd0 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001ff8:	4b0b      	ldr	r3, [pc, #44]	; (8002028 <HAL_RCC_ClockConfig+0x25c>)
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f003 0307 	and.w	r3, r3, #7
 8002000:	683a      	ldr	r2, [r7, #0]
 8002002:	429a      	cmp	r2, r3
 8002004:	d214      	bcs.n	8002030 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002006:	4b08      	ldr	r3, [pc, #32]	; (8002028 <HAL_RCC_ClockConfig+0x25c>)
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f023 0207 	bic.w	r2, r3, #7
 800200e:	4906      	ldr	r1, [pc, #24]	; (8002028 <HAL_RCC_ClockConfig+0x25c>)
 8002010:	683b      	ldr	r3, [r7, #0]
 8002012:	4313      	orrs	r3, r2
 8002014:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002016:	4b04      	ldr	r3, [pc, #16]	; (8002028 <HAL_RCC_ClockConfig+0x25c>)
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f003 0307 	and.w	r3, r3, #7
 800201e:	683a      	ldr	r2, [r7, #0]
 8002020:	429a      	cmp	r2, r3
 8002022:	d005      	beq.n	8002030 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002024:	2301      	movs	r3, #1
 8002026:	e040      	b.n	80020aa <HAL_RCC_ClockConfig+0x2de>
 8002028:	40022000 	.word	0x40022000
 800202c:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f003 0304 	and.w	r3, r3, #4
 8002038:	2b00      	cmp	r3, #0
 800203a:	d008      	beq.n	800204e <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800203c:	4b1d      	ldr	r3, [pc, #116]	; (80020b4 <HAL_RCC_ClockConfig+0x2e8>)
 800203e:	685b      	ldr	r3, [r3, #4]
 8002040:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	68db      	ldr	r3, [r3, #12]
 8002048:	491a      	ldr	r1, [pc, #104]	; (80020b4 <HAL_RCC_ClockConfig+0x2e8>)
 800204a:	4313      	orrs	r3, r2
 800204c:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f003 0308 	and.w	r3, r3, #8
 8002056:	2b00      	cmp	r3, #0
 8002058:	d009      	beq.n	800206e <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800205a:	4b16      	ldr	r3, [pc, #88]	; (80020b4 <HAL_RCC_ClockConfig+0x2e8>)
 800205c:	685b      	ldr	r3, [r3, #4]
 800205e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	691b      	ldr	r3, [r3, #16]
 8002066:	00db      	lsls	r3, r3, #3
 8002068:	4912      	ldr	r1, [pc, #72]	; (80020b4 <HAL_RCC_ClockConfig+0x2e8>)
 800206a:	4313      	orrs	r3, r2
 800206c:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800206e:	f000 f829 	bl	80020c4 <HAL_RCC_GetSysClockFreq>
 8002072:	4601      	mov	r1, r0
 8002074:	4b0f      	ldr	r3, [pc, #60]	; (80020b4 <HAL_RCC_ClockConfig+0x2e8>)
 8002076:	685b      	ldr	r3, [r3, #4]
 8002078:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800207c:	22f0      	movs	r2, #240	; 0xf0
 800207e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002080:	693a      	ldr	r2, [r7, #16]
 8002082:	fa92 f2a2 	rbit	r2, r2
 8002086:	60fa      	str	r2, [r7, #12]
  return result;
 8002088:	68fa      	ldr	r2, [r7, #12]
 800208a:	fab2 f282 	clz	r2, r2
 800208e:	b2d2      	uxtb	r2, r2
 8002090:	40d3      	lsrs	r3, r2
 8002092:	4a09      	ldr	r2, [pc, #36]	; (80020b8 <HAL_RCC_ClockConfig+0x2ec>)
 8002094:	5cd3      	ldrb	r3, [r2, r3]
 8002096:	fa21 f303 	lsr.w	r3, r1, r3
 800209a:	4a08      	ldr	r2, [pc, #32]	; (80020bc <HAL_RCC_ClockConfig+0x2f0>)
 800209c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800209e:	4b08      	ldr	r3, [pc, #32]	; (80020c0 <HAL_RCC_ClockConfig+0x2f4>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	4618      	mov	r0, r3
 80020a4:	f7fe faba 	bl	800061c <HAL_InitTick>
  
  return HAL_OK;
 80020a8:	2300      	movs	r3, #0
}
 80020aa:	4618      	mov	r0, r3
 80020ac:	3778      	adds	r7, #120	; 0x78
 80020ae:	46bd      	mov	sp, r7
 80020b0:	bd80      	pop	{r7, pc}
 80020b2:	bf00      	nop
 80020b4:	40021000 	.word	0x40021000
 80020b8:	080068d0 	.word	0x080068d0
 80020bc:	20000000 	.word	0x20000000
 80020c0:	20000004 	.word	0x20000004

080020c4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80020c4:	b480      	push	{r7}
 80020c6:	b08b      	sub	sp, #44	; 0x2c
 80020c8:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80020ca:	2300      	movs	r3, #0
 80020cc:	61fb      	str	r3, [r7, #28]
 80020ce:	2300      	movs	r3, #0
 80020d0:	61bb      	str	r3, [r7, #24]
 80020d2:	2300      	movs	r3, #0
 80020d4:	627b      	str	r3, [r7, #36]	; 0x24
 80020d6:	2300      	movs	r3, #0
 80020d8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80020da:	2300      	movs	r3, #0
 80020dc:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80020de:	4b29      	ldr	r3, [pc, #164]	; (8002184 <HAL_RCC_GetSysClockFreq+0xc0>)
 80020e0:	685b      	ldr	r3, [r3, #4]
 80020e2:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80020e4:	69fb      	ldr	r3, [r7, #28]
 80020e6:	f003 030c 	and.w	r3, r3, #12
 80020ea:	2b04      	cmp	r3, #4
 80020ec:	d002      	beq.n	80020f4 <HAL_RCC_GetSysClockFreq+0x30>
 80020ee:	2b08      	cmp	r3, #8
 80020f0:	d003      	beq.n	80020fa <HAL_RCC_GetSysClockFreq+0x36>
 80020f2:	e03c      	b.n	800216e <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80020f4:	4b24      	ldr	r3, [pc, #144]	; (8002188 <HAL_RCC_GetSysClockFreq+0xc4>)
 80020f6:	623b      	str	r3, [r7, #32]
      break;
 80020f8:	e03c      	b.n	8002174 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80020fa:	69fb      	ldr	r3, [r7, #28]
 80020fc:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002100:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8002104:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002106:	68ba      	ldr	r2, [r7, #8]
 8002108:	fa92 f2a2 	rbit	r2, r2
 800210c:	607a      	str	r2, [r7, #4]
  return result;
 800210e:	687a      	ldr	r2, [r7, #4]
 8002110:	fab2 f282 	clz	r2, r2
 8002114:	b2d2      	uxtb	r2, r2
 8002116:	40d3      	lsrs	r3, r2
 8002118:	4a1c      	ldr	r2, [pc, #112]	; (800218c <HAL_RCC_GetSysClockFreq+0xc8>)
 800211a:	5cd3      	ldrb	r3, [r2, r3]
 800211c:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800211e:	4b19      	ldr	r3, [pc, #100]	; (8002184 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002120:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002122:	f003 030f 	and.w	r3, r3, #15
 8002126:	220f      	movs	r2, #15
 8002128:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800212a:	693a      	ldr	r2, [r7, #16]
 800212c:	fa92 f2a2 	rbit	r2, r2
 8002130:	60fa      	str	r2, [r7, #12]
  return result;
 8002132:	68fa      	ldr	r2, [r7, #12]
 8002134:	fab2 f282 	clz	r2, r2
 8002138:	b2d2      	uxtb	r2, r2
 800213a:	40d3      	lsrs	r3, r2
 800213c:	4a14      	ldr	r2, [pc, #80]	; (8002190 <HAL_RCC_GetSysClockFreq+0xcc>)
 800213e:	5cd3      	ldrb	r3, [r2, r3]
 8002140:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8002142:	69fb      	ldr	r3, [r7, #28]
 8002144:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002148:	2b00      	cmp	r3, #0
 800214a:	d008      	beq.n	800215e <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800214c:	4a0e      	ldr	r2, [pc, #56]	; (8002188 <HAL_RCC_GetSysClockFreq+0xc4>)
 800214e:	69bb      	ldr	r3, [r7, #24]
 8002150:	fbb2 f2f3 	udiv	r2, r2, r3
 8002154:	697b      	ldr	r3, [r7, #20]
 8002156:	fb02 f303 	mul.w	r3, r2, r3
 800215a:	627b      	str	r3, [r7, #36]	; 0x24
 800215c:	e004      	b.n	8002168 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800215e:	697b      	ldr	r3, [r7, #20]
 8002160:	4a0c      	ldr	r2, [pc, #48]	; (8002194 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002162:	fb02 f303 	mul.w	r3, r2, r3
 8002166:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800216a:	623b      	str	r3, [r7, #32]
      break;
 800216c:	e002      	b.n	8002174 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800216e:	4b06      	ldr	r3, [pc, #24]	; (8002188 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002170:	623b      	str	r3, [r7, #32]
      break;
 8002172:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002174:	6a3b      	ldr	r3, [r7, #32]
}
 8002176:	4618      	mov	r0, r3
 8002178:	372c      	adds	r7, #44	; 0x2c
 800217a:	46bd      	mov	sp, r7
 800217c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002180:	4770      	bx	lr
 8002182:	bf00      	nop
 8002184:	40021000 	.word	0x40021000
 8002188:	007a1200 	.word	0x007a1200
 800218c:	080068e8 	.word	0x080068e8
 8002190:	080068f8 	.word	0x080068f8
 8002194:	003d0900 	.word	0x003d0900

08002198 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002198:	b480      	push	{r7}
 800219a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800219c:	4b03      	ldr	r3, [pc, #12]	; (80021ac <HAL_RCC_GetHCLKFreq+0x14>)
 800219e:	681b      	ldr	r3, [r3, #0]
}
 80021a0:	4618      	mov	r0, r3
 80021a2:	46bd      	mov	sp, r7
 80021a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a8:	4770      	bx	lr
 80021aa:	bf00      	nop
 80021ac:	20000000 	.word	0x20000000

080021b0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	b082      	sub	sp, #8
 80021b4:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80021b6:	f7ff ffef 	bl	8002198 <HAL_RCC_GetHCLKFreq>
 80021ba:	4601      	mov	r1, r0
 80021bc:	4b0b      	ldr	r3, [pc, #44]	; (80021ec <HAL_RCC_GetPCLK1Freq+0x3c>)
 80021be:	685b      	ldr	r3, [r3, #4]
 80021c0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80021c4:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80021c8:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021ca:	687a      	ldr	r2, [r7, #4]
 80021cc:	fa92 f2a2 	rbit	r2, r2
 80021d0:	603a      	str	r2, [r7, #0]
  return result;
 80021d2:	683a      	ldr	r2, [r7, #0]
 80021d4:	fab2 f282 	clz	r2, r2
 80021d8:	b2d2      	uxtb	r2, r2
 80021da:	40d3      	lsrs	r3, r2
 80021dc:	4a04      	ldr	r2, [pc, #16]	; (80021f0 <HAL_RCC_GetPCLK1Freq+0x40>)
 80021de:	5cd3      	ldrb	r3, [r2, r3]
 80021e0:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80021e4:	4618      	mov	r0, r3
 80021e6:	3708      	adds	r7, #8
 80021e8:	46bd      	mov	sp, r7
 80021ea:	bd80      	pop	{r7, pc}
 80021ec:	40021000 	.word	0x40021000
 80021f0:	080068e0 	.word	0x080068e0

080021f4 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80021f4:	b480      	push	{r7}
 80021f6:	b083      	sub	sp, #12
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
 80021fc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	220f      	movs	r2, #15
 8002202:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002204:	4b12      	ldr	r3, [pc, #72]	; (8002250 <HAL_RCC_GetClockConfig+0x5c>)
 8002206:	685b      	ldr	r3, [r3, #4]
 8002208:	f003 0203 	and.w	r2, r3, #3
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 8002210:	4b0f      	ldr	r3, [pc, #60]	; (8002250 <HAL_RCC_GetClockConfig+0x5c>)
 8002212:	685b      	ldr	r3, [r3, #4]
 8002214:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 800221c:	4b0c      	ldr	r3, [pc, #48]	; (8002250 <HAL_RCC_GetClockConfig+0x5c>)
 800221e:	685b      	ldr	r3, [r3, #4]
 8002220:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	60da      	str	r2, [r3, #12]
  
  /* Get the APB2 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002228:	4b09      	ldr	r3, [pc, #36]	; (8002250 <HAL_RCC_GetClockConfig+0x5c>)
 800222a:	685b      	ldr	r3, [r3, #4]
 800222c:	08db      	lsrs	r3, r3, #3
 800222e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	611a      	str	r2, [r3, #16]
  
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 8002236:	4b07      	ldr	r3, [pc, #28]	; (8002254 <HAL_RCC_GetClockConfig+0x60>)
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f003 0207 	and.w	r2, r3, #7
 800223e:	683b      	ldr	r3, [r7, #0]
 8002240:	601a      	str	r2, [r3, #0]
}
 8002242:	bf00      	nop
 8002244:	370c      	adds	r7, #12
 8002246:	46bd      	mov	sp, r7
 8002248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224c:	4770      	bx	lr
 800224e:	bf00      	nop
 8002250:	40021000 	.word	0x40021000
 8002254:	40022000 	.word	0x40022000

08002258 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	b082      	sub	sp, #8
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	2b00      	cmp	r3, #0
 8002264:	d101      	bne.n	800226a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002266:	2301      	movs	r3, #1
 8002268:	e049      	b.n	80022fe <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002270:	b2db      	uxtb	r3, r3
 8002272:	2b00      	cmp	r3, #0
 8002274:	d106      	bne.n	8002284 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	2200      	movs	r2, #0
 800227a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800227e:	6878      	ldr	r0, [r7, #4]
 8002280:	f000 f841 	bl	8002306 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	2202      	movs	r2, #2
 8002288:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681a      	ldr	r2, [r3, #0]
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	3304      	adds	r3, #4
 8002294:	4619      	mov	r1, r3
 8002296:	4610      	mov	r0, r2
 8002298:	f000 f9f2 	bl	8002680 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	2201      	movs	r2, #1
 80022a0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	2201      	movs	r2, #1
 80022a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	2201      	movs	r2, #1
 80022b0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	2201      	movs	r2, #1
 80022b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	2201      	movs	r2, #1
 80022c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	2201      	movs	r2, #1
 80022c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	2201      	movs	r2, #1
 80022d0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	2201      	movs	r2, #1
 80022d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	2201      	movs	r2, #1
 80022e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	2201      	movs	r2, #1
 80022e8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	2201      	movs	r2, #1
 80022f0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	2201      	movs	r2, #1
 80022f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80022fc:	2300      	movs	r3, #0
}
 80022fe:	4618      	mov	r0, r3
 8002300:	3708      	adds	r7, #8
 8002302:	46bd      	mov	sp, r7
 8002304:	bd80      	pop	{r7, pc}

08002306 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002306:	b480      	push	{r7}
 8002308:	b083      	sub	sp, #12
 800230a:	af00      	add	r7, sp, #0
 800230c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800230e:	bf00      	nop
 8002310:	370c      	adds	r7, #12
 8002312:	46bd      	mov	sp, r7
 8002314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002318:	4770      	bx	lr
	...

0800231c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800231c:	b480      	push	{r7}
 800231e:	b085      	sub	sp, #20
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800232a:	b2db      	uxtb	r3, r3
 800232c:	2b01      	cmp	r3, #1
 800232e:	d001      	beq.n	8002334 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002330:	2301      	movs	r3, #1
 8002332:	e04a      	b.n	80023ca <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	2202      	movs	r2, #2
 8002338:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	68da      	ldr	r2, [r3, #12]
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f042 0201 	orr.w	r2, r2, #1
 800234a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	4a21      	ldr	r2, [pc, #132]	; (80023d8 <HAL_TIM_Base_Start_IT+0xbc>)
 8002352:	4293      	cmp	r3, r2
 8002354:	d018      	beq.n	8002388 <HAL_TIM_Base_Start_IT+0x6c>
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800235e:	d013      	beq.n	8002388 <HAL_TIM_Base_Start_IT+0x6c>
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	4a1d      	ldr	r2, [pc, #116]	; (80023dc <HAL_TIM_Base_Start_IT+0xc0>)
 8002366:	4293      	cmp	r3, r2
 8002368:	d00e      	beq.n	8002388 <HAL_TIM_Base_Start_IT+0x6c>
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	4a1c      	ldr	r2, [pc, #112]	; (80023e0 <HAL_TIM_Base_Start_IT+0xc4>)
 8002370:	4293      	cmp	r3, r2
 8002372:	d009      	beq.n	8002388 <HAL_TIM_Base_Start_IT+0x6c>
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	4a1a      	ldr	r2, [pc, #104]	; (80023e4 <HAL_TIM_Base_Start_IT+0xc8>)
 800237a:	4293      	cmp	r3, r2
 800237c:	d004      	beq.n	8002388 <HAL_TIM_Base_Start_IT+0x6c>
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	4a19      	ldr	r2, [pc, #100]	; (80023e8 <HAL_TIM_Base_Start_IT+0xcc>)
 8002384:	4293      	cmp	r3, r2
 8002386:	d115      	bne.n	80023b4 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	689a      	ldr	r2, [r3, #8]
 800238e:	4b17      	ldr	r3, [pc, #92]	; (80023ec <HAL_TIM_Base_Start_IT+0xd0>)
 8002390:	4013      	ands	r3, r2
 8002392:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	2b06      	cmp	r3, #6
 8002398:	d015      	beq.n	80023c6 <HAL_TIM_Base_Start_IT+0xaa>
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80023a0:	d011      	beq.n	80023c6 <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	681a      	ldr	r2, [r3, #0]
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f042 0201 	orr.w	r2, r2, #1
 80023b0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80023b2:	e008      	b.n	80023c6 <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	681a      	ldr	r2, [r3, #0]
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f042 0201 	orr.w	r2, r2, #1
 80023c2:	601a      	str	r2, [r3, #0]
 80023c4:	e000      	b.n	80023c8 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80023c6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80023c8:	2300      	movs	r3, #0
}
 80023ca:	4618      	mov	r0, r3
 80023cc:	3714      	adds	r7, #20
 80023ce:	46bd      	mov	sp, r7
 80023d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d4:	4770      	bx	lr
 80023d6:	bf00      	nop
 80023d8:	40012c00 	.word	0x40012c00
 80023dc:	40000400 	.word	0x40000400
 80023e0:	40000800 	.word	0x40000800
 80023e4:	40013400 	.word	0x40013400
 80023e8:	40014000 	.word	0x40014000
 80023ec:	00010007 	.word	0x00010007

080023f0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b082      	sub	sp, #8
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	691b      	ldr	r3, [r3, #16]
 80023fe:	f003 0302 	and.w	r3, r3, #2
 8002402:	2b02      	cmp	r3, #2
 8002404:	d122      	bne.n	800244c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	68db      	ldr	r3, [r3, #12]
 800240c:	f003 0302 	and.w	r3, r3, #2
 8002410:	2b02      	cmp	r3, #2
 8002412:	d11b      	bne.n	800244c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f06f 0202 	mvn.w	r2, #2
 800241c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	2201      	movs	r2, #1
 8002422:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	699b      	ldr	r3, [r3, #24]
 800242a:	f003 0303 	and.w	r3, r3, #3
 800242e:	2b00      	cmp	r3, #0
 8002430:	d003      	beq.n	800243a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002432:	6878      	ldr	r0, [r7, #4]
 8002434:	f000 f905 	bl	8002642 <HAL_TIM_IC_CaptureCallback>
 8002438:	e005      	b.n	8002446 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800243a:	6878      	ldr	r0, [r7, #4]
 800243c:	f000 f8f7 	bl	800262e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002440:	6878      	ldr	r0, [r7, #4]
 8002442:	f000 f908 	bl	8002656 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	2200      	movs	r2, #0
 800244a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	691b      	ldr	r3, [r3, #16]
 8002452:	f003 0304 	and.w	r3, r3, #4
 8002456:	2b04      	cmp	r3, #4
 8002458:	d122      	bne.n	80024a0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	68db      	ldr	r3, [r3, #12]
 8002460:	f003 0304 	and.w	r3, r3, #4
 8002464:	2b04      	cmp	r3, #4
 8002466:	d11b      	bne.n	80024a0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f06f 0204 	mvn.w	r2, #4
 8002470:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	2202      	movs	r2, #2
 8002476:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	699b      	ldr	r3, [r3, #24]
 800247e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002482:	2b00      	cmp	r3, #0
 8002484:	d003      	beq.n	800248e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002486:	6878      	ldr	r0, [r7, #4]
 8002488:	f000 f8db 	bl	8002642 <HAL_TIM_IC_CaptureCallback>
 800248c:	e005      	b.n	800249a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800248e:	6878      	ldr	r0, [r7, #4]
 8002490:	f000 f8cd 	bl	800262e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002494:	6878      	ldr	r0, [r7, #4]
 8002496:	f000 f8de 	bl	8002656 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	2200      	movs	r2, #0
 800249e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	691b      	ldr	r3, [r3, #16]
 80024a6:	f003 0308 	and.w	r3, r3, #8
 80024aa:	2b08      	cmp	r3, #8
 80024ac:	d122      	bne.n	80024f4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	68db      	ldr	r3, [r3, #12]
 80024b4:	f003 0308 	and.w	r3, r3, #8
 80024b8:	2b08      	cmp	r3, #8
 80024ba:	d11b      	bne.n	80024f4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f06f 0208 	mvn.w	r2, #8
 80024c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	2204      	movs	r2, #4
 80024ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	69db      	ldr	r3, [r3, #28]
 80024d2:	f003 0303 	and.w	r3, r3, #3
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d003      	beq.n	80024e2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80024da:	6878      	ldr	r0, [r7, #4]
 80024dc:	f000 f8b1 	bl	8002642 <HAL_TIM_IC_CaptureCallback>
 80024e0:	e005      	b.n	80024ee <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80024e2:	6878      	ldr	r0, [r7, #4]
 80024e4:	f000 f8a3 	bl	800262e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80024e8:	6878      	ldr	r0, [r7, #4]
 80024ea:	f000 f8b4 	bl	8002656 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	2200      	movs	r2, #0
 80024f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	691b      	ldr	r3, [r3, #16]
 80024fa:	f003 0310 	and.w	r3, r3, #16
 80024fe:	2b10      	cmp	r3, #16
 8002500:	d122      	bne.n	8002548 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	68db      	ldr	r3, [r3, #12]
 8002508:	f003 0310 	and.w	r3, r3, #16
 800250c:	2b10      	cmp	r3, #16
 800250e:	d11b      	bne.n	8002548 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f06f 0210 	mvn.w	r2, #16
 8002518:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	2208      	movs	r2, #8
 800251e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	69db      	ldr	r3, [r3, #28]
 8002526:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800252a:	2b00      	cmp	r3, #0
 800252c:	d003      	beq.n	8002536 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800252e:	6878      	ldr	r0, [r7, #4]
 8002530:	f000 f887 	bl	8002642 <HAL_TIM_IC_CaptureCallback>
 8002534:	e005      	b.n	8002542 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002536:	6878      	ldr	r0, [r7, #4]
 8002538:	f000 f879 	bl	800262e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800253c:	6878      	ldr	r0, [r7, #4]
 800253e:	f000 f88a 	bl	8002656 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	2200      	movs	r2, #0
 8002546:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	691b      	ldr	r3, [r3, #16]
 800254e:	f003 0301 	and.w	r3, r3, #1
 8002552:	2b01      	cmp	r3, #1
 8002554:	d10e      	bne.n	8002574 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	68db      	ldr	r3, [r3, #12]
 800255c:	f003 0301 	and.w	r3, r3, #1
 8002560:	2b01      	cmp	r3, #1
 8002562:	d107      	bne.n	8002574 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f06f 0201 	mvn.w	r2, #1
 800256c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800256e:	6878      	ldr	r0, [r7, #4]
 8002570:	f7fe f818 	bl	80005a4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	691b      	ldr	r3, [r3, #16]
 800257a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800257e:	2b80      	cmp	r3, #128	; 0x80
 8002580:	d10e      	bne.n	80025a0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	68db      	ldr	r3, [r3, #12]
 8002588:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800258c:	2b80      	cmp	r3, #128	; 0x80
 800258e:	d107      	bne.n	80025a0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002598:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800259a:	6878      	ldr	r0, [r7, #4]
 800259c:	f000 f90a 	bl	80027b4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	691b      	ldr	r3, [r3, #16]
 80025a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80025ae:	d10e      	bne.n	80025ce <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	68db      	ldr	r3, [r3, #12]
 80025b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025ba:	2b80      	cmp	r3, #128	; 0x80
 80025bc:	d107      	bne.n	80025ce <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80025c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80025c8:	6878      	ldr	r0, [r7, #4]
 80025ca:	f000 f8fd 	bl	80027c8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	691b      	ldr	r3, [r3, #16]
 80025d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025d8:	2b40      	cmp	r3, #64	; 0x40
 80025da:	d10e      	bne.n	80025fa <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	68db      	ldr	r3, [r3, #12]
 80025e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025e6:	2b40      	cmp	r3, #64	; 0x40
 80025e8:	d107      	bne.n	80025fa <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80025f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80025f4:	6878      	ldr	r0, [r7, #4]
 80025f6:	f000 f838 	bl	800266a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	691b      	ldr	r3, [r3, #16]
 8002600:	f003 0320 	and.w	r3, r3, #32
 8002604:	2b20      	cmp	r3, #32
 8002606:	d10e      	bne.n	8002626 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	68db      	ldr	r3, [r3, #12]
 800260e:	f003 0320 	and.w	r3, r3, #32
 8002612:	2b20      	cmp	r3, #32
 8002614:	d107      	bne.n	8002626 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f06f 0220 	mvn.w	r2, #32
 800261e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002620:	6878      	ldr	r0, [r7, #4]
 8002622:	f000 f8bd 	bl	80027a0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002626:	bf00      	nop
 8002628:	3708      	adds	r7, #8
 800262a:	46bd      	mov	sp, r7
 800262c:	bd80      	pop	{r7, pc}

0800262e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800262e:	b480      	push	{r7}
 8002630:	b083      	sub	sp, #12
 8002632:	af00      	add	r7, sp, #0
 8002634:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002636:	bf00      	nop
 8002638:	370c      	adds	r7, #12
 800263a:	46bd      	mov	sp, r7
 800263c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002640:	4770      	bx	lr

08002642 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002642:	b480      	push	{r7}
 8002644:	b083      	sub	sp, #12
 8002646:	af00      	add	r7, sp, #0
 8002648:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800264a:	bf00      	nop
 800264c:	370c      	adds	r7, #12
 800264e:	46bd      	mov	sp, r7
 8002650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002654:	4770      	bx	lr

08002656 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002656:	b480      	push	{r7}
 8002658:	b083      	sub	sp, #12
 800265a:	af00      	add	r7, sp, #0
 800265c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800265e:	bf00      	nop
 8002660:	370c      	adds	r7, #12
 8002662:	46bd      	mov	sp, r7
 8002664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002668:	4770      	bx	lr

0800266a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800266a:	b480      	push	{r7}
 800266c:	b083      	sub	sp, #12
 800266e:	af00      	add	r7, sp, #0
 8002670:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002672:	bf00      	nop
 8002674:	370c      	adds	r7, #12
 8002676:	46bd      	mov	sp, r7
 8002678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267c:	4770      	bx	lr
	...

08002680 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002680:	b480      	push	{r7}
 8002682:	b085      	sub	sp, #20
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
 8002688:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	4a3c      	ldr	r2, [pc, #240]	; (8002784 <TIM_Base_SetConfig+0x104>)
 8002694:	4293      	cmp	r3, r2
 8002696:	d00f      	beq.n	80026b8 <TIM_Base_SetConfig+0x38>
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800269e:	d00b      	beq.n	80026b8 <TIM_Base_SetConfig+0x38>
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	4a39      	ldr	r2, [pc, #228]	; (8002788 <TIM_Base_SetConfig+0x108>)
 80026a4:	4293      	cmp	r3, r2
 80026a6:	d007      	beq.n	80026b8 <TIM_Base_SetConfig+0x38>
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	4a38      	ldr	r2, [pc, #224]	; (800278c <TIM_Base_SetConfig+0x10c>)
 80026ac:	4293      	cmp	r3, r2
 80026ae:	d003      	beq.n	80026b8 <TIM_Base_SetConfig+0x38>
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	4a37      	ldr	r2, [pc, #220]	; (8002790 <TIM_Base_SetConfig+0x110>)
 80026b4:	4293      	cmp	r3, r2
 80026b6:	d108      	bne.n	80026ca <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80026be:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	685b      	ldr	r3, [r3, #4]
 80026c4:	68fa      	ldr	r2, [r7, #12]
 80026c6:	4313      	orrs	r3, r2
 80026c8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	4a2d      	ldr	r2, [pc, #180]	; (8002784 <TIM_Base_SetConfig+0x104>)
 80026ce:	4293      	cmp	r3, r2
 80026d0:	d01b      	beq.n	800270a <TIM_Base_SetConfig+0x8a>
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80026d8:	d017      	beq.n	800270a <TIM_Base_SetConfig+0x8a>
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	4a2a      	ldr	r2, [pc, #168]	; (8002788 <TIM_Base_SetConfig+0x108>)
 80026de:	4293      	cmp	r3, r2
 80026e0:	d013      	beq.n	800270a <TIM_Base_SetConfig+0x8a>
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	4a29      	ldr	r2, [pc, #164]	; (800278c <TIM_Base_SetConfig+0x10c>)
 80026e6:	4293      	cmp	r3, r2
 80026e8:	d00f      	beq.n	800270a <TIM_Base_SetConfig+0x8a>
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	4a28      	ldr	r2, [pc, #160]	; (8002790 <TIM_Base_SetConfig+0x110>)
 80026ee:	4293      	cmp	r3, r2
 80026f0:	d00b      	beq.n	800270a <TIM_Base_SetConfig+0x8a>
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	4a27      	ldr	r2, [pc, #156]	; (8002794 <TIM_Base_SetConfig+0x114>)
 80026f6:	4293      	cmp	r3, r2
 80026f8:	d007      	beq.n	800270a <TIM_Base_SetConfig+0x8a>
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	4a26      	ldr	r2, [pc, #152]	; (8002798 <TIM_Base_SetConfig+0x118>)
 80026fe:	4293      	cmp	r3, r2
 8002700:	d003      	beq.n	800270a <TIM_Base_SetConfig+0x8a>
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	4a25      	ldr	r2, [pc, #148]	; (800279c <TIM_Base_SetConfig+0x11c>)
 8002706:	4293      	cmp	r3, r2
 8002708:	d108      	bne.n	800271c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002710:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002712:	683b      	ldr	r3, [r7, #0]
 8002714:	68db      	ldr	r3, [r3, #12]
 8002716:	68fa      	ldr	r2, [r7, #12]
 8002718:	4313      	orrs	r3, r2
 800271a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	695b      	ldr	r3, [r3, #20]
 8002726:	4313      	orrs	r3, r2
 8002728:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	68fa      	ldr	r2, [r7, #12]
 800272e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	689a      	ldr	r2, [r3, #8]
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002738:	683b      	ldr	r3, [r7, #0]
 800273a:	681a      	ldr	r2, [r3, #0]
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	4a10      	ldr	r2, [pc, #64]	; (8002784 <TIM_Base_SetConfig+0x104>)
 8002744:	4293      	cmp	r3, r2
 8002746:	d00f      	beq.n	8002768 <TIM_Base_SetConfig+0xe8>
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	4a11      	ldr	r2, [pc, #68]	; (8002790 <TIM_Base_SetConfig+0x110>)
 800274c:	4293      	cmp	r3, r2
 800274e:	d00b      	beq.n	8002768 <TIM_Base_SetConfig+0xe8>
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	4a10      	ldr	r2, [pc, #64]	; (8002794 <TIM_Base_SetConfig+0x114>)
 8002754:	4293      	cmp	r3, r2
 8002756:	d007      	beq.n	8002768 <TIM_Base_SetConfig+0xe8>
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	4a0f      	ldr	r2, [pc, #60]	; (8002798 <TIM_Base_SetConfig+0x118>)
 800275c:	4293      	cmp	r3, r2
 800275e:	d003      	beq.n	8002768 <TIM_Base_SetConfig+0xe8>
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	4a0e      	ldr	r2, [pc, #56]	; (800279c <TIM_Base_SetConfig+0x11c>)
 8002764:	4293      	cmp	r3, r2
 8002766:	d103      	bne.n	8002770 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002768:	683b      	ldr	r3, [r7, #0]
 800276a:	691a      	ldr	r2, [r3, #16]
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	2201      	movs	r2, #1
 8002774:	615a      	str	r2, [r3, #20]
}
 8002776:	bf00      	nop
 8002778:	3714      	adds	r7, #20
 800277a:	46bd      	mov	sp, r7
 800277c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002780:	4770      	bx	lr
 8002782:	bf00      	nop
 8002784:	40012c00 	.word	0x40012c00
 8002788:	40000400 	.word	0x40000400
 800278c:	40000800 	.word	0x40000800
 8002790:	40013400 	.word	0x40013400
 8002794:	40014000 	.word	0x40014000
 8002798:	40014400 	.word	0x40014400
 800279c:	40014800 	.word	0x40014800

080027a0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80027a0:	b480      	push	{r7}
 80027a2:	b083      	sub	sp, #12
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80027a8:	bf00      	nop
 80027aa:	370c      	adds	r7, #12
 80027ac:	46bd      	mov	sp, r7
 80027ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b2:	4770      	bx	lr

080027b4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80027b4:	b480      	push	{r7}
 80027b6:	b083      	sub	sp, #12
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80027bc:	bf00      	nop
 80027be:	370c      	adds	r7, #12
 80027c0:	46bd      	mov	sp, r7
 80027c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c6:	4770      	bx	lr

080027c8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80027c8:	b480      	push	{r7}
 80027ca:	b083      	sub	sp, #12
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80027d0:	bf00      	nop
 80027d2:	370c      	adds	r7, #12
 80027d4:	46bd      	mov	sp, r7
 80027d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027da:	4770      	bx	lr

080027dc <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80027dc:	b480      	push	{r7}
 80027de:	b083      	sub	sp, #12
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	f103 0208 	add.w	r2, r3, #8
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80027f4:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	f103 0208 	add.w	r2, r3, #8
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	f103 0208 	add.w	r2, r3, #8
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	2200      	movs	r2, #0
 800280e:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002810:	bf00      	nop
 8002812:	370c      	adds	r7, #12
 8002814:	46bd      	mov	sp, r7
 8002816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281a:	4770      	bx	lr

0800281c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800281c:	b480      	push	{r7}
 800281e:	b083      	sub	sp, #12
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	2200      	movs	r2, #0
 8002828:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800282a:	bf00      	nop
 800282c:	370c      	adds	r7, #12
 800282e:	46bd      	mov	sp, r7
 8002830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002834:	4770      	bx	lr

08002836 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8002836:	b480      	push	{r7}
 8002838:	b085      	sub	sp, #20
 800283a:	af00      	add	r7, sp, #0
 800283c:	6078      	str	r0, [r7, #4]
 800283e:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8002846:	68bb      	ldr	r3, [r7, #8]
 8002848:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800284c:	d103      	bne.n	8002856 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	691b      	ldr	r3, [r3, #16]
 8002852:	60fb      	str	r3, [r7, #12]
 8002854:	e00c      	b.n	8002870 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	3308      	adds	r3, #8
 800285a:	60fb      	str	r3, [r7, #12]
 800285c:	e002      	b.n	8002864 <vListInsert+0x2e>
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	685b      	ldr	r3, [r3, #4]
 8002862:	60fb      	str	r3, [r7, #12]
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	685b      	ldr	r3, [r3, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	68ba      	ldr	r2, [r7, #8]
 800286c:	429a      	cmp	r2, r3
 800286e:	d2f6      	bcs.n	800285e <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	685a      	ldr	r2, [r3, #4]
 8002874:	683b      	ldr	r3, [r7, #0]
 8002876:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002878:	683b      	ldr	r3, [r7, #0]
 800287a:	685b      	ldr	r3, [r3, #4]
 800287c:	683a      	ldr	r2, [r7, #0]
 800287e:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8002880:	683b      	ldr	r3, [r7, #0]
 8002882:	68fa      	ldr	r2, [r7, #12]
 8002884:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	683a      	ldr	r2, [r7, #0]
 800288a:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 800288c:	683b      	ldr	r3, [r7, #0]
 800288e:	687a      	ldr	r2, [r7, #4]
 8002890:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	1c5a      	adds	r2, r3, #1
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	601a      	str	r2, [r3, #0]
}
 800289c:	bf00      	nop
 800289e:	3714      	adds	r7, #20
 80028a0:	46bd      	mov	sp, r7
 80028a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a6:	4770      	bx	lr

080028a8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80028a8:	b480      	push	{r7}
 80028aa:	b085      	sub	sp, #20
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	691b      	ldr	r3, [r3, #16]
 80028b4:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	685b      	ldr	r3, [r3, #4]
 80028ba:	687a      	ldr	r2, [r7, #4]
 80028bc:	6892      	ldr	r2, [r2, #8]
 80028be:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	689b      	ldr	r3, [r3, #8]
 80028c4:	687a      	ldr	r2, [r7, #4]
 80028c6:	6852      	ldr	r2, [r2, #4]
 80028c8:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	685b      	ldr	r3, [r3, #4]
 80028ce:	687a      	ldr	r2, [r7, #4]
 80028d0:	429a      	cmp	r2, r3
 80028d2:	d103      	bne.n	80028dc <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	689a      	ldr	r2, [r3, #8]
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	2200      	movs	r2, #0
 80028e0:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	1e5a      	subs	r2, r3, #1
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	681b      	ldr	r3, [r3, #0]
}
 80028f0:	4618      	mov	r0, r3
 80028f2:	3714      	adds	r7, #20
 80028f4:	46bd      	mov	sp, r7
 80028f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fa:	4770      	bx	lr

080028fc <xQueueGenericReset>:
    }
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	b086      	sub	sp, #24
 8002900:	af00      	add	r7, sp, #0
 8002902:	6078      	str	r0, [r7, #4]
 8002904:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 8002906:	2301      	movs	r3, #1
 8002908:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 800290e:	693b      	ldr	r3, [r7, #16]
 8002910:	2b00      	cmp	r3, #0
 8002912:	d10a      	bne.n	800292a <xQueueGenericReset+0x2e>
        __asm volatile
 8002914:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002918:	f383 8811 	msr	BASEPRI, r3
 800291c:	f3bf 8f6f 	isb	sy
 8002920:	f3bf 8f4f 	dsb	sy
 8002924:	60fb      	str	r3, [r7, #12]
    }
 8002926:	bf00      	nop
 8002928:	e7fe      	b.n	8002928 <xQueueGenericReset+0x2c>

    if( ( pxQueue != NULL ) &&
 800292a:	693b      	ldr	r3, [r7, #16]
 800292c:	2b00      	cmp	r3, #0
 800292e:	d05d      	beq.n	80029ec <xQueueGenericReset+0xf0>
        ( pxQueue->uxLength >= 1U ) &&
 8002930:	693b      	ldr	r3, [r7, #16]
 8002932:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    if( ( pxQueue != NULL ) &&
 8002934:	2b00      	cmp	r3, #0
 8002936:	d059      	beq.n	80029ec <xQueueGenericReset+0xf0>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 8002938:	693b      	ldr	r3, [r7, #16]
 800293a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800293c:	693b      	ldr	r3, [r7, #16]
 800293e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002940:	2100      	movs	r1, #0
 8002942:	fba3 2302 	umull	r2, r3, r3, r2
 8002946:	2b00      	cmp	r3, #0
 8002948:	d000      	beq.n	800294c <xQueueGenericReset+0x50>
 800294a:	2101      	movs	r1, #1
 800294c:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 800294e:	2b00      	cmp	r3, #0
 8002950:	d14c      	bne.n	80029ec <xQueueGenericReset+0xf0>
    {
        taskENTER_CRITICAL();
 8002952:	f001 ff27 	bl	80047a4 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002956:	693b      	ldr	r3, [r7, #16]
 8002958:	681a      	ldr	r2, [r3, #0]
 800295a:	693b      	ldr	r3, [r7, #16]
 800295c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800295e:	6939      	ldr	r1, [r7, #16]
 8002960:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002962:	fb01 f303 	mul.w	r3, r1, r3
 8002966:	441a      	add	r2, r3
 8002968:	693b      	ldr	r3, [r7, #16]
 800296a:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800296c:	693b      	ldr	r3, [r7, #16]
 800296e:	2200      	movs	r2, #0
 8002970:	639a      	str	r2, [r3, #56]	; 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8002972:	693b      	ldr	r3, [r7, #16]
 8002974:	681a      	ldr	r2, [r3, #0]
 8002976:	693b      	ldr	r3, [r7, #16]
 8002978:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800297a:	693b      	ldr	r3, [r7, #16]
 800297c:	681a      	ldr	r2, [r3, #0]
 800297e:	693b      	ldr	r3, [r7, #16]
 8002980:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002982:	3b01      	subs	r3, #1
 8002984:	6939      	ldr	r1, [r7, #16]
 8002986:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002988:	fb01 f303 	mul.w	r3, r1, r3
 800298c:	441a      	add	r2, r3
 800298e:	693b      	ldr	r3, [r7, #16]
 8002990:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 8002992:	693b      	ldr	r3, [r7, #16]
 8002994:	22ff      	movs	r2, #255	; 0xff
 8002996:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 800299a:	693b      	ldr	r3, [r7, #16]
 800299c:	22ff      	movs	r2, #255	; 0xff
 800299e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

            if( xNewQueue == pdFALSE )
 80029a2:	683b      	ldr	r3, [r7, #0]
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d114      	bne.n	80029d2 <xQueueGenericReset+0xd6>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80029a8:	693b      	ldr	r3, [r7, #16]
 80029aa:	691b      	ldr	r3, [r3, #16]
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d01a      	beq.n	80029e6 <xQueueGenericReset+0xea>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80029b0:	693b      	ldr	r3, [r7, #16]
 80029b2:	3310      	adds	r3, #16
 80029b4:	4618      	mov	r0, r3
 80029b6:	f001 f813 	bl	80039e0 <xTaskRemoveFromEventList>
 80029ba:	4603      	mov	r3, r0
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d012      	beq.n	80029e6 <xQueueGenericReset+0xea>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 80029c0:	4b15      	ldr	r3, [pc, #84]	; (8002a18 <xQueueGenericReset+0x11c>)
 80029c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80029c6:	601a      	str	r2, [r3, #0]
 80029c8:	f3bf 8f4f 	dsb	sy
 80029cc:	f3bf 8f6f 	isb	sy
 80029d0:	e009      	b.n	80029e6 <xQueueGenericReset+0xea>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80029d2:	693b      	ldr	r3, [r7, #16]
 80029d4:	3310      	adds	r3, #16
 80029d6:	4618      	mov	r0, r3
 80029d8:	f7ff ff00 	bl	80027dc <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80029dc:	693b      	ldr	r3, [r7, #16]
 80029de:	3324      	adds	r3, #36	; 0x24
 80029e0:	4618      	mov	r0, r3
 80029e2:	f7ff fefb 	bl	80027dc <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 80029e6:	f001 ff0d 	bl	8004804 <vPortExitCritical>
 80029ea:	e001      	b.n	80029f0 <xQueueGenericReset+0xf4>
    }
    else
    {
        xReturn = pdFAIL;
 80029ec:	2300      	movs	r3, #0
 80029ee:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 80029f0:	697b      	ldr	r3, [r7, #20]
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d10a      	bne.n	8002a0c <xQueueGenericReset+0x110>
        __asm volatile
 80029f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029fa:	f383 8811 	msr	BASEPRI, r3
 80029fe:	f3bf 8f6f 	isb	sy
 8002a02:	f3bf 8f4f 	dsb	sy
 8002a06:	60bb      	str	r3, [r7, #8]
    }
 8002a08:	bf00      	nop
 8002a0a:	e7fe      	b.n	8002a0a <xQueueGenericReset+0x10e>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 8002a0c:	697b      	ldr	r3, [r7, #20]
}
 8002a0e:	4618      	mov	r0, r3
 8002a10:	3718      	adds	r7, #24
 8002a12:	46bd      	mov	sp, r7
 8002a14:	bd80      	pop	{r7, pc}
 8002a16:	bf00      	nop
 8002a18:	e000ed04 	.word	0xe000ed04

08002a1c <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	b08a      	sub	sp, #40	; 0x28
 8002a20:	af02      	add	r7, sp, #8
 8002a22:	60f8      	str	r0, [r7, #12]
 8002a24:	60b9      	str	r1, [r7, #8]
 8002a26:	4613      	mov	r3, r2
 8002a28:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d02e      	beq.n	8002a92 <xQueueGenericCreate+0x76>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8002a34:	2100      	movs	r1, #0
 8002a36:	68ba      	ldr	r2, [r7, #8]
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	fba3 2302 	umull	r2, r3, r3, r2
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d000      	beq.n	8002a44 <xQueueGenericCreate+0x28>
 8002a42:	2101      	movs	r1, #1
 8002a44:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d123      	bne.n	8002a92 <xQueueGenericCreate+0x76>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	68ba      	ldr	r2, [r7, #8]
 8002a4e:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8002a52:	f113 0f51 	cmn.w	r3, #81	; 0x51
 8002a56:	d81c      	bhi.n	8002a92 <xQueueGenericCreate+0x76>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	68ba      	ldr	r2, [r7, #8]
 8002a5c:	fb02 f303 	mul.w	r3, r2, r3
 8002a60:	61bb      	str	r3, [r7, #24]
             * alignment requirements of the Queue_t structure - which in this case
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
             * are greater than or equal to the pointer to char requirements the cast
             * is safe.  In other cases alignment requirements are not strict (one or
             * two bytes). */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8002a62:	69bb      	ldr	r3, [r7, #24]
 8002a64:	3350      	adds	r3, #80	; 0x50
 8002a66:	4618      	mov	r0, r3
 8002a68:	f001 ffc8 	bl	80049fc <pvPortMalloc>
 8002a6c:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 8002a6e:	69fb      	ldr	r3, [r7, #28]
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d01c      	beq.n	8002aae <xQueueGenericCreate+0x92>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8002a74:	69fb      	ldr	r3, [r7, #28]
 8002a76:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002a78:	697b      	ldr	r3, [r7, #20]
 8002a7a:	3350      	adds	r3, #80	; 0x50
 8002a7c:	617b      	str	r3, [r7, #20]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002a7e:	79fa      	ldrb	r2, [r7, #7]
 8002a80:	69fb      	ldr	r3, [r7, #28]
 8002a82:	9300      	str	r3, [sp, #0]
 8002a84:	4613      	mov	r3, r2
 8002a86:	697a      	ldr	r2, [r7, #20]
 8002a88:	68b9      	ldr	r1, [r7, #8]
 8002a8a:	68f8      	ldr	r0, [r7, #12]
 8002a8c:	f000 f814 	bl	8002ab8 <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 8002a90:	e00d      	b.n	8002aae <xQueueGenericCreate+0x92>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 8002a92:	69fb      	ldr	r3, [r7, #28]
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d10a      	bne.n	8002aae <xQueueGenericCreate+0x92>
        __asm volatile
 8002a98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a9c:	f383 8811 	msr	BASEPRI, r3
 8002aa0:	f3bf 8f6f 	isb	sy
 8002aa4:	f3bf 8f4f 	dsb	sy
 8002aa8:	613b      	str	r3, [r7, #16]
    }
 8002aaa:	bf00      	nop
 8002aac:	e7fe      	b.n	8002aac <xQueueGenericCreate+0x90>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8002aae:	69fb      	ldr	r3, [r7, #28]
    }
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	3720      	adds	r7, #32
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	bd80      	pop	{r7, pc}

08002ab8 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	b084      	sub	sp, #16
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	60f8      	str	r0, [r7, #12]
 8002ac0:	60b9      	str	r1, [r7, #8]
 8002ac2:	607a      	str	r2, [r7, #4]
 8002ac4:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8002ac6:	68bb      	ldr	r3, [r7, #8]
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d103      	bne.n	8002ad4 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002acc:	69bb      	ldr	r3, [r7, #24]
 8002ace:	69ba      	ldr	r2, [r7, #24]
 8002ad0:	601a      	str	r2, [r3, #0]
 8002ad2:	e002      	b.n	8002ada <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002ad4:	69bb      	ldr	r3, [r7, #24]
 8002ad6:	687a      	ldr	r2, [r7, #4]
 8002ad8:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8002ada:	69bb      	ldr	r3, [r7, #24]
 8002adc:	68fa      	ldr	r2, [r7, #12]
 8002ade:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8002ae0:	69bb      	ldr	r3, [r7, #24]
 8002ae2:	68ba      	ldr	r2, [r7, #8]
 8002ae4:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002ae6:	2101      	movs	r1, #1
 8002ae8:	69b8      	ldr	r0, [r7, #24]
 8002aea:	f7ff ff07 	bl	80028fc <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
    {
        pxNewQueue->ucQueueType = ucQueueType;
 8002aee:	69bb      	ldr	r3, [r7, #24]
 8002af0:	78fa      	ldrb	r2, [r7, #3]
 8002af2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    {
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
 8002af6:	78fb      	ldrb	r3, [r7, #3]
 8002af8:	68ba      	ldr	r2, [r7, #8]
 8002afa:	68f9      	ldr	r1, [r7, #12]
 8002afc:	2073      	movs	r0, #115	; 0x73
 8002afe:	f002 ff7f 	bl	8005a00 <SEGGER_SYSVIEW_RecordU32x3>
}
 8002b02:	bf00      	nop
 8002b04:	3710      	adds	r7, #16
 8002b06:	46bd      	mov	sp, r7
 8002b08:	bd80      	pop	{r7, pc}
	...

08002b0c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8002b0c:	b590      	push	{r4, r7, lr}
 8002b0e:	b08f      	sub	sp, #60	; 0x3c
 8002b10:	af02      	add	r7, sp, #8
 8002b12:	60f8      	str	r0, [r7, #12]
 8002b14:	60b9      	str	r1, [r7, #8]
 8002b16:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8002b18:	2300      	movs	r3, #0
 8002b1a:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8002b20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d10a      	bne.n	8002b3c <xQueueReceive+0x30>
        __asm volatile
 8002b26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b2a:	f383 8811 	msr	BASEPRI, r3
 8002b2e:	f3bf 8f6f 	isb	sy
 8002b32:	f3bf 8f4f 	dsb	sy
 8002b36:	623b      	str	r3, [r7, #32]
    }
 8002b38:	bf00      	nop
 8002b3a:	e7fe      	b.n	8002b3a <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002b3c:	68bb      	ldr	r3, [r7, #8]
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d103      	bne.n	8002b4a <xQueueReceive+0x3e>
 8002b42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d101      	bne.n	8002b4e <xQueueReceive+0x42>
 8002b4a:	2301      	movs	r3, #1
 8002b4c:	e000      	b.n	8002b50 <xQueueReceive+0x44>
 8002b4e:	2300      	movs	r3, #0
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d10a      	bne.n	8002b6a <xQueueReceive+0x5e>
        __asm volatile
 8002b54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b58:	f383 8811 	msr	BASEPRI, r3
 8002b5c:	f3bf 8f6f 	isb	sy
 8002b60:	f3bf 8f4f 	dsb	sy
 8002b64:	61fb      	str	r3, [r7, #28]
    }
 8002b66:	bf00      	nop
 8002b68:	e7fe      	b.n	8002b68 <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002b6a:	f001 f94b 	bl	8003e04 <xTaskGetSchedulerState>
 8002b6e:	4603      	mov	r3, r0
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d102      	bne.n	8002b7a <xQueueReceive+0x6e>
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d101      	bne.n	8002b7e <xQueueReceive+0x72>
 8002b7a:	2301      	movs	r3, #1
 8002b7c:	e000      	b.n	8002b80 <xQueueReceive+0x74>
 8002b7e:	2300      	movs	r3, #0
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d10a      	bne.n	8002b9a <xQueueReceive+0x8e>
        __asm volatile
 8002b84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b88:	f383 8811 	msr	BASEPRI, r3
 8002b8c:	f3bf 8f6f 	isb	sy
 8002b90:	f3bf 8f4f 	dsb	sy
 8002b94:	61bb      	str	r3, [r7, #24]
    }
 8002b96:	bf00      	nop
 8002b98:	e7fe      	b.n	8002b98 <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8002b9a:	f001 fe03 	bl	80047a4 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002b9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ba0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ba2:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002ba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d02f      	beq.n	8002c0a <xQueueReceive+0xfe>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002baa:	68b9      	ldr	r1, [r7, #8]
 8002bac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002bae:	f000 f8bd 	bl	8002d2c <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
 8002bb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	f003 fc4f 	bl	8006458 <SEGGER_SYSVIEW_ShrinkId>
 8002bba:	4604      	mov	r4, r0
 8002bbc:	2000      	movs	r0, #0
 8002bbe:	f003 fc4b 	bl	8006458 <SEGGER_SYSVIEW_ShrinkId>
 8002bc2:	4602      	mov	r2, r0
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	2101      	movs	r1, #1
 8002bc8:	9100      	str	r1, [sp, #0]
 8002bca:	4621      	mov	r1, r4
 8002bcc:	205c      	movs	r0, #92	; 0x5c
 8002bce:	f002 ff8d 	bl	8005aec <SEGGER_SYSVIEW_RecordU32x4>
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002bd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bd4:	1e5a      	subs	r2, r3, #1
 8002bd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bd8:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002bda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bdc:	691b      	ldr	r3, [r3, #16]
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d00f      	beq.n	8002c02 <xQueueReceive+0xf6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002be2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002be4:	3310      	adds	r3, #16
 8002be6:	4618      	mov	r0, r3
 8002be8:	f000 fefa 	bl	80039e0 <xTaskRemoveFromEventList>
 8002bec:	4603      	mov	r3, r0
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d007      	beq.n	8002c02 <xQueueReceive+0xf6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8002bf2:	4b4d      	ldr	r3, [pc, #308]	; (8002d28 <xQueueReceive+0x21c>)
 8002bf4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002bf8:	601a      	str	r2, [r3, #0]
 8002bfa:	f3bf 8f4f 	dsb	sy
 8002bfe:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8002c02:	f001 fdff 	bl	8004804 <vPortExitCritical>
                return pdPASS;
 8002c06:	2301      	movs	r3, #1
 8002c08:	e08a      	b.n	8002d20 <xQueueReceive+0x214>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d113      	bne.n	8002c38 <xQueueReceive+0x12c>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8002c10:	f001 fdf8 	bl	8004804 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
 8002c14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c16:	4618      	mov	r0, r3
 8002c18:	f003 fc1e 	bl	8006458 <SEGGER_SYSVIEW_ShrinkId>
 8002c1c:	4604      	mov	r4, r0
 8002c1e:	2000      	movs	r0, #0
 8002c20:	f003 fc1a 	bl	8006458 <SEGGER_SYSVIEW_ShrinkId>
 8002c24:	4602      	mov	r2, r0
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	2101      	movs	r1, #1
 8002c2a:	9100      	str	r1, [sp, #0]
 8002c2c:	4621      	mov	r1, r4
 8002c2e:	205c      	movs	r0, #92	; 0x5c
 8002c30:	f002 ff5c 	bl	8005aec <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_EMPTY;
 8002c34:	2300      	movs	r3, #0
 8002c36:	e073      	b.n	8002d20 <xQueueReceive+0x214>
                }
                else if( xEntryTimeSet == pdFALSE )
 8002c38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d106      	bne.n	8002c4c <xQueueReceive+0x140>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8002c3e:	f107 0310 	add.w	r3, r7, #16
 8002c42:	4618      	mov	r0, r3
 8002c44:	f000 ffa4 	bl	8003b90 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8002c48:	2301      	movs	r3, #1
 8002c4a:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8002c4c:	f001 fdda 	bl	8004804 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8002c50:	f000 fba6 	bl	80033a0 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8002c54:	f001 fda6 	bl	80047a4 <vPortEnterCritical>
 8002c58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c5a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002c5e:	b25b      	sxtb	r3, r3
 8002c60:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002c64:	d103      	bne.n	8002c6e <xQueueReceive+0x162>
 8002c66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c68:	2200      	movs	r2, #0
 8002c6a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002c6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c70:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002c74:	b25b      	sxtb	r3, r3
 8002c76:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002c7a:	d103      	bne.n	8002c84 <xQueueReceive+0x178>
 8002c7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c7e:	2200      	movs	r2, #0
 8002c80:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002c84:	f001 fdbe 	bl	8004804 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002c88:	1d3a      	adds	r2, r7, #4
 8002c8a:	f107 0310 	add.w	r3, r7, #16
 8002c8e:	4611      	mov	r1, r2
 8002c90:	4618      	mov	r0, r3
 8002c92:	f000 ff93 	bl	8003bbc <xTaskCheckForTimeOut>
 8002c96:	4603      	mov	r3, r0
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d124      	bne.n	8002ce6 <xQueueReceive+0x1da>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002c9c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002c9e:	f000 f8bd 	bl	8002e1c <prvIsQueueEmpty>
 8002ca2:	4603      	mov	r3, r0
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d018      	beq.n	8002cda <xQueueReceive+0x1ce>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002ca8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002caa:	3324      	adds	r3, #36	; 0x24
 8002cac:	687a      	ldr	r2, [r7, #4]
 8002cae:	4611      	mov	r1, r2
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	f000 fe29 	bl	8003908 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8002cb6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002cb8:	f000 f85e 	bl	8002d78 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8002cbc:	f000 fb7e 	bl	80033bc <xTaskResumeAll>
 8002cc0:	4603      	mov	r3, r0
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	f47f af69 	bne.w	8002b9a <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 8002cc8:	4b17      	ldr	r3, [pc, #92]	; (8002d28 <xQueueReceive+0x21c>)
 8002cca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002cce:	601a      	str	r2, [r3, #0]
 8002cd0:	f3bf 8f4f 	dsb	sy
 8002cd4:	f3bf 8f6f 	isb	sy
 8002cd8:	e75f      	b.n	8002b9a <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8002cda:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002cdc:	f000 f84c 	bl	8002d78 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8002ce0:	f000 fb6c 	bl	80033bc <xTaskResumeAll>
 8002ce4:	e759      	b.n	8002b9a <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8002ce6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002ce8:	f000 f846 	bl	8002d78 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8002cec:	f000 fb66 	bl	80033bc <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002cf0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002cf2:	f000 f893 	bl	8002e1c <prvIsQueueEmpty>
 8002cf6:	4603      	mov	r3, r0
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	f43f af4e 	beq.w	8002b9a <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
 8002cfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d00:	4618      	mov	r0, r3
 8002d02:	f003 fba9 	bl	8006458 <SEGGER_SYSVIEW_ShrinkId>
 8002d06:	4604      	mov	r4, r0
 8002d08:	2000      	movs	r0, #0
 8002d0a:	f003 fba5 	bl	8006458 <SEGGER_SYSVIEW_ShrinkId>
 8002d0e:	4602      	mov	r2, r0
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	2101      	movs	r1, #1
 8002d14:	9100      	str	r1, [sp, #0]
 8002d16:	4621      	mov	r1, r4
 8002d18:	205c      	movs	r0, #92	; 0x5c
 8002d1a:	f002 fee7 	bl	8005aec <SEGGER_SYSVIEW_RecordU32x4>
                return errQUEUE_EMPTY;
 8002d1e:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8002d20:	4618      	mov	r0, r3
 8002d22:	3734      	adds	r7, #52	; 0x34
 8002d24:	46bd      	mov	sp, r7
 8002d26:	bd90      	pop	{r4, r7, pc}
 8002d28:	e000ed04 	.word	0xe000ed04

08002d2c <prvCopyDataFromQueue>:
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	b082      	sub	sp, #8
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]
 8002d34:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d018      	beq.n	8002d70 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	68da      	ldr	r2, [r3, #12]
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d46:	441a      	add	r2, r3
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	68da      	ldr	r2, [r3, #12]
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	689b      	ldr	r3, [r3, #8]
 8002d54:	429a      	cmp	r2, r3
 8002d56:	d303      	bcc.n	8002d60 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681a      	ldr	r2, [r3, #0]
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	68d9      	ldr	r1, [r3, #12]
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d68:	461a      	mov	r2, r3
 8002d6a:	6838      	ldr	r0, [r7, #0]
 8002d6c:	f003 fcf8 	bl	8006760 <memcpy>
    }
}
 8002d70:	bf00      	nop
 8002d72:	3708      	adds	r7, #8
 8002d74:	46bd      	mov	sp, r7
 8002d76:	bd80      	pop	{r7, pc}

08002d78 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	b084      	sub	sp, #16
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8002d80:	f001 fd10 	bl	80047a4 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002d8a:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8002d8c:	e011      	b.n	8002db2 <prvUnlockQueue+0x3a>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d012      	beq.n	8002dbc <prvUnlockQueue+0x44>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	3324      	adds	r3, #36	; 0x24
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	f000 fe20 	bl	80039e0 <xTaskRemoveFromEventList>
 8002da0:	4603      	mov	r3, r0
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d001      	beq.n	8002daa <prvUnlockQueue+0x32>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 8002da6:	f000 ff6f 	bl	8003c88 <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8002daa:	7bfb      	ldrb	r3, [r7, #15]
 8002dac:	3b01      	subs	r3, #1
 8002dae:	b2db      	uxtb	r3, r3
 8002db0:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8002db2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	dce9      	bgt.n	8002d8e <prvUnlockQueue+0x16>
 8002dba:	e000      	b.n	8002dbe <prvUnlockQueue+0x46>
                    break;
 8002dbc:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	22ff      	movs	r2, #255	; 0xff
 8002dc2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 8002dc6:	f001 fd1d 	bl	8004804 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8002dca:	f001 fceb 	bl	80047a4 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002dd4:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002dd6:	e011      	b.n	8002dfc <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	691b      	ldr	r3, [r3, #16]
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d012      	beq.n	8002e06 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	3310      	adds	r3, #16
 8002de4:	4618      	mov	r0, r3
 8002de6:	f000 fdfb 	bl	80039e0 <xTaskRemoveFromEventList>
 8002dea:	4603      	mov	r3, r0
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d001      	beq.n	8002df4 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8002df0:	f000 ff4a 	bl	8003c88 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8002df4:	7bbb      	ldrb	r3, [r7, #14]
 8002df6:	3b01      	subs	r3, #1
 8002df8:	b2db      	uxtb	r3, r3
 8002dfa:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002dfc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	dce9      	bgt.n	8002dd8 <prvUnlockQueue+0x60>
 8002e04:	e000      	b.n	8002e08 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8002e06:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	22ff      	movs	r2, #255	; 0xff
 8002e0c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 8002e10:	f001 fcf8 	bl	8004804 <vPortExitCritical>
}
 8002e14:	bf00      	nop
 8002e16:	3710      	adds	r7, #16
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	bd80      	pop	{r7, pc}

08002e1c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	b084      	sub	sp, #16
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8002e24:	f001 fcbe 	bl	80047a4 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d102      	bne.n	8002e36 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8002e30:	2301      	movs	r3, #1
 8002e32:	60fb      	str	r3, [r7, #12]
 8002e34:	e001      	b.n	8002e3a <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8002e36:	2300      	movs	r3, #0
 8002e38:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8002e3a:	f001 fce3 	bl	8004804 <vPortExitCritical>

    return xReturn;
 8002e3e:	68fb      	ldr	r3, [r7, #12]
}
 8002e40:	4618      	mov	r0, r3
 8002e42:	3710      	adds	r7, #16
 8002e44:	46bd      	mov	sp, r7
 8002e46:	bd80      	pop	{r7, pc}

08002e48 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	b086      	sub	sp, #24
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	6078      	str	r0, [r7, #4]
 8002e50:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;
        QueueRegistryItem_t * pxEntryToWrite = NULL;
 8002e52:	2300      	movs	r3, #0
 8002e54:	613b      	str	r3, [r7, #16]

        configASSERT( xQueue );
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d10a      	bne.n	8002e72 <vQueueAddToRegistry+0x2a>
        __asm volatile
 8002e5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e60:	f383 8811 	msr	BASEPRI, r3
 8002e64:	f3bf 8f6f 	isb	sy
 8002e68:	f3bf 8f4f 	dsb	sy
 8002e6c:	60fb      	str	r3, [r7, #12]
    }
 8002e6e:	bf00      	nop
 8002e70:	e7fe      	b.n	8002e70 <vQueueAddToRegistry+0x28>

        if( pcQueueName != NULL )
 8002e72:	683b      	ldr	r3, [r7, #0]
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d024      	beq.n	8002ec2 <vQueueAddToRegistry+0x7a>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002e78:	2300      	movs	r3, #0
 8002e7a:	617b      	str	r3, [r7, #20]
 8002e7c:	e01e      	b.n	8002ebc <vQueueAddToRegistry+0x74>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 8002e7e:	4a1c      	ldr	r2, [pc, #112]	; (8002ef0 <vQueueAddToRegistry+0xa8>)
 8002e80:	697b      	ldr	r3, [r7, #20]
 8002e82:	00db      	lsls	r3, r3, #3
 8002e84:	4413      	add	r3, r2
 8002e86:	685b      	ldr	r3, [r3, #4]
 8002e88:	687a      	ldr	r2, [r7, #4]
 8002e8a:	429a      	cmp	r2, r3
 8002e8c:	d105      	bne.n	8002e9a <vQueueAddToRegistry+0x52>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8002e8e:	697b      	ldr	r3, [r7, #20]
 8002e90:	00db      	lsls	r3, r3, #3
 8002e92:	4a17      	ldr	r2, [pc, #92]	; (8002ef0 <vQueueAddToRegistry+0xa8>)
 8002e94:	4413      	add	r3, r2
 8002e96:	613b      	str	r3, [r7, #16]
                    break;
 8002e98:	e013      	b.n	8002ec2 <vQueueAddToRegistry+0x7a>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 8002e9a:	693b      	ldr	r3, [r7, #16]
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d10a      	bne.n	8002eb6 <vQueueAddToRegistry+0x6e>
 8002ea0:	4a13      	ldr	r2, [pc, #76]	; (8002ef0 <vQueueAddToRegistry+0xa8>)
 8002ea2:	697b      	ldr	r3, [r7, #20]
 8002ea4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d104      	bne.n	8002eb6 <vQueueAddToRegistry+0x6e>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8002eac:	697b      	ldr	r3, [r7, #20]
 8002eae:	00db      	lsls	r3, r3, #3
 8002eb0:	4a0f      	ldr	r2, [pc, #60]	; (8002ef0 <vQueueAddToRegistry+0xa8>)
 8002eb2:	4413      	add	r3, r2
 8002eb4:	613b      	str	r3, [r7, #16]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002eb6:	697b      	ldr	r3, [r7, #20]
 8002eb8:	3301      	adds	r3, #1
 8002eba:	617b      	str	r3, [r7, #20]
 8002ebc:	697b      	ldr	r3, [r7, #20]
 8002ebe:	2b07      	cmp	r3, #7
 8002ec0:	d9dd      	bls.n	8002e7e <vQueueAddToRegistry+0x36>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 8002ec2:	693b      	ldr	r3, [r7, #16]
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d00f      	beq.n	8002ee8 <vQueueAddToRegistry+0xa0>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 8002ec8:	693b      	ldr	r3, [r7, #16]
 8002eca:	683a      	ldr	r2, [r7, #0]
 8002ecc:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 8002ece:	693b      	ldr	r3, [r7, #16]
 8002ed0:	687a      	ldr	r2, [r7, #4]
 8002ed2:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	f003 fabe 	bl	8006458 <SEGGER_SYSVIEW_ShrinkId>
 8002edc:	4601      	mov	r1, r0
 8002ede:	683b      	ldr	r3, [r7, #0]
 8002ee0:	461a      	mov	r2, r3
 8002ee2:	2071      	movs	r0, #113	; 0x71
 8002ee4:	f002 fd32 	bl	800594c <SEGGER_SYSVIEW_RecordU32x2>
        }
    }
 8002ee8:	bf00      	nop
 8002eea:	3718      	adds	r7, #24
 8002eec:	46bd      	mov	sp, r7
 8002eee:	bd80      	pop	{r7, pc}
 8002ef0:	20000080 	.word	0x20000080

08002ef4 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8002ef4:	b580      	push	{r7, lr}
 8002ef6:	b086      	sub	sp, #24
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	60f8      	str	r0, [r7, #12]
 8002efc:	60b9      	str	r1, [r7, #8]
 8002efe:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8002f04:	f001 fc4e 	bl	80047a4 <vPortEnterCritical>
 8002f08:	697b      	ldr	r3, [r7, #20]
 8002f0a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002f0e:	b25b      	sxtb	r3, r3
 8002f10:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002f14:	d103      	bne.n	8002f1e <vQueueWaitForMessageRestricted+0x2a>
 8002f16:	697b      	ldr	r3, [r7, #20]
 8002f18:	2200      	movs	r2, #0
 8002f1a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002f1e:	697b      	ldr	r3, [r7, #20]
 8002f20:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002f24:	b25b      	sxtb	r3, r3
 8002f26:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002f2a:	d103      	bne.n	8002f34 <vQueueWaitForMessageRestricted+0x40>
 8002f2c:	697b      	ldr	r3, [r7, #20]
 8002f2e:	2200      	movs	r2, #0
 8002f30:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002f34:	f001 fc66 	bl	8004804 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8002f38:	697b      	ldr	r3, [r7, #20]
 8002f3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d106      	bne.n	8002f4e <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8002f40:	697b      	ldr	r3, [r7, #20]
 8002f42:	3324      	adds	r3, #36	; 0x24
 8002f44:	687a      	ldr	r2, [r7, #4]
 8002f46:	68b9      	ldr	r1, [r7, #8]
 8002f48:	4618      	mov	r0, r3
 8002f4a:	f000 fd01 	bl	8003950 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8002f4e:	6978      	ldr	r0, [r7, #20]
 8002f50:	f7ff ff12 	bl	8002d78 <prvUnlockQueue>
    }
 8002f54:	bf00      	nop
 8002f56:	3718      	adds	r7, #24
 8002f58:	46bd      	mov	sp, r7
 8002f5a:	bd80      	pop	{r7, pc}

08002f5c <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	b08c      	sub	sp, #48	; 0x30
 8002f60:	af04      	add	r7, sp, #16
 8002f62:	60f8      	str	r0, [r7, #12]
 8002f64:	60b9      	str	r1, [r7, #8]
 8002f66:	603b      	str	r3, [r7, #0]
 8002f68:	4613      	mov	r3, r2
 8002f6a:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
        {
            StackType_t * pxStack;

            /* Allocate space for the stack used by the task being created. */
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002f6c:	88fb      	ldrh	r3, [r7, #6]
 8002f6e:	009b      	lsls	r3, r3, #2
 8002f70:	4618      	mov	r0, r3
 8002f72:	f001 fd43 	bl	80049fc <pvPortMalloc>
 8002f76:	6178      	str	r0, [r7, #20]

            if( pxStack != NULL )
 8002f78:	697b      	ldr	r3, [r7, #20]
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d013      	beq.n	8002fa6 <xTaskCreate+0x4a>
            {
                /* Allocate space for the TCB. */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002f7e:	2058      	movs	r0, #88	; 0x58
 8002f80:	f001 fd3c 	bl	80049fc <pvPortMalloc>
 8002f84:	61f8      	str	r0, [r7, #28]

                if( pxNewTCB != NULL )
 8002f86:	69fb      	ldr	r3, [r7, #28]
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d008      	beq.n	8002f9e <xTaskCreate+0x42>
                {
                    memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 8002f8c:	2258      	movs	r2, #88	; 0x58
 8002f8e:	2100      	movs	r1, #0
 8002f90:	69f8      	ldr	r0, [r7, #28]
 8002f92:	f003 fbb9 	bl	8006708 <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 8002f96:	69fb      	ldr	r3, [r7, #28]
 8002f98:	697a      	ldr	r2, [r7, #20]
 8002f9a:	631a      	str	r2, [r3, #48]	; 0x30
 8002f9c:	e005      	b.n	8002faa <xTaskCreate+0x4e>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 8002f9e:	6978      	ldr	r0, [r7, #20]
 8002fa0:	f001 fde6 	bl	8004b70 <vPortFree>
 8002fa4:	e001      	b.n	8002faa <xTaskCreate+0x4e>
                }
            }
            else
            {
                pxNewTCB = NULL;
 8002fa6:	2300      	movs	r3, #0
 8002fa8:	61fb      	str	r3, [r7, #28]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8002faa:	69fb      	ldr	r3, [r7, #28]
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d013      	beq.n	8002fd8 <xTaskCreate+0x7c>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002fb0:	88fa      	ldrh	r2, [r7, #6]
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	9303      	str	r3, [sp, #12]
 8002fb6:	69fb      	ldr	r3, [r7, #28]
 8002fb8:	9302      	str	r3, [sp, #8]
 8002fba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fbc:	9301      	str	r3, [sp, #4]
 8002fbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fc0:	9300      	str	r3, [sp, #0]
 8002fc2:	683b      	ldr	r3, [r7, #0]
 8002fc4:	68b9      	ldr	r1, [r7, #8]
 8002fc6:	68f8      	ldr	r0, [r7, #12]
 8002fc8:	f000 f80e 	bl	8002fe8 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8002fcc:	69f8      	ldr	r0, [r7, #28]
 8002fce:	f000 f899 	bl	8003104 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8002fd2:	2301      	movs	r3, #1
 8002fd4:	61bb      	str	r3, [r7, #24]
 8002fd6:	e002      	b.n	8002fde <xTaskCreate+0x82>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002fd8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002fdc:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8002fde:	69bb      	ldr	r3, [r7, #24]
    }
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	3720      	adds	r7, #32
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	bd80      	pop	{r7, pc}

08002fe8 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	b088      	sub	sp, #32
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	60f8      	str	r0, [r7, #12]
 8002ff0:	60b9      	str	r1, [r7, #8]
 8002ff2:	607a      	str	r2, [r7, #4]
 8002ff4:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002ff6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ff8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	009b      	lsls	r3, r3, #2
 8002ffe:	461a      	mov	r2, r3
 8003000:	21a5      	movs	r1, #165	; 0xa5
 8003002:	f003 fb81 	bl	8006708 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003006:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003008:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003010:	3b01      	subs	r3, #1
 8003012:	009b      	lsls	r3, r3, #2
 8003014:	4413      	add	r3, r2
 8003016:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003018:	69bb      	ldr	r3, [r7, #24]
 800301a:	f023 0307 	bic.w	r3, r3, #7
 800301e:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003020:	69bb      	ldr	r3, [r7, #24]
 8003022:	f003 0307 	and.w	r3, r3, #7
 8003026:	2b00      	cmp	r3, #0
 8003028:	d00a      	beq.n	8003040 <prvInitialiseNewTask+0x58>
        __asm volatile
 800302a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800302e:	f383 8811 	msr	BASEPRI, r3
 8003032:	f3bf 8f6f 	isb	sy
 8003036:	f3bf 8f4f 	dsb	sy
 800303a:	617b      	str	r3, [r7, #20]
    }
 800303c:	bf00      	nop
 800303e:	e7fe      	b.n	800303e <prvInitialiseNewTask+0x56>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8003040:	68bb      	ldr	r3, [r7, #8]
 8003042:	2b00      	cmp	r3, #0
 8003044:	d01e      	beq.n	8003084 <prvInitialiseNewTask+0x9c>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003046:	2300      	movs	r3, #0
 8003048:	61fb      	str	r3, [r7, #28]
 800304a:	e012      	b.n	8003072 <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800304c:	68ba      	ldr	r2, [r7, #8]
 800304e:	69fb      	ldr	r3, [r7, #28]
 8003050:	4413      	add	r3, r2
 8003052:	7819      	ldrb	r1, [r3, #0]
 8003054:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003056:	69fb      	ldr	r3, [r7, #28]
 8003058:	4413      	add	r3, r2
 800305a:	3334      	adds	r3, #52	; 0x34
 800305c:	460a      	mov	r2, r1
 800305e:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8003060:	68ba      	ldr	r2, [r7, #8]
 8003062:	69fb      	ldr	r3, [r7, #28]
 8003064:	4413      	add	r3, r2
 8003066:	781b      	ldrb	r3, [r3, #0]
 8003068:	2b00      	cmp	r3, #0
 800306a:	d006      	beq.n	800307a <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800306c:	69fb      	ldr	r3, [r7, #28]
 800306e:	3301      	adds	r3, #1
 8003070:	61fb      	str	r3, [r7, #28]
 8003072:	69fb      	ldr	r3, [r7, #28]
 8003074:	2b09      	cmp	r3, #9
 8003076:	d9e9      	bls.n	800304c <prvInitialiseNewTask+0x64>
 8003078:	e000      	b.n	800307c <prvInitialiseNewTask+0x94>
            {
                break;
 800307a:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800307c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800307e:	2200      	movs	r2, #0
 8003080:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 8003084:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003086:	2b07      	cmp	r3, #7
 8003088:	d90a      	bls.n	80030a0 <prvInitialiseNewTask+0xb8>
        __asm volatile
 800308a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800308e:	f383 8811 	msr	BASEPRI, r3
 8003092:	f3bf 8f6f 	isb	sy
 8003096:	f3bf 8f4f 	dsb	sy
 800309a:	613b      	str	r3, [r7, #16]
    }
 800309c:	bf00      	nop
 800309e:	e7fe      	b.n	800309e <prvInitialiseNewTask+0xb6>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80030a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030a2:	2b07      	cmp	r3, #7
 80030a4:	d901      	bls.n	80030aa <prvInitialiseNewTask+0xc2>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80030a6:	2307      	movs	r3, #7
 80030a8:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 80030aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030ac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80030ae:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 80030b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030b2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80030b4:	649a      	str	r2, [r3, #72]	; 0x48
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80030b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030b8:	3304      	adds	r3, #4
 80030ba:	4618      	mov	r0, r3
 80030bc:	f7ff fbae 	bl	800281c <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80030c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030c2:	3318      	adds	r3, #24
 80030c4:	4618      	mov	r0, r3
 80030c6:	f7ff fba9 	bl	800281c <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80030ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80030ce:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80030d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030d2:	f1c3 0208 	rsb	r2, r3, #8
 80030d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030d8:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80030da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80030de:	625a      	str	r2, [r3, #36]	; 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80030e0:	683a      	ldr	r2, [r7, #0]
 80030e2:	68f9      	ldr	r1, [r7, #12]
 80030e4:	69b8      	ldr	r0, [r7, #24]
 80030e6:	f001 f9af 	bl	8004448 <pxPortInitialiseStack>
 80030ea:	4602      	mov	r2, r0
 80030ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030ee:	601a      	str	r2, [r3, #0]
        }
        #endif /* portHAS_STACK_OVERFLOW_CHECKING */
    }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 80030f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d002      	beq.n	80030fc <prvInitialiseNewTask+0x114>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80030f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80030fa:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80030fc:	bf00      	nop
 80030fe:	3720      	adds	r7, #32
 8003100:	46bd      	mov	sp, r7
 8003102:	bd80      	pop	{r7, pc}

08003104 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8003104:	b5b0      	push	{r4, r5, r7, lr}
 8003106:	b086      	sub	sp, #24
 8003108:	af02      	add	r7, sp, #8
 800310a:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 800310c:	f001 fb4a 	bl	80047a4 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8003110:	4b4f      	ldr	r3, [pc, #316]	; (8003250 <prvAddNewTaskToReadyList+0x14c>)
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	3301      	adds	r3, #1
 8003116:	4a4e      	ldr	r2, [pc, #312]	; (8003250 <prvAddNewTaskToReadyList+0x14c>)
 8003118:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 800311a:	4b4e      	ldr	r3, [pc, #312]	; (8003254 <prvAddNewTaskToReadyList+0x150>)
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	2b00      	cmp	r3, #0
 8003120:	d109      	bne.n	8003136 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8003122:	4a4c      	ldr	r2, [pc, #304]	; (8003254 <prvAddNewTaskToReadyList+0x150>)
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003128:	4b49      	ldr	r3, [pc, #292]	; (8003250 <prvAddNewTaskToReadyList+0x14c>)
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	2b01      	cmp	r3, #1
 800312e:	d110      	bne.n	8003152 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8003130:	f000 fdce 	bl	8003cd0 <prvInitialiseTaskLists>
 8003134:	e00d      	b.n	8003152 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8003136:	4b48      	ldr	r3, [pc, #288]	; (8003258 <prvAddNewTaskToReadyList+0x154>)
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	2b00      	cmp	r3, #0
 800313c:	d109      	bne.n	8003152 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800313e:	4b45      	ldr	r3, [pc, #276]	; (8003254 <prvAddNewTaskToReadyList+0x150>)
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003148:	429a      	cmp	r2, r3
 800314a:	d802      	bhi.n	8003152 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 800314c:	4a41      	ldr	r2, [pc, #260]	; (8003254 <prvAddNewTaskToReadyList+0x150>)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8003152:	4b42      	ldr	r3, [pc, #264]	; (800325c <prvAddNewTaskToReadyList+0x158>)
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	3301      	adds	r3, #1
 8003158:	4a40      	ldr	r2, [pc, #256]	; (800325c <prvAddNewTaskToReadyList+0x158>)
 800315a:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
        {
            /* Add a counter into the TCB for tracing only. */
            pxNewTCB->uxTCBNumber = uxTaskNumber;
 800315c:	4b3f      	ldr	r3, [pc, #252]	; (800325c <prvAddNewTaskToReadyList+0x158>)
 800315e:	681a      	ldr	r2, [r3, #0]
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	641a      	str	r2, [r3, #64]	; 0x40
        }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	2b00      	cmp	r3, #0
 8003168:	d016      	beq.n	8003198 <prvAddNewTaskToReadyList+0x94>
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	4618      	mov	r0, r3
 800316e:	f003 f8ad 	bl	80062cc <SEGGER_SYSVIEW_OnTaskCreate>
 8003172:	6878      	ldr	r0, [r7, #4]
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003182:	461d      	mov	r5, r3
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	461c      	mov	r4, r3
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800318e:	1ae3      	subs	r3, r4, r3
 8003190:	9300      	str	r3, [sp, #0]
 8003192:	462b      	mov	r3, r5
 8003194:	f001 feae 	bl	8004ef4 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	4618      	mov	r0, r3
 800319c:	f003 f91a 	bl	80063d4 <SEGGER_SYSVIEW_OnTaskStartReady>
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031a4:	2201      	movs	r2, #1
 80031a6:	409a      	lsls	r2, r3
 80031a8:	4b2d      	ldr	r3, [pc, #180]	; (8003260 <prvAddNewTaskToReadyList+0x15c>)
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	4313      	orrs	r3, r2
 80031ae:	4a2c      	ldr	r2, [pc, #176]	; (8003260 <prvAddNewTaskToReadyList+0x15c>)
 80031b0:	6013      	str	r3, [r2, #0]
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031b6:	492b      	ldr	r1, [pc, #172]	; (8003264 <prvAddNewTaskToReadyList+0x160>)
 80031b8:	4613      	mov	r3, r2
 80031ba:	009b      	lsls	r3, r3, #2
 80031bc:	4413      	add	r3, r2
 80031be:	009b      	lsls	r3, r3, #2
 80031c0:	440b      	add	r3, r1
 80031c2:	3304      	adds	r3, #4
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	60fb      	str	r3, [r7, #12]
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	68fa      	ldr	r2, [r7, #12]
 80031cc:	609a      	str	r2, [r3, #8]
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	689a      	ldr	r2, [r3, #8]
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	60da      	str	r2, [r3, #12]
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	689b      	ldr	r3, [r3, #8]
 80031da:	687a      	ldr	r2, [r7, #4]
 80031dc:	3204      	adds	r2, #4
 80031de:	605a      	str	r2, [r3, #4]
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	1d1a      	adds	r2, r3, #4
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	609a      	str	r2, [r3, #8]
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031ec:	4613      	mov	r3, r2
 80031ee:	009b      	lsls	r3, r3, #2
 80031f0:	4413      	add	r3, r2
 80031f2:	009b      	lsls	r3, r3, #2
 80031f4:	4a1b      	ldr	r2, [pc, #108]	; (8003264 <prvAddNewTaskToReadyList+0x160>)
 80031f6:	441a      	add	r2, r3
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	615a      	str	r2, [r3, #20]
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003200:	4918      	ldr	r1, [pc, #96]	; (8003264 <prvAddNewTaskToReadyList+0x160>)
 8003202:	4613      	mov	r3, r2
 8003204:	009b      	lsls	r3, r3, #2
 8003206:	4413      	add	r3, r2
 8003208:	009b      	lsls	r3, r3, #2
 800320a:	440b      	add	r3, r1
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	1c59      	adds	r1, r3, #1
 8003210:	4814      	ldr	r0, [pc, #80]	; (8003264 <prvAddNewTaskToReadyList+0x160>)
 8003212:	4613      	mov	r3, r2
 8003214:	009b      	lsls	r3, r3, #2
 8003216:	4413      	add	r3, r2
 8003218:	009b      	lsls	r3, r3, #2
 800321a:	4403      	add	r3, r0
 800321c:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 800321e:	f001 faf1 	bl	8004804 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8003222:	4b0d      	ldr	r3, [pc, #52]	; (8003258 <prvAddNewTaskToReadyList+0x154>)
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	2b00      	cmp	r3, #0
 8003228:	d00e      	beq.n	8003248 <prvAddNewTaskToReadyList+0x144>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800322a:	4b0a      	ldr	r3, [pc, #40]	; (8003254 <prvAddNewTaskToReadyList+0x150>)
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003234:	429a      	cmp	r2, r3
 8003236:	d207      	bcs.n	8003248 <prvAddNewTaskToReadyList+0x144>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8003238:	4b0b      	ldr	r3, [pc, #44]	; (8003268 <prvAddNewTaskToReadyList+0x164>)
 800323a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800323e:	601a      	str	r2, [r3, #0]
 8003240:	f3bf 8f4f 	dsb	sy
 8003244:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8003248:	bf00      	nop
 800324a:	3710      	adds	r7, #16
 800324c:	46bd      	mov	sp, r7
 800324e:	bdb0      	pop	{r4, r5, r7, pc}
 8003250:	200001d4 	.word	0x200001d4
 8003254:	200000c0 	.word	0x200000c0
 8003258:	200001e0 	.word	0x200001e0
 800325c:	200001f0 	.word	0x200001f0
 8003260:	200001dc 	.word	0x200001dc
 8003264:	200000c4 	.word	0x200000c4
 8003268:	e000ed04 	.word	0xe000ed04

0800326c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 800326c:	b580      	push	{r7, lr}
 800326e:	b084      	sub	sp, #16
 8003270:	af00      	add	r7, sp, #0
 8003272:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 8003274:	2300      	movs	r3, #0
 8003276:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	2b00      	cmp	r3, #0
 800327c:	d01b      	beq.n	80032b6 <vTaskDelay+0x4a>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 800327e:	4b15      	ldr	r3, [pc, #84]	; (80032d4 <vTaskDelay+0x68>)
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	2b00      	cmp	r3, #0
 8003284:	d00a      	beq.n	800329c <vTaskDelay+0x30>
        __asm volatile
 8003286:	f04f 0350 	mov.w	r3, #80	; 0x50
 800328a:	f383 8811 	msr	BASEPRI, r3
 800328e:	f3bf 8f6f 	isb	sy
 8003292:	f3bf 8f4f 	dsb	sy
 8003296:	60bb      	str	r3, [r7, #8]
    }
 8003298:	bf00      	nop
 800329a:	e7fe      	b.n	800329a <vTaskDelay+0x2e>
            vTaskSuspendAll();
 800329c:	f000 f880 	bl	80033a0 <vTaskSuspendAll>
            {
                traceTASK_DELAY();
 80032a0:	6879      	ldr	r1, [r7, #4]
 80032a2:	2023      	movs	r0, #35	; 0x23
 80032a4:	f002 fb16 	bl	80058d4 <SEGGER_SYSVIEW_RecordU32>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80032a8:	2100      	movs	r1, #0
 80032aa:	6878      	ldr	r0, [r7, #4]
 80032ac:	f000 fdc8 	bl	8003e40 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 80032b0:	f000 f884 	bl	80033bc <xTaskResumeAll>
 80032b4:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d107      	bne.n	80032cc <vTaskDelay+0x60>
        {
            portYIELD_WITHIN_API();
 80032bc:	4b06      	ldr	r3, [pc, #24]	; (80032d8 <vTaskDelay+0x6c>)
 80032be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80032c2:	601a      	str	r2, [r3, #0]
 80032c4:	f3bf 8f4f 	dsb	sy
 80032c8:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 80032cc:	bf00      	nop
 80032ce:	3710      	adds	r7, #16
 80032d0:	46bd      	mov	sp, r7
 80032d2:	bd80      	pop	{r7, pc}
 80032d4:	200001fc 	.word	0x200001fc
 80032d8:	e000ed04 	.word	0xe000ed04

080032dc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80032dc:	b580      	push	{r7, lr}
 80032de:	b086      	sub	sp, #24
 80032e0:	af02      	add	r7, sp, #8
        }
    }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
    {
        /* The Idle task is being created using dynamically allocated RAM. */
        xReturn = xTaskCreate( prvIdleTask,
 80032e2:	4b27      	ldr	r3, [pc, #156]	; (8003380 <vTaskStartScheduler+0xa4>)
 80032e4:	9301      	str	r3, [sp, #4]
 80032e6:	2300      	movs	r3, #0
 80032e8:	9300      	str	r3, [sp, #0]
 80032ea:	2300      	movs	r3, #0
 80032ec:	f44f 7280 	mov.w	r2, #256	; 0x100
 80032f0:	4924      	ldr	r1, [pc, #144]	; (8003384 <vTaskStartScheduler+0xa8>)
 80032f2:	4825      	ldr	r0, [pc, #148]	; (8003388 <vTaskStartScheduler+0xac>)
 80032f4:	f7ff fe32 	bl	8002f5c <xTaskCreate>
 80032f8:	60f8      	str	r0, [r7, #12]
    }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	2b01      	cmp	r3, #1
 80032fe:	d102      	bne.n	8003306 <vTaskStartScheduler+0x2a>
        {
            xReturn = xTimerCreateTimerTask();
 8003300:	f000 fe1e 	bl	8003f40 <xTimerCreateTimerTask>
 8003304:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	2b01      	cmp	r3, #1
 800330a:	d124      	bne.n	8003356 <vTaskStartScheduler+0x7a>
        __asm volatile
 800330c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003310:	f383 8811 	msr	BASEPRI, r3
 8003314:	f3bf 8f6f 	isb	sy
 8003318:	f3bf 8f4f 	dsb	sy
 800331c:	60bb      	str	r3, [r7, #8]
    }
 800331e:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 8003320:	4b1a      	ldr	r3, [pc, #104]	; (800338c <vTaskStartScheduler+0xb0>)
 8003322:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003326:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8003328:	4b19      	ldr	r3, [pc, #100]	; (8003390 <vTaskStartScheduler+0xb4>)
 800332a:	2201      	movs	r2, #1
 800332c:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800332e:	4b19      	ldr	r3, [pc, #100]	; (8003394 <vTaskStartScheduler+0xb8>)
 8003330:	2200      	movs	r2, #0
 8003332:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 8003334:	4b18      	ldr	r3, [pc, #96]	; (8003398 <vTaskStartScheduler+0xbc>)
 8003336:	681a      	ldr	r2, [r3, #0]
 8003338:	4b11      	ldr	r3, [pc, #68]	; (8003380 <vTaskStartScheduler+0xa4>)
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	429a      	cmp	r2, r3
 800333e:	d102      	bne.n	8003346 <vTaskStartScheduler+0x6a>
 8003340:	f002 ffa8 	bl	8006294 <SEGGER_SYSVIEW_OnIdle>
 8003344:	e004      	b.n	8003350 <vTaskStartScheduler+0x74>
 8003346:	4b14      	ldr	r3, [pc, #80]	; (8003398 <vTaskStartScheduler+0xbc>)
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	4618      	mov	r0, r3
 800334c:	f003 f800 	bl	8006350 <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        xPortStartScheduler();
 8003350:	f001 f908 	bl	8004564 <xPortStartScheduler>
 8003354:	e00e      	b.n	8003374 <vTaskStartScheduler+0x98>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800335c:	d10a      	bne.n	8003374 <vTaskStartScheduler+0x98>
        __asm volatile
 800335e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003362:	f383 8811 	msr	BASEPRI, r3
 8003366:	f3bf 8f6f 	isb	sy
 800336a:	f3bf 8f4f 	dsb	sy
 800336e:	607b      	str	r3, [r7, #4]
    }
 8003370:	bf00      	nop
 8003372:	e7fe      	b.n	8003372 <vTaskStartScheduler+0x96>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8003374:	4b09      	ldr	r3, [pc, #36]	; (800339c <vTaskStartScheduler+0xc0>)
 8003376:	681b      	ldr	r3, [r3, #0]
}
 8003378:	bf00      	nop
 800337a:	3710      	adds	r7, #16
 800337c:	46bd      	mov	sp, r7
 800337e:	bd80      	pop	{r7, pc}
 8003380:	200001f8 	.word	0x200001f8
 8003384:	080067f4 	.word	0x080067f4
 8003388:	08003ca1 	.word	0x08003ca1
 800338c:	200001f4 	.word	0x200001f4
 8003390:	200001e0 	.word	0x200001e0
 8003394:	200001d8 	.word	0x200001d8
 8003398:	200000c0 	.word	0x200000c0
 800339c:	2000000c 	.word	0x2000000c

080033a0 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80033a0:	b480      	push	{r7}
 80033a2:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 80033a4:	4b04      	ldr	r3, [pc, #16]	; (80033b8 <vTaskSuspendAll+0x18>)
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	3301      	adds	r3, #1
 80033aa:	4a03      	ldr	r2, [pc, #12]	; (80033b8 <vTaskSuspendAll+0x18>)
 80033ac:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 80033ae:	bf00      	nop
 80033b0:	46bd      	mov	sp, r7
 80033b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b6:	4770      	bx	lr
 80033b8:	200001fc 	.word	0x200001fc

080033bc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80033bc:	b580      	push	{r7, lr}
 80033be:	b088      	sub	sp, #32
 80033c0:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 80033c2:	2300      	movs	r3, #0
 80033c4:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 80033c6:	2300      	movs	r3, #0
 80033c8:	61bb      	str	r3, [r7, #24]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 80033ca:	4b73      	ldr	r3, [pc, #460]	; (8003598 <xTaskResumeAll+0x1dc>)
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d10a      	bne.n	80033e8 <xTaskResumeAll+0x2c>
        __asm volatile
 80033d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033d6:	f383 8811 	msr	BASEPRI, r3
 80033da:	f3bf 8f6f 	isb	sy
 80033de:	f3bf 8f4f 	dsb	sy
 80033e2:	607b      	str	r3, [r7, #4]
    }
 80033e4:	bf00      	nop
 80033e6:	e7fe      	b.n	80033e6 <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 80033e8:	f001 f9dc 	bl	80047a4 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 80033ec:	4b6a      	ldr	r3, [pc, #424]	; (8003598 <xTaskResumeAll+0x1dc>)
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	3b01      	subs	r3, #1
 80033f2:	4a69      	ldr	r2, [pc, #420]	; (8003598 <xTaskResumeAll+0x1dc>)
 80033f4:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80033f6:	4b68      	ldr	r3, [pc, #416]	; (8003598 <xTaskResumeAll+0x1dc>)
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	f040 80c4 	bne.w	8003588 <xTaskResumeAll+0x1cc>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003400:	4b66      	ldr	r3, [pc, #408]	; (800359c <xTaskResumeAll+0x1e0>)
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	2b00      	cmp	r3, #0
 8003406:	f000 80bf 	beq.w	8003588 <xTaskResumeAll+0x1cc>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800340a:	e08e      	b.n	800352a <xTaskResumeAll+0x16e>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800340c:	4b64      	ldr	r3, [pc, #400]	; (80035a0 <xTaskResumeAll+0x1e4>)
 800340e:	68db      	ldr	r3, [r3, #12]
 8003410:	68db      	ldr	r3, [r3, #12]
 8003412:	61fb      	str	r3, [r7, #28]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8003414:	69fb      	ldr	r3, [r7, #28]
 8003416:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003418:	613b      	str	r3, [r7, #16]
 800341a:	69fb      	ldr	r3, [r7, #28]
 800341c:	69db      	ldr	r3, [r3, #28]
 800341e:	69fa      	ldr	r2, [r7, #28]
 8003420:	6a12      	ldr	r2, [r2, #32]
 8003422:	609a      	str	r2, [r3, #8]
 8003424:	69fb      	ldr	r3, [r7, #28]
 8003426:	6a1b      	ldr	r3, [r3, #32]
 8003428:	69fa      	ldr	r2, [r7, #28]
 800342a:	69d2      	ldr	r2, [r2, #28]
 800342c:	605a      	str	r2, [r3, #4]
 800342e:	693b      	ldr	r3, [r7, #16]
 8003430:	685a      	ldr	r2, [r3, #4]
 8003432:	69fb      	ldr	r3, [r7, #28]
 8003434:	3318      	adds	r3, #24
 8003436:	429a      	cmp	r2, r3
 8003438:	d103      	bne.n	8003442 <xTaskResumeAll+0x86>
 800343a:	69fb      	ldr	r3, [r7, #28]
 800343c:	6a1a      	ldr	r2, [r3, #32]
 800343e:	693b      	ldr	r3, [r7, #16]
 8003440:	605a      	str	r2, [r3, #4]
 8003442:	69fb      	ldr	r3, [r7, #28]
 8003444:	2200      	movs	r2, #0
 8003446:	629a      	str	r2, [r3, #40]	; 0x28
 8003448:	693b      	ldr	r3, [r7, #16]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	1e5a      	subs	r2, r3, #1
 800344e:	693b      	ldr	r3, [r7, #16]
 8003450:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8003452:	69fb      	ldr	r3, [r7, #28]
 8003454:	695b      	ldr	r3, [r3, #20]
 8003456:	60fb      	str	r3, [r7, #12]
 8003458:	69fb      	ldr	r3, [r7, #28]
 800345a:	689b      	ldr	r3, [r3, #8]
 800345c:	69fa      	ldr	r2, [r7, #28]
 800345e:	68d2      	ldr	r2, [r2, #12]
 8003460:	609a      	str	r2, [r3, #8]
 8003462:	69fb      	ldr	r3, [r7, #28]
 8003464:	68db      	ldr	r3, [r3, #12]
 8003466:	69fa      	ldr	r2, [r7, #28]
 8003468:	6892      	ldr	r2, [r2, #8]
 800346a:	605a      	str	r2, [r3, #4]
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	685a      	ldr	r2, [r3, #4]
 8003470:	69fb      	ldr	r3, [r7, #28]
 8003472:	3304      	adds	r3, #4
 8003474:	429a      	cmp	r2, r3
 8003476:	d103      	bne.n	8003480 <xTaskResumeAll+0xc4>
 8003478:	69fb      	ldr	r3, [r7, #28]
 800347a:	68da      	ldr	r2, [r3, #12]
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	605a      	str	r2, [r3, #4]
 8003480:	69fb      	ldr	r3, [r7, #28]
 8003482:	2200      	movs	r2, #0
 8003484:	615a      	str	r2, [r3, #20]
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	1e5a      	subs	r2, r3, #1
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 8003490:	69fb      	ldr	r3, [r7, #28]
 8003492:	4618      	mov	r0, r3
 8003494:	f002 ff9e 	bl	80063d4 <SEGGER_SYSVIEW_OnTaskStartReady>
 8003498:	69fb      	ldr	r3, [r7, #28]
 800349a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800349c:	2201      	movs	r2, #1
 800349e:	409a      	lsls	r2, r3
 80034a0:	4b40      	ldr	r3, [pc, #256]	; (80035a4 <xTaskResumeAll+0x1e8>)
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	4313      	orrs	r3, r2
 80034a6:	4a3f      	ldr	r2, [pc, #252]	; (80035a4 <xTaskResumeAll+0x1e8>)
 80034a8:	6013      	str	r3, [r2, #0]
 80034aa:	69fb      	ldr	r3, [r7, #28]
 80034ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034ae:	493e      	ldr	r1, [pc, #248]	; (80035a8 <xTaskResumeAll+0x1ec>)
 80034b0:	4613      	mov	r3, r2
 80034b2:	009b      	lsls	r3, r3, #2
 80034b4:	4413      	add	r3, r2
 80034b6:	009b      	lsls	r3, r3, #2
 80034b8:	440b      	add	r3, r1
 80034ba:	3304      	adds	r3, #4
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	60bb      	str	r3, [r7, #8]
 80034c0:	69fb      	ldr	r3, [r7, #28]
 80034c2:	68ba      	ldr	r2, [r7, #8]
 80034c4:	609a      	str	r2, [r3, #8]
 80034c6:	68bb      	ldr	r3, [r7, #8]
 80034c8:	689a      	ldr	r2, [r3, #8]
 80034ca:	69fb      	ldr	r3, [r7, #28]
 80034cc:	60da      	str	r2, [r3, #12]
 80034ce:	68bb      	ldr	r3, [r7, #8]
 80034d0:	689b      	ldr	r3, [r3, #8]
 80034d2:	69fa      	ldr	r2, [r7, #28]
 80034d4:	3204      	adds	r2, #4
 80034d6:	605a      	str	r2, [r3, #4]
 80034d8:	69fb      	ldr	r3, [r7, #28]
 80034da:	1d1a      	adds	r2, r3, #4
 80034dc:	68bb      	ldr	r3, [r7, #8]
 80034de:	609a      	str	r2, [r3, #8]
 80034e0:	69fb      	ldr	r3, [r7, #28]
 80034e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034e4:	4613      	mov	r3, r2
 80034e6:	009b      	lsls	r3, r3, #2
 80034e8:	4413      	add	r3, r2
 80034ea:	009b      	lsls	r3, r3, #2
 80034ec:	4a2e      	ldr	r2, [pc, #184]	; (80035a8 <xTaskResumeAll+0x1ec>)
 80034ee:	441a      	add	r2, r3
 80034f0:	69fb      	ldr	r3, [r7, #28]
 80034f2:	615a      	str	r2, [r3, #20]
 80034f4:	69fb      	ldr	r3, [r7, #28]
 80034f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034f8:	492b      	ldr	r1, [pc, #172]	; (80035a8 <xTaskResumeAll+0x1ec>)
 80034fa:	4613      	mov	r3, r2
 80034fc:	009b      	lsls	r3, r3, #2
 80034fe:	4413      	add	r3, r2
 8003500:	009b      	lsls	r3, r3, #2
 8003502:	440b      	add	r3, r1
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	1c59      	adds	r1, r3, #1
 8003508:	4827      	ldr	r0, [pc, #156]	; (80035a8 <xTaskResumeAll+0x1ec>)
 800350a:	4613      	mov	r3, r2
 800350c:	009b      	lsls	r3, r3, #2
 800350e:	4413      	add	r3, r2
 8003510:	009b      	lsls	r3, r3, #2
 8003512:	4403      	add	r3, r0
 8003514:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003516:	69fb      	ldr	r3, [r7, #28]
 8003518:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800351a:	4b24      	ldr	r3, [pc, #144]	; (80035ac <xTaskResumeAll+0x1f0>)
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003520:	429a      	cmp	r2, r3
 8003522:	d302      	bcc.n	800352a <xTaskResumeAll+0x16e>
                    {
                        xYieldPending = pdTRUE;
 8003524:	4b22      	ldr	r3, [pc, #136]	; (80035b0 <xTaskResumeAll+0x1f4>)
 8003526:	2201      	movs	r2, #1
 8003528:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800352a:	4b1d      	ldr	r3, [pc, #116]	; (80035a0 <xTaskResumeAll+0x1e4>)
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	2b00      	cmp	r3, #0
 8003530:	f47f af6c 	bne.w	800340c <xTaskResumeAll+0x50>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8003534:	69fb      	ldr	r3, [r7, #28]
 8003536:	2b00      	cmp	r3, #0
 8003538:	d001      	beq.n	800353e <xTaskResumeAll+0x182>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 800353a:	f000 fc47 	bl	8003dcc <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800353e:	4b1d      	ldr	r3, [pc, #116]	; (80035b4 <xTaskResumeAll+0x1f8>)
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	617b      	str	r3, [r7, #20]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8003544:	697b      	ldr	r3, [r7, #20]
 8003546:	2b00      	cmp	r3, #0
 8003548:	d010      	beq.n	800356c <xTaskResumeAll+0x1b0>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 800354a:	f000 f859 	bl	8003600 <xTaskIncrementTick>
 800354e:	4603      	mov	r3, r0
 8003550:	2b00      	cmp	r3, #0
 8003552:	d002      	beq.n	800355a <xTaskResumeAll+0x19e>
                            {
                                xYieldPending = pdTRUE;
 8003554:	4b16      	ldr	r3, [pc, #88]	; (80035b0 <xTaskResumeAll+0x1f4>)
 8003556:	2201      	movs	r2, #1
 8003558:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 800355a:	697b      	ldr	r3, [r7, #20]
 800355c:	3b01      	subs	r3, #1
 800355e:	617b      	str	r3, [r7, #20]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8003560:	697b      	ldr	r3, [r7, #20]
 8003562:	2b00      	cmp	r3, #0
 8003564:	d1f1      	bne.n	800354a <xTaskResumeAll+0x18e>

                        xPendedTicks = 0;
 8003566:	4b13      	ldr	r3, [pc, #76]	; (80035b4 <xTaskResumeAll+0x1f8>)
 8003568:	2200      	movs	r2, #0
 800356a:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 800356c:	4b10      	ldr	r3, [pc, #64]	; (80035b0 <xTaskResumeAll+0x1f4>)
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	2b00      	cmp	r3, #0
 8003572:	d009      	beq.n	8003588 <xTaskResumeAll+0x1cc>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                    {
                        xAlreadyYielded = pdTRUE;
 8003574:	2301      	movs	r3, #1
 8003576:	61bb      	str	r3, [r7, #24]
                    }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8003578:	4b0f      	ldr	r3, [pc, #60]	; (80035b8 <xTaskResumeAll+0x1fc>)
 800357a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800357e:	601a      	str	r2, [r3, #0]
 8003580:	f3bf 8f4f 	dsb	sy
 8003584:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8003588:	f001 f93c 	bl	8004804 <vPortExitCritical>

    return xAlreadyYielded;
 800358c:	69bb      	ldr	r3, [r7, #24]
}
 800358e:	4618      	mov	r0, r3
 8003590:	3720      	adds	r7, #32
 8003592:	46bd      	mov	sp, r7
 8003594:	bd80      	pop	{r7, pc}
 8003596:	bf00      	nop
 8003598:	200001fc 	.word	0x200001fc
 800359c:	200001d4 	.word	0x200001d4
 80035a0:	20000194 	.word	0x20000194
 80035a4:	200001dc 	.word	0x200001dc
 80035a8:	200000c4 	.word	0x200000c4
 80035ac:	200000c0 	.word	0x200000c0
 80035b0:	200001e8 	.word	0x200001e8
 80035b4:	200001e4 	.word	0x200001e4
 80035b8:	e000ed04 	.word	0xe000ed04

080035bc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80035bc:	b480      	push	{r7}
 80035be:	b083      	sub	sp, #12
 80035c0:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 80035c2:	4b05      	ldr	r3, [pc, #20]	; (80035d8 <xTaskGetTickCount+0x1c>)
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 80035c8:	687b      	ldr	r3, [r7, #4]
}
 80035ca:	4618      	mov	r0, r3
 80035cc:	370c      	adds	r7, #12
 80035ce:	46bd      	mov	sp, r7
 80035d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d4:	4770      	bx	lr
 80035d6:	bf00      	nop
 80035d8:	200001d8 	.word	0x200001d8

080035dc <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 80035dc:	b580      	push	{r7, lr}
 80035de:	b082      	sub	sp, #8
 80035e0:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80035e2:	f001 f9cb 	bl	800497c <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 80035e6:	2300      	movs	r3, #0
 80035e8:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 80035ea:	4b04      	ldr	r3, [pc, #16]	; (80035fc <xTaskGetTickCountFromISR+0x20>)
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 80035f0:	683b      	ldr	r3, [r7, #0]
}
 80035f2:	4618      	mov	r0, r3
 80035f4:	3708      	adds	r7, #8
 80035f6:	46bd      	mov	sp, r7
 80035f8:	bd80      	pop	{r7, pc}
 80035fa:	bf00      	nop
 80035fc:	200001d8 	.word	0x200001d8

08003600 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003600:	b580      	push	{r7, lr}
 8003602:	b08a      	sub	sp, #40	; 0x28
 8003604:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8003606:	2300      	movs	r3, #0
 8003608:	627b      	str	r3, [r7, #36]	; 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800360a:	4b7f      	ldr	r3, [pc, #508]	; (8003808 <xTaskIncrementTick+0x208>)
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	2b00      	cmp	r3, #0
 8003610:	f040 80f0 	bne.w	80037f4 <xTaskIncrementTick+0x1f4>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003614:	4b7d      	ldr	r3, [pc, #500]	; (800380c <xTaskIncrementTick+0x20c>)
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	3301      	adds	r3, #1
 800361a:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 800361c:	4a7b      	ldr	r2, [pc, #492]	; (800380c <xTaskIncrementTick+0x20c>)
 800361e:	6a3b      	ldr	r3, [r7, #32]
 8003620:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003622:	6a3b      	ldr	r3, [r7, #32]
 8003624:	2b00      	cmp	r3, #0
 8003626:	d120      	bne.n	800366a <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 8003628:	4b79      	ldr	r3, [pc, #484]	; (8003810 <xTaskIncrementTick+0x210>)
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	2b00      	cmp	r3, #0
 8003630:	d00a      	beq.n	8003648 <xTaskIncrementTick+0x48>
        __asm volatile
 8003632:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003636:	f383 8811 	msr	BASEPRI, r3
 800363a:	f3bf 8f6f 	isb	sy
 800363e:	f3bf 8f4f 	dsb	sy
 8003642:	607b      	str	r3, [r7, #4]
    }
 8003644:	bf00      	nop
 8003646:	e7fe      	b.n	8003646 <xTaskIncrementTick+0x46>
 8003648:	4b71      	ldr	r3, [pc, #452]	; (8003810 <xTaskIncrementTick+0x210>)
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	61fb      	str	r3, [r7, #28]
 800364e:	4b71      	ldr	r3, [pc, #452]	; (8003814 <xTaskIncrementTick+0x214>)
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	4a6f      	ldr	r2, [pc, #444]	; (8003810 <xTaskIncrementTick+0x210>)
 8003654:	6013      	str	r3, [r2, #0]
 8003656:	4a6f      	ldr	r2, [pc, #444]	; (8003814 <xTaskIncrementTick+0x214>)
 8003658:	69fb      	ldr	r3, [r7, #28]
 800365a:	6013      	str	r3, [r2, #0]
 800365c:	4b6e      	ldr	r3, [pc, #440]	; (8003818 <xTaskIncrementTick+0x218>)
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	3301      	adds	r3, #1
 8003662:	4a6d      	ldr	r2, [pc, #436]	; (8003818 <xTaskIncrementTick+0x218>)
 8003664:	6013      	str	r3, [r2, #0]
 8003666:	f000 fbb1 	bl	8003dcc <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 800366a:	4b6c      	ldr	r3, [pc, #432]	; (800381c <xTaskIncrementTick+0x21c>)
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	6a3a      	ldr	r2, [r7, #32]
 8003670:	429a      	cmp	r2, r3
 8003672:	f0c0 80aa 	bcc.w	80037ca <xTaskIncrementTick+0x1ca>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003676:	4b66      	ldr	r3, [pc, #408]	; (8003810 <xTaskIncrementTick+0x210>)
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	2b00      	cmp	r3, #0
 800367e:	d104      	bne.n	800368a <xTaskIncrementTick+0x8a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003680:	4b66      	ldr	r3, [pc, #408]	; (800381c <xTaskIncrementTick+0x21c>)
 8003682:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003686:	601a      	str	r2, [r3, #0]
                    break;
 8003688:	e09f      	b.n	80037ca <xTaskIncrementTick+0x1ca>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800368a:	4b61      	ldr	r3, [pc, #388]	; (8003810 <xTaskIncrementTick+0x210>)
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	68db      	ldr	r3, [r3, #12]
 8003690:	68db      	ldr	r3, [r3, #12]
 8003692:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003694:	69bb      	ldr	r3, [r7, #24]
 8003696:	685b      	ldr	r3, [r3, #4]
 8003698:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 800369a:	6a3a      	ldr	r2, [r7, #32]
 800369c:	697b      	ldr	r3, [r7, #20]
 800369e:	429a      	cmp	r2, r3
 80036a0:	d203      	bcs.n	80036aa <xTaskIncrementTick+0xaa>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 80036a2:	4a5e      	ldr	r2, [pc, #376]	; (800381c <xTaskIncrementTick+0x21c>)
 80036a4:	697b      	ldr	r3, [r7, #20]
 80036a6:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 80036a8:	e08f      	b.n	80037ca <xTaskIncrementTick+0x1ca>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 80036aa:	69bb      	ldr	r3, [r7, #24]
 80036ac:	695b      	ldr	r3, [r3, #20]
 80036ae:	613b      	str	r3, [r7, #16]
 80036b0:	69bb      	ldr	r3, [r7, #24]
 80036b2:	689b      	ldr	r3, [r3, #8]
 80036b4:	69ba      	ldr	r2, [r7, #24]
 80036b6:	68d2      	ldr	r2, [r2, #12]
 80036b8:	609a      	str	r2, [r3, #8]
 80036ba:	69bb      	ldr	r3, [r7, #24]
 80036bc:	68db      	ldr	r3, [r3, #12]
 80036be:	69ba      	ldr	r2, [r7, #24]
 80036c0:	6892      	ldr	r2, [r2, #8]
 80036c2:	605a      	str	r2, [r3, #4]
 80036c4:	693b      	ldr	r3, [r7, #16]
 80036c6:	685a      	ldr	r2, [r3, #4]
 80036c8:	69bb      	ldr	r3, [r7, #24]
 80036ca:	3304      	adds	r3, #4
 80036cc:	429a      	cmp	r2, r3
 80036ce:	d103      	bne.n	80036d8 <xTaskIncrementTick+0xd8>
 80036d0:	69bb      	ldr	r3, [r7, #24]
 80036d2:	68da      	ldr	r2, [r3, #12]
 80036d4:	693b      	ldr	r3, [r7, #16]
 80036d6:	605a      	str	r2, [r3, #4]
 80036d8:	69bb      	ldr	r3, [r7, #24]
 80036da:	2200      	movs	r2, #0
 80036dc:	615a      	str	r2, [r3, #20]
 80036de:	693b      	ldr	r3, [r7, #16]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	1e5a      	subs	r2, r3, #1
 80036e4:	693b      	ldr	r3, [r7, #16]
 80036e6:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80036e8:	69bb      	ldr	r3, [r7, #24]
 80036ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d01e      	beq.n	800372e <xTaskIncrementTick+0x12e>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 80036f0:	69bb      	ldr	r3, [r7, #24]
 80036f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036f4:	60fb      	str	r3, [r7, #12]
 80036f6:	69bb      	ldr	r3, [r7, #24]
 80036f8:	69db      	ldr	r3, [r3, #28]
 80036fa:	69ba      	ldr	r2, [r7, #24]
 80036fc:	6a12      	ldr	r2, [r2, #32]
 80036fe:	609a      	str	r2, [r3, #8]
 8003700:	69bb      	ldr	r3, [r7, #24]
 8003702:	6a1b      	ldr	r3, [r3, #32]
 8003704:	69ba      	ldr	r2, [r7, #24]
 8003706:	69d2      	ldr	r2, [r2, #28]
 8003708:	605a      	str	r2, [r3, #4]
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	685a      	ldr	r2, [r3, #4]
 800370e:	69bb      	ldr	r3, [r7, #24]
 8003710:	3318      	adds	r3, #24
 8003712:	429a      	cmp	r2, r3
 8003714:	d103      	bne.n	800371e <xTaskIncrementTick+0x11e>
 8003716:	69bb      	ldr	r3, [r7, #24]
 8003718:	6a1a      	ldr	r2, [r3, #32]
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	605a      	str	r2, [r3, #4]
 800371e:	69bb      	ldr	r3, [r7, #24]
 8003720:	2200      	movs	r2, #0
 8003722:	629a      	str	r2, [r3, #40]	; 0x28
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	1e5a      	subs	r2, r3, #1
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 800372e:	69bb      	ldr	r3, [r7, #24]
 8003730:	4618      	mov	r0, r3
 8003732:	f002 fe4f 	bl	80063d4 <SEGGER_SYSVIEW_OnTaskStartReady>
 8003736:	69bb      	ldr	r3, [r7, #24]
 8003738:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800373a:	2201      	movs	r2, #1
 800373c:	409a      	lsls	r2, r3
 800373e:	4b38      	ldr	r3, [pc, #224]	; (8003820 <xTaskIncrementTick+0x220>)
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	4313      	orrs	r3, r2
 8003744:	4a36      	ldr	r2, [pc, #216]	; (8003820 <xTaskIncrementTick+0x220>)
 8003746:	6013      	str	r3, [r2, #0]
 8003748:	69bb      	ldr	r3, [r7, #24]
 800374a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800374c:	4935      	ldr	r1, [pc, #212]	; (8003824 <xTaskIncrementTick+0x224>)
 800374e:	4613      	mov	r3, r2
 8003750:	009b      	lsls	r3, r3, #2
 8003752:	4413      	add	r3, r2
 8003754:	009b      	lsls	r3, r3, #2
 8003756:	440b      	add	r3, r1
 8003758:	3304      	adds	r3, #4
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	60bb      	str	r3, [r7, #8]
 800375e:	69bb      	ldr	r3, [r7, #24]
 8003760:	68ba      	ldr	r2, [r7, #8]
 8003762:	609a      	str	r2, [r3, #8]
 8003764:	68bb      	ldr	r3, [r7, #8]
 8003766:	689a      	ldr	r2, [r3, #8]
 8003768:	69bb      	ldr	r3, [r7, #24]
 800376a:	60da      	str	r2, [r3, #12]
 800376c:	68bb      	ldr	r3, [r7, #8]
 800376e:	689b      	ldr	r3, [r3, #8]
 8003770:	69ba      	ldr	r2, [r7, #24]
 8003772:	3204      	adds	r2, #4
 8003774:	605a      	str	r2, [r3, #4]
 8003776:	69bb      	ldr	r3, [r7, #24]
 8003778:	1d1a      	adds	r2, r3, #4
 800377a:	68bb      	ldr	r3, [r7, #8]
 800377c:	609a      	str	r2, [r3, #8]
 800377e:	69bb      	ldr	r3, [r7, #24]
 8003780:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003782:	4613      	mov	r3, r2
 8003784:	009b      	lsls	r3, r3, #2
 8003786:	4413      	add	r3, r2
 8003788:	009b      	lsls	r3, r3, #2
 800378a:	4a26      	ldr	r2, [pc, #152]	; (8003824 <xTaskIncrementTick+0x224>)
 800378c:	441a      	add	r2, r3
 800378e:	69bb      	ldr	r3, [r7, #24]
 8003790:	615a      	str	r2, [r3, #20]
 8003792:	69bb      	ldr	r3, [r7, #24]
 8003794:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003796:	4923      	ldr	r1, [pc, #140]	; (8003824 <xTaskIncrementTick+0x224>)
 8003798:	4613      	mov	r3, r2
 800379a:	009b      	lsls	r3, r3, #2
 800379c:	4413      	add	r3, r2
 800379e:	009b      	lsls	r3, r3, #2
 80037a0:	440b      	add	r3, r1
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	1c59      	adds	r1, r3, #1
 80037a6:	481f      	ldr	r0, [pc, #124]	; (8003824 <xTaskIncrementTick+0x224>)
 80037a8:	4613      	mov	r3, r2
 80037aa:	009b      	lsls	r3, r3, #2
 80037ac:	4413      	add	r3, r2
 80037ae:	009b      	lsls	r3, r3, #2
 80037b0:	4403      	add	r3, r0
 80037b2:	6019      	str	r1, [r3, #0]
                         * task.
                         * The case of equal priority tasks sharing
                         * processing time (which happens when both
                         * preemption and time slicing are on) is
                         * handled below.*/
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80037b4:	69bb      	ldr	r3, [r7, #24]
 80037b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037b8:	4b1b      	ldr	r3, [pc, #108]	; (8003828 <xTaskIncrementTick+0x228>)
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037be:	429a      	cmp	r2, r3
 80037c0:	f67f af59 	bls.w	8003676 <xTaskIncrementTick+0x76>
                        {
                            xSwitchRequired = pdTRUE;
 80037c4:	2301      	movs	r3, #1
 80037c6:	627b      	str	r3, [r7, #36]	; 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80037c8:	e755      	b.n	8003676 <xTaskIncrementTick+0x76>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80037ca:	4b17      	ldr	r3, [pc, #92]	; (8003828 <xTaskIncrementTick+0x228>)
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037d0:	4914      	ldr	r1, [pc, #80]	; (8003824 <xTaskIncrementTick+0x224>)
 80037d2:	4613      	mov	r3, r2
 80037d4:	009b      	lsls	r3, r3, #2
 80037d6:	4413      	add	r3, r2
 80037d8:	009b      	lsls	r3, r3, #2
 80037da:	440b      	add	r3, r1
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	2b01      	cmp	r3, #1
 80037e0:	d901      	bls.n	80037e6 <xTaskIncrementTick+0x1e6>
            {
                xSwitchRequired = pdTRUE;
 80037e2:	2301      	movs	r3, #1
 80037e4:	627b      	str	r3, [r7, #36]	; 0x24
        }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
        {
            if( xYieldPending != pdFALSE )
 80037e6:	4b11      	ldr	r3, [pc, #68]	; (800382c <xTaskIncrementTick+0x22c>)
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d007      	beq.n	80037fe <xTaskIncrementTick+0x1fe>
            {
                xSwitchRequired = pdTRUE;
 80037ee:	2301      	movs	r3, #1
 80037f0:	627b      	str	r3, [r7, #36]	; 0x24
 80037f2:	e004      	b.n	80037fe <xTaskIncrementTick+0x1fe>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 80037f4:	4b0e      	ldr	r3, [pc, #56]	; (8003830 <xTaskIncrementTick+0x230>)
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	3301      	adds	r3, #1
 80037fa:	4a0d      	ldr	r2, [pc, #52]	; (8003830 <xTaskIncrementTick+0x230>)
 80037fc:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 80037fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003800:	4618      	mov	r0, r3
 8003802:	3728      	adds	r7, #40	; 0x28
 8003804:	46bd      	mov	sp, r7
 8003806:	bd80      	pop	{r7, pc}
 8003808:	200001fc 	.word	0x200001fc
 800380c:	200001d8 	.word	0x200001d8
 8003810:	2000018c 	.word	0x2000018c
 8003814:	20000190 	.word	0x20000190
 8003818:	200001ec 	.word	0x200001ec
 800381c:	200001f4 	.word	0x200001f4
 8003820:	200001dc 	.word	0x200001dc
 8003824:	200000c4 	.word	0x200000c4
 8003828:	200000c0 	.word	0x200000c0
 800382c:	200001e8 	.word	0x200001e8
 8003830:	200001e4 	.word	0x200001e4

08003834 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003834:	b580      	push	{r7, lr}
 8003836:	b086      	sub	sp, #24
 8003838:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800383a:	4b2d      	ldr	r3, [pc, #180]	; (80038f0 <vTaskSwitchContext+0xbc>)
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	2b00      	cmp	r3, #0
 8003840:	d003      	beq.n	800384a <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8003842:	4b2c      	ldr	r3, [pc, #176]	; (80038f4 <vTaskSwitchContext+0xc0>)
 8003844:	2201      	movs	r2, #1
 8003846:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 8003848:	e04d      	b.n	80038e6 <vTaskSwitchContext+0xb2>
        xYieldPending = pdFALSE;
 800384a:	4b2a      	ldr	r3, [pc, #168]	; (80038f4 <vTaskSwitchContext+0xc0>)
 800384c:	2200      	movs	r2, #0
 800384e:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003850:	4b29      	ldr	r3, [pc, #164]	; (80038f8 <vTaskSwitchContext+0xc4>)
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	fab3 f383 	clz	r3, r3
 800385c:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 800385e:	7afb      	ldrb	r3, [r7, #11]
 8003860:	f1c3 031f 	rsb	r3, r3, #31
 8003864:	617b      	str	r3, [r7, #20]
 8003866:	4925      	ldr	r1, [pc, #148]	; (80038fc <vTaskSwitchContext+0xc8>)
 8003868:	697a      	ldr	r2, [r7, #20]
 800386a:	4613      	mov	r3, r2
 800386c:	009b      	lsls	r3, r3, #2
 800386e:	4413      	add	r3, r2
 8003870:	009b      	lsls	r3, r3, #2
 8003872:	440b      	add	r3, r1
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	2b00      	cmp	r3, #0
 8003878:	d10a      	bne.n	8003890 <vTaskSwitchContext+0x5c>
        __asm volatile
 800387a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800387e:	f383 8811 	msr	BASEPRI, r3
 8003882:	f3bf 8f6f 	isb	sy
 8003886:	f3bf 8f4f 	dsb	sy
 800388a:	607b      	str	r3, [r7, #4]
    }
 800388c:	bf00      	nop
 800388e:	e7fe      	b.n	800388e <vTaskSwitchContext+0x5a>
 8003890:	697a      	ldr	r2, [r7, #20]
 8003892:	4613      	mov	r3, r2
 8003894:	009b      	lsls	r3, r3, #2
 8003896:	4413      	add	r3, r2
 8003898:	009b      	lsls	r3, r3, #2
 800389a:	4a18      	ldr	r2, [pc, #96]	; (80038fc <vTaskSwitchContext+0xc8>)
 800389c:	4413      	add	r3, r2
 800389e:	613b      	str	r3, [r7, #16]
 80038a0:	693b      	ldr	r3, [r7, #16]
 80038a2:	685b      	ldr	r3, [r3, #4]
 80038a4:	685a      	ldr	r2, [r3, #4]
 80038a6:	693b      	ldr	r3, [r7, #16]
 80038a8:	605a      	str	r2, [r3, #4]
 80038aa:	693b      	ldr	r3, [r7, #16]
 80038ac:	685a      	ldr	r2, [r3, #4]
 80038ae:	693b      	ldr	r3, [r7, #16]
 80038b0:	3308      	adds	r3, #8
 80038b2:	429a      	cmp	r2, r3
 80038b4:	d104      	bne.n	80038c0 <vTaskSwitchContext+0x8c>
 80038b6:	693b      	ldr	r3, [r7, #16]
 80038b8:	685b      	ldr	r3, [r3, #4]
 80038ba:	685a      	ldr	r2, [r3, #4]
 80038bc:	693b      	ldr	r3, [r7, #16]
 80038be:	605a      	str	r2, [r3, #4]
 80038c0:	693b      	ldr	r3, [r7, #16]
 80038c2:	685b      	ldr	r3, [r3, #4]
 80038c4:	68db      	ldr	r3, [r3, #12]
 80038c6:	4a0e      	ldr	r2, [pc, #56]	; (8003900 <vTaskSwitchContext+0xcc>)
 80038c8:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 80038ca:	4b0d      	ldr	r3, [pc, #52]	; (8003900 <vTaskSwitchContext+0xcc>)
 80038cc:	681a      	ldr	r2, [r3, #0]
 80038ce:	4b0d      	ldr	r3, [pc, #52]	; (8003904 <vTaskSwitchContext+0xd0>)
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	429a      	cmp	r2, r3
 80038d4:	d102      	bne.n	80038dc <vTaskSwitchContext+0xa8>
 80038d6:	f002 fcdd 	bl	8006294 <SEGGER_SYSVIEW_OnIdle>
}
 80038da:	e004      	b.n	80038e6 <vTaskSwitchContext+0xb2>
        traceTASK_SWITCHED_IN();
 80038dc:	4b08      	ldr	r3, [pc, #32]	; (8003900 <vTaskSwitchContext+0xcc>)
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	4618      	mov	r0, r3
 80038e2:	f002 fd35 	bl	8006350 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 80038e6:	bf00      	nop
 80038e8:	3718      	adds	r7, #24
 80038ea:	46bd      	mov	sp, r7
 80038ec:	bd80      	pop	{r7, pc}
 80038ee:	bf00      	nop
 80038f0:	200001fc 	.word	0x200001fc
 80038f4:	200001e8 	.word	0x200001e8
 80038f8:	200001dc 	.word	0x200001dc
 80038fc:	200000c4 	.word	0x200000c4
 8003900:	200000c0 	.word	0x200000c0
 8003904:	200001f8 	.word	0x200001f8

08003908 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8003908:	b580      	push	{r7, lr}
 800390a:	b084      	sub	sp, #16
 800390c:	af00      	add	r7, sp, #0
 800390e:	6078      	str	r0, [r7, #4]
 8003910:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	2b00      	cmp	r3, #0
 8003916:	d10a      	bne.n	800392e <vTaskPlaceOnEventList+0x26>
        __asm volatile
 8003918:	f04f 0350 	mov.w	r3, #80	; 0x50
 800391c:	f383 8811 	msr	BASEPRI, r3
 8003920:	f3bf 8f6f 	isb	sy
 8003924:	f3bf 8f4f 	dsb	sy
 8003928:	60fb      	str	r3, [r7, #12]
    }
 800392a:	bf00      	nop
 800392c:	e7fe      	b.n	800392c <vTaskPlaceOnEventList+0x24>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800392e:	4b07      	ldr	r3, [pc, #28]	; (800394c <vTaskPlaceOnEventList+0x44>)
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	3318      	adds	r3, #24
 8003934:	4619      	mov	r1, r3
 8003936:	6878      	ldr	r0, [r7, #4]
 8003938:	f7fe ff7d 	bl	8002836 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800393c:	2101      	movs	r1, #1
 800393e:	6838      	ldr	r0, [r7, #0]
 8003940:	f000 fa7e 	bl	8003e40 <prvAddCurrentTaskToDelayedList>
}
 8003944:	bf00      	nop
 8003946:	3710      	adds	r7, #16
 8003948:	46bd      	mov	sp, r7
 800394a:	bd80      	pop	{r7, pc}
 800394c:	200000c0 	.word	0x200000c0

08003950 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8003950:	b580      	push	{r7, lr}
 8003952:	b086      	sub	sp, #24
 8003954:	af00      	add	r7, sp, #0
 8003956:	60f8      	str	r0, [r7, #12]
 8003958:	60b9      	str	r1, [r7, #8]
 800395a:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	2b00      	cmp	r3, #0
 8003960:	d10a      	bne.n	8003978 <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 8003962:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003966:	f383 8811 	msr	BASEPRI, r3
 800396a:	f3bf 8f6f 	isb	sy
 800396e:	f3bf 8f4f 	dsb	sy
 8003972:	613b      	str	r3, [r7, #16]
    }
 8003974:	bf00      	nop
 8003976:	e7fe      	b.n	8003976 <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	685b      	ldr	r3, [r3, #4]
 800397c:	617b      	str	r3, [r7, #20]
 800397e:	4b17      	ldr	r3, [pc, #92]	; (80039dc <vTaskPlaceOnEventListRestricted+0x8c>)
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	697a      	ldr	r2, [r7, #20]
 8003984:	61da      	str	r2, [r3, #28]
 8003986:	4b15      	ldr	r3, [pc, #84]	; (80039dc <vTaskPlaceOnEventListRestricted+0x8c>)
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	697a      	ldr	r2, [r7, #20]
 800398c:	6892      	ldr	r2, [r2, #8]
 800398e:	621a      	str	r2, [r3, #32]
 8003990:	4b12      	ldr	r3, [pc, #72]	; (80039dc <vTaskPlaceOnEventListRestricted+0x8c>)
 8003992:	681a      	ldr	r2, [r3, #0]
 8003994:	697b      	ldr	r3, [r7, #20]
 8003996:	689b      	ldr	r3, [r3, #8]
 8003998:	3218      	adds	r2, #24
 800399a:	605a      	str	r2, [r3, #4]
 800399c:	4b0f      	ldr	r3, [pc, #60]	; (80039dc <vTaskPlaceOnEventListRestricted+0x8c>)
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f103 0218 	add.w	r2, r3, #24
 80039a4:	697b      	ldr	r3, [r7, #20]
 80039a6:	609a      	str	r2, [r3, #8]
 80039a8:	4b0c      	ldr	r3, [pc, #48]	; (80039dc <vTaskPlaceOnEventListRestricted+0x8c>)
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	68fa      	ldr	r2, [r7, #12]
 80039ae:	629a      	str	r2, [r3, #40]	; 0x28
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	1c5a      	adds	r2, r3, #1
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d002      	beq.n	80039c6 <vTaskPlaceOnEventListRestricted+0x76>
        {
            xTicksToWait = portMAX_DELAY;
 80039c0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80039c4:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 80039c6:	2024      	movs	r0, #36	; 0x24
 80039c8:	f001 ff66 	bl	8005898 <SEGGER_SYSVIEW_RecordVoid>
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80039cc:	6879      	ldr	r1, [r7, #4]
 80039ce:	68b8      	ldr	r0, [r7, #8]
 80039d0:	f000 fa36 	bl	8003e40 <prvAddCurrentTaskToDelayedList>
    }
 80039d4:	bf00      	nop
 80039d6:	3718      	adds	r7, #24
 80039d8:	46bd      	mov	sp, r7
 80039da:	bd80      	pop	{r7, pc}
 80039dc:	200000c0 	.word	0x200000c0

080039e0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80039e0:	b580      	push	{r7, lr}
 80039e2:	b08a      	sub	sp, #40	; 0x28
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	68db      	ldr	r3, [r3, #12]
 80039ec:	68db      	ldr	r3, [r3, #12]
 80039ee:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
 80039f0:	6a3b      	ldr	r3, [r7, #32]
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d10a      	bne.n	8003a0c <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 80039f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039fa:	f383 8811 	msr	BASEPRI, r3
 80039fe:	f3bf 8f6f 	isb	sy
 8003a02:	f3bf 8f4f 	dsb	sy
 8003a06:	60fb      	str	r3, [r7, #12]
    }
 8003a08:	bf00      	nop
 8003a0a:	e7fe      	b.n	8003a0a <xTaskRemoveFromEventList+0x2a>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 8003a0c:	6a3b      	ldr	r3, [r7, #32]
 8003a0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a10:	61fb      	str	r3, [r7, #28]
 8003a12:	6a3b      	ldr	r3, [r7, #32]
 8003a14:	69db      	ldr	r3, [r3, #28]
 8003a16:	6a3a      	ldr	r2, [r7, #32]
 8003a18:	6a12      	ldr	r2, [r2, #32]
 8003a1a:	609a      	str	r2, [r3, #8]
 8003a1c:	6a3b      	ldr	r3, [r7, #32]
 8003a1e:	6a1b      	ldr	r3, [r3, #32]
 8003a20:	6a3a      	ldr	r2, [r7, #32]
 8003a22:	69d2      	ldr	r2, [r2, #28]
 8003a24:	605a      	str	r2, [r3, #4]
 8003a26:	69fb      	ldr	r3, [r7, #28]
 8003a28:	685a      	ldr	r2, [r3, #4]
 8003a2a:	6a3b      	ldr	r3, [r7, #32]
 8003a2c:	3318      	adds	r3, #24
 8003a2e:	429a      	cmp	r2, r3
 8003a30:	d103      	bne.n	8003a3a <xTaskRemoveFromEventList+0x5a>
 8003a32:	6a3b      	ldr	r3, [r7, #32]
 8003a34:	6a1a      	ldr	r2, [r3, #32]
 8003a36:	69fb      	ldr	r3, [r7, #28]
 8003a38:	605a      	str	r2, [r3, #4]
 8003a3a:	6a3b      	ldr	r3, [r7, #32]
 8003a3c:	2200      	movs	r2, #0
 8003a3e:	629a      	str	r2, [r3, #40]	; 0x28
 8003a40:	69fb      	ldr	r3, [r7, #28]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	1e5a      	subs	r2, r3, #1
 8003a46:	69fb      	ldr	r3, [r7, #28]
 8003a48:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003a4a:	4b4b      	ldr	r3, [pc, #300]	; (8003b78 <xTaskRemoveFromEventList+0x198>)
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d162      	bne.n	8003b18 <xTaskRemoveFromEventList+0x138>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 8003a52:	6a3b      	ldr	r3, [r7, #32]
 8003a54:	695b      	ldr	r3, [r3, #20]
 8003a56:	617b      	str	r3, [r7, #20]
 8003a58:	6a3b      	ldr	r3, [r7, #32]
 8003a5a:	689b      	ldr	r3, [r3, #8]
 8003a5c:	6a3a      	ldr	r2, [r7, #32]
 8003a5e:	68d2      	ldr	r2, [r2, #12]
 8003a60:	609a      	str	r2, [r3, #8]
 8003a62:	6a3b      	ldr	r3, [r7, #32]
 8003a64:	68db      	ldr	r3, [r3, #12]
 8003a66:	6a3a      	ldr	r2, [r7, #32]
 8003a68:	6892      	ldr	r2, [r2, #8]
 8003a6a:	605a      	str	r2, [r3, #4]
 8003a6c:	697b      	ldr	r3, [r7, #20]
 8003a6e:	685a      	ldr	r2, [r3, #4]
 8003a70:	6a3b      	ldr	r3, [r7, #32]
 8003a72:	3304      	adds	r3, #4
 8003a74:	429a      	cmp	r2, r3
 8003a76:	d103      	bne.n	8003a80 <xTaskRemoveFromEventList+0xa0>
 8003a78:	6a3b      	ldr	r3, [r7, #32]
 8003a7a:	68da      	ldr	r2, [r3, #12]
 8003a7c:	697b      	ldr	r3, [r7, #20]
 8003a7e:	605a      	str	r2, [r3, #4]
 8003a80:	6a3b      	ldr	r3, [r7, #32]
 8003a82:	2200      	movs	r2, #0
 8003a84:	615a      	str	r2, [r3, #20]
 8003a86:	697b      	ldr	r3, [r7, #20]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	1e5a      	subs	r2, r3, #1
 8003a8c:	697b      	ldr	r3, [r7, #20]
 8003a8e:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 8003a90:	6a3b      	ldr	r3, [r7, #32]
 8003a92:	4618      	mov	r0, r3
 8003a94:	f002 fc9e 	bl	80063d4 <SEGGER_SYSVIEW_OnTaskStartReady>
 8003a98:	6a3b      	ldr	r3, [r7, #32]
 8003a9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a9c:	2201      	movs	r2, #1
 8003a9e:	409a      	lsls	r2, r3
 8003aa0:	4b36      	ldr	r3, [pc, #216]	; (8003b7c <xTaskRemoveFromEventList+0x19c>)
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	4313      	orrs	r3, r2
 8003aa6:	4a35      	ldr	r2, [pc, #212]	; (8003b7c <xTaskRemoveFromEventList+0x19c>)
 8003aa8:	6013      	str	r3, [r2, #0]
 8003aaa:	6a3b      	ldr	r3, [r7, #32]
 8003aac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003aae:	4934      	ldr	r1, [pc, #208]	; (8003b80 <xTaskRemoveFromEventList+0x1a0>)
 8003ab0:	4613      	mov	r3, r2
 8003ab2:	009b      	lsls	r3, r3, #2
 8003ab4:	4413      	add	r3, r2
 8003ab6:	009b      	lsls	r3, r3, #2
 8003ab8:	440b      	add	r3, r1
 8003aba:	3304      	adds	r3, #4
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	613b      	str	r3, [r7, #16]
 8003ac0:	6a3b      	ldr	r3, [r7, #32]
 8003ac2:	693a      	ldr	r2, [r7, #16]
 8003ac4:	609a      	str	r2, [r3, #8]
 8003ac6:	693b      	ldr	r3, [r7, #16]
 8003ac8:	689a      	ldr	r2, [r3, #8]
 8003aca:	6a3b      	ldr	r3, [r7, #32]
 8003acc:	60da      	str	r2, [r3, #12]
 8003ace:	693b      	ldr	r3, [r7, #16]
 8003ad0:	689b      	ldr	r3, [r3, #8]
 8003ad2:	6a3a      	ldr	r2, [r7, #32]
 8003ad4:	3204      	adds	r2, #4
 8003ad6:	605a      	str	r2, [r3, #4]
 8003ad8:	6a3b      	ldr	r3, [r7, #32]
 8003ada:	1d1a      	adds	r2, r3, #4
 8003adc:	693b      	ldr	r3, [r7, #16]
 8003ade:	609a      	str	r2, [r3, #8]
 8003ae0:	6a3b      	ldr	r3, [r7, #32]
 8003ae2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ae4:	4613      	mov	r3, r2
 8003ae6:	009b      	lsls	r3, r3, #2
 8003ae8:	4413      	add	r3, r2
 8003aea:	009b      	lsls	r3, r3, #2
 8003aec:	4a24      	ldr	r2, [pc, #144]	; (8003b80 <xTaskRemoveFromEventList+0x1a0>)
 8003aee:	441a      	add	r2, r3
 8003af0:	6a3b      	ldr	r3, [r7, #32]
 8003af2:	615a      	str	r2, [r3, #20]
 8003af4:	6a3b      	ldr	r3, [r7, #32]
 8003af6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003af8:	4921      	ldr	r1, [pc, #132]	; (8003b80 <xTaskRemoveFromEventList+0x1a0>)
 8003afa:	4613      	mov	r3, r2
 8003afc:	009b      	lsls	r3, r3, #2
 8003afe:	4413      	add	r3, r2
 8003b00:	009b      	lsls	r3, r3, #2
 8003b02:	440b      	add	r3, r1
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	1c59      	adds	r1, r3, #1
 8003b08:	481d      	ldr	r0, [pc, #116]	; (8003b80 <xTaskRemoveFromEventList+0x1a0>)
 8003b0a:	4613      	mov	r3, r2
 8003b0c:	009b      	lsls	r3, r3, #2
 8003b0e:	4413      	add	r3, r2
 8003b10:	009b      	lsls	r3, r3, #2
 8003b12:	4403      	add	r3, r0
 8003b14:	6019      	str	r1, [r3, #0]
 8003b16:	e01b      	b.n	8003b50 <xTaskRemoveFromEventList+0x170>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003b18:	4b1a      	ldr	r3, [pc, #104]	; (8003b84 <xTaskRemoveFromEventList+0x1a4>)
 8003b1a:	685b      	ldr	r3, [r3, #4]
 8003b1c:	61bb      	str	r3, [r7, #24]
 8003b1e:	6a3b      	ldr	r3, [r7, #32]
 8003b20:	69ba      	ldr	r2, [r7, #24]
 8003b22:	61da      	str	r2, [r3, #28]
 8003b24:	69bb      	ldr	r3, [r7, #24]
 8003b26:	689a      	ldr	r2, [r3, #8]
 8003b28:	6a3b      	ldr	r3, [r7, #32]
 8003b2a:	621a      	str	r2, [r3, #32]
 8003b2c:	69bb      	ldr	r3, [r7, #24]
 8003b2e:	689b      	ldr	r3, [r3, #8]
 8003b30:	6a3a      	ldr	r2, [r7, #32]
 8003b32:	3218      	adds	r2, #24
 8003b34:	605a      	str	r2, [r3, #4]
 8003b36:	6a3b      	ldr	r3, [r7, #32]
 8003b38:	f103 0218 	add.w	r2, r3, #24
 8003b3c:	69bb      	ldr	r3, [r7, #24]
 8003b3e:	609a      	str	r2, [r3, #8]
 8003b40:	6a3b      	ldr	r3, [r7, #32]
 8003b42:	4a10      	ldr	r2, [pc, #64]	; (8003b84 <xTaskRemoveFromEventList+0x1a4>)
 8003b44:	629a      	str	r2, [r3, #40]	; 0x28
 8003b46:	4b0f      	ldr	r3, [pc, #60]	; (8003b84 <xTaskRemoveFromEventList+0x1a4>)
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	3301      	adds	r3, #1
 8003b4c:	4a0d      	ldr	r2, [pc, #52]	; (8003b84 <xTaskRemoveFromEventList+0x1a4>)
 8003b4e:	6013      	str	r3, [r2, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003b50:	6a3b      	ldr	r3, [r7, #32]
 8003b52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b54:	4b0c      	ldr	r3, [pc, #48]	; (8003b88 <xTaskRemoveFromEventList+0x1a8>)
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b5a:	429a      	cmp	r2, r3
 8003b5c:	d905      	bls.n	8003b6a <xTaskRemoveFromEventList+0x18a>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8003b5e:	2301      	movs	r3, #1
 8003b60:	627b      	str	r3, [r7, #36]	; 0x24

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8003b62:	4b0a      	ldr	r3, [pc, #40]	; (8003b8c <xTaskRemoveFromEventList+0x1ac>)
 8003b64:	2201      	movs	r2, #1
 8003b66:	601a      	str	r2, [r3, #0]
 8003b68:	e001      	b.n	8003b6e <xTaskRemoveFromEventList+0x18e>
    }
    else
    {
        xReturn = pdFALSE;
 8003b6a:	2300      	movs	r3, #0
 8003b6c:	627b      	str	r3, [r7, #36]	; 0x24
    }

    return xReturn;
 8003b6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003b70:	4618      	mov	r0, r3
 8003b72:	3728      	adds	r7, #40	; 0x28
 8003b74:	46bd      	mov	sp, r7
 8003b76:	bd80      	pop	{r7, pc}
 8003b78:	200001fc 	.word	0x200001fc
 8003b7c:	200001dc 	.word	0x200001dc
 8003b80:	200000c4 	.word	0x200000c4
 8003b84:	20000194 	.word	0x20000194
 8003b88:	200000c0 	.word	0x200000c0
 8003b8c:	200001e8 	.word	0x200001e8

08003b90 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003b90:	b480      	push	{r7}
 8003b92:	b083      	sub	sp, #12
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003b98:	4b06      	ldr	r3, [pc, #24]	; (8003bb4 <vTaskInternalSetTimeOutState+0x24>)
 8003b9a:	681a      	ldr	r2, [r3, #0]
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8003ba0:	4b05      	ldr	r3, [pc, #20]	; (8003bb8 <vTaskInternalSetTimeOutState+0x28>)
 8003ba2:	681a      	ldr	r2, [r3, #0]
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	605a      	str	r2, [r3, #4]
}
 8003ba8:	bf00      	nop
 8003baa:	370c      	adds	r7, #12
 8003bac:	46bd      	mov	sp, r7
 8003bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb2:	4770      	bx	lr
 8003bb4:	200001ec 	.word	0x200001ec
 8003bb8:	200001d8 	.word	0x200001d8

08003bbc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8003bbc:	b580      	push	{r7, lr}
 8003bbe:	b088      	sub	sp, #32
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	6078      	str	r0, [r7, #4]
 8003bc4:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d10a      	bne.n	8003be2 <xTaskCheckForTimeOut+0x26>
        __asm volatile
 8003bcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bd0:	f383 8811 	msr	BASEPRI, r3
 8003bd4:	f3bf 8f6f 	isb	sy
 8003bd8:	f3bf 8f4f 	dsb	sy
 8003bdc:	613b      	str	r3, [r7, #16]
    }
 8003bde:	bf00      	nop
 8003be0:	e7fe      	b.n	8003be0 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 8003be2:	683b      	ldr	r3, [r7, #0]
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d10a      	bne.n	8003bfe <xTaskCheckForTimeOut+0x42>
        __asm volatile
 8003be8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bec:	f383 8811 	msr	BASEPRI, r3
 8003bf0:	f3bf 8f6f 	isb	sy
 8003bf4:	f3bf 8f4f 	dsb	sy
 8003bf8:	60fb      	str	r3, [r7, #12]
    }
 8003bfa:	bf00      	nop
 8003bfc:	e7fe      	b.n	8003bfc <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 8003bfe:	f000 fdd1 	bl	80047a4 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8003c02:	4b1f      	ldr	r3, [pc, #124]	; (8003c80 <xTaskCheckForTimeOut+0xc4>)
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	685b      	ldr	r3, [r3, #4]
 8003c0c:	69ba      	ldr	r2, [r7, #24]
 8003c0e:	1ad3      	subs	r3, r2, r3
 8003c10:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8003c12:	683b      	ldr	r3, [r7, #0]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003c1a:	d102      	bne.n	8003c22 <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8003c1c:	2300      	movs	r3, #0
 8003c1e:	61fb      	str	r3, [r7, #28]
 8003c20:	e026      	b.n	8003c70 <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681a      	ldr	r2, [r3, #0]
 8003c26:	4b17      	ldr	r3, [pc, #92]	; (8003c84 <xTaskCheckForTimeOut+0xc8>)
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	429a      	cmp	r2, r3
 8003c2c:	d00a      	beq.n	8003c44 <xTaskCheckForTimeOut+0x88>
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	685b      	ldr	r3, [r3, #4]
 8003c32:	69ba      	ldr	r2, [r7, #24]
 8003c34:	429a      	cmp	r2, r3
 8003c36:	d305      	bcc.n	8003c44 <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8003c38:	2301      	movs	r3, #1
 8003c3a:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8003c3c:	683b      	ldr	r3, [r7, #0]
 8003c3e:	2200      	movs	r2, #0
 8003c40:	601a      	str	r2, [r3, #0]
 8003c42:	e015      	b.n	8003c70 <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003c44:	683b      	ldr	r3, [r7, #0]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	697a      	ldr	r2, [r7, #20]
 8003c4a:	429a      	cmp	r2, r3
 8003c4c:	d20b      	bcs.n	8003c66 <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8003c4e:	683b      	ldr	r3, [r7, #0]
 8003c50:	681a      	ldr	r2, [r3, #0]
 8003c52:	697b      	ldr	r3, [r7, #20]
 8003c54:	1ad2      	subs	r2, r2, r3
 8003c56:	683b      	ldr	r3, [r7, #0]
 8003c58:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8003c5a:	6878      	ldr	r0, [r7, #4]
 8003c5c:	f7ff ff98 	bl	8003b90 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8003c60:	2300      	movs	r3, #0
 8003c62:	61fb      	str	r3, [r7, #28]
 8003c64:	e004      	b.n	8003c70 <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8003c66:	683b      	ldr	r3, [r7, #0]
 8003c68:	2200      	movs	r2, #0
 8003c6a:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8003c6c:	2301      	movs	r3, #1
 8003c6e:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8003c70:	f000 fdc8 	bl	8004804 <vPortExitCritical>

    return xReturn;
 8003c74:	69fb      	ldr	r3, [r7, #28]
}
 8003c76:	4618      	mov	r0, r3
 8003c78:	3720      	adds	r7, #32
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	bd80      	pop	{r7, pc}
 8003c7e:	bf00      	nop
 8003c80:	200001d8 	.word	0x200001d8
 8003c84:	200001ec 	.word	0x200001ec

08003c88 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003c88:	b480      	push	{r7}
 8003c8a:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8003c8c:	4b03      	ldr	r3, [pc, #12]	; (8003c9c <vTaskMissedYield+0x14>)
 8003c8e:	2201      	movs	r2, #1
 8003c90:	601a      	str	r2, [r3, #0]
}
 8003c92:	bf00      	nop
 8003c94:	46bd      	mov	sp, r7
 8003c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c9a:	4770      	bx	lr
 8003c9c:	200001e8 	.word	0x200001e8

08003ca0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003ca0:	b580      	push	{r7, lr}
 8003ca2:	b082      	sub	sp, #8
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8003ca8:	f000 f852 	bl	8003d50 <prvCheckTasksWaitingTermination>
             *
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains more than one task
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003cac:	4b06      	ldr	r3, [pc, #24]	; (8003cc8 <prvIdleTask+0x28>)
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	2b01      	cmp	r3, #1
 8003cb2:	d9f9      	bls.n	8003ca8 <prvIdleTask+0x8>
            {
                taskYIELD();
 8003cb4:	4b05      	ldr	r3, [pc, #20]	; (8003ccc <prvIdleTask+0x2c>)
 8003cb6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003cba:	601a      	str	r2, [r3, #0]
 8003cbc:	f3bf 8f4f 	dsb	sy
 8003cc0:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8003cc4:	e7f0      	b.n	8003ca8 <prvIdleTask+0x8>
 8003cc6:	bf00      	nop
 8003cc8:	200000c4 	.word	0x200000c4
 8003ccc:	e000ed04 	.word	0xe000ed04

08003cd0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	b082      	sub	sp, #8
 8003cd4:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003cd6:	2300      	movs	r3, #0
 8003cd8:	607b      	str	r3, [r7, #4]
 8003cda:	e00c      	b.n	8003cf6 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003cdc:	687a      	ldr	r2, [r7, #4]
 8003cde:	4613      	mov	r3, r2
 8003ce0:	009b      	lsls	r3, r3, #2
 8003ce2:	4413      	add	r3, r2
 8003ce4:	009b      	lsls	r3, r3, #2
 8003ce6:	4a12      	ldr	r2, [pc, #72]	; (8003d30 <prvInitialiseTaskLists+0x60>)
 8003ce8:	4413      	add	r3, r2
 8003cea:	4618      	mov	r0, r3
 8003cec:	f7fe fd76 	bl	80027dc <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	3301      	adds	r3, #1
 8003cf4:	607b      	str	r3, [r7, #4]
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	2b07      	cmp	r3, #7
 8003cfa:	d9ef      	bls.n	8003cdc <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8003cfc:	480d      	ldr	r0, [pc, #52]	; (8003d34 <prvInitialiseTaskLists+0x64>)
 8003cfe:	f7fe fd6d 	bl	80027dc <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8003d02:	480d      	ldr	r0, [pc, #52]	; (8003d38 <prvInitialiseTaskLists+0x68>)
 8003d04:	f7fe fd6a 	bl	80027dc <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8003d08:	480c      	ldr	r0, [pc, #48]	; (8003d3c <prvInitialiseTaskLists+0x6c>)
 8003d0a:	f7fe fd67 	bl	80027dc <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 8003d0e:	480c      	ldr	r0, [pc, #48]	; (8003d40 <prvInitialiseTaskLists+0x70>)
 8003d10:	f7fe fd64 	bl	80027dc <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 8003d14:	480b      	ldr	r0, [pc, #44]	; (8003d44 <prvInitialiseTaskLists+0x74>)
 8003d16:	f7fe fd61 	bl	80027dc <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8003d1a:	4b0b      	ldr	r3, [pc, #44]	; (8003d48 <prvInitialiseTaskLists+0x78>)
 8003d1c:	4a05      	ldr	r2, [pc, #20]	; (8003d34 <prvInitialiseTaskLists+0x64>)
 8003d1e:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003d20:	4b0a      	ldr	r3, [pc, #40]	; (8003d4c <prvInitialiseTaskLists+0x7c>)
 8003d22:	4a05      	ldr	r2, [pc, #20]	; (8003d38 <prvInitialiseTaskLists+0x68>)
 8003d24:	601a      	str	r2, [r3, #0]
}
 8003d26:	bf00      	nop
 8003d28:	3708      	adds	r7, #8
 8003d2a:	46bd      	mov	sp, r7
 8003d2c:	bd80      	pop	{r7, pc}
 8003d2e:	bf00      	nop
 8003d30:	200000c4 	.word	0x200000c4
 8003d34:	20000164 	.word	0x20000164
 8003d38:	20000178 	.word	0x20000178
 8003d3c:	20000194 	.word	0x20000194
 8003d40:	200001a8 	.word	0x200001a8
 8003d44:	200001c0 	.word	0x200001c0
 8003d48:	2000018c 	.word	0x2000018c
 8003d4c:	20000190 	.word	0x20000190

08003d50 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003d50:	b580      	push	{r7, lr}
 8003d52:	b082      	sub	sp, #8
 8003d54:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003d56:	e019      	b.n	8003d8c <prvCheckTasksWaitingTermination+0x3c>
        {
            taskENTER_CRITICAL();
 8003d58:	f000 fd24 	bl	80047a4 <vPortEnterCritical>
            {
                pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003d5c:	4b10      	ldr	r3, [pc, #64]	; (8003da0 <prvCheckTasksWaitingTermination+0x50>)
 8003d5e:	68db      	ldr	r3, [r3, #12]
 8003d60:	68db      	ldr	r3, [r3, #12]
 8003d62:	607b      	str	r3, [r7, #4]
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	3304      	adds	r3, #4
 8003d68:	4618      	mov	r0, r3
 8003d6a:	f7fe fd9d 	bl	80028a8 <uxListRemove>
                --uxCurrentNumberOfTasks;
 8003d6e:	4b0d      	ldr	r3, [pc, #52]	; (8003da4 <prvCheckTasksWaitingTermination+0x54>)
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	3b01      	subs	r3, #1
 8003d74:	4a0b      	ldr	r2, [pc, #44]	; (8003da4 <prvCheckTasksWaitingTermination+0x54>)
 8003d76:	6013      	str	r3, [r2, #0]
                --uxDeletedTasksWaitingCleanUp;
 8003d78:	4b0b      	ldr	r3, [pc, #44]	; (8003da8 <prvCheckTasksWaitingTermination+0x58>)
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	3b01      	subs	r3, #1
 8003d7e:	4a0a      	ldr	r2, [pc, #40]	; (8003da8 <prvCheckTasksWaitingTermination+0x58>)
 8003d80:	6013      	str	r3, [r2, #0]
            }
            taskEXIT_CRITICAL();
 8003d82:	f000 fd3f 	bl	8004804 <vPortExitCritical>

            prvDeleteTCB( pxTCB );
 8003d86:	6878      	ldr	r0, [r7, #4]
 8003d88:	f000 f810 	bl	8003dac <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003d8c:	4b06      	ldr	r3, [pc, #24]	; (8003da8 <prvCheckTasksWaitingTermination+0x58>)
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d1e1      	bne.n	8003d58 <prvCheckTasksWaitingTermination+0x8>
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 8003d94:	bf00      	nop
 8003d96:	bf00      	nop
 8003d98:	3708      	adds	r7, #8
 8003d9a:	46bd      	mov	sp, r7
 8003d9c:	bd80      	pop	{r7, pc}
 8003d9e:	bf00      	nop
 8003da0:	200001a8 	.word	0x200001a8
 8003da4:	200001d4 	.word	0x200001d4
 8003da8:	200001bc 	.word	0x200001bc

08003dac <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8003dac:	b580      	push	{r7, lr}
 8003dae:	b082      	sub	sp, #8
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003db8:	4618      	mov	r0, r3
 8003dba:	f000 fed9 	bl	8004b70 <vPortFree>
            vPortFree( pxTCB );
 8003dbe:	6878      	ldr	r0, [r7, #4]
 8003dc0:	f000 fed6 	bl	8004b70 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8003dc4:	bf00      	nop
 8003dc6:	3708      	adds	r7, #8
 8003dc8:	46bd      	mov	sp, r7
 8003dca:	bd80      	pop	{r7, pc}

08003dcc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003dcc:	b480      	push	{r7}
 8003dce:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003dd0:	4b0a      	ldr	r3, [pc, #40]	; (8003dfc <prvResetNextTaskUnblockTime+0x30>)
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d104      	bne.n	8003de4 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8003dda:	4b09      	ldr	r3, [pc, #36]	; (8003e00 <prvResetNextTaskUnblockTime+0x34>)
 8003ddc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003de0:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8003de2:	e005      	b.n	8003df0 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003de4:	4b05      	ldr	r3, [pc, #20]	; (8003dfc <prvResetNextTaskUnblockTime+0x30>)
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	68db      	ldr	r3, [r3, #12]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	4a04      	ldr	r2, [pc, #16]	; (8003e00 <prvResetNextTaskUnblockTime+0x34>)
 8003dee:	6013      	str	r3, [r2, #0]
}
 8003df0:	bf00      	nop
 8003df2:	46bd      	mov	sp, r7
 8003df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df8:	4770      	bx	lr
 8003dfa:	bf00      	nop
 8003dfc:	2000018c 	.word	0x2000018c
 8003e00:	200001f4 	.word	0x200001f4

08003e04 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8003e04:	b480      	push	{r7}
 8003e06:	b083      	sub	sp, #12
 8003e08:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 8003e0a:	4b0b      	ldr	r3, [pc, #44]	; (8003e38 <xTaskGetSchedulerState+0x34>)
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d102      	bne.n	8003e18 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8003e12:	2301      	movs	r3, #1
 8003e14:	607b      	str	r3, [r7, #4]
 8003e16:	e008      	b.n	8003e2a <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003e18:	4b08      	ldr	r3, [pc, #32]	; (8003e3c <xTaskGetSchedulerState+0x38>)
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d102      	bne.n	8003e26 <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8003e20:	2302      	movs	r3, #2
 8003e22:	607b      	str	r3, [r7, #4]
 8003e24:	e001      	b.n	8003e2a <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8003e26:	2300      	movs	r3, #0
 8003e28:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8003e2a:	687b      	ldr	r3, [r7, #4]
    }
 8003e2c:	4618      	mov	r0, r3
 8003e2e:	370c      	adds	r7, #12
 8003e30:	46bd      	mov	sp, r7
 8003e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e36:	4770      	bx	lr
 8003e38:	200001e0 	.word	0x200001e0
 8003e3c:	200001fc 	.word	0x200001fc

08003e40 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8003e40:	b580      	push	{r7, lr}
 8003e42:	b086      	sub	sp, #24
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	6078      	str	r0, [r7, #4]
 8003e48:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8003e4a:	4b36      	ldr	r3, [pc, #216]	; (8003f24 <prvAddCurrentTaskToDelayedList+0xe4>)
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003e50:	4b35      	ldr	r3, [pc, #212]	; (8003f28 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	3304      	adds	r3, #4
 8003e56:	4618      	mov	r0, r3
 8003e58:	f7fe fd26 	bl	80028a8 <uxListRemove>
 8003e5c:	4603      	mov	r3, r0
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d10b      	bne.n	8003e7a <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8003e62:	4b31      	ldr	r3, [pc, #196]	; (8003f28 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e68:	2201      	movs	r2, #1
 8003e6a:	fa02 f303 	lsl.w	r3, r2, r3
 8003e6e:	43da      	mvns	r2, r3
 8003e70:	4b2e      	ldr	r3, [pc, #184]	; (8003f2c <prvAddCurrentTaskToDelayedList+0xec>)
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	4013      	ands	r3, r2
 8003e76:	4a2d      	ldr	r2, [pc, #180]	; (8003f2c <prvAddCurrentTaskToDelayedList+0xec>)
 8003e78:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003e80:	d124      	bne.n	8003ecc <prvAddCurrentTaskToDelayedList+0x8c>
 8003e82:	683b      	ldr	r3, [r7, #0]
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d021      	beq.n	8003ecc <prvAddCurrentTaskToDelayedList+0x8c>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003e88:	4b29      	ldr	r3, [pc, #164]	; (8003f30 <prvAddCurrentTaskToDelayedList+0xf0>)
 8003e8a:	685b      	ldr	r3, [r3, #4]
 8003e8c:	613b      	str	r3, [r7, #16]
 8003e8e:	4b26      	ldr	r3, [pc, #152]	; (8003f28 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	693a      	ldr	r2, [r7, #16]
 8003e94:	609a      	str	r2, [r3, #8]
 8003e96:	4b24      	ldr	r3, [pc, #144]	; (8003f28 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	693a      	ldr	r2, [r7, #16]
 8003e9c:	6892      	ldr	r2, [r2, #8]
 8003e9e:	60da      	str	r2, [r3, #12]
 8003ea0:	4b21      	ldr	r3, [pc, #132]	; (8003f28 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003ea2:	681a      	ldr	r2, [r3, #0]
 8003ea4:	693b      	ldr	r3, [r7, #16]
 8003ea6:	689b      	ldr	r3, [r3, #8]
 8003ea8:	3204      	adds	r2, #4
 8003eaa:	605a      	str	r2, [r3, #4]
 8003eac:	4b1e      	ldr	r3, [pc, #120]	; (8003f28 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	1d1a      	adds	r2, r3, #4
 8003eb2:	693b      	ldr	r3, [r7, #16]
 8003eb4:	609a      	str	r2, [r3, #8]
 8003eb6:	4b1c      	ldr	r3, [pc, #112]	; (8003f28 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	4a1d      	ldr	r2, [pc, #116]	; (8003f30 <prvAddCurrentTaskToDelayedList+0xf0>)
 8003ebc:	615a      	str	r2, [r3, #20]
 8003ebe:	4b1c      	ldr	r3, [pc, #112]	; (8003f30 <prvAddCurrentTaskToDelayedList+0xf0>)
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	3301      	adds	r3, #1
 8003ec4:	4a1a      	ldr	r2, [pc, #104]	; (8003f30 <prvAddCurrentTaskToDelayedList+0xf0>)
 8003ec6:	6013      	str	r3, [r2, #0]
 8003ec8:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 8003eca:	e026      	b.n	8003f1a <prvAddCurrentTaskToDelayedList+0xda>
            xTimeToWake = xConstTickCount + xTicksToWait;
 8003ecc:	697a      	ldr	r2, [r7, #20]
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	4413      	add	r3, r2
 8003ed2:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003ed4:	4b14      	ldr	r3, [pc, #80]	; (8003f28 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	68fa      	ldr	r2, [r7, #12]
 8003eda:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 8003edc:	68fa      	ldr	r2, [r7, #12]
 8003ede:	697b      	ldr	r3, [r7, #20]
 8003ee0:	429a      	cmp	r2, r3
 8003ee2:	d209      	bcs.n	8003ef8 <prvAddCurrentTaskToDelayedList+0xb8>
                vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003ee4:	4b13      	ldr	r3, [pc, #76]	; (8003f34 <prvAddCurrentTaskToDelayedList+0xf4>)
 8003ee6:	681a      	ldr	r2, [r3, #0]
 8003ee8:	4b0f      	ldr	r3, [pc, #60]	; (8003f28 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	3304      	adds	r3, #4
 8003eee:	4619      	mov	r1, r3
 8003ef0:	4610      	mov	r0, r2
 8003ef2:	f7fe fca0 	bl	8002836 <vListInsert>
}
 8003ef6:	e010      	b.n	8003f1a <prvAddCurrentTaskToDelayedList+0xda>
                vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003ef8:	4b0f      	ldr	r3, [pc, #60]	; (8003f38 <prvAddCurrentTaskToDelayedList+0xf8>)
 8003efa:	681a      	ldr	r2, [r3, #0]
 8003efc:	4b0a      	ldr	r3, [pc, #40]	; (8003f28 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	3304      	adds	r3, #4
 8003f02:	4619      	mov	r1, r3
 8003f04:	4610      	mov	r0, r2
 8003f06:	f7fe fc96 	bl	8002836 <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 8003f0a:	4b0c      	ldr	r3, [pc, #48]	; (8003f3c <prvAddCurrentTaskToDelayedList+0xfc>)
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	68fa      	ldr	r2, [r7, #12]
 8003f10:	429a      	cmp	r2, r3
 8003f12:	d202      	bcs.n	8003f1a <prvAddCurrentTaskToDelayedList+0xda>
                    xNextTaskUnblockTime = xTimeToWake;
 8003f14:	4a09      	ldr	r2, [pc, #36]	; (8003f3c <prvAddCurrentTaskToDelayedList+0xfc>)
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	6013      	str	r3, [r2, #0]
}
 8003f1a:	bf00      	nop
 8003f1c:	3718      	adds	r7, #24
 8003f1e:	46bd      	mov	sp, r7
 8003f20:	bd80      	pop	{r7, pc}
 8003f22:	bf00      	nop
 8003f24:	200001d8 	.word	0x200001d8
 8003f28:	200000c0 	.word	0x200000c0
 8003f2c:	200001dc 	.word	0x200001dc
 8003f30:	200001c0 	.word	0x200001c0
 8003f34:	20000190 	.word	0x20000190
 8003f38:	2000018c 	.word	0x2000018c
 8003f3c:	200001f4 	.word	0x200001f4

08003f40 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8003f40:	b580      	push	{r7, lr}
 8003f42:	b084      	sub	sp, #16
 8003f44:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 8003f46:	2300      	movs	r3, #0
 8003f48:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8003f4a:	f000 fa47 	bl	80043dc <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8003f4e:	4b11      	ldr	r3, [pc, #68]	; (8003f94 <xTimerCreateTimerTask+0x54>)
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d00b      	beq.n	8003f6e <xTimerCreateTimerTask+0x2e>
                    xReturn = pdPASS;
                }
            }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
            {
                xReturn = xTaskCreate( prvTimerTask,
 8003f56:	4b10      	ldr	r3, [pc, #64]	; (8003f98 <xTimerCreateTimerTask+0x58>)
 8003f58:	9301      	str	r3, [sp, #4]
 8003f5a:	2302      	movs	r3, #2
 8003f5c:	9300      	str	r3, [sp, #0]
 8003f5e:	2300      	movs	r3, #0
 8003f60:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003f64:	490d      	ldr	r1, [pc, #52]	; (8003f9c <xTimerCreateTimerTask+0x5c>)
 8003f66:	480e      	ldr	r0, [pc, #56]	; (8003fa0 <xTimerCreateTimerTask+0x60>)
 8003f68:	f7fe fff8 	bl	8002f5c <xTaskCreate>
 8003f6c:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d10a      	bne.n	8003f8a <xTimerCreateTimerTask+0x4a>
        __asm volatile
 8003f74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f78:	f383 8811 	msr	BASEPRI, r3
 8003f7c:	f3bf 8f6f 	isb	sy
 8003f80:	f3bf 8f4f 	dsb	sy
 8003f84:	603b      	str	r3, [r7, #0]
    }
 8003f86:	bf00      	nop
 8003f88:	e7fe      	b.n	8003f88 <xTimerCreateTimerTask+0x48>
        return xReturn;
 8003f8a:	687b      	ldr	r3, [r7, #4]
    }
 8003f8c:	4618      	mov	r0, r3
 8003f8e:	3708      	adds	r7, #8
 8003f90:	46bd      	mov	sp, r7
 8003f92:	bd80      	pop	{r7, pc}
 8003f94:	20000230 	.word	0x20000230
 8003f98:	20000234 	.word	0x20000234
 8003f9c:	080067fc 	.word	0x080067fc
 8003fa0:	08004049 	.word	0x08004049

08003fa4 <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 8003fa4:	b580      	push	{r7, lr}
 8003fa6:	b084      	sub	sp, #16
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	60f8      	str	r0, [r7, #12]
 8003fac:	60b9      	str	r1, [r7, #8]
 8003fae:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8003fb0:	e008      	b.n	8003fc4 <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	699b      	ldr	r3, [r3, #24]
 8003fb6:	68ba      	ldr	r2, [r7, #8]
 8003fb8:	4413      	add	r3, r2
 8003fba:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	6a1b      	ldr	r3, [r3, #32]
 8003fc0:	68f8      	ldr	r0, [r7, #12]
 8003fc2:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	699a      	ldr	r2, [r3, #24]
 8003fc8:	68bb      	ldr	r3, [r7, #8]
 8003fca:	18d1      	adds	r1, r2, r3
 8003fcc:	68bb      	ldr	r3, [r7, #8]
 8003fce:	687a      	ldr	r2, [r7, #4]
 8003fd0:	68f8      	ldr	r0, [r7, #12]
 8003fd2:	f000 f8dd 	bl	8004190 <prvInsertTimerInActiveList>
 8003fd6:	4603      	mov	r3, r0
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d1ea      	bne.n	8003fb2 <prvReloadTimer+0xe>
        }
    }
 8003fdc:	bf00      	nop
 8003fde:	bf00      	nop
 8003fe0:	3710      	adds	r7, #16
 8003fe2:	46bd      	mov	sp, r7
 8003fe4:	bd80      	pop	{r7, pc}
	...

08003fe8 <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8003fe8:	b580      	push	{r7, lr}
 8003fea:	b084      	sub	sp, #16
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	6078      	str	r0, [r7, #4]
 8003ff0:	6039      	str	r1, [r7, #0]
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003ff2:	4b14      	ldr	r3, [pc, #80]	; (8004044 <prvProcessExpiredTimer+0x5c>)
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	68db      	ldr	r3, [r3, #12]
 8003ff8:	68db      	ldr	r3, [r3, #12]
 8003ffa:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	3304      	adds	r3, #4
 8004000:	4618      	mov	r0, r3
 8004002:	f7fe fc51 	bl	80028a8 <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800400c:	f003 0304 	and.w	r3, r3, #4
 8004010:	2b00      	cmp	r3, #0
 8004012:	d005      	beq.n	8004020 <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 8004014:	683a      	ldr	r2, [r7, #0]
 8004016:	6879      	ldr	r1, [r7, #4]
 8004018:	68f8      	ldr	r0, [r7, #12]
 800401a:	f7ff ffc3 	bl	8003fa4 <prvReloadTimer>
 800401e:	e008      	b.n	8004032 <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004026:	f023 0301 	bic.w	r3, r3, #1
 800402a:	b2da      	uxtb	r2, r3
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	6a1b      	ldr	r3, [r3, #32]
 8004036:	68f8      	ldr	r0, [r7, #12]
 8004038:	4798      	blx	r3
    }
 800403a:	bf00      	nop
 800403c:	3710      	adds	r7, #16
 800403e:	46bd      	mov	sp, r7
 8004040:	bd80      	pop	{r7, pc}
 8004042:	bf00      	nop
 8004044:	20000228 	.word	0x20000228

08004048 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8004048:	b580      	push	{r7, lr}
 800404a:	b084      	sub	sp, #16
 800404c:	af00      	add	r7, sp, #0
 800404e:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004050:	f107 0308 	add.w	r3, r7, #8
 8004054:	4618      	mov	r0, r3
 8004056:	f000 f857 	bl	8004108 <prvGetNextExpireTime>
 800405a:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800405c:	68bb      	ldr	r3, [r7, #8]
 800405e:	4619      	mov	r1, r3
 8004060:	68f8      	ldr	r0, [r7, #12]
 8004062:	f000 f803 	bl	800406c <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8004066:	f000 f8d5 	bl	8004214 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800406a:	e7f1      	b.n	8004050 <prvTimerTask+0x8>

0800406c <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 800406c:	b580      	push	{r7, lr}
 800406e:	b084      	sub	sp, #16
 8004070:	af00      	add	r7, sp, #0
 8004072:	6078      	str	r0, [r7, #4]
 8004074:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8004076:	f7ff f993 	bl	80033a0 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800407a:	f107 0308 	add.w	r3, r7, #8
 800407e:	4618      	mov	r0, r3
 8004080:	f000 f866 	bl	8004150 <prvSampleTimeNow>
 8004084:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8004086:	68bb      	ldr	r3, [r7, #8]
 8004088:	2b00      	cmp	r3, #0
 800408a:	d130      	bne.n	80040ee <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800408c:	683b      	ldr	r3, [r7, #0]
 800408e:	2b00      	cmp	r3, #0
 8004090:	d10a      	bne.n	80040a8 <prvProcessTimerOrBlockTask+0x3c>
 8004092:	687a      	ldr	r2, [r7, #4]
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	429a      	cmp	r2, r3
 8004098:	d806      	bhi.n	80040a8 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 800409a:	f7ff f98f 	bl	80033bc <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800409e:	68f9      	ldr	r1, [r7, #12]
 80040a0:	6878      	ldr	r0, [r7, #4]
 80040a2:	f7ff ffa1 	bl	8003fe8 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 80040a6:	e024      	b.n	80040f2 <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 80040a8:	683b      	ldr	r3, [r7, #0]
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d008      	beq.n	80040c0 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80040ae:	4b13      	ldr	r3, [pc, #76]	; (80040fc <prvProcessTimerOrBlockTask+0x90>)
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d101      	bne.n	80040bc <prvProcessTimerOrBlockTask+0x50>
 80040b8:	2301      	movs	r3, #1
 80040ba:	e000      	b.n	80040be <prvProcessTimerOrBlockTask+0x52>
 80040bc:	2300      	movs	r3, #0
 80040be:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80040c0:	4b0f      	ldr	r3, [pc, #60]	; (8004100 <prvProcessTimerOrBlockTask+0x94>)
 80040c2:	6818      	ldr	r0, [r3, #0]
 80040c4:	687a      	ldr	r2, [r7, #4]
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	1ad3      	subs	r3, r2, r3
 80040ca:	683a      	ldr	r2, [r7, #0]
 80040cc:	4619      	mov	r1, r3
 80040ce:	f7fe ff11 	bl	8002ef4 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 80040d2:	f7ff f973 	bl	80033bc <xTaskResumeAll>
 80040d6:	4603      	mov	r3, r0
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d10a      	bne.n	80040f2 <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 80040dc:	4b09      	ldr	r3, [pc, #36]	; (8004104 <prvProcessTimerOrBlockTask+0x98>)
 80040de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80040e2:	601a      	str	r2, [r3, #0]
 80040e4:	f3bf 8f4f 	dsb	sy
 80040e8:	f3bf 8f6f 	isb	sy
    }
 80040ec:	e001      	b.n	80040f2 <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 80040ee:	f7ff f965 	bl	80033bc <xTaskResumeAll>
    }
 80040f2:	bf00      	nop
 80040f4:	3710      	adds	r7, #16
 80040f6:	46bd      	mov	sp, r7
 80040f8:	bd80      	pop	{r7, pc}
 80040fa:	bf00      	nop
 80040fc:	2000022c 	.word	0x2000022c
 8004100:	20000230 	.word	0x20000230
 8004104:	e000ed04 	.word	0xe000ed04

08004108 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8004108:	b480      	push	{r7}
 800410a:	b085      	sub	sp, #20
 800410c:	af00      	add	r7, sp, #0
 800410e:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004110:	4b0e      	ldr	r3, [pc, #56]	; (800414c <prvGetNextExpireTime+0x44>)
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	2b00      	cmp	r3, #0
 8004118:	d101      	bne.n	800411e <prvGetNextExpireTime+0x16>
 800411a:	2201      	movs	r2, #1
 800411c:	e000      	b.n	8004120 <prvGetNextExpireTime+0x18>
 800411e:	2200      	movs	r2, #0
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	2b00      	cmp	r3, #0
 800412a:	d105      	bne.n	8004138 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800412c:	4b07      	ldr	r3, [pc, #28]	; (800414c <prvGetNextExpireTime+0x44>)
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	68db      	ldr	r3, [r3, #12]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	60fb      	str	r3, [r7, #12]
 8004136:	e001      	b.n	800413c <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8004138:	2300      	movs	r3, #0
 800413a:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 800413c:	68fb      	ldr	r3, [r7, #12]
    }
 800413e:	4618      	mov	r0, r3
 8004140:	3714      	adds	r7, #20
 8004142:	46bd      	mov	sp, r7
 8004144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004148:	4770      	bx	lr
 800414a:	bf00      	nop
 800414c:	20000228 	.word	0x20000228

08004150 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8004150:	b580      	push	{r7, lr}
 8004152:	b084      	sub	sp, #16
 8004154:	af00      	add	r7, sp, #0
 8004156:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8004158:	f7ff fa30 	bl	80035bc <xTaskGetTickCount>
 800415c:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 800415e:	4b0b      	ldr	r3, [pc, #44]	; (800418c <prvSampleTimeNow+0x3c>)
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	68fa      	ldr	r2, [r7, #12]
 8004164:	429a      	cmp	r2, r3
 8004166:	d205      	bcs.n	8004174 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8004168:	f000 f912 	bl	8004390 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	2201      	movs	r2, #1
 8004170:	601a      	str	r2, [r3, #0]
 8004172:	e002      	b.n	800417a <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	2200      	movs	r2, #0
 8004178:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 800417a:	4a04      	ldr	r2, [pc, #16]	; (800418c <prvSampleTimeNow+0x3c>)
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8004180:	68fb      	ldr	r3, [r7, #12]
    }
 8004182:	4618      	mov	r0, r3
 8004184:	3710      	adds	r7, #16
 8004186:	46bd      	mov	sp, r7
 8004188:	bd80      	pop	{r7, pc}
 800418a:	bf00      	nop
 800418c:	20000238 	.word	0x20000238

08004190 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8004190:	b580      	push	{r7, lr}
 8004192:	b086      	sub	sp, #24
 8004194:	af00      	add	r7, sp, #0
 8004196:	60f8      	str	r0, [r7, #12]
 8004198:	60b9      	str	r1, [r7, #8]
 800419a:	607a      	str	r2, [r7, #4]
 800419c:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 800419e:	2300      	movs	r3, #0
 80041a0:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	68ba      	ldr	r2, [r7, #8]
 80041a6:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	68fa      	ldr	r2, [r7, #12]
 80041ac:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 80041ae:	68ba      	ldr	r2, [r7, #8]
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	429a      	cmp	r2, r3
 80041b4:	d812      	bhi.n	80041dc <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80041b6:	687a      	ldr	r2, [r7, #4]
 80041b8:	683b      	ldr	r3, [r7, #0]
 80041ba:	1ad2      	subs	r2, r2, r3
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	699b      	ldr	r3, [r3, #24]
 80041c0:	429a      	cmp	r2, r3
 80041c2:	d302      	bcc.n	80041ca <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 80041c4:	2301      	movs	r3, #1
 80041c6:	617b      	str	r3, [r7, #20]
 80041c8:	e01b      	b.n	8004202 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80041ca:	4b10      	ldr	r3, [pc, #64]	; (800420c <prvInsertTimerInActiveList+0x7c>)
 80041cc:	681a      	ldr	r2, [r3, #0]
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	3304      	adds	r3, #4
 80041d2:	4619      	mov	r1, r3
 80041d4:	4610      	mov	r0, r2
 80041d6:	f7fe fb2e 	bl	8002836 <vListInsert>
 80041da:	e012      	b.n	8004202 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80041dc:	687a      	ldr	r2, [r7, #4]
 80041de:	683b      	ldr	r3, [r7, #0]
 80041e0:	429a      	cmp	r2, r3
 80041e2:	d206      	bcs.n	80041f2 <prvInsertTimerInActiveList+0x62>
 80041e4:	68ba      	ldr	r2, [r7, #8]
 80041e6:	683b      	ldr	r3, [r7, #0]
 80041e8:	429a      	cmp	r2, r3
 80041ea:	d302      	bcc.n	80041f2 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 80041ec:	2301      	movs	r3, #1
 80041ee:	617b      	str	r3, [r7, #20]
 80041f0:	e007      	b.n	8004202 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80041f2:	4b07      	ldr	r3, [pc, #28]	; (8004210 <prvInsertTimerInActiveList+0x80>)
 80041f4:	681a      	ldr	r2, [r3, #0]
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	3304      	adds	r3, #4
 80041fa:	4619      	mov	r1, r3
 80041fc:	4610      	mov	r0, r2
 80041fe:	f7fe fb1a 	bl	8002836 <vListInsert>
            }
        }

        return xProcessTimerNow;
 8004202:	697b      	ldr	r3, [r7, #20]
    }
 8004204:	4618      	mov	r0, r3
 8004206:	3718      	adds	r7, #24
 8004208:	46bd      	mov	sp, r7
 800420a:	bd80      	pop	{r7, pc}
 800420c:	2000022c 	.word	0x2000022c
 8004210:	20000228 	.word	0x20000228

08004214 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8004214:	b580      	push	{r7, lr}
 8004216:	b088      	sub	sp, #32
 8004218:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800421a:	e0a6      	b.n	800436a <prvProcessReceivedCommands+0x156>
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800421c:	68bb      	ldr	r3, [r7, #8]
 800421e:	2b00      	cmp	r3, #0
 8004220:	f2c0 80a3 	blt.w	800436a <prvProcessReceivedCommands+0x156>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004224:	693b      	ldr	r3, [r7, #16]
 8004226:	61fb      	str	r3, [r7, #28]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004228:	69fb      	ldr	r3, [r7, #28]
 800422a:	695b      	ldr	r3, [r3, #20]
 800422c:	2b00      	cmp	r3, #0
 800422e:	d004      	beq.n	800423a <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004230:	69fb      	ldr	r3, [r7, #28]
 8004232:	3304      	adds	r3, #4
 8004234:	4618      	mov	r0, r3
 8004236:	f7fe fb37 	bl	80028a8 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800423a:	1d3b      	adds	r3, r7, #4
 800423c:	4618      	mov	r0, r3
 800423e:	f7ff ff87 	bl	8004150 <prvSampleTimeNow>
 8004242:	61b8      	str	r0, [r7, #24]

                switch( xMessage.xMessageID )
 8004244:	68bb      	ldr	r3, [r7, #8]
 8004246:	3b01      	subs	r3, #1
 8004248:	2b08      	cmp	r3, #8
 800424a:	f200 808d 	bhi.w	8004368 <prvProcessReceivedCommands+0x154>
 800424e:	a201      	add	r2, pc, #4	; (adr r2, 8004254 <prvProcessReceivedCommands+0x40>)
 8004250:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004254:	08004279 	.word	0x08004279
 8004258:	08004279 	.word	0x08004279
 800425c:	080042e1 	.word	0x080042e1
 8004260:	080042f5 	.word	0x080042f5
 8004264:	0800433f 	.word	0x0800433f
 8004268:	08004279 	.word	0x08004279
 800426c:	08004279 	.word	0x08004279
 8004270:	080042e1 	.word	0x080042e1
 8004274:	080042f5 	.word	0x080042f5
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004278:	69fb      	ldr	r3, [r7, #28]
 800427a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800427e:	f043 0301 	orr.w	r3, r3, #1
 8004282:	b2da      	uxtb	r2, r3
 8004284:	69fb      	ldr	r3, [r7, #28]
 8004286:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800428a:	68fa      	ldr	r2, [r7, #12]
 800428c:	69fb      	ldr	r3, [r7, #28]
 800428e:	699b      	ldr	r3, [r3, #24]
 8004290:	18d1      	adds	r1, r2, r3
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	69ba      	ldr	r2, [r7, #24]
 8004296:	69f8      	ldr	r0, [r7, #28]
 8004298:	f7ff ff7a 	bl	8004190 <prvInsertTimerInActiveList>
 800429c:	4603      	mov	r3, r0
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d063      	beq.n	800436a <prvProcessReceivedCommands+0x156>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80042a2:	69fb      	ldr	r3, [r7, #28]
 80042a4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80042a8:	f003 0304 	and.w	r3, r3, #4
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d009      	beq.n	80042c4 <prvProcessReceivedCommands+0xb0>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 80042b0:	68fa      	ldr	r2, [r7, #12]
 80042b2:	69fb      	ldr	r3, [r7, #28]
 80042b4:	699b      	ldr	r3, [r3, #24]
 80042b6:	4413      	add	r3, r2
 80042b8:	69ba      	ldr	r2, [r7, #24]
 80042ba:	4619      	mov	r1, r3
 80042bc:	69f8      	ldr	r0, [r7, #28]
 80042be:	f7ff fe71 	bl	8003fa4 <prvReloadTimer>
 80042c2:	e008      	b.n	80042d6 <prvProcessReceivedCommands+0xc2>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 80042c4:	69fb      	ldr	r3, [r7, #28]
 80042c6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80042ca:	f023 0301 	bic.w	r3, r3, #1
 80042ce:	b2da      	uxtb	r2, r3
 80042d0:	69fb      	ldr	r3, [r7, #28]
 80042d2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80042d6:	69fb      	ldr	r3, [r7, #28]
 80042d8:	6a1b      	ldr	r3, [r3, #32]
 80042da:	69f8      	ldr	r0, [r7, #28]
 80042dc:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 80042de:	e044      	b.n	800436a <prvProcessReceivedCommands+0x156>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 80042e0:	69fb      	ldr	r3, [r7, #28]
 80042e2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80042e6:	f023 0301 	bic.w	r3, r3, #1
 80042ea:	b2da      	uxtb	r2, r3
 80042ec:	69fb      	ldr	r3, [r7, #28]
 80042ee:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 80042f2:	e03a      	b.n	800436a <prvProcessReceivedCommands+0x156>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80042f4:	69fb      	ldr	r3, [r7, #28]
 80042f6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80042fa:	f043 0301 	orr.w	r3, r3, #1
 80042fe:	b2da      	uxtb	r2, r3
 8004300:	69fb      	ldr	r3, [r7, #28]
 8004302:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004306:	68fa      	ldr	r2, [r7, #12]
 8004308:	69fb      	ldr	r3, [r7, #28]
 800430a:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800430c:	69fb      	ldr	r3, [r7, #28]
 800430e:	699b      	ldr	r3, [r3, #24]
 8004310:	2b00      	cmp	r3, #0
 8004312:	d10a      	bne.n	800432a <prvProcessReceivedCommands+0x116>
        __asm volatile
 8004314:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004318:	f383 8811 	msr	BASEPRI, r3
 800431c:	f3bf 8f6f 	isb	sy
 8004320:	f3bf 8f4f 	dsb	sy
 8004324:	617b      	str	r3, [r7, #20]
    }
 8004326:	bf00      	nop
 8004328:	e7fe      	b.n	8004328 <prvProcessReceivedCommands+0x114>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800432a:	69fb      	ldr	r3, [r7, #28]
 800432c:	699a      	ldr	r2, [r3, #24]
 800432e:	69bb      	ldr	r3, [r7, #24]
 8004330:	18d1      	adds	r1, r2, r3
 8004332:	69bb      	ldr	r3, [r7, #24]
 8004334:	69ba      	ldr	r2, [r7, #24]
 8004336:	69f8      	ldr	r0, [r7, #28]
 8004338:	f7ff ff2a 	bl	8004190 <prvInsertTimerInActiveList>
                        break;
 800433c:	e015      	b.n	800436a <prvProcessReceivedCommands+0x156>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                        {
                            /* The timer has already been removed from the active list,
                             * just free up the memory if the memory was dynamically
                             * allocated. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800433e:	69fb      	ldr	r3, [r7, #28]
 8004340:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004344:	f003 0302 	and.w	r3, r3, #2
 8004348:	2b00      	cmp	r3, #0
 800434a:	d103      	bne.n	8004354 <prvProcessReceivedCommands+0x140>
                            {
                                vPortFree( pxTimer );
 800434c:	69f8      	ldr	r0, [r7, #28]
 800434e:	f000 fc0f 	bl	8004b70 <vPortFree>
 8004352:	e00a      	b.n	800436a <prvProcessReceivedCommands+0x156>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8004354:	69fb      	ldr	r3, [r7, #28]
 8004356:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800435a:	f023 0301 	bic.w	r3, r3, #1
 800435e:	b2da      	uxtb	r2, r3
 8004360:	69fb      	ldr	r3, [r7, #28]
 8004362:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                             * no need to free the memory - just mark the timer as
                             * "not active". */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                        }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8004366:	e000      	b.n	800436a <prvProcessReceivedCommands+0x156>

                    default:
                        /* Don't expect to get here. */
                        break;
 8004368:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800436a:	4b08      	ldr	r3, [pc, #32]	; (800438c <prvProcessReceivedCommands+0x178>)
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f107 0108 	add.w	r1, r7, #8
 8004372:	2200      	movs	r2, #0
 8004374:	4618      	mov	r0, r3
 8004376:	f7fe fbc9 	bl	8002b0c <xQueueReceive>
 800437a:	4603      	mov	r3, r0
 800437c:	2b00      	cmp	r3, #0
 800437e:	f47f af4d 	bne.w	800421c <prvProcessReceivedCommands+0x8>
                }
            }
        }
    }
 8004382:	bf00      	nop
 8004384:	bf00      	nop
 8004386:	3720      	adds	r7, #32
 8004388:	46bd      	mov	sp, r7
 800438a:	bd80      	pop	{r7, pc}
 800438c:	20000230 	.word	0x20000230

08004390 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8004390:	b580      	push	{r7, lr}
 8004392:	b082      	sub	sp, #8
 8004394:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004396:	e009      	b.n	80043ac <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004398:	4b0e      	ldr	r3, [pc, #56]	; (80043d4 <prvSwitchTimerLists+0x44>)
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	68db      	ldr	r3, [r3, #12]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 80043a2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80043a6:	6838      	ldr	r0, [r7, #0]
 80043a8:	f7ff fe1e 	bl	8003fe8 <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80043ac:	4b09      	ldr	r3, [pc, #36]	; (80043d4 <prvSwitchTimerLists+0x44>)
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d1f0      	bne.n	8004398 <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 80043b6:	4b07      	ldr	r3, [pc, #28]	; (80043d4 <prvSwitchTimerLists+0x44>)
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 80043bc:	4b06      	ldr	r3, [pc, #24]	; (80043d8 <prvSwitchTimerLists+0x48>)
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	4a04      	ldr	r2, [pc, #16]	; (80043d4 <prvSwitchTimerLists+0x44>)
 80043c2:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 80043c4:	4a04      	ldr	r2, [pc, #16]	; (80043d8 <prvSwitchTimerLists+0x48>)
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	6013      	str	r3, [r2, #0]
    }
 80043ca:	bf00      	nop
 80043cc:	3708      	adds	r7, #8
 80043ce:	46bd      	mov	sp, r7
 80043d0:	bd80      	pop	{r7, pc}
 80043d2:	bf00      	nop
 80043d4:	20000228 	.word	0x20000228
 80043d8:	2000022c 	.word	0x2000022c

080043dc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 80043dc:	b580      	push	{r7, lr}
 80043de:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 80043e0:	f000 f9e0 	bl	80047a4 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 80043e4:	4b12      	ldr	r3, [pc, #72]	; (8004430 <prvCheckForValidListAndQueue+0x54>)
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d11d      	bne.n	8004428 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 80043ec:	4811      	ldr	r0, [pc, #68]	; (8004434 <prvCheckForValidListAndQueue+0x58>)
 80043ee:	f7fe f9f5 	bl	80027dc <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 80043f2:	4811      	ldr	r0, [pc, #68]	; (8004438 <prvCheckForValidListAndQueue+0x5c>)
 80043f4:	f7fe f9f2 	bl	80027dc <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 80043f8:	4b10      	ldr	r3, [pc, #64]	; (800443c <prvCheckForValidListAndQueue+0x60>)
 80043fa:	4a0e      	ldr	r2, [pc, #56]	; (8004434 <prvCheckForValidListAndQueue+0x58>)
 80043fc:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 80043fe:	4b10      	ldr	r3, [pc, #64]	; (8004440 <prvCheckForValidListAndQueue+0x64>)
 8004400:	4a0d      	ldr	r2, [pc, #52]	; (8004438 <prvCheckForValidListAndQueue+0x5c>)
 8004402:	601a      	str	r2, [r3, #0]

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                }
                #else
                {
                    xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8004404:	2200      	movs	r2, #0
 8004406:	210c      	movs	r1, #12
 8004408:	200a      	movs	r0, #10
 800440a:	f7fe fb07 	bl	8002a1c <xQueueGenericCreate>
 800440e:	4603      	mov	r3, r0
 8004410:	4a07      	ldr	r2, [pc, #28]	; (8004430 <prvCheckForValidListAndQueue+0x54>)
 8004412:	6013      	str	r3, [r2, #0]
                }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                {
                    if( xTimerQueue != NULL )
 8004414:	4b06      	ldr	r3, [pc, #24]	; (8004430 <prvCheckForValidListAndQueue+0x54>)
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	2b00      	cmp	r3, #0
 800441a:	d005      	beq.n	8004428 <prvCheckForValidListAndQueue+0x4c>
                    {
                        vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800441c:	4b04      	ldr	r3, [pc, #16]	; (8004430 <prvCheckForValidListAndQueue+0x54>)
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	4908      	ldr	r1, [pc, #32]	; (8004444 <prvCheckForValidListAndQueue+0x68>)
 8004422:	4618      	mov	r0, r3
 8004424:	f7fe fd10 	bl	8002e48 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8004428:	f000 f9ec 	bl	8004804 <vPortExitCritical>
    }
 800442c:	bf00      	nop
 800442e:	bd80      	pop	{r7, pc}
 8004430:	20000230 	.word	0x20000230
 8004434:	20000200 	.word	0x20000200
 8004438:	20000214 	.word	0x20000214
 800443c:	20000228 	.word	0x20000228
 8004440:	2000022c 	.word	0x2000022c
 8004444:	08006804 	.word	0x08006804

08004448 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8004448:	b480      	push	{r7}
 800444a:	b085      	sub	sp, #20
 800444c:	af00      	add	r7, sp, #0
 800444e:	60f8      	str	r0, [r7, #12]
 8004450:	60b9      	str	r1, [r7, #8]
 8004452:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	3b04      	subs	r3, #4
 8004458:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004460:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	3b04      	subs	r3, #4
 8004466:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8004468:	68bb      	ldr	r3, [r7, #8]
 800446a:	f023 0201 	bic.w	r2, r3, #1
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	3b04      	subs	r3, #4
 8004476:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8004478:	4a0c      	ldr	r2, [pc, #48]	; (80044ac <pxPortInitialiseStack+0x64>)
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	3b14      	subs	r3, #20
 8004482:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8004484:	687a      	ldr	r2, [r7, #4]
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	3b04      	subs	r3, #4
 800448e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	f06f 0202 	mvn.w	r2, #2
 8004496:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	3b20      	subs	r3, #32
 800449c:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 800449e:	68fb      	ldr	r3, [r7, #12]
}
 80044a0:	4618      	mov	r0, r3
 80044a2:	3714      	adds	r7, #20
 80044a4:	46bd      	mov	sp, r7
 80044a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044aa:	4770      	bx	lr
 80044ac:	080044b1 	.word	0x080044b1

080044b0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80044b0:	b480      	push	{r7}
 80044b2:	b085      	sub	sp, #20
 80044b4:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 80044b6:	2300      	movs	r3, #0
 80044b8:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 80044ba:	4b12      	ldr	r3, [pc, #72]	; (8004504 <prvTaskExitError+0x54>)
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80044c2:	d00a      	beq.n	80044da <prvTaskExitError+0x2a>
        __asm volatile
 80044c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044c8:	f383 8811 	msr	BASEPRI, r3
 80044cc:	f3bf 8f6f 	isb	sy
 80044d0:	f3bf 8f4f 	dsb	sy
 80044d4:	60fb      	str	r3, [r7, #12]
    }
 80044d6:	bf00      	nop
 80044d8:	e7fe      	b.n	80044d8 <prvTaskExitError+0x28>
        __asm volatile
 80044da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044de:	f383 8811 	msr	BASEPRI, r3
 80044e2:	f3bf 8f6f 	isb	sy
 80044e6:	f3bf 8f4f 	dsb	sy
 80044ea:	60bb      	str	r3, [r7, #8]
    }
 80044ec:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 80044ee:	bf00      	nop
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d0fc      	beq.n	80044f0 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 80044f6:	bf00      	nop
 80044f8:	bf00      	nop
 80044fa:	3714      	adds	r7, #20
 80044fc:	46bd      	mov	sp, r7
 80044fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004502:	4770      	bx	lr
 8004504:	20000010 	.word	0x20000010
	...

08004510 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8004510:	4b07      	ldr	r3, [pc, #28]	; (8004530 <pxCurrentTCBConst2>)
 8004512:	6819      	ldr	r1, [r3, #0]
 8004514:	6808      	ldr	r0, [r1, #0]
 8004516:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800451a:	f380 8809 	msr	PSP, r0
 800451e:	f3bf 8f6f 	isb	sy
 8004522:	f04f 0000 	mov.w	r0, #0
 8004526:	f380 8811 	msr	BASEPRI, r0
 800452a:	4770      	bx	lr
 800452c:	f3af 8000 	nop.w

08004530 <pxCurrentTCBConst2>:
 8004530:	200000c0 	.word	0x200000c0
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8004534:	bf00      	nop
 8004536:	bf00      	nop

08004538 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8004538:	4808      	ldr	r0, [pc, #32]	; (800455c <prvPortStartFirstTask+0x24>)
 800453a:	6800      	ldr	r0, [r0, #0]
 800453c:	6800      	ldr	r0, [r0, #0]
 800453e:	f380 8808 	msr	MSP, r0
 8004542:	f04f 0000 	mov.w	r0, #0
 8004546:	f380 8814 	msr	CONTROL, r0
 800454a:	b662      	cpsie	i
 800454c:	b661      	cpsie	f
 800454e:	f3bf 8f4f 	dsb	sy
 8004552:	f3bf 8f6f 	isb	sy
 8004556:	df00      	svc	0
 8004558:	bf00      	nop
 800455a:	0000      	.short	0x0000
 800455c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8004560:	bf00      	nop
 8004562:	bf00      	nop

08004564 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004564:	b580      	push	{r7, lr}
 8004566:	b086      	sub	sp, #24
 8004568:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800456a:	4b46      	ldr	r3, [pc, #280]	; (8004684 <xPortStartScheduler+0x120>)
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	4a46      	ldr	r2, [pc, #280]	; (8004688 <xPortStartScheduler+0x124>)
 8004570:	4293      	cmp	r3, r2
 8004572:	d10a      	bne.n	800458a <xPortStartScheduler+0x26>
        __asm volatile
 8004574:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004578:	f383 8811 	msr	BASEPRI, r3
 800457c:	f3bf 8f6f 	isb	sy
 8004580:	f3bf 8f4f 	dsb	sy
 8004584:	613b      	str	r3, [r7, #16]
    }
 8004586:	bf00      	nop
 8004588:	e7fe      	b.n	8004588 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800458a:	4b3e      	ldr	r3, [pc, #248]	; (8004684 <xPortStartScheduler+0x120>)
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	4a3f      	ldr	r2, [pc, #252]	; (800468c <xPortStartScheduler+0x128>)
 8004590:	4293      	cmp	r3, r2
 8004592:	d10a      	bne.n	80045aa <xPortStartScheduler+0x46>
        __asm volatile
 8004594:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004598:	f383 8811 	msr	BASEPRI, r3
 800459c:	f3bf 8f6f 	isb	sy
 80045a0:	f3bf 8f4f 	dsb	sy
 80045a4:	60fb      	str	r3, [r7, #12]
    }
 80045a6:	bf00      	nop
 80045a8:	e7fe      	b.n	80045a8 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint32_t ulOriginalPriority;
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80045aa:	4b39      	ldr	r3, [pc, #228]	; (8004690 <xPortStartScheduler+0x12c>)
 80045ac:	617b      	str	r3, [r7, #20]
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ulOriginalPriority = *pucFirstUserPriorityRegister;
 80045ae:	697b      	ldr	r3, [r7, #20]
 80045b0:	781b      	ldrb	r3, [r3, #0]
 80045b2:	b2db      	uxtb	r3, r3
 80045b4:	607b      	str	r3, [r7, #4]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80045b6:	697b      	ldr	r3, [r7, #20]
 80045b8:	22ff      	movs	r2, #255	; 0xff
 80045ba:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80045bc:	697b      	ldr	r3, [r7, #20]
 80045be:	781b      	ldrb	r3, [r3, #0]
 80045c0:	b2db      	uxtb	r3, r3
 80045c2:	70fb      	strb	r3, [r7, #3]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80045c4:	78fb      	ldrb	r3, [r7, #3]
 80045c6:	b2db      	uxtb	r3, r3
 80045c8:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80045cc:	b2da      	uxtb	r2, r3
 80045ce:	4b31      	ldr	r3, [pc, #196]	; (8004694 <xPortStartScheduler+0x130>)
 80045d0:	701a      	strb	r2, [r3, #0]

        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */
        ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80045d2:	4b31      	ldr	r3, [pc, #196]	; (8004698 <xPortStartScheduler+0x134>)
 80045d4:	2207      	movs	r2, #7
 80045d6:	601a      	str	r2, [r3, #0]

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80045d8:	e009      	b.n	80045ee <xPortStartScheduler+0x8a>
        {
            ulMaxPRIGROUPValue--;
 80045da:	4b2f      	ldr	r3, [pc, #188]	; (8004698 <xPortStartScheduler+0x134>)
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	3b01      	subs	r3, #1
 80045e0:	4a2d      	ldr	r2, [pc, #180]	; (8004698 <xPortStartScheduler+0x134>)
 80045e2:	6013      	str	r3, [r2, #0]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80045e4:	78fb      	ldrb	r3, [r7, #3]
 80045e6:	b2db      	uxtb	r3, r3
 80045e8:	005b      	lsls	r3, r3, #1
 80045ea:	b2db      	uxtb	r3, r3
 80045ec:	70fb      	strb	r3, [r7, #3]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80045ee:	78fb      	ldrb	r3, [r7, #3]
 80045f0:	b2db      	uxtb	r3, r3
 80045f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045f6:	2b80      	cmp	r3, #128	; 0x80
 80045f8:	d0ef      	beq.n	80045da <xPortStartScheduler+0x76>
        #ifdef configPRIO_BITS
        {
            /* Check the FreeRTOS configuration that defines the number of
             * priority bits matches the number of priority bits actually queried
             * from the hardware. */
            configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80045fa:	4b27      	ldr	r3, [pc, #156]	; (8004698 <xPortStartScheduler+0x134>)
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f1c3 0307 	rsb	r3, r3, #7
 8004602:	2b04      	cmp	r3, #4
 8004604:	d00a      	beq.n	800461c <xPortStartScheduler+0xb8>
        __asm volatile
 8004606:	f04f 0350 	mov.w	r3, #80	; 0x50
 800460a:	f383 8811 	msr	BASEPRI, r3
 800460e:	f3bf 8f6f 	isb	sy
 8004612:	f3bf 8f4f 	dsb	sy
 8004616:	60bb      	str	r3, [r7, #8]
    }
 8004618:	bf00      	nop
 800461a:	e7fe      	b.n	800461a <xPortStartScheduler+0xb6>
        }
        #endif

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800461c:	4b1e      	ldr	r3, [pc, #120]	; (8004698 <xPortStartScheduler+0x134>)
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	021b      	lsls	r3, r3, #8
 8004622:	4a1d      	ldr	r2, [pc, #116]	; (8004698 <xPortStartScheduler+0x134>)
 8004624:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004626:	4b1c      	ldr	r3, [pc, #112]	; (8004698 <xPortStartScheduler+0x134>)
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800462e:	4a1a      	ldr	r2, [pc, #104]	; (8004698 <xPortStartScheduler+0x134>)
 8004630:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ulOriginalPriority;
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	b2da      	uxtb	r2, r3
 8004636:	697b      	ldr	r3, [r7, #20]
 8004638:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 800463a:	4b18      	ldr	r3, [pc, #96]	; (800469c <xPortStartScheduler+0x138>)
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	4a17      	ldr	r2, [pc, #92]	; (800469c <xPortStartScheduler+0x138>)
 8004640:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004644:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8004646:	4b15      	ldr	r3, [pc, #84]	; (800469c <xPortStartScheduler+0x138>)
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	4a14      	ldr	r2, [pc, #80]	; (800469c <xPortStartScheduler+0x138>)
 800464c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004650:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8004652:	f000 f963 	bl	800491c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8004656:	4b12      	ldr	r3, [pc, #72]	; (80046a0 <xPortStartScheduler+0x13c>)
 8004658:	2200      	movs	r2, #0
 800465a:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 800465c:	f000 f982 	bl	8004964 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004660:	4b10      	ldr	r3, [pc, #64]	; (80046a4 <xPortStartScheduler+0x140>)
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	4a0f      	ldr	r2, [pc, #60]	; (80046a4 <xPortStartScheduler+0x140>)
 8004666:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800466a:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 800466c:	f7ff ff64 	bl	8004538 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8004670:	f7ff f8e0 	bl	8003834 <vTaskSwitchContext>
    prvTaskExitError();
 8004674:	f7ff ff1c 	bl	80044b0 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8004678:	2300      	movs	r3, #0
}
 800467a:	4618      	mov	r0, r3
 800467c:	3718      	adds	r7, #24
 800467e:	46bd      	mov	sp, r7
 8004680:	bd80      	pop	{r7, pc}
 8004682:	bf00      	nop
 8004684:	e000ed00 	.word	0xe000ed00
 8004688:	410fc271 	.word	0x410fc271
 800468c:	410fc270 	.word	0x410fc270
 8004690:	e000e400 	.word	0xe000e400
 8004694:	2000023c 	.word	0x2000023c
 8004698:	20000240 	.word	0x20000240
 800469c:	e000ed20 	.word	0xe000ed20
 80046a0:	20000010 	.word	0x20000010
 80046a4:	e000ef34 	.word	0xe000ef34

080046a8 <vInitPrioGroupValue>:
/*-----------------------------------------------------------*/


void vInitPrioGroupValue(void)
{
 80046a8:	b480      	push	{r7}
 80046aa:	b087      	sub	sp, #28
 80046ac:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80046ae:	4b37      	ldr	r3, [pc, #220]	; (800478c <vInitPrioGroupValue+0xe4>)
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	4a37      	ldr	r2, [pc, #220]	; (8004790 <vInitPrioGroupValue+0xe8>)
 80046b4:	4293      	cmp	r3, r2
 80046b6:	d10a      	bne.n	80046ce <vInitPrioGroupValue+0x26>
        __asm volatile
 80046b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046bc:	f383 8811 	msr	BASEPRI, r3
 80046c0:	f3bf 8f6f 	isb	sy
 80046c4:	f3bf 8f4f 	dsb	sy
 80046c8:	613b      	str	r3, [r7, #16]
    }
 80046ca:	bf00      	nop
 80046cc:	e7fe      	b.n	80046cc <vInitPrioGroupValue+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80046ce:	4b2f      	ldr	r3, [pc, #188]	; (800478c <vInitPrioGroupValue+0xe4>)
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	4a30      	ldr	r2, [pc, #192]	; (8004794 <vInitPrioGroupValue+0xec>)
 80046d4:	4293      	cmp	r3, r2
 80046d6:	d10a      	bne.n	80046ee <vInitPrioGroupValue+0x46>
        __asm volatile
 80046d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046dc:	f383 8811 	msr	BASEPRI, r3
 80046e0:	f3bf 8f6f 	isb	sy
 80046e4:	f3bf 8f4f 	dsb	sy
 80046e8:	60fb      	str	r3, [r7, #12]
    }
 80046ea:	bf00      	nop
 80046ec:	e7fe      	b.n	80046ec <vInitPrioGroupValue+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80046ee:	4b2a      	ldr	r3, [pc, #168]	; (8004798 <vInitPrioGroupValue+0xf0>)
 80046f0:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 80046f2:	697b      	ldr	r3, [r7, #20]
 80046f4:	781b      	ldrb	r3, [r3, #0]
 80046f6:	b2db      	uxtb	r3, r3
 80046f8:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80046fa:	697b      	ldr	r3, [r7, #20]
 80046fc:	22ff      	movs	r2, #255	; 0xff
 80046fe:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004700:	697b      	ldr	r3, [r7, #20]
 8004702:	781b      	ldrb	r3, [r3, #0]
 8004704:	b2db      	uxtb	r3, r3
 8004706:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004708:	78fb      	ldrb	r3, [r7, #3]
 800470a:	b2db      	uxtb	r3, r3
 800470c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004710:	b2da      	uxtb	r2, r3
 8004712:	4b22      	ldr	r3, [pc, #136]	; (800479c <vInitPrioGroupValue+0xf4>)
 8004714:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004716:	4b22      	ldr	r3, [pc, #136]	; (80047a0 <vInitPrioGroupValue+0xf8>)
 8004718:	2207      	movs	r2, #7
 800471a:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800471c:	e009      	b.n	8004732 <vInitPrioGroupValue+0x8a>
            {
                ulMaxPRIGROUPValue--;
 800471e:	4b20      	ldr	r3, [pc, #128]	; (80047a0 <vInitPrioGroupValue+0xf8>)
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	3b01      	subs	r3, #1
 8004724:	4a1e      	ldr	r2, [pc, #120]	; (80047a0 <vInitPrioGroupValue+0xf8>)
 8004726:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004728:	78fb      	ldrb	r3, [r7, #3]
 800472a:	b2db      	uxtb	r3, r3
 800472c:	005b      	lsls	r3, r3, #1
 800472e:	b2db      	uxtb	r3, r3
 8004730:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004732:	78fb      	ldrb	r3, [r7, #3]
 8004734:	b2db      	uxtb	r3, r3
 8004736:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800473a:	2b80      	cmp	r3, #128	; 0x80
 800473c:	d0ef      	beq.n	800471e <vInitPrioGroupValue+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800473e:	4b18      	ldr	r3, [pc, #96]	; (80047a0 <vInitPrioGroupValue+0xf8>)
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f1c3 0307 	rsb	r3, r3, #7
 8004746:	2b04      	cmp	r3, #4
 8004748:	d00a      	beq.n	8004760 <vInitPrioGroupValue+0xb8>
        __asm volatile
 800474a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800474e:	f383 8811 	msr	BASEPRI, r3
 8004752:	f3bf 8f6f 	isb	sy
 8004756:	f3bf 8f4f 	dsb	sy
 800475a:	60bb      	str	r3, [r7, #8]
    }
 800475c:	bf00      	nop
 800475e:	e7fe      	b.n	800475e <vInitPrioGroupValue+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004760:	4b0f      	ldr	r3, [pc, #60]	; (80047a0 <vInitPrioGroupValue+0xf8>)
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	021b      	lsls	r3, r3, #8
 8004766:	4a0e      	ldr	r2, [pc, #56]	; (80047a0 <vInitPrioGroupValue+0xf8>)
 8004768:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800476a:	4b0d      	ldr	r3, [pc, #52]	; (80047a0 <vInitPrioGroupValue+0xf8>)
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004772:	4a0b      	ldr	r2, [pc, #44]	; (80047a0 <vInitPrioGroupValue+0xf8>)
 8004774:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	b2da      	uxtb	r2, r3
 800477a:	697b      	ldr	r3, [r7, #20]
 800477c:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */
}
 800477e:	bf00      	nop
 8004780:	371c      	adds	r7, #28
 8004782:	46bd      	mov	sp, r7
 8004784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004788:	4770      	bx	lr
 800478a:	bf00      	nop
 800478c:	e000ed00 	.word	0xe000ed00
 8004790:	410fc271 	.word	0x410fc271
 8004794:	410fc270 	.word	0x410fc270
 8004798:	e000e400 	.word	0xe000e400
 800479c:	2000023c 	.word	0x2000023c
 80047a0:	20000240 	.word	0x20000240

080047a4 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80047a4:	b480      	push	{r7}
 80047a6:	b083      	sub	sp, #12
 80047a8:	af00      	add	r7, sp, #0
        __asm volatile
 80047aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047ae:	f383 8811 	msr	BASEPRI, r3
 80047b2:	f3bf 8f6f 	isb	sy
 80047b6:	f3bf 8f4f 	dsb	sy
 80047ba:	607b      	str	r3, [r7, #4]
    }
 80047bc:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 80047be:	4b0f      	ldr	r3, [pc, #60]	; (80047fc <vPortEnterCritical+0x58>)
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	3301      	adds	r3, #1
 80047c4:	4a0d      	ldr	r2, [pc, #52]	; (80047fc <vPortEnterCritical+0x58>)
 80047c6:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 80047c8:	4b0c      	ldr	r3, [pc, #48]	; (80047fc <vPortEnterCritical+0x58>)
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	2b01      	cmp	r3, #1
 80047ce:	d10f      	bne.n	80047f0 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80047d0:	4b0b      	ldr	r3, [pc, #44]	; (8004800 <vPortEnterCritical+0x5c>)
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	b2db      	uxtb	r3, r3
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d00a      	beq.n	80047f0 <vPortEnterCritical+0x4c>
        __asm volatile
 80047da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047de:	f383 8811 	msr	BASEPRI, r3
 80047e2:	f3bf 8f6f 	isb	sy
 80047e6:	f3bf 8f4f 	dsb	sy
 80047ea:	603b      	str	r3, [r7, #0]
    }
 80047ec:	bf00      	nop
 80047ee:	e7fe      	b.n	80047ee <vPortEnterCritical+0x4a>
    }
}
 80047f0:	bf00      	nop
 80047f2:	370c      	adds	r7, #12
 80047f4:	46bd      	mov	sp, r7
 80047f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fa:	4770      	bx	lr
 80047fc:	20000010 	.word	0x20000010
 8004800:	e000ed04 	.word	0xe000ed04

08004804 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004804:	b480      	push	{r7}
 8004806:	b083      	sub	sp, #12
 8004808:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 800480a:	4b12      	ldr	r3, [pc, #72]	; (8004854 <vPortExitCritical+0x50>)
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	2b00      	cmp	r3, #0
 8004810:	d10a      	bne.n	8004828 <vPortExitCritical+0x24>
        __asm volatile
 8004812:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004816:	f383 8811 	msr	BASEPRI, r3
 800481a:	f3bf 8f6f 	isb	sy
 800481e:	f3bf 8f4f 	dsb	sy
 8004822:	607b      	str	r3, [r7, #4]
    }
 8004824:	bf00      	nop
 8004826:	e7fe      	b.n	8004826 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8004828:	4b0a      	ldr	r3, [pc, #40]	; (8004854 <vPortExitCritical+0x50>)
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	3b01      	subs	r3, #1
 800482e:	4a09      	ldr	r2, [pc, #36]	; (8004854 <vPortExitCritical+0x50>)
 8004830:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8004832:	4b08      	ldr	r3, [pc, #32]	; (8004854 <vPortExitCritical+0x50>)
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	2b00      	cmp	r3, #0
 8004838:	d105      	bne.n	8004846 <vPortExitCritical+0x42>
 800483a:	2300      	movs	r3, #0
 800483c:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 800483e:	683b      	ldr	r3, [r7, #0]
 8004840:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8004844:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8004846:	bf00      	nop
 8004848:	370c      	adds	r7, #12
 800484a:	46bd      	mov	sp, r7
 800484c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004850:	4770      	bx	lr
 8004852:	bf00      	nop
 8004854:	20000010 	.word	0x20000010
	...

08004860 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8004860:	f3ef 8009 	mrs	r0, PSP
 8004864:	f3bf 8f6f 	isb	sy
 8004868:	4b15      	ldr	r3, [pc, #84]	; (80048c0 <pxCurrentTCBConst>)
 800486a:	681a      	ldr	r2, [r3, #0]
 800486c:	f01e 0f10 	tst.w	lr, #16
 8004870:	bf08      	it	eq
 8004872:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004876:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800487a:	6010      	str	r0, [r2, #0]
 800487c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004880:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004884:	f380 8811 	msr	BASEPRI, r0
 8004888:	f3bf 8f4f 	dsb	sy
 800488c:	f3bf 8f6f 	isb	sy
 8004890:	f7fe ffd0 	bl	8003834 <vTaskSwitchContext>
 8004894:	f04f 0000 	mov.w	r0, #0
 8004898:	f380 8811 	msr	BASEPRI, r0
 800489c:	bc09      	pop	{r0, r3}
 800489e:	6819      	ldr	r1, [r3, #0]
 80048a0:	6808      	ldr	r0, [r1, #0]
 80048a2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80048a6:	f01e 0f10 	tst.w	lr, #16
 80048aa:	bf08      	it	eq
 80048ac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80048b0:	f380 8809 	msr	PSP, r0
 80048b4:	f3bf 8f6f 	isb	sy
 80048b8:	4770      	bx	lr
 80048ba:	bf00      	nop
 80048bc:	f3af 8000 	nop.w

080048c0 <pxCurrentTCBConst>:
 80048c0:	200000c0 	.word	0x200000c0
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 80048c4:	bf00      	nop
 80048c6:	bf00      	nop

080048c8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80048c8:	b580      	push	{r7, lr}
 80048ca:	b082      	sub	sp, #8
 80048cc:	af00      	add	r7, sp, #0
        __asm volatile
 80048ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048d2:	f383 8811 	msr	BASEPRI, r3
 80048d6:	f3bf 8f6f 	isb	sy
 80048da:	f3bf 8f4f 	dsb	sy
 80048de:	607b      	str	r3, [r7, #4]
    }
 80048e0:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 80048e2:	f001 fc5d 	bl	80061a0 <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 80048e6:	f7fe fe8b 	bl	8003600 <xTaskIncrementTick>
 80048ea:	4603      	mov	r3, r0
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d006      	beq.n	80048fe <SysTick_Handler+0x36>
        {
			traceISR_EXIT_TO_SCHEDULER();
 80048f0:	f001 fcb4 	bl	800625c <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80048f4:	4b08      	ldr	r3, [pc, #32]	; (8004918 <SysTick_Handler+0x50>)
 80048f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80048fa:	601a      	str	r2, [r3, #0]
 80048fc:	e001      	b.n	8004902 <SysTick_Handler+0x3a>
        }
		else
		{
			traceISR_EXIT();
 80048fe:	f001 fc91 	bl	8006224 <SEGGER_SYSVIEW_RecordExitISR>
 8004902:	2300      	movs	r3, #0
 8004904:	603b      	str	r3, [r7, #0]
        __asm volatile
 8004906:	683b      	ldr	r3, [r7, #0]
 8004908:	f383 8811 	msr	BASEPRI, r3
    }
 800490c:	bf00      	nop
		}
    }
    portENABLE_INTERRUPTS();
}
 800490e:	bf00      	nop
 8004910:	3708      	adds	r7, #8
 8004912:	46bd      	mov	sp, r7
 8004914:	bd80      	pop	{r7, pc}
 8004916:	bf00      	nop
 8004918:	e000ed04 	.word	0xe000ed04

0800491c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 800491c:	b480      	push	{r7}
 800491e:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004920:	4b0b      	ldr	r3, [pc, #44]	; (8004950 <vPortSetupTimerInterrupt+0x34>)
 8004922:	2200      	movs	r2, #0
 8004924:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004926:	4b0b      	ldr	r3, [pc, #44]	; (8004954 <vPortSetupTimerInterrupt+0x38>)
 8004928:	2200      	movs	r2, #0
 800492a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800492c:	4b0a      	ldr	r3, [pc, #40]	; (8004958 <vPortSetupTimerInterrupt+0x3c>)
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	4a0a      	ldr	r2, [pc, #40]	; (800495c <vPortSetupTimerInterrupt+0x40>)
 8004932:	fba2 2303 	umull	r2, r3, r2, r3
 8004936:	099b      	lsrs	r3, r3, #6
 8004938:	4a09      	ldr	r2, [pc, #36]	; (8004960 <vPortSetupTimerInterrupt+0x44>)
 800493a:	3b01      	subs	r3, #1
 800493c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800493e:	4b04      	ldr	r3, [pc, #16]	; (8004950 <vPortSetupTimerInterrupt+0x34>)
 8004940:	2207      	movs	r2, #7
 8004942:	601a      	str	r2, [r3, #0]
}
 8004944:	bf00      	nop
 8004946:	46bd      	mov	sp, r7
 8004948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800494c:	4770      	bx	lr
 800494e:	bf00      	nop
 8004950:	e000e010 	.word	0xe000e010
 8004954:	e000e018 	.word	0xe000e018
 8004958:	20000000 	.word	0x20000000
 800495c:	10624dd3 	.word	0x10624dd3
 8004960:	e000e014 	.word	0xe000e014

08004964 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8004964:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004974 <vPortEnableVFP+0x10>
 8004968:	6801      	ldr	r1, [r0, #0]
 800496a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800496e:	6001      	str	r1, [r0, #0]
 8004970:	4770      	bx	lr
 8004972:	0000      	.short	0x0000
 8004974:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8004978:	bf00      	nop
 800497a:	bf00      	nop

0800497c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 800497c:	b480      	push	{r7}
 800497e:	b085      	sub	sp, #20
 8004980:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8004982:	f3ef 8305 	mrs	r3, IPSR
 8004986:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	2b0f      	cmp	r3, #15
 800498c:	d914      	bls.n	80049b8 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800498e:	4a17      	ldr	r2, [pc, #92]	; (80049ec <vPortValidateInterruptPriority+0x70>)
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	4413      	add	r3, r2
 8004994:	781b      	ldrb	r3, [r3, #0]
 8004996:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004998:	4b15      	ldr	r3, [pc, #84]	; (80049f0 <vPortValidateInterruptPriority+0x74>)
 800499a:	781b      	ldrb	r3, [r3, #0]
 800499c:	7afa      	ldrb	r2, [r7, #11]
 800499e:	429a      	cmp	r2, r3
 80049a0:	d20a      	bcs.n	80049b8 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 80049a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049a6:	f383 8811 	msr	BASEPRI, r3
 80049aa:	f3bf 8f6f 	isb	sy
 80049ae:	f3bf 8f4f 	dsb	sy
 80049b2:	607b      	str	r3, [r7, #4]
    }
 80049b4:	bf00      	nop
 80049b6:	e7fe      	b.n	80049b6 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80049b8:	4b0e      	ldr	r3, [pc, #56]	; (80049f4 <vPortValidateInterruptPriority+0x78>)
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80049c0:	4b0d      	ldr	r3, [pc, #52]	; (80049f8 <vPortValidateInterruptPriority+0x7c>)
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	429a      	cmp	r2, r3
 80049c6:	d90a      	bls.n	80049de <vPortValidateInterruptPriority+0x62>
        __asm volatile
 80049c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049cc:	f383 8811 	msr	BASEPRI, r3
 80049d0:	f3bf 8f6f 	isb	sy
 80049d4:	f3bf 8f4f 	dsb	sy
 80049d8:	603b      	str	r3, [r7, #0]
    }
 80049da:	bf00      	nop
 80049dc:	e7fe      	b.n	80049dc <vPortValidateInterruptPriority+0x60>
    }
 80049de:	bf00      	nop
 80049e0:	3714      	adds	r7, #20
 80049e2:	46bd      	mov	sp, r7
 80049e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e8:	4770      	bx	lr
 80049ea:	bf00      	nop
 80049ec:	e000e3f0 	.word	0xe000e3f0
 80049f0:	2000023c 	.word	0x2000023c
 80049f4:	e000ed0c 	.word	0xe000ed0c
 80049f8:	20000240 	.word	0x20000240

080049fc <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 80049fc:	b580      	push	{r7, lr}
 80049fe:	b08a      	sub	sp, #40	; 0x28
 8004a00:	af00      	add	r7, sp, #0
 8004a02:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 8004a04:	2300      	movs	r3, #0
 8004a06:	61fb      	str	r3, [r7, #28]
    size_t xAdditionalRequiredSize;

    vTaskSuspendAll();
 8004a08:	f7fe fcca 	bl	80033a0 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8004a0c:	4b53      	ldr	r3, [pc, #332]	; (8004b5c <pvPortMalloc+0x160>)
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d101      	bne.n	8004a18 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8004a14:	f000 f908 	bl	8004c28 <prvHeapInit>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xWantedSize > 0 )
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d012      	beq.n	8004a44 <pvPortMalloc+0x48>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. Some
             * additional increment may also be needed for alignment. */
            xAdditionalRequiredSize = xHeapStructSize + portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 8004a1e:	2208      	movs	r2, #8
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	f003 0307 	and.w	r3, r3, #7
 8004a26:	1ad3      	subs	r3, r2, r3
 8004a28:	3308      	adds	r3, #8
 8004a2a:	61bb      	str	r3, [r7, #24]

            if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 8004a2c:	69bb      	ldr	r3, [r7, #24]
 8004a2e:	43db      	mvns	r3, r3
 8004a30:	687a      	ldr	r2, [r7, #4]
 8004a32:	429a      	cmp	r2, r3
 8004a34:	d804      	bhi.n	8004a40 <pvPortMalloc+0x44>
            {
                xWantedSize += xAdditionalRequiredSize;
 8004a36:	687a      	ldr	r2, [r7, #4]
 8004a38:	69bb      	ldr	r3, [r7, #24]
 8004a3a:	4413      	add	r3, r2
 8004a3c:	607b      	str	r3, [r7, #4]
 8004a3e:	e001      	b.n	8004a44 <pvPortMalloc+0x48>
            }
            else
            {
                xWantedSize = 0;
 8004a40:	2300      	movs	r3, #0
 8004a42:	607b      	str	r3, [r7, #4]

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	db70      	blt.n	8004b2c <pvPortMalloc+0x130>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d06d      	beq.n	8004b2c <pvPortMalloc+0x130>
 8004a50:	4b43      	ldr	r3, [pc, #268]	; (8004b60 <pvPortMalloc+0x164>)
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	687a      	ldr	r2, [r7, #4]
 8004a56:	429a      	cmp	r2, r3
 8004a58:	d868      	bhi.n	8004b2c <pvPortMalloc+0x130>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8004a5a:	4b42      	ldr	r3, [pc, #264]	; (8004b64 <pvPortMalloc+0x168>)
 8004a5c:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8004a5e:	4b41      	ldr	r3, [pc, #260]	; (8004b64 <pvPortMalloc+0x168>)
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004a64:	e004      	b.n	8004a70 <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
 8004a66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a68:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8004a6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004a70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a72:	685b      	ldr	r3, [r3, #4]
 8004a74:	687a      	ldr	r2, [r7, #4]
 8004a76:	429a      	cmp	r2, r3
 8004a78:	d903      	bls.n	8004a82 <pvPortMalloc+0x86>
 8004a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d1f1      	bne.n	8004a66 <pvPortMalloc+0x6a>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8004a82:	4b36      	ldr	r3, [pc, #216]	; (8004b5c <pvPortMalloc+0x160>)
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a88:	429a      	cmp	r2, r3
 8004a8a:	d04f      	beq.n	8004b2c <pvPortMalloc+0x130>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004a8c:	6a3b      	ldr	r3, [r7, #32]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	2208      	movs	r2, #8
 8004a92:	4413      	add	r3, r2
 8004a94:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004a96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a98:	681a      	ldr	r2, [r3, #0]
 8004a9a:	6a3b      	ldr	r3, [r7, #32]
 8004a9c:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004a9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aa0:	685a      	ldr	r2, [r3, #4]
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	1ad2      	subs	r2, r2, r3
 8004aa6:	2308      	movs	r3, #8
 8004aa8:	005b      	lsls	r3, r3, #1
 8004aaa:	429a      	cmp	r2, r3
 8004aac:	d91f      	bls.n	8004aee <pvPortMalloc+0xf2>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004aae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	4413      	add	r3, r2
 8004ab4:	617b      	str	r3, [r7, #20]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004ab6:	697b      	ldr	r3, [r7, #20]
 8004ab8:	f003 0307 	and.w	r3, r3, #7
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d00a      	beq.n	8004ad6 <pvPortMalloc+0xda>
        __asm volatile
 8004ac0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ac4:	f383 8811 	msr	BASEPRI, r3
 8004ac8:	f3bf 8f6f 	isb	sy
 8004acc:	f3bf 8f4f 	dsb	sy
 8004ad0:	613b      	str	r3, [r7, #16]
    }
 8004ad2:	bf00      	nop
 8004ad4:	e7fe      	b.n	8004ad4 <pvPortMalloc+0xd8>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004ad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ad8:	685a      	ldr	r2, [r3, #4]
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	1ad2      	subs	r2, r2, r3
 8004ade:	697b      	ldr	r3, [r7, #20]
 8004ae0:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8004ae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ae4:	687a      	ldr	r2, [r7, #4]
 8004ae6:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004ae8:	6978      	ldr	r0, [r7, #20]
 8004aea:	f000 f8f9 	bl	8004ce0 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004aee:	4b1c      	ldr	r3, [pc, #112]	; (8004b60 <pvPortMalloc+0x164>)
 8004af0:	681a      	ldr	r2, [r3, #0]
 8004af2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004af4:	685b      	ldr	r3, [r3, #4]
 8004af6:	1ad3      	subs	r3, r2, r3
 8004af8:	4a19      	ldr	r2, [pc, #100]	; (8004b60 <pvPortMalloc+0x164>)
 8004afa:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004afc:	4b18      	ldr	r3, [pc, #96]	; (8004b60 <pvPortMalloc+0x164>)
 8004afe:	681a      	ldr	r2, [r3, #0]
 8004b00:	4b19      	ldr	r3, [pc, #100]	; (8004b68 <pvPortMalloc+0x16c>)
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	429a      	cmp	r2, r3
 8004b06:	d203      	bcs.n	8004b10 <pvPortMalloc+0x114>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004b08:	4b15      	ldr	r3, [pc, #84]	; (8004b60 <pvPortMalloc+0x164>)
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	4a16      	ldr	r2, [pc, #88]	; (8004b68 <pvPortMalloc+0x16c>)
 8004b0e:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 8004b10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b12:	685b      	ldr	r3, [r3, #4]
 8004b14:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004b18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b1a:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8004b1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b1e:	2200      	movs	r2, #0
 8004b20:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8004b22:	4b12      	ldr	r3, [pc, #72]	; (8004b6c <pvPortMalloc+0x170>)
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	3301      	adds	r3, #1
 8004b28:	4a10      	ldr	r2, [pc, #64]	; (8004b6c <pvPortMalloc+0x170>)
 8004b2a:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8004b2c:	f7fe fc46 	bl	80033bc <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004b30:	69fb      	ldr	r3, [r7, #28]
 8004b32:	f003 0307 	and.w	r3, r3, #7
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d00a      	beq.n	8004b50 <pvPortMalloc+0x154>
        __asm volatile
 8004b3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b3e:	f383 8811 	msr	BASEPRI, r3
 8004b42:	f3bf 8f6f 	isb	sy
 8004b46:	f3bf 8f4f 	dsb	sy
 8004b4a:	60fb      	str	r3, [r7, #12]
    }
 8004b4c:	bf00      	nop
 8004b4e:	e7fe      	b.n	8004b4e <pvPortMalloc+0x152>
    return pvReturn;
 8004b50:	69fb      	ldr	r3, [r7, #28]
}
 8004b52:	4618      	mov	r0, r3
 8004b54:	3728      	adds	r7, #40	; 0x28
 8004b56:	46bd      	mov	sp, r7
 8004b58:	bd80      	pop	{r7, pc}
 8004b5a:	bf00      	nop
 8004b5c:	20003e4c 	.word	0x20003e4c
 8004b60:	20003e50 	.word	0x20003e50
 8004b64:	20003e44 	.word	0x20003e44
 8004b68:	20003e54 	.word	0x20003e54
 8004b6c:	20003e58 	.word	0x20003e58

08004b70 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8004b70:	b580      	push	{r7, lr}
 8004b72:	b086      	sub	sp, #24
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d049      	beq.n	8004c16 <vPortFree+0xa6>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8004b82:	2308      	movs	r3, #8
 8004b84:	425b      	negs	r3, r3
 8004b86:	697a      	ldr	r2, [r7, #20]
 8004b88:	4413      	add	r3, r2
 8004b8a:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8004b8c:	697b      	ldr	r3, [r7, #20]
 8004b8e:	613b      	str	r3, [r7, #16]

        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 8004b90:	693b      	ldr	r3, [r7, #16]
 8004b92:	685b      	ldr	r3, [r3, #4]
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	db0a      	blt.n	8004bae <vPortFree+0x3e>
        __asm volatile
 8004b98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b9c:	f383 8811 	msr	BASEPRI, r3
 8004ba0:	f3bf 8f6f 	isb	sy
 8004ba4:	f3bf 8f4f 	dsb	sy
 8004ba8:	60fb      	str	r3, [r7, #12]
    }
 8004baa:	bf00      	nop
 8004bac:	e7fe      	b.n	8004bac <vPortFree+0x3c>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004bae:	693b      	ldr	r3, [r7, #16]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d00a      	beq.n	8004bcc <vPortFree+0x5c>
        __asm volatile
 8004bb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bba:	f383 8811 	msr	BASEPRI, r3
 8004bbe:	f3bf 8f6f 	isb	sy
 8004bc2:	f3bf 8f4f 	dsb	sy
 8004bc6:	60bb      	str	r3, [r7, #8]
    }
 8004bc8:	bf00      	nop
 8004bca:	e7fe      	b.n	8004bca <vPortFree+0x5a>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 8004bcc:	693b      	ldr	r3, [r7, #16]
 8004bce:	685b      	ldr	r3, [r3, #4]
 8004bd0:	0fdb      	lsrs	r3, r3, #31
 8004bd2:	f003 0301 	and.w	r3, r3, #1
 8004bd6:	b2db      	uxtb	r3, r3
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d01c      	beq.n	8004c16 <vPortFree+0xa6>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8004bdc:	693b      	ldr	r3, [r7, #16]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d118      	bne.n	8004c16 <vPortFree+0xa6>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 8004be4:	693b      	ldr	r3, [r7, #16]
 8004be6:	685b      	ldr	r3, [r3, #4]
 8004be8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004bec:	693b      	ldr	r3, [r7, #16]
 8004bee:	605a      	str	r2, [r3, #4]
                {
                    ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                }
                #endif

                vTaskSuspendAll();
 8004bf0:	f7fe fbd6 	bl	80033a0 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8004bf4:	693b      	ldr	r3, [r7, #16]
 8004bf6:	685a      	ldr	r2, [r3, #4]
 8004bf8:	4b09      	ldr	r3, [pc, #36]	; (8004c20 <vPortFree+0xb0>)
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	4413      	add	r3, r2
 8004bfe:	4a08      	ldr	r2, [pc, #32]	; (8004c20 <vPortFree+0xb0>)
 8004c00:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004c02:	6938      	ldr	r0, [r7, #16]
 8004c04:	f000 f86c 	bl	8004ce0 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8004c08:	4b06      	ldr	r3, [pc, #24]	; (8004c24 <vPortFree+0xb4>)
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	3301      	adds	r3, #1
 8004c0e:	4a05      	ldr	r2, [pc, #20]	; (8004c24 <vPortFree+0xb4>)
 8004c10:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8004c12:	f7fe fbd3 	bl	80033bc <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8004c16:	bf00      	nop
 8004c18:	3718      	adds	r7, #24
 8004c1a:	46bd      	mov	sp, r7
 8004c1c:	bd80      	pop	{r7, pc}
 8004c1e:	bf00      	nop
 8004c20:	20003e50 	.word	0x20003e50
 8004c24:	20003e5c 	.word	0x20003e5c

08004c28 <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8004c28:	b480      	push	{r7}
 8004c2a:	b085      	sub	sp, #20
 8004c2c:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    portPOINTER_SIZE_TYPE uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004c2e:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8004c32:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 8004c34:	4b25      	ldr	r3, [pc, #148]	; (8004ccc <prvHeapInit+0xa4>)
 8004c36:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	f003 0307 	and.w	r3, r3, #7
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d00c      	beq.n	8004c5c <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	3307      	adds	r3, #7
 8004c46:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	f023 0307 	bic.w	r3, r3, #7
 8004c4e:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( portPOINTER_SIZE_TYPE ) ucHeap;
 8004c50:	68ba      	ldr	r2, [r7, #8]
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	1ad3      	subs	r3, r2, r3
 8004c56:	4a1d      	ldr	r2, [pc, #116]	; (8004ccc <prvHeapInit+0xa4>)
 8004c58:	4413      	add	r3, r2
 8004c5a:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004c60:	4a1b      	ldr	r2, [pc, #108]	; (8004cd0 <prvHeapInit+0xa8>)
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8004c66:	4b1a      	ldr	r3, [pc, #104]	; (8004cd0 <prvHeapInit+0xa8>)
 8004c68:	2200      	movs	r2, #0
 8004c6a:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( portPOINTER_SIZE_TYPE ) pucAlignedHeap ) + xTotalHeapSize;
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	68ba      	ldr	r2, [r7, #8]
 8004c70:	4413      	add	r3, r2
 8004c72:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8004c74:	2208      	movs	r2, #8
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	1a9b      	subs	r3, r3, r2
 8004c7a:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	f023 0307 	bic.w	r3, r3, #7
 8004c82:	60fb      	str	r3, [r7, #12]
    pxEnd = ( BlockLink_t * ) uxAddress;
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	4a13      	ldr	r2, [pc, #76]	; (8004cd4 <prvHeapInit+0xac>)
 8004c88:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8004c8a:	4b12      	ldr	r3, [pc, #72]	; (8004cd4 <prvHeapInit+0xac>)
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	2200      	movs	r2, #0
 8004c90:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8004c92:	4b10      	ldr	r3, [pc, #64]	; (8004cd4 <prvHeapInit+0xac>)
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	2200      	movs	r2, #0
 8004c98:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) pucAlignedHeap;
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 8004c9e:	683b      	ldr	r3, [r7, #0]
 8004ca0:	68fa      	ldr	r2, [r7, #12]
 8004ca2:	1ad2      	subs	r2, r2, r3
 8004ca4:	683b      	ldr	r3, [r7, #0]
 8004ca6:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004ca8:	4b0a      	ldr	r3, [pc, #40]	; (8004cd4 <prvHeapInit+0xac>)
 8004caa:	681a      	ldr	r2, [r3, #0]
 8004cac:	683b      	ldr	r3, [r7, #0]
 8004cae:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004cb0:	683b      	ldr	r3, [r7, #0]
 8004cb2:	685b      	ldr	r3, [r3, #4]
 8004cb4:	4a08      	ldr	r2, [pc, #32]	; (8004cd8 <prvHeapInit+0xb0>)
 8004cb6:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004cb8:	683b      	ldr	r3, [r7, #0]
 8004cba:	685b      	ldr	r3, [r3, #4]
 8004cbc:	4a07      	ldr	r2, [pc, #28]	; (8004cdc <prvHeapInit+0xb4>)
 8004cbe:	6013      	str	r3, [r2, #0]
}
 8004cc0:	bf00      	nop
 8004cc2:	3714      	adds	r7, #20
 8004cc4:	46bd      	mov	sp, r7
 8004cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cca:	4770      	bx	lr
 8004ccc:	20000244 	.word	0x20000244
 8004cd0:	20003e44 	.word	0x20003e44
 8004cd4:	20003e4c 	.word	0x20003e4c
 8004cd8:	20003e54 	.word	0x20003e54
 8004cdc:	20003e50 	.word	0x20003e50

08004ce0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8004ce0:	b480      	push	{r7}
 8004ce2:	b085      	sub	sp, #20
 8004ce4:	af00      	add	r7, sp, #0
 8004ce6:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004ce8:	4b28      	ldr	r3, [pc, #160]	; (8004d8c <prvInsertBlockIntoFreeList+0xac>)
 8004cea:	60fb      	str	r3, [r7, #12]
 8004cec:	e002      	b.n	8004cf4 <prvInsertBlockIntoFreeList+0x14>
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	60fb      	str	r3, [r7, #12]
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	687a      	ldr	r2, [r7, #4]
 8004cfa:	429a      	cmp	r2, r3
 8004cfc:	d8f7      	bhi.n	8004cee <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	685b      	ldr	r3, [r3, #4]
 8004d06:	68ba      	ldr	r2, [r7, #8]
 8004d08:	4413      	add	r3, r2
 8004d0a:	687a      	ldr	r2, [r7, #4]
 8004d0c:	429a      	cmp	r2, r3
 8004d0e:	d108      	bne.n	8004d22 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	685a      	ldr	r2, [r3, #4]
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	685b      	ldr	r3, [r3, #4]
 8004d18:	441a      	add	r2, r3
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	685b      	ldr	r3, [r3, #4]
 8004d2a:	68ba      	ldr	r2, [r7, #8]
 8004d2c:	441a      	add	r2, r3
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	429a      	cmp	r2, r3
 8004d34:	d118      	bne.n	8004d68 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	681a      	ldr	r2, [r3, #0]
 8004d3a:	4b15      	ldr	r3, [pc, #84]	; (8004d90 <prvInsertBlockIntoFreeList+0xb0>)
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	429a      	cmp	r2, r3
 8004d40:	d00d      	beq.n	8004d5e <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	685a      	ldr	r2, [r3, #4]
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	685b      	ldr	r3, [r3, #4]
 8004d4c:	441a      	add	r2, r3
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	681a      	ldr	r2, [r3, #0]
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	601a      	str	r2, [r3, #0]
 8004d5c:	e008      	b.n	8004d70 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004d5e:	4b0c      	ldr	r3, [pc, #48]	; (8004d90 <prvInsertBlockIntoFreeList+0xb0>)
 8004d60:	681a      	ldr	r2, [r3, #0]
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	601a      	str	r2, [r3, #0]
 8004d66:	e003      	b.n	8004d70 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	681a      	ldr	r2, [r3, #0]
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8004d70:	68fa      	ldr	r2, [r7, #12]
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	429a      	cmp	r2, r3
 8004d76:	d002      	beq.n	8004d7e <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	687a      	ldr	r2, [r7, #4]
 8004d7c:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8004d7e:	bf00      	nop
 8004d80:	3714      	adds	r7, #20
 8004d82:	46bd      	mov	sp, r7
 8004d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d88:	4770      	bx	lr
 8004d8a:	bf00      	nop
 8004d8c:	20003e44 	.word	0x20003e44
 8004d90:	20003e4c 	.word	0x20003e4c

08004d94 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8004d94:	b580      	push	{r7, lr}
 8004d96:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 8004d98:	4803      	ldr	r0, [pc, #12]	; (8004da8 <_cbSendSystemDesc+0x14>)
 8004d9a:	f001 f9ab 	bl	80060f4 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 8004d9e:	4803      	ldr	r0, [pc, #12]	; (8004dac <_cbSendSystemDesc+0x18>)
 8004da0:	f001 f9a8 	bl	80060f4 <SEGGER_SYSVIEW_SendSysDesc>
}
 8004da4:	bf00      	nop
 8004da6:	bd80      	pop	{r7, pc}
 8004da8:	0800680c 	.word	0x0800680c
 8004dac:	08006848 	.word	0x08006848

08004db0 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8004db0:	b580      	push	{r7, lr}
 8004db2:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8004db4:	4b06      	ldr	r3, [pc, #24]	; (8004dd0 <SEGGER_SYSVIEW_Conf+0x20>)
 8004db6:	6818      	ldr	r0, [r3, #0]
 8004db8:	4b05      	ldr	r3, [pc, #20]	; (8004dd0 <SEGGER_SYSVIEW_Conf+0x20>)
 8004dba:	6819      	ldr	r1, [r3, #0]
 8004dbc:	4b05      	ldr	r3, [pc, #20]	; (8004dd4 <SEGGER_SYSVIEW_Conf+0x24>)
 8004dbe:	4a06      	ldr	r2, [pc, #24]	; (8004dd8 <SEGGER_SYSVIEW_Conf+0x28>)
 8004dc0:	f000 fd16 	bl	80057f0 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8004dc4:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8004dc8:	f000 fd56 	bl	8005878 <SEGGER_SYSVIEW_SetRAMBase>
}
 8004dcc:	bf00      	nop
 8004dce:	bd80      	pop	{r7, pc}
 8004dd0:	20000000 	.word	0x20000000
 8004dd4:	08004d95 	.word	0x08004d95
 8004dd8:	08006908 	.word	0x08006908

08004ddc <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 8004ddc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004dde:	b085      	sub	sp, #20
 8004de0:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 8004de2:	2300      	movs	r3, #0
 8004de4:	607b      	str	r3, [r7, #4]
 8004de6:	e033      	b.n	8004e50 <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 8004de8:	491e      	ldr	r1, [pc, #120]	; (8004e64 <_cbSendTaskList+0x88>)
 8004dea:	687a      	ldr	r2, [r7, #4]
 8004dec:	4613      	mov	r3, r2
 8004dee:	009b      	lsls	r3, r3, #2
 8004df0:	4413      	add	r3, r2
 8004df2:	009b      	lsls	r3, r3, #2
 8004df4:	440b      	add	r3, r1
 8004df6:	6818      	ldr	r0, [r3, #0]
 8004df8:	491a      	ldr	r1, [pc, #104]	; (8004e64 <_cbSendTaskList+0x88>)
 8004dfa:	687a      	ldr	r2, [r7, #4]
 8004dfc:	4613      	mov	r3, r2
 8004dfe:	009b      	lsls	r3, r3, #2
 8004e00:	4413      	add	r3, r2
 8004e02:	009b      	lsls	r3, r3, #2
 8004e04:	440b      	add	r3, r1
 8004e06:	3304      	adds	r3, #4
 8004e08:	6819      	ldr	r1, [r3, #0]
 8004e0a:	4c16      	ldr	r4, [pc, #88]	; (8004e64 <_cbSendTaskList+0x88>)
 8004e0c:	687a      	ldr	r2, [r7, #4]
 8004e0e:	4613      	mov	r3, r2
 8004e10:	009b      	lsls	r3, r3, #2
 8004e12:	4413      	add	r3, r2
 8004e14:	009b      	lsls	r3, r3, #2
 8004e16:	4423      	add	r3, r4
 8004e18:	3308      	adds	r3, #8
 8004e1a:	681c      	ldr	r4, [r3, #0]
 8004e1c:	4d11      	ldr	r5, [pc, #68]	; (8004e64 <_cbSendTaskList+0x88>)
 8004e1e:	687a      	ldr	r2, [r7, #4]
 8004e20:	4613      	mov	r3, r2
 8004e22:	009b      	lsls	r3, r3, #2
 8004e24:	4413      	add	r3, r2
 8004e26:	009b      	lsls	r3, r3, #2
 8004e28:	442b      	add	r3, r5
 8004e2a:	330c      	adds	r3, #12
 8004e2c:	681d      	ldr	r5, [r3, #0]
 8004e2e:	4e0d      	ldr	r6, [pc, #52]	; (8004e64 <_cbSendTaskList+0x88>)
 8004e30:	687a      	ldr	r2, [r7, #4]
 8004e32:	4613      	mov	r3, r2
 8004e34:	009b      	lsls	r3, r3, #2
 8004e36:	4413      	add	r3, r2
 8004e38:	009b      	lsls	r3, r3, #2
 8004e3a:	4433      	add	r3, r6
 8004e3c:	3310      	adds	r3, #16
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	9300      	str	r3, [sp, #0]
 8004e42:	462b      	mov	r3, r5
 8004e44:	4622      	mov	r2, r4
 8004e46:	f000 f8bd 	bl	8004fc4 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	3301      	adds	r3, #1
 8004e4e:	607b      	str	r3, [r7, #4]
 8004e50:	4b05      	ldr	r3, [pc, #20]	; (8004e68 <_cbSendTaskList+0x8c>)
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	687a      	ldr	r2, [r7, #4]
 8004e56:	429a      	cmp	r2, r3
 8004e58:	d3c6      	bcc.n	8004de8 <_cbSendTaskList+0xc>
  }
}
 8004e5a:	bf00      	nop
 8004e5c:	bf00      	nop
 8004e5e:	370c      	adds	r7, #12
 8004e60:	46bd      	mov	sp, r7
 8004e62:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004e64:	20003e60 	.word	0x20003e60
 8004e68:	20003f00 	.word	0x20003f00

08004e6c <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8004e6c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004e70:	b082      	sub	sp, #8
 8004e72:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8004e74:	f7fe fbb2 	bl	80035dc <xTaskGetTickCountFromISR>
 8004e78:	4603      	mov	r3, r0
 8004e7a:	2200      	movs	r2, #0
 8004e7c:	469a      	mov	sl, r3
 8004e7e:	4693      	mov	fp, r2
 8004e80:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8004e84:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004e88:	4602      	mov	r2, r0
 8004e8a:	460b      	mov	r3, r1
 8004e8c:	f04f 0a00 	mov.w	sl, #0
 8004e90:	f04f 0b00 	mov.w	fp, #0
 8004e94:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 8004e98:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 8004e9c:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 8004ea0:	4652      	mov	r2, sl
 8004ea2:	465b      	mov	r3, fp
 8004ea4:	1a14      	subs	r4, r2, r0
 8004ea6:	eb63 0501 	sbc.w	r5, r3, r1
 8004eaa:	f04f 0200 	mov.w	r2, #0
 8004eae:	f04f 0300 	mov.w	r3, #0
 8004eb2:	00ab      	lsls	r3, r5, #2
 8004eb4:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 8004eb8:	00a2      	lsls	r2, r4, #2
 8004eba:	4614      	mov	r4, r2
 8004ebc:	461d      	mov	r5, r3
 8004ebe:	eb14 0800 	adds.w	r8, r4, r0
 8004ec2:	eb45 0901 	adc.w	r9, r5, r1
 8004ec6:	f04f 0200 	mov.w	r2, #0
 8004eca:	f04f 0300 	mov.w	r3, #0
 8004ece:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004ed2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004ed6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004eda:	4690      	mov	r8, r2
 8004edc:	4699      	mov	r9, r3
 8004ede:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 8004ee2:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 8004ee6:	4610      	mov	r0, r2
 8004ee8:	4619      	mov	r1, r3
 8004eea:	3708      	adds	r7, #8
 8004eec:	46bd      	mov	sp, r7
 8004eee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08004ef4 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8004ef4:	b580      	push	{r7, lr}
 8004ef6:	b086      	sub	sp, #24
 8004ef8:	af02      	add	r7, sp, #8
 8004efa:	60f8      	str	r0, [r7, #12]
 8004efc:	60b9      	str	r1, [r7, #8]
 8004efe:	607a      	str	r2, [r7, #4]
 8004f00:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8004f02:	2205      	movs	r2, #5
 8004f04:	492b      	ldr	r1, [pc, #172]	; (8004fb4 <SYSVIEW_AddTask+0xc0>)
 8004f06:	68b8      	ldr	r0, [r7, #8]
 8004f08:	f001 fbee 	bl	80066e8 <memcmp>
 8004f0c:	4603      	mov	r3, r0
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d04b      	beq.n	8004faa <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8004f12:	4b29      	ldr	r3, [pc, #164]	; (8004fb8 <SYSVIEW_AddTask+0xc4>)
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	2b07      	cmp	r3, #7
 8004f18:	d903      	bls.n	8004f22 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 8004f1a:	4828      	ldr	r0, [pc, #160]	; (8004fbc <SYSVIEW_AddTask+0xc8>)
 8004f1c:	f001 fb88 	bl	8006630 <SEGGER_SYSVIEW_Warn>
    return;
 8004f20:	e044      	b.n	8004fac <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8004f22:	4b25      	ldr	r3, [pc, #148]	; (8004fb8 <SYSVIEW_AddTask+0xc4>)
 8004f24:	681a      	ldr	r2, [r3, #0]
 8004f26:	4926      	ldr	r1, [pc, #152]	; (8004fc0 <SYSVIEW_AddTask+0xcc>)
 8004f28:	4613      	mov	r3, r2
 8004f2a:	009b      	lsls	r3, r3, #2
 8004f2c:	4413      	add	r3, r2
 8004f2e:	009b      	lsls	r3, r3, #2
 8004f30:	440b      	add	r3, r1
 8004f32:	68fa      	ldr	r2, [r7, #12]
 8004f34:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 8004f36:	4b20      	ldr	r3, [pc, #128]	; (8004fb8 <SYSVIEW_AddTask+0xc4>)
 8004f38:	681a      	ldr	r2, [r3, #0]
 8004f3a:	4921      	ldr	r1, [pc, #132]	; (8004fc0 <SYSVIEW_AddTask+0xcc>)
 8004f3c:	4613      	mov	r3, r2
 8004f3e:	009b      	lsls	r3, r3, #2
 8004f40:	4413      	add	r3, r2
 8004f42:	009b      	lsls	r3, r3, #2
 8004f44:	440b      	add	r3, r1
 8004f46:	3304      	adds	r3, #4
 8004f48:	68ba      	ldr	r2, [r7, #8]
 8004f4a:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8004f4c:	4b1a      	ldr	r3, [pc, #104]	; (8004fb8 <SYSVIEW_AddTask+0xc4>)
 8004f4e:	681a      	ldr	r2, [r3, #0]
 8004f50:	491b      	ldr	r1, [pc, #108]	; (8004fc0 <SYSVIEW_AddTask+0xcc>)
 8004f52:	4613      	mov	r3, r2
 8004f54:	009b      	lsls	r3, r3, #2
 8004f56:	4413      	add	r3, r2
 8004f58:	009b      	lsls	r3, r3, #2
 8004f5a:	440b      	add	r3, r1
 8004f5c:	3308      	adds	r3, #8
 8004f5e:	687a      	ldr	r2, [r7, #4]
 8004f60:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8004f62:	4b15      	ldr	r3, [pc, #84]	; (8004fb8 <SYSVIEW_AddTask+0xc4>)
 8004f64:	681a      	ldr	r2, [r3, #0]
 8004f66:	4916      	ldr	r1, [pc, #88]	; (8004fc0 <SYSVIEW_AddTask+0xcc>)
 8004f68:	4613      	mov	r3, r2
 8004f6a:	009b      	lsls	r3, r3, #2
 8004f6c:	4413      	add	r3, r2
 8004f6e:	009b      	lsls	r3, r3, #2
 8004f70:	440b      	add	r3, r1
 8004f72:	330c      	adds	r3, #12
 8004f74:	683a      	ldr	r2, [r7, #0]
 8004f76:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 8004f78:	4b0f      	ldr	r3, [pc, #60]	; (8004fb8 <SYSVIEW_AddTask+0xc4>)
 8004f7a:	681a      	ldr	r2, [r3, #0]
 8004f7c:	4910      	ldr	r1, [pc, #64]	; (8004fc0 <SYSVIEW_AddTask+0xcc>)
 8004f7e:	4613      	mov	r3, r2
 8004f80:	009b      	lsls	r3, r3, #2
 8004f82:	4413      	add	r3, r2
 8004f84:	009b      	lsls	r3, r3, #2
 8004f86:	440b      	add	r3, r1
 8004f88:	3310      	adds	r3, #16
 8004f8a:	69ba      	ldr	r2, [r7, #24]
 8004f8c:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 8004f8e:	4b0a      	ldr	r3, [pc, #40]	; (8004fb8 <SYSVIEW_AddTask+0xc4>)
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	3301      	adds	r3, #1
 8004f94:	4a08      	ldr	r2, [pc, #32]	; (8004fb8 <SYSVIEW_AddTask+0xc4>)
 8004f96:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 8004f98:	69bb      	ldr	r3, [r7, #24]
 8004f9a:	9300      	str	r3, [sp, #0]
 8004f9c:	683b      	ldr	r3, [r7, #0]
 8004f9e:	687a      	ldr	r2, [r7, #4]
 8004fa0:	68b9      	ldr	r1, [r7, #8]
 8004fa2:	68f8      	ldr	r0, [r7, #12]
 8004fa4:	f000 f80e 	bl	8004fc4 <SYSVIEW_SendTaskInfo>
 8004fa8:	e000      	b.n	8004fac <SYSVIEW_AddTask+0xb8>
    return;
 8004faa:	bf00      	nop

}
 8004fac:	3710      	adds	r7, #16
 8004fae:	46bd      	mov	sp, r7
 8004fb0:	bd80      	pop	{r7, pc}
 8004fb2:	bf00      	nop
 8004fb4:	08006858 	.word	0x08006858
 8004fb8:	20003f00 	.word	0x20003f00
 8004fbc:	08006860 	.word	0x08006860
 8004fc0:	20003e60 	.word	0x20003e60

08004fc4 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8004fc4:	b580      	push	{r7, lr}
 8004fc6:	b08a      	sub	sp, #40	; 0x28
 8004fc8:	af00      	add	r7, sp, #0
 8004fca:	60f8      	str	r0, [r7, #12]
 8004fcc:	60b9      	str	r1, [r7, #8]
 8004fce:	607a      	str	r2, [r7, #4]
 8004fd0:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8004fd2:	f107 0314 	add.w	r3, r7, #20
 8004fd6:	2214      	movs	r2, #20
 8004fd8:	2100      	movs	r1, #0
 8004fda:	4618      	mov	r0, r3
 8004fdc:	f001 fb94 	bl	8006708 <memset>
  TaskInfo.TaskID     = TaskID;
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 8004fe4:	68bb      	ldr	r3, [r7, #8]
 8004fe6:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 8004fec:	683b      	ldr	r3, [r7, #0]
 8004fee:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8004ff0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ff2:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8004ff4:	f107 0314 	add.w	r3, r7, #20
 8004ff8:	4618      	mov	r0, r3
 8004ffa:	f000 ff83 	bl	8005f04 <SEGGER_SYSVIEW_SendTaskInfo>
}
 8004ffe:	bf00      	nop
 8005000:	3728      	adds	r7, #40	; 0x28
 8005002:	46bd      	mov	sp, r7
 8005004:	bd80      	pop	{r7, pc}
	...

08005008 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 8005008:	b480      	push	{r7}
 800500a:	b083      	sub	sp, #12
 800500c:	af00      	add	r7, sp, #0
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 800500e:	4b24      	ldr	r3, [pc, #144]	; (80050a0 <_DoInit+0x98>)
 8005010:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	2203      	movs	r2, #3
 8005016:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	2203      	movs	r2, #3
 800501c:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	4a20      	ldr	r2, [pc, #128]	; (80050a4 <_DoInit+0x9c>)
 8005022:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	4a20      	ldr	r2, [pc, #128]	; (80050a8 <_DoInit+0xa0>)
 8005028:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005030:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	2200      	movs	r2, #0
 8005036:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	2200      	movs	r2, #0
 800503c:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	2200      	movs	r2, #0
 8005042:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	4a17      	ldr	r2, [pc, #92]	; (80050a4 <_DoInit+0x9c>)
 8005048:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	4a17      	ldr	r2, [pc, #92]	; (80050ac <_DoInit+0xa4>)
 800504e:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	2210      	movs	r2, #16
 8005054:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	2200      	movs	r2, #0
 800505a:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	2200      	movs	r2, #0
 8005060:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	2200      	movs	r2, #0
 8005066:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	3307      	adds	r3, #7
 800506c:	4a10      	ldr	r2, [pc, #64]	; (80050b0 <_DoInit+0xa8>)
 800506e:	6810      	ldr	r0, [r2, #0]
 8005070:	6018      	str	r0, [r3, #0]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8005072:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	4a0e      	ldr	r2, [pc, #56]	; (80050b4 <_DoInit+0xac>)
 800507a:	6810      	ldr	r0, [r2, #0]
 800507c:	6018      	str	r0, [r3, #0]
 800507e:	8891      	ldrh	r1, [r2, #4]
 8005080:	7992      	ldrb	r2, [r2, #6]
 8005082:	8099      	strh	r1, [r3, #4]
 8005084:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8005086:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	2220      	movs	r2, #32
 800508e:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8005090:	f3bf 8f5f 	dmb	sy
}
 8005094:	bf00      	nop
 8005096:	370c      	adds	r7, #12
 8005098:	46bd      	mov	sp, r7
 800509a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800509e:	4770      	bx	lr
 80050a0:	20003f04 	.word	0x20003f04
 80050a4:	080068b0 	.word	0x080068b0
 80050a8:	20003fac 	.word	0x20003fac
 80050ac:	200043ac 	.word	0x200043ac
 80050b0:	080068bc 	.word	0x080068bc
 80050b4:	080068c0 	.word	0x080068c0

080050b8 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 80050b8:	b580      	push	{r7, lr}
 80050ba:	b08c      	sub	sp, #48	; 0x30
 80050bc:	af00      	add	r7, sp, #0
 80050be:	60f8      	str	r0, [r7, #12]
 80050c0:	60b9      	str	r1, [r7, #8]
 80050c2:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 80050c4:	4b3e      	ldr	r3, [pc, #248]	; (80051c0 <SEGGER_RTT_ReadNoLock+0x108>)
 80050c6:	623b      	str	r3, [r7, #32]
 80050c8:	6a3b      	ldr	r3, [r7, #32]
 80050ca:	781b      	ldrb	r3, [r3, #0]
 80050cc:	b2db      	uxtb	r3, r3
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d101      	bne.n	80050d6 <SEGGER_RTT_ReadNoLock+0x1e>
 80050d2:	f7ff ff99 	bl	8005008 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80050d6:	68fa      	ldr	r2, [r7, #12]
 80050d8:	4613      	mov	r3, r2
 80050da:	005b      	lsls	r3, r3, #1
 80050dc:	4413      	add	r3, r2
 80050de:	00db      	lsls	r3, r3, #3
 80050e0:	3360      	adds	r3, #96	; 0x60
 80050e2:	4a37      	ldr	r2, [pc, #220]	; (80051c0 <SEGGER_RTT_ReadNoLock+0x108>)
 80050e4:	4413      	add	r3, r2
 80050e6:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 80050e8:	68bb      	ldr	r3, [r7, #8]
 80050ea:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 80050ec:	69fb      	ldr	r3, [r7, #28]
 80050ee:	691b      	ldr	r3, [r3, #16]
 80050f0:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 80050f2:	69fb      	ldr	r3, [r7, #28]
 80050f4:	68db      	ldr	r3, [r3, #12]
 80050f6:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 80050f8:	2300      	movs	r3, #0
 80050fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 80050fc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80050fe:	69bb      	ldr	r3, [r7, #24]
 8005100:	429a      	cmp	r2, r3
 8005102:	d92b      	bls.n	800515c <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8005104:	69fb      	ldr	r3, [r7, #28]
 8005106:	689a      	ldr	r2, [r3, #8]
 8005108:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800510a:	1ad3      	subs	r3, r2, r3
 800510c:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 800510e:	697a      	ldr	r2, [r7, #20]
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	4293      	cmp	r3, r2
 8005114:	bf28      	it	cs
 8005116:	4613      	movcs	r3, r2
 8005118:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800511a:	69fb      	ldr	r3, [r7, #28]
 800511c:	685a      	ldr	r2, [r3, #4]
 800511e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005120:	4413      	add	r3, r2
 8005122:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8005124:	697a      	ldr	r2, [r7, #20]
 8005126:	6939      	ldr	r1, [r7, #16]
 8005128:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800512a:	f001 fb19 	bl	8006760 <memcpy>
    NumBytesRead += NumBytesRem;
 800512e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005130:	697b      	ldr	r3, [r7, #20]
 8005132:	4413      	add	r3, r2
 8005134:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8005136:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005138:	697b      	ldr	r3, [r7, #20]
 800513a:	4413      	add	r3, r2
 800513c:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 800513e:	687a      	ldr	r2, [r7, #4]
 8005140:	697b      	ldr	r3, [r7, #20]
 8005142:	1ad3      	subs	r3, r2, r3
 8005144:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8005146:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005148:	697b      	ldr	r3, [r7, #20]
 800514a:	4413      	add	r3, r2
 800514c:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 800514e:	69fb      	ldr	r3, [r7, #28]
 8005150:	689b      	ldr	r3, [r3, #8]
 8005152:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005154:	429a      	cmp	r2, r3
 8005156:	d101      	bne.n	800515c <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 8005158:	2300      	movs	r3, #0
 800515a:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 800515c:	69ba      	ldr	r2, [r7, #24]
 800515e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005160:	1ad3      	subs	r3, r2, r3
 8005162:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8005164:	697a      	ldr	r2, [r7, #20]
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	4293      	cmp	r3, r2
 800516a:	bf28      	it	cs
 800516c:	4613      	movcs	r3, r2
 800516e:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8005170:	697b      	ldr	r3, [r7, #20]
 8005172:	2b00      	cmp	r3, #0
 8005174:	d019      	beq.n	80051aa <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8005176:	69fb      	ldr	r3, [r7, #28]
 8005178:	685a      	ldr	r2, [r3, #4]
 800517a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800517c:	4413      	add	r3, r2
 800517e:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8005180:	697a      	ldr	r2, [r7, #20]
 8005182:	6939      	ldr	r1, [r7, #16]
 8005184:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005186:	f001 faeb 	bl	8006760 <memcpy>
    NumBytesRead += NumBytesRem;
 800518a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800518c:	697b      	ldr	r3, [r7, #20]
 800518e:	4413      	add	r3, r2
 8005190:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8005192:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005194:	697b      	ldr	r3, [r7, #20]
 8005196:	4413      	add	r3, r2
 8005198:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 800519a:	687a      	ldr	r2, [r7, #4]
 800519c:	697b      	ldr	r3, [r7, #20]
 800519e:	1ad3      	subs	r3, r2, r3
 80051a0:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 80051a2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80051a4:	697b      	ldr	r3, [r7, #20]
 80051a6:	4413      	add	r3, r2
 80051a8:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 80051aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d002      	beq.n	80051b6 <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 80051b0:	69fb      	ldr	r3, [r7, #28]
 80051b2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80051b4:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 80051b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80051b8:	4618      	mov	r0, r3
 80051ba:	3730      	adds	r7, #48	; 0x30
 80051bc:	46bd      	mov	sp, r7
 80051be:	bd80      	pop	{r7, pc}
 80051c0:	20003f04 	.word	0x20003f04

080051c4 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 80051c4:	b580      	push	{r7, lr}
 80051c6:	b088      	sub	sp, #32
 80051c8:	af00      	add	r7, sp, #0
 80051ca:	60f8      	str	r0, [r7, #12]
 80051cc:	60b9      	str	r1, [r7, #8]
 80051ce:	607a      	str	r2, [r7, #4]
 80051d0:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 80051d2:	4b3d      	ldr	r3, [pc, #244]	; (80052c8 <SEGGER_RTT_AllocUpBuffer+0x104>)
 80051d4:	61bb      	str	r3, [r7, #24]
 80051d6:	69bb      	ldr	r3, [r7, #24]
 80051d8:	781b      	ldrb	r3, [r3, #0]
 80051da:	b2db      	uxtb	r3, r3
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d101      	bne.n	80051e4 <SEGGER_RTT_AllocUpBuffer+0x20>
 80051e0:	f7ff ff12 	bl	8005008 <_DoInit>
  SEGGER_RTT_LOCK();
 80051e4:	f3ef 8311 	mrs	r3, BASEPRI
 80051e8:	f04f 0120 	mov.w	r1, #32
 80051ec:	f381 8811 	msr	BASEPRI, r1
 80051f0:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80051f2:	4b35      	ldr	r3, [pc, #212]	; (80052c8 <SEGGER_RTT_AllocUpBuffer+0x104>)
 80051f4:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 80051f6:	2300      	movs	r3, #0
 80051f8:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 80051fa:	6939      	ldr	r1, [r7, #16]
 80051fc:	69fb      	ldr	r3, [r7, #28]
 80051fe:	1c5a      	adds	r2, r3, #1
 8005200:	4613      	mov	r3, r2
 8005202:	005b      	lsls	r3, r3, #1
 8005204:	4413      	add	r3, r2
 8005206:	00db      	lsls	r3, r3, #3
 8005208:	440b      	add	r3, r1
 800520a:	3304      	adds	r3, #4
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	2b00      	cmp	r3, #0
 8005210:	d008      	beq.n	8005224 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 8005212:	69fb      	ldr	r3, [r7, #28]
 8005214:	3301      	adds	r3, #1
 8005216:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 8005218:	693b      	ldr	r3, [r7, #16]
 800521a:	691b      	ldr	r3, [r3, #16]
 800521c:	69fa      	ldr	r2, [r7, #28]
 800521e:	429a      	cmp	r2, r3
 8005220:	dbeb      	blt.n	80051fa <SEGGER_RTT_AllocUpBuffer+0x36>
 8005222:	e000      	b.n	8005226 <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 8005224:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 8005226:	693b      	ldr	r3, [r7, #16]
 8005228:	691b      	ldr	r3, [r3, #16]
 800522a:	69fa      	ldr	r2, [r7, #28]
 800522c:	429a      	cmp	r2, r3
 800522e:	da3f      	bge.n	80052b0 <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 8005230:	6939      	ldr	r1, [r7, #16]
 8005232:	69fb      	ldr	r3, [r7, #28]
 8005234:	1c5a      	adds	r2, r3, #1
 8005236:	4613      	mov	r3, r2
 8005238:	005b      	lsls	r3, r3, #1
 800523a:	4413      	add	r3, r2
 800523c:	00db      	lsls	r3, r3, #3
 800523e:	440b      	add	r3, r1
 8005240:	68fa      	ldr	r2, [r7, #12]
 8005242:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8005244:	6939      	ldr	r1, [r7, #16]
 8005246:	69fb      	ldr	r3, [r7, #28]
 8005248:	1c5a      	adds	r2, r3, #1
 800524a:	4613      	mov	r3, r2
 800524c:	005b      	lsls	r3, r3, #1
 800524e:	4413      	add	r3, r2
 8005250:	00db      	lsls	r3, r3, #3
 8005252:	440b      	add	r3, r1
 8005254:	3304      	adds	r3, #4
 8005256:	68ba      	ldr	r2, [r7, #8]
 8005258:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 800525a:	6939      	ldr	r1, [r7, #16]
 800525c:	69fa      	ldr	r2, [r7, #28]
 800525e:	4613      	mov	r3, r2
 8005260:	005b      	lsls	r3, r3, #1
 8005262:	4413      	add	r3, r2
 8005264:	00db      	lsls	r3, r3, #3
 8005266:	440b      	add	r3, r1
 8005268:	3320      	adds	r3, #32
 800526a:	687a      	ldr	r2, [r7, #4]
 800526c:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 800526e:	6939      	ldr	r1, [r7, #16]
 8005270:	69fa      	ldr	r2, [r7, #28]
 8005272:	4613      	mov	r3, r2
 8005274:	005b      	lsls	r3, r3, #1
 8005276:	4413      	add	r3, r2
 8005278:	00db      	lsls	r3, r3, #3
 800527a:	440b      	add	r3, r1
 800527c:	3328      	adds	r3, #40	; 0x28
 800527e:	2200      	movs	r2, #0
 8005280:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 8005282:	6939      	ldr	r1, [r7, #16]
 8005284:	69fa      	ldr	r2, [r7, #28]
 8005286:	4613      	mov	r3, r2
 8005288:	005b      	lsls	r3, r3, #1
 800528a:	4413      	add	r3, r2
 800528c:	00db      	lsls	r3, r3, #3
 800528e:	440b      	add	r3, r1
 8005290:	3324      	adds	r3, #36	; 0x24
 8005292:	2200      	movs	r2, #0
 8005294:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 8005296:	6939      	ldr	r1, [r7, #16]
 8005298:	69fa      	ldr	r2, [r7, #28]
 800529a:	4613      	mov	r3, r2
 800529c:	005b      	lsls	r3, r3, #1
 800529e:	4413      	add	r3, r2
 80052a0:	00db      	lsls	r3, r3, #3
 80052a2:	440b      	add	r3, r1
 80052a4:	332c      	adds	r3, #44	; 0x2c
 80052a6:	683a      	ldr	r2, [r7, #0]
 80052a8:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80052aa:	f3bf 8f5f 	dmb	sy
 80052ae:	e002      	b.n	80052b6 <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 80052b0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80052b4:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 80052b6:	697b      	ldr	r3, [r7, #20]
 80052b8:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 80052bc:	69fb      	ldr	r3, [r7, #28]
}
 80052be:	4618      	mov	r0, r3
 80052c0:	3720      	adds	r7, #32
 80052c2:	46bd      	mov	sp, r7
 80052c4:	bd80      	pop	{r7, pc}
 80052c6:	bf00      	nop
 80052c8:	20003f04 	.word	0x20003f04

080052cc <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 80052cc:	b580      	push	{r7, lr}
 80052ce:	b088      	sub	sp, #32
 80052d0:	af00      	add	r7, sp, #0
 80052d2:	60f8      	str	r0, [r7, #12]
 80052d4:	60b9      	str	r1, [r7, #8]
 80052d6:	607a      	str	r2, [r7, #4]
 80052d8:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 80052da:	4b33      	ldr	r3, [pc, #204]	; (80053a8 <SEGGER_RTT_ConfigDownBuffer+0xdc>)
 80052dc:	61bb      	str	r3, [r7, #24]
 80052de:	69bb      	ldr	r3, [r7, #24]
 80052e0:	781b      	ldrb	r3, [r3, #0]
 80052e2:	b2db      	uxtb	r3, r3
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d101      	bne.n	80052ec <SEGGER_RTT_ConfigDownBuffer+0x20>
 80052e8:	f7ff fe8e 	bl	8005008 <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80052ec:	4b2e      	ldr	r3, [pc, #184]	; (80053a8 <SEGGER_RTT_ConfigDownBuffer+0xdc>)
 80052ee:	617b      	str	r3, [r7, #20]
  if (BufferIndex < (unsigned)pRTTCB->MaxNumDownBuffers) {
 80052f0:	697b      	ldr	r3, [r7, #20]
 80052f2:	695b      	ldr	r3, [r3, #20]
 80052f4:	461a      	mov	r2, r3
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	4293      	cmp	r3, r2
 80052fa:	d24d      	bcs.n	8005398 <SEGGER_RTT_ConfigDownBuffer+0xcc>
    SEGGER_RTT_LOCK();
 80052fc:	f3ef 8311 	mrs	r3, BASEPRI
 8005300:	f04f 0120 	mov.w	r1, #32
 8005304:	f381 8811 	msr	BASEPRI, r1
 8005308:	613b      	str	r3, [r7, #16]
    if (BufferIndex > 0u) {
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	2b00      	cmp	r3, #0
 800530e:	d031      	beq.n	8005374 <SEGGER_RTT_ConfigDownBuffer+0xa8>
      pRTTCB->aDown[BufferIndex].sName        = sName;
 8005310:	6979      	ldr	r1, [r7, #20]
 8005312:	68fa      	ldr	r2, [r7, #12]
 8005314:	4613      	mov	r3, r2
 8005316:	005b      	lsls	r3, r3, #1
 8005318:	4413      	add	r3, r2
 800531a:	00db      	lsls	r3, r3, #3
 800531c:	440b      	add	r3, r1
 800531e:	3360      	adds	r3, #96	; 0x60
 8005320:	68ba      	ldr	r2, [r7, #8]
 8005322:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].pBuffer      = (char*)pBuffer;
 8005324:	6979      	ldr	r1, [r7, #20]
 8005326:	68fa      	ldr	r2, [r7, #12]
 8005328:	4613      	mov	r3, r2
 800532a:	005b      	lsls	r3, r3, #1
 800532c:	4413      	add	r3, r2
 800532e:	00db      	lsls	r3, r3, #3
 8005330:	440b      	add	r3, r1
 8005332:	3364      	adds	r3, #100	; 0x64
 8005334:	687a      	ldr	r2, [r7, #4]
 8005336:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].SizeOfBuffer = BufferSize;
 8005338:	6979      	ldr	r1, [r7, #20]
 800533a:	68fa      	ldr	r2, [r7, #12]
 800533c:	4613      	mov	r3, r2
 800533e:	005b      	lsls	r3, r3, #1
 8005340:	4413      	add	r3, r2
 8005342:	00db      	lsls	r3, r3, #3
 8005344:	440b      	add	r3, r1
 8005346:	3368      	adds	r3, #104	; 0x68
 8005348:	683a      	ldr	r2, [r7, #0]
 800534a:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].RdOff        = 0u;
 800534c:	6979      	ldr	r1, [r7, #20]
 800534e:	68fa      	ldr	r2, [r7, #12]
 8005350:	4613      	mov	r3, r2
 8005352:	005b      	lsls	r3, r3, #1
 8005354:	4413      	add	r3, r2
 8005356:	00db      	lsls	r3, r3, #3
 8005358:	440b      	add	r3, r1
 800535a:	3370      	adds	r3, #112	; 0x70
 800535c:	2200      	movs	r2, #0
 800535e:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].WrOff        = 0u;
 8005360:	6979      	ldr	r1, [r7, #20]
 8005362:	68fa      	ldr	r2, [r7, #12]
 8005364:	4613      	mov	r3, r2
 8005366:	005b      	lsls	r3, r3, #1
 8005368:	4413      	add	r3, r2
 800536a:	00db      	lsls	r3, r3, #3
 800536c:	440b      	add	r3, r1
 800536e:	336c      	adds	r3, #108	; 0x6c
 8005370:	2200      	movs	r2, #0
 8005372:	601a      	str	r2, [r3, #0]
    }
    pRTTCB->aDown[BufferIndex].Flags          = Flags;
 8005374:	6979      	ldr	r1, [r7, #20]
 8005376:	68fa      	ldr	r2, [r7, #12]
 8005378:	4613      	mov	r3, r2
 800537a:	005b      	lsls	r3, r3, #1
 800537c:	4413      	add	r3, r2
 800537e:	00db      	lsls	r3, r3, #3
 8005380:	440b      	add	r3, r1
 8005382:	3374      	adds	r3, #116	; 0x74
 8005384:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005386:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8005388:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 800538c:	693b      	ldr	r3, [r7, #16]
 800538e:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 8005392:	2300      	movs	r3, #0
 8005394:	61fb      	str	r3, [r7, #28]
 8005396:	e002      	b.n	800539e <SEGGER_RTT_ConfigDownBuffer+0xd2>
  } else {
    r = -1;
 8005398:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800539c:	61fb      	str	r3, [r7, #28]
  }
  return r;
 800539e:	69fb      	ldr	r3, [r7, #28]
}
 80053a0:	4618      	mov	r0, r3
 80053a2:	3720      	adds	r7, #32
 80053a4:	46bd      	mov	sp, r7
 80053a6:	bd80      	pop	{r7, pc}
 80053a8:	20003f04 	.word	0x20003f04

080053ac <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 80053ac:	b480      	push	{r7}
 80053ae:	b087      	sub	sp, #28
 80053b0:	af00      	add	r7, sp, #0
 80053b2:	60f8      	str	r0, [r7, #12]
 80053b4:	60b9      	str	r1, [r7, #8]
 80053b6:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 80053b8:	2300      	movs	r3, #0
 80053ba:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 80053bc:	e002      	b.n	80053c4 <_EncodeStr+0x18>
    Len++;
 80053be:	693b      	ldr	r3, [r7, #16]
 80053c0:	3301      	adds	r3, #1
 80053c2:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 80053c4:	68ba      	ldr	r2, [r7, #8]
 80053c6:	693b      	ldr	r3, [r7, #16]
 80053c8:	4413      	add	r3, r2
 80053ca:	781b      	ldrb	r3, [r3, #0]
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d1f6      	bne.n	80053be <_EncodeStr+0x12>
  }
  if (Len > Limit) {
 80053d0:	693a      	ldr	r2, [r7, #16]
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	429a      	cmp	r2, r3
 80053d6:	d901      	bls.n	80053dc <_EncodeStr+0x30>
    Len = Limit;
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	613b      	str	r3, [r7, #16]
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 80053dc:	693b      	ldr	r3, [r7, #16]
 80053de:	2bfe      	cmp	r3, #254	; 0xfe
 80053e0:	d806      	bhi.n	80053f0 <_EncodeStr+0x44>
    *pPayload++ = Len; 
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	1c5a      	adds	r2, r3, #1
 80053e6:	60fa      	str	r2, [r7, #12]
 80053e8:	693a      	ldr	r2, [r7, #16]
 80053ea:	b2d2      	uxtb	r2, r2
 80053ec:	701a      	strb	r2, [r3, #0]
 80053ee:	e011      	b.n	8005414 <_EncodeStr+0x68>
  } else {
    *pPayload++ = 255;
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	1c5a      	adds	r2, r3, #1
 80053f4:	60fa      	str	r2, [r7, #12]
 80053f6:	22ff      	movs	r2, #255	; 0xff
 80053f8:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	1c5a      	adds	r2, r3, #1
 80053fe:	60fa      	str	r2, [r7, #12]
 8005400:	693a      	ldr	r2, [r7, #16]
 8005402:	b2d2      	uxtb	r2, r2
 8005404:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 8005406:	693b      	ldr	r3, [r7, #16]
 8005408:	0a19      	lsrs	r1, r3, #8
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	1c5a      	adds	r2, r3, #1
 800540e:	60fa      	str	r2, [r7, #12]
 8005410:	b2ca      	uxtb	r2, r1
 8005412:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 8005414:	2300      	movs	r3, #0
 8005416:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8005418:	e00a      	b.n	8005430 <_EncodeStr+0x84>
    *pPayload++ = *pText++;
 800541a:	68ba      	ldr	r2, [r7, #8]
 800541c:	1c53      	adds	r3, r2, #1
 800541e:	60bb      	str	r3, [r7, #8]
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	1c59      	adds	r1, r3, #1
 8005424:	60f9      	str	r1, [r7, #12]
 8005426:	7812      	ldrb	r2, [r2, #0]
 8005428:	701a      	strb	r2, [r3, #0]
    n++;
 800542a:	697b      	ldr	r3, [r7, #20]
 800542c:	3301      	adds	r3, #1
 800542e:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8005430:	697a      	ldr	r2, [r7, #20]
 8005432:	693b      	ldr	r3, [r7, #16]
 8005434:	429a      	cmp	r2, r3
 8005436:	d3f0      	bcc.n	800541a <_EncodeStr+0x6e>
  }
  return pPayload;
 8005438:	68fb      	ldr	r3, [r7, #12]
}
 800543a:	4618      	mov	r0, r3
 800543c:	371c      	adds	r7, #28
 800543e:	46bd      	mov	sp, r7
 8005440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005444:	4770      	bx	lr

08005446 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8005446:	b480      	push	{r7}
 8005448:	b083      	sub	sp, #12
 800544a:	af00      	add	r7, sp, #0
 800544c:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	3304      	adds	r3, #4
}
 8005452:	4618      	mov	r0, r3
 8005454:	370c      	adds	r7, #12
 8005456:	46bd      	mov	sp, r7
 8005458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800545c:	4770      	bx	lr
	...

08005460 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8005460:	b580      	push	{r7, lr}
 8005462:	b082      	sub	sp, #8
 8005464:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8005466:	4b35      	ldr	r3, [pc, #212]	; (800553c <_HandleIncomingPacket+0xdc>)
 8005468:	7e1b      	ldrb	r3, [r3, #24]
 800546a:	4618      	mov	r0, r3
 800546c:	1cfb      	adds	r3, r7, #3
 800546e:	2201      	movs	r2, #1
 8005470:	4619      	mov	r1, r3
 8005472:	f7ff fe21 	bl	80050b8 <SEGGER_RTT_ReadNoLock>
 8005476:	4603      	mov	r3, r0
 8005478:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	2b00      	cmp	r3, #0
 800547e:	dd59      	ble.n	8005534 <_HandleIncomingPacket+0xd4>
    switch (Cmd) {
 8005480:	78fb      	ldrb	r3, [r7, #3]
 8005482:	2b80      	cmp	r3, #128	; 0x80
 8005484:	d032      	beq.n	80054ec <_HandleIncomingPacket+0x8c>
 8005486:	2b80      	cmp	r3, #128	; 0x80
 8005488:	dc42      	bgt.n	8005510 <_HandleIncomingPacket+0xb0>
 800548a:	2b07      	cmp	r3, #7
 800548c:	dc16      	bgt.n	80054bc <_HandleIncomingPacket+0x5c>
 800548e:	2b00      	cmp	r3, #0
 8005490:	dd3e      	ble.n	8005510 <_HandleIncomingPacket+0xb0>
 8005492:	3b01      	subs	r3, #1
 8005494:	2b06      	cmp	r3, #6
 8005496:	d83b      	bhi.n	8005510 <_HandleIncomingPacket+0xb0>
 8005498:	a201      	add	r2, pc, #4	; (adr r2, 80054a0 <_HandleIncomingPacket+0x40>)
 800549a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800549e:	bf00      	nop
 80054a0:	080054c3 	.word	0x080054c3
 80054a4:	080054c9 	.word	0x080054c9
 80054a8:	080054cf 	.word	0x080054cf
 80054ac:	080054d5 	.word	0x080054d5
 80054b0:	080054db 	.word	0x080054db
 80054b4:	080054e1 	.word	0x080054e1
 80054b8:	080054e7 	.word	0x080054e7
 80054bc:	2b7f      	cmp	r3, #127	; 0x7f
 80054be:	d034      	beq.n	800552a <_HandleIncomingPacket+0xca>
 80054c0:	e026      	b.n	8005510 <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 80054c2:	f000 fba5 	bl	8005c10 <SEGGER_SYSVIEW_Start>
      break;
 80054c6:	e035      	b.n	8005534 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 80054c8:	f000 fc5c 	bl	8005d84 <SEGGER_SYSVIEW_Stop>
      break;
 80054cc:	e032      	b.n	8005534 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 80054ce:	f000 fe35 	bl	800613c <SEGGER_SYSVIEW_RecordSystime>
      break;
 80054d2:	e02f      	b.n	8005534 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 80054d4:	f000 fdfa 	bl	80060cc <SEGGER_SYSVIEW_SendTaskList>
      break;
 80054d8:	e02c      	b.n	8005534 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 80054da:	f000 fc79 	bl	8005dd0 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 80054de:	e029      	b.n	8005534 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 80054e0:	f001 f868 	bl	80065b4 <SEGGER_SYSVIEW_SendNumModules>
      break;
 80054e4:	e026      	b.n	8005534 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 80054e6:	f001 f847 	bl	8006578 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 80054ea:	e023      	b.n	8005534 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80054ec:	4b13      	ldr	r3, [pc, #76]	; (800553c <_HandleIncomingPacket+0xdc>)
 80054ee:	7e1b      	ldrb	r3, [r3, #24]
 80054f0:	4618      	mov	r0, r3
 80054f2:	1cfb      	adds	r3, r7, #3
 80054f4:	2201      	movs	r2, #1
 80054f6:	4619      	mov	r1, r3
 80054f8:	f7ff fdde 	bl	80050b8 <SEGGER_RTT_ReadNoLock>
 80054fc:	4603      	mov	r3, r0
 80054fe:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	2b00      	cmp	r3, #0
 8005504:	dd13      	ble.n	800552e <_HandleIncomingPacket+0xce>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8005506:	78fb      	ldrb	r3, [r7, #3]
 8005508:	4618      	mov	r0, r3
 800550a:	f000 ffb5 	bl	8006478 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 800550e:	e00e      	b.n	800552e <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 8005510:	78fb      	ldrb	r3, [r7, #3]
 8005512:	b25b      	sxtb	r3, r3
 8005514:	2b00      	cmp	r3, #0
 8005516:	da0c      	bge.n	8005532 <_HandleIncomingPacket+0xd2>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8005518:	4b08      	ldr	r3, [pc, #32]	; (800553c <_HandleIncomingPacket+0xdc>)
 800551a:	7e1b      	ldrb	r3, [r3, #24]
 800551c:	4618      	mov	r0, r3
 800551e:	1cfb      	adds	r3, r7, #3
 8005520:	2201      	movs	r2, #1
 8005522:	4619      	mov	r1, r3
 8005524:	f7ff fdc8 	bl	80050b8 <SEGGER_RTT_ReadNoLock>
      }
      break;
 8005528:	e003      	b.n	8005532 <_HandleIncomingPacket+0xd2>
      break;
 800552a:	bf00      	nop
 800552c:	e002      	b.n	8005534 <_HandleIncomingPacket+0xd4>
      break;
 800552e:	bf00      	nop
 8005530:	e000      	b.n	8005534 <_HandleIncomingPacket+0xd4>
      break;
 8005532:	bf00      	nop
    }
  }
}
 8005534:	bf00      	nop
 8005536:	3708      	adds	r7, #8
 8005538:	46bd      	mov	sp, r7
 800553a:	bd80      	pop	{r7, pc}
 800553c:	200083c4 	.word	0x200083c4

08005540 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8005540:	b580      	push	{r7, lr}
 8005542:	b08c      	sub	sp, #48	; 0x30
 8005544:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 8005546:	2301      	movs	r3, #1
 8005548:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 800554a:	1d3b      	adds	r3, r7, #4
 800554c:	3301      	adds	r3, #1
 800554e:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8005550:	69fb      	ldr	r3, [r7, #28]
 8005552:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005554:	4b31      	ldr	r3, [pc, #196]	; (800561c <_TrySendOverflowPacket+0xdc>)
 8005556:	695b      	ldr	r3, [r3, #20]
 8005558:	62bb      	str	r3, [r7, #40]	; 0x28
 800555a:	e00b      	b.n	8005574 <_TrySendOverflowPacket+0x34>
 800555c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800555e:	b2da      	uxtb	r2, r3
 8005560:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005562:	1c59      	adds	r1, r3, #1
 8005564:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005566:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800556a:	b2d2      	uxtb	r2, r2
 800556c:	701a      	strb	r2, [r3, #0]
 800556e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005570:	09db      	lsrs	r3, r3, #7
 8005572:	62bb      	str	r3, [r7, #40]	; 0x28
 8005574:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005576:	2b7f      	cmp	r3, #127	; 0x7f
 8005578:	d8f0      	bhi.n	800555c <_TrySendOverflowPacket+0x1c>
 800557a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800557c:	1c5a      	adds	r2, r3, #1
 800557e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005580:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005582:	b2d2      	uxtb	r2, r2
 8005584:	701a      	strb	r2, [r3, #0]
 8005586:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005588:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800558a:	4b25      	ldr	r3, [pc, #148]	; (8005620 <_TrySendOverflowPacket+0xe0>)
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8005590:	4b22      	ldr	r3, [pc, #136]	; (800561c <_TrySendOverflowPacket+0xdc>)
 8005592:	68db      	ldr	r3, [r3, #12]
 8005594:	69ba      	ldr	r2, [r7, #24]
 8005596:	1ad3      	subs	r3, r2, r3
 8005598:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 800559a:	69fb      	ldr	r3, [r7, #28]
 800559c:	627b      	str	r3, [r7, #36]	; 0x24
 800559e:	697b      	ldr	r3, [r7, #20]
 80055a0:	623b      	str	r3, [r7, #32]
 80055a2:	e00b      	b.n	80055bc <_TrySendOverflowPacket+0x7c>
 80055a4:	6a3b      	ldr	r3, [r7, #32]
 80055a6:	b2da      	uxtb	r2, r3
 80055a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055aa:	1c59      	adds	r1, r3, #1
 80055ac:	6279      	str	r1, [r7, #36]	; 0x24
 80055ae:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80055b2:	b2d2      	uxtb	r2, r2
 80055b4:	701a      	strb	r2, [r3, #0]
 80055b6:	6a3b      	ldr	r3, [r7, #32]
 80055b8:	09db      	lsrs	r3, r3, #7
 80055ba:	623b      	str	r3, [r7, #32]
 80055bc:	6a3b      	ldr	r3, [r7, #32]
 80055be:	2b7f      	cmp	r3, #127	; 0x7f
 80055c0:	d8f0      	bhi.n	80055a4 <_TrySendOverflowPacket+0x64>
 80055c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055c4:	1c5a      	adds	r2, r3, #1
 80055c6:	627a      	str	r2, [r7, #36]	; 0x24
 80055c8:	6a3a      	ldr	r2, [r7, #32]
 80055ca:	b2d2      	uxtb	r2, r2
 80055cc:	701a      	strb	r2, [r3, #0]
 80055ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055d0:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 80055d2:	4b12      	ldr	r3, [pc, #72]	; (800561c <_TrySendOverflowPacket+0xdc>)
 80055d4:	785b      	ldrb	r3, [r3, #1]
 80055d6:	4618      	mov	r0, r3
 80055d8:	1d3b      	adds	r3, r7, #4
 80055da:	69fa      	ldr	r2, [r7, #28]
 80055dc:	1ad3      	subs	r3, r2, r3
 80055de:	461a      	mov	r2, r3
 80055e0:	1d3b      	adds	r3, r7, #4
 80055e2:	4619      	mov	r1, r3
 80055e4:	f7fa fdf4 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 80055e8:	4603      	mov	r3, r0
 80055ea:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
  if (Status) {
 80055ec:	693b      	ldr	r3, [r7, #16]
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d009      	beq.n	8005606 <_TrySendOverflowPacket+0xc6>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 80055f2:	4a0a      	ldr	r2, [pc, #40]	; (800561c <_TrySendOverflowPacket+0xdc>)
 80055f4:	69bb      	ldr	r3, [r7, #24]
 80055f6:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 80055f8:	4b08      	ldr	r3, [pc, #32]	; (800561c <_TrySendOverflowPacket+0xdc>)
 80055fa:	781b      	ldrb	r3, [r3, #0]
 80055fc:	3b01      	subs	r3, #1
 80055fe:	b2da      	uxtb	r2, r3
 8005600:	4b06      	ldr	r3, [pc, #24]	; (800561c <_TrySendOverflowPacket+0xdc>)
 8005602:	701a      	strb	r2, [r3, #0]
 8005604:	e004      	b.n	8005610 <_TrySendOverflowPacket+0xd0>
  } else {
    _SYSVIEW_Globals.DropCount++;
 8005606:	4b05      	ldr	r3, [pc, #20]	; (800561c <_TrySendOverflowPacket+0xdc>)
 8005608:	695b      	ldr	r3, [r3, #20]
 800560a:	3301      	adds	r3, #1
 800560c:	4a03      	ldr	r2, [pc, #12]	; (800561c <_TrySendOverflowPacket+0xdc>)
 800560e:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8005610:	693b      	ldr	r3, [r7, #16]
}
 8005612:	4618      	mov	r0, r3
 8005614:	3730      	adds	r7, #48	; 0x30
 8005616:	46bd      	mov	sp, r7
 8005618:	bd80      	pop	{r7, pc}
 800561a:	bf00      	nop
 800561c:	200083c4 	.word	0x200083c4
 8005620:	e0001004 	.word	0xe0001004

08005624 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8005624:	b580      	push	{r7, lr}
 8005626:	b08a      	sub	sp, #40	; 0x28
 8005628:	af00      	add	r7, sp, #0
 800562a:	60f8      	str	r0, [r7, #12]
 800562c:	60b9      	str	r1, [r7, #8]
 800562e:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8005630:	4b6c      	ldr	r3, [pc, #432]	; (80057e4 <_SendPacket+0x1c0>)
 8005632:	781b      	ldrb	r3, [r3, #0]
 8005634:	2b01      	cmp	r3, #1
 8005636:	d010      	beq.n	800565a <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8005638:	4b6a      	ldr	r3, [pc, #424]	; (80057e4 <_SendPacket+0x1c0>)
 800563a:	781b      	ldrb	r3, [r3, #0]
 800563c:	2b00      	cmp	r3, #0
 800563e:	f000 80a3 	beq.w	8005788 <_SendPacket+0x164>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 8005642:	4b68      	ldr	r3, [pc, #416]	; (80057e4 <_SendPacket+0x1c0>)
 8005644:	781b      	ldrb	r3, [r3, #0]
 8005646:	2b02      	cmp	r3, #2
 8005648:	d109      	bne.n	800565e <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 800564a:	f7ff ff79 	bl	8005540 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 800564e:	4b65      	ldr	r3, [pc, #404]	; (80057e4 <_SendPacket+0x1c0>)
 8005650:	781b      	ldrb	r3, [r3, #0]
 8005652:	2b01      	cmp	r3, #1
 8005654:	f040 809a 	bne.w	800578c <_SendPacket+0x168>
      goto SendDone;
    }
  }
Send:
 8005658:	e001      	b.n	800565e <_SendPacket+0x3a>
    goto Send;
 800565a:	bf00      	nop
 800565c:	e000      	b.n	8005660 <_SendPacket+0x3c>
Send:
 800565e:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	2b1f      	cmp	r3, #31
 8005664:	d809      	bhi.n	800567a <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 8005666:	4b5f      	ldr	r3, [pc, #380]	; (80057e4 <_SendPacket+0x1c0>)
 8005668:	69da      	ldr	r2, [r3, #28]
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	fa22 f303 	lsr.w	r3, r2, r3
 8005670:	f003 0301 	and.w	r3, r3, #1
 8005674:	2b00      	cmp	r3, #0
 8005676:	f040 808b 	bne.w	8005790 <_SendPacket+0x16c>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	2b17      	cmp	r3, #23
 800567e:	d807      	bhi.n	8005690 <_SendPacket+0x6c>
    *--pStartPacket = EventId;
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	3b01      	subs	r3, #1
 8005684:	60fb      	str	r3, [r7, #12]
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	b2da      	uxtb	r2, r3
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	701a      	strb	r2, [r3, #0]
 800568e:	e03d      	b.n	800570c <_SendPacket+0xe8>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 8005690:	68ba      	ldr	r2, [r7, #8]
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	1ad3      	subs	r3, r2, r3
 8005696:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 8005698:	69fb      	ldr	r3, [r7, #28]
 800569a:	2b7f      	cmp	r3, #127	; 0x7f
 800569c:	d912      	bls.n	80056c4 <_SendPacket+0xa0>
      *--pStartPacket = (NumBytes >> 7);
 800569e:	69fb      	ldr	r3, [r7, #28]
 80056a0:	09da      	lsrs	r2, r3, #7
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	3b01      	subs	r3, #1
 80056a6:	60fb      	str	r3, [r7, #12]
 80056a8:	b2d2      	uxtb	r2, r2
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 80056ae:	69fb      	ldr	r3, [r7, #28]
 80056b0:	b2db      	uxtb	r3, r3
 80056b2:	68fa      	ldr	r2, [r7, #12]
 80056b4:	3a01      	subs	r2, #1
 80056b6:	60fa      	str	r2, [r7, #12]
 80056b8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80056bc:	b2da      	uxtb	r2, r3
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	701a      	strb	r2, [r3, #0]
 80056c2:	e006      	b.n	80056d2 <_SendPacket+0xae>
    } else {
      *--pStartPacket = NumBytes;
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	3b01      	subs	r3, #1
 80056c8:	60fb      	str	r3, [r7, #12]
 80056ca:	69fb      	ldr	r3, [r7, #28]
 80056cc:	b2da      	uxtb	r2, r3
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	2b7f      	cmp	r3, #127	; 0x7f
 80056d6:	d912      	bls.n	80056fe <_SendPacket+0xda>
      *--pStartPacket = (EventId >> 7);
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	09da      	lsrs	r2, r3, #7
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	3b01      	subs	r3, #1
 80056e0:	60fb      	str	r3, [r7, #12]
 80056e2:	b2d2      	uxtb	r2, r2
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	b2db      	uxtb	r3, r3
 80056ec:	68fa      	ldr	r2, [r7, #12]
 80056ee:	3a01      	subs	r2, #1
 80056f0:	60fa      	str	r2, [r7, #12]
 80056f2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80056f6:	b2da      	uxtb	r2, r3
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	701a      	strb	r2, [r3, #0]
 80056fc:	e006      	b.n	800570c <_SendPacket+0xe8>
    } else {
      *--pStartPacket = EventId;
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	3b01      	subs	r3, #1
 8005702:	60fb      	str	r3, [r7, #12]
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	b2da      	uxtb	r2, r3
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800570c:	4b36      	ldr	r3, [pc, #216]	; (80057e8 <_SendPacket+0x1c4>)
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8005712:	4b34      	ldr	r3, [pc, #208]	; (80057e4 <_SendPacket+0x1c0>)
 8005714:	68db      	ldr	r3, [r3, #12]
 8005716:	69ba      	ldr	r2, [r7, #24]
 8005718:	1ad3      	subs	r3, r2, r3
 800571a:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 800571c:	68bb      	ldr	r3, [r7, #8]
 800571e:	627b      	str	r3, [r7, #36]	; 0x24
 8005720:	697b      	ldr	r3, [r7, #20]
 8005722:	623b      	str	r3, [r7, #32]
 8005724:	e00b      	b.n	800573e <_SendPacket+0x11a>
 8005726:	6a3b      	ldr	r3, [r7, #32]
 8005728:	b2da      	uxtb	r2, r3
 800572a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800572c:	1c59      	adds	r1, r3, #1
 800572e:	6279      	str	r1, [r7, #36]	; 0x24
 8005730:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005734:	b2d2      	uxtb	r2, r2
 8005736:	701a      	strb	r2, [r3, #0]
 8005738:	6a3b      	ldr	r3, [r7, #32]
 800573a:	09db      	lsrs	r3, r3, #7
 800573c:	623b      	str	r3, [r7, #32]
 800573e:	6a3b      	ldr	r3, [r7, #32]
 8005740:	2b7f      	cmp	r3, #127	; 0x7f
 8005742:	d8f0      	bhi.n	8005726 <_SendPacket+0x102>
 8005744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005746:	1c5a      	adds	r2, r3, #1
 8005748:	627a      	str	r2, [r7, #36]	; 0x24
 800574a:	6a3a      	ldr	r2, [r7, #32]
 800574c:	b2d2      	uxtb	r2, r2
 800574e:	701a      	strb	r2, [r3, #0]
 8005750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005752:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 8005754:	4b23      	ldr	r3, [pc, #140]	; (80057e4 <_SendPacket+0x1c0>)
 8005756:	785b      	ldrb	r3, [r3, #1]
 8005758:	4618      	mov	r0, r3
 800575a:	68ba      	ldr	r2, [r7, #8]
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	1ad3      	subs	r3, r2, r3
 8005760:	461a      	mov	r2, r3
 8005762:	68f9      	ldr	r1, [r7, #12]
 8005764:	f7fa fd34 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8005768:	4603      	mov	r3, r0
 800576a:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
  if (Status) {
 800576c:	693b      	ldr	r3, [r7, #16]
 800576e:	2b00      	cmp	r3, #0
 8005770:	d003      	beq.n	800577a <_SendPacket+0x156>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8005772:	4a1c      	ldr	r2, [pc, #112]	; (80057e4 <_SendPacket+0x1c0>)
 8005774:	69bb      	ldr	r3, [r7, #24]
 8005776:	60d3      	str	r3, [r2, #12]
 8005778:	e00b      	b.n	8005792 <_SendPacket+0x16e>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 800577a:	4b1a      	ldr	r3, [pc, #104]	; (80057e4 <_SendPacket+0x1c0>)
 800577c:	781b      	ldrb	r3, [r3, #0]
 800577e:	3301      	adds	r3, #1
 8005780:	b2da      	uxtb	r2, r3
 8005782:	4b18      	ldr	r3, [pc, #96]	; (80057e4 <_SendPacket+0x1c0>)
 8005784:	701a      	strb	r2, [r3, #0]
 8005786:	e004      	b.n	8005792 <_SendPacket+0x16e>
    goto SendDone;
 8005788:	bf00      	nop
 800578a:	e002      	b.n	8005792 <_SendPacket+0x16e>
      goto SendDone;
 800578c:	bf00      	nop
 800578e:	e000      	b.n	8005792 <_SendPacket+0x16e>
      goto SendDone;
 8005790:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8005792:	4b14      	ldr	r3, [pc, #80]	; (80057e4 <_SendPacket+0x1c0>)
 8005794:	7e1b      	ldrb	r3, [r3, #24]
 8005796:	4619      	mov	r1, r3
 8005798:	4a14      	ldr	r2, [pc, #80]	; (80057ec <_SendPacket+0x1c8>)
 800579a:	460b      	mov	r3, r1
 800579c:	005b      	lsls	r3, r3, #1
 800579e:	440b      	add	r3, r1
 80057a0:	00db      	lsls	r3, r3, #3
 80057a2:	4413      	add	r3, r2
 80057a4:	336c      	adds	r3, #108	; 0x6c
 80057a6:	681a      	ldr	r2, [r3, #0]
 80057a8:	4b0e      	ldr	r3, [pc, #56]	; (80057e4 <_SendPacket+0x1c0>)
 80057aa:	7e1b      	ldrb	r3, [r3, #24]
 80057ac:	4618      	mov	r0, r3
 80057ae:	490f      	ldr	r1, [pc, #60]	; (80057ec <_SendPacket+0x1c8>)
 80057b0:	4603      	mov	r3, r0
 80057b2:	005b      	lsls	r3, r3, #1
 80057b4:	4403      	add	r3, r0
 80057b6:	00db      	lsls	r3, r3, #3
 80057b8:	440b      	add	r3, r1
 80057ba:	3370      	adds	r3, #112	; 0x70
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	429a      	cmp	r2, r3
 80057c0:	d00b      	beq.n	80057da <_SendPacket+0x1b6>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 80057c2:	4b08      	ldr	r3, [pc, #32]	; (80057e4 <_SendPacket+0x1c0>)
 80057c4:	789b      	ldrb	r3, [r3, #2]
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d107      	bne.n	80057da <_SendPacket+0x1b6>
      _SYSVIEW_Globals.RecursionCnt = 1;
 80057ca:	4b06      	ldr	r3, [pc, #24]	; (80057e4 <_SendPacket+0x1c0>)
 80057cc:	2201      	movs	r2, #1
 80057ce:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 80057d0:	f7ff fe46 	bl	8005460 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 80057d4:	4b03      	ldr	r3, [pc, #12]	; (80057e4 <_SendPacket+0x1c0>)
 80057d6:	2200      	movs	r2, #0
 80057d8:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 80057da:	bf00      	nop
 80057dc:	3728      	adds	r7, #40	; 0x28
 80057de:	46bd      	mov	sp, r7
 80057e0:	bd80      	pop	{r7, pc}
 80057e2:	bf00      	nop
 80057e4:	200083c4 	.word	0x200083c4
 80057e8:	e0001004 	.word	0xe0001004
 80057ec:	20003f04 	.word	0x20003f04

080057f0 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software 
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 80057f0:	b580      	push	{r7, lr}
 80057f2:	b086      	sub	sp, #24
 80057f4:	af02      	add	r7, sp, #8
 80057f6:	60f8      	str	r0, [r7, #12]
 80057f8:	60b9      	str	r1, [r7, #8]
 80057fa:	607a      	str	r2, [r7, #4]
 80057fc:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 80057fe:	2300      	movs	r3, #0
 8005800:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005804:	4917      	ldr	r1, [pc, #92]	; (8005864 <SEGGER_SYSVIEW_Init+0x74>)
 8005806:	4818      	ldr	r0, [pc, #96]	; (8005868 <SEGGER_SYSVIEW_Init+0x78>)
 8005808:	f7ff fcdc 	bl	80051c4 <SEGGER_RTT_AllocUpBuffer>
 800580c:	4603      	mov	r3, r0
 800580e:	b2da      	uxtb	r2, r3
 8005810:	4b16      	ldr	r3, [pc, #88]	; (800586c <SEGGER_SYSVIEW_Init+0x7c>)
 8005812:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 8005814:	4b15      	ldr	r3, [pc, #84]	; (800586c <SEGGER_SYSVIEW_Init+0x7c>)
 8005816:	785a      	ldrb	r2, [r3, #1]
 8005818:	4b14      	ldr	r3, [pc, #80]	; (800586c <SEGGER_SYSVIEW_Init+0x7c>)
 800581a:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 800581c:	4b13      	ldr	r3, [pc, #76]	; (800586c <SEGGER_SYSVIEW_Init+0x7c>)
 800581e:	7e1b      	ldrb	r3, [r3, #24]
 8005820:	4618      	mov	r0, r3
 8005822:	2300      	movs	r3, #0
 8005824:	9300      	str	r3, [sp, #0]
 8005826:	2308      	movs	r3, #8
 8005828:	4a11      	ldr	r2, [pc, #68]	; (8005870 <SEGGER_SYSVIEW_Init+0x80>)
 800582a:	490f      	ldr	r1, [pc, #60]	; (8005868 <SEGGER_SYSVIEW_Init+0x78>)
 800582c:	f7ff fd4e 	bl	80052cc <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 8005830:	4b0e      	ldr	r3, [pc, #56]	; (800586c <SEGGER_SYSVIEW_Init+0x7c>)
 8005832:	2200      	movs	r2, #0
 8005834:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8005836:	4b0f      	ldr	r3, [pc, #60]	; (8005874 <SEGGER_SYSVIEW_Init+0x84>)
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	4a0c      	ldr	r2, [pc, #48]	; (800586c <SEGGER_SYSVIEW_Init+0x7c>)
 800583c:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 800583e:	4a0b      	ldr	r2, [pc, #44]	; (800586c <SEGGER_SYSVIEW_Init+0x7c>)
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 8005844:	4a09      	ldr	r2, [pc, #36]	; (800586c <SEGGER_SYSVIEW_Init+0x7c>)
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 800584a:	4a08      	ldr	r2, [pc, #32]	; (800586c <SEGGER_SYSVIEW_Init+0x7c>)
 800584c:	68bb      	ldr	r3, [r7, #8]
 800584e:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 8005850:	4a06      	ldr	r2, [pc, #24]	; (800586c <SEGGER_SYSVIEW_Init+0x7c>)
 8005852:	683b      	ldr	r3, [r7, #0]
 8005854:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 8005856:	4b05      	ldr	r3, [pc, #20]	; (800586c <SEGGER_SYSVIEW_Init+0x7c>)
 8005858:	2200      	movs	r2, #0
 800585a:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 800585c:	bf00      	nop
 800585e:	3710      	adds	r7, #16
 8005860:	46bd      	mov	sp, r7
 8005862:	bd80      	pop	{r7, pc}
 8005864:	200043bc 	.word	0x200043bc
 8005868:	080068c8 	.word	0x080068c8
 800586c:	200083c4 	.word	0x200083c4
 8005870:	200083bc 	.word	0x200083bc
 8005874:	e0001004 	.word	0xe0001004

08005878 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 8005878:	b480      	push	{r7}
 800587a:	b083      	sub	sp, #12
 800587c:	af00      	add	r7, sp, #0
 800587e:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 8005880:	4a04      	ldr	r2, [pc, #16]	; (8005894 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	6113      	str	r3, [r2, #16]
}
 8005886:	bf00      	nop
 8005888:	370c      	adds	r7, #12
 800588a:	46bd      	mov	sp, r7
 800588c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005890:	4770      	bx	lr
 8005892:	bf00      	nop
 8005894:	200083c4 	.word	0x200083c4

08005898 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8005898:	b580      	push	{r7, lr}
 800589a:	b084      	sub	sp, #16
 800589c:	af00      	add	r7, sp, #0
 800589e:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80058a0:	f3ef 8311 	mrs	r3, BASEPRI
 80058a4:	f04f 0120 	mov.w	r1, #32
 80058a8:	f381 8811 	msr	BASEPRI, r1
 80058ac:	60fb      	str	r3, [r7, #12]
 80058ae:	4808      	ldr	r0, [pc, #32]	; (80058d0 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 80058b0:	f7ff fdc9 	bl	8005446 <_PreparePacket>
 80058b4:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 80058b6:	687a      	ldr	r2, [r7, #4]
 80058b8:	68b9      	ldr	r1, [r7, #8]
 80058ba:	68b8      	ldr	r0, [r7, #8]
 80058bc:	f7ff feb2 	bl	8005624 <_SendPacket>
  RECORD_END();
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	f383 8811 	msr	BASEPRI, r3
}
 80058c6:	bf00      	nop
 80058c8:	3710      	adds	r7, #16
 80058ca:	46bd      	mov	sp, r7
 80058cc:	bd80      	pop	{r7, pc}
 80058ce:	bf00      	nop
 80058d0:	200083f4 	.word	0x200083f4

080058d4 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 80058d4:	b580      	push	{r7, lr}
 80058d6:	b088      	sub	sp, #32
 80058d8:	af00      	add	r7, sp, #0
 80058da:	6078      	str	r0, [r7, #4]
 80058dc:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80058de:	f3ef 8311 	mrs	r3, BASEPRI
 80058e2:	f04f 0120 	mov.w	r1, #32
 80058e6:	f381 8811 	msr	BASEPRI, r1
 80058ea:	617b      	str	r3, [r7, #20]
 80058ec:	4816      	ldr	r0, [pc, #88]	; (8005948 <SEGGER_SYSVIEW_RecordU32+0x74>)
 80058ee:	f7ff fdaa 	bl	8005446 <_PreparePacket>
 80058f2:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80058f4:	693b      	ldr	r3, [r7, #16]
 80058f6:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	61fb      	str	r3, [r7, #28]
 80058fc:	683b      	ldr	r3, [r7, #0]
 80058fe:	61bb      	str	r3, [r7, #24]
 8005900:	e00b      	b.n	800591a <SEGGER_SYSVIEW_RecordU32+0x46>
 8005902:	69bb      	ldr	r3, [r7, #24]
 8005904:	b2da      	uxtb	r2, r3
 8005906:	69fb      	ldr	r3, [r7, #28]
 8005908:	1c59      	adds	r1, r3, #1
 800590a:	61f9      	str	r1, [r7, #28]
 800590c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005910:	b2d2      	uxtb	r2, r2
 8005912:	701a      	strb	r2, [r3, #0]
 8005914:	69bb      	ldr	r3, [r7, #24]
 8005916:	09db      	lsrs	r3, r3, #7
 8005918:	61bb      	str	r3, [r7, #24]
 800591a:	69bb      	ldr	r3, [r7, #24]
 800591c:	2b7f      	cmp	r3, #127	; 0x7f
 800591e:	d8f0      	bhi.n	8005902 <SEGGER_SYSVIEW_RecordU32+0x2e>
 8005920:	69fb      	ldr	r3, [r7, #28]
 8005922:	1c5a      	adds	r2, r3, #1
 8005924:	61fa      	str	r2, [r7, #28]
 8005926:	69ba      	ldr	r2, [r7, #24]
 8005928:	b2d2      	uxtb	r2, r2
 800592a:	701a      	strb	r2, [r3, #0]
 800592c:	69fb      	ldr	r3, [r7, #28]
 800592e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8005930:	687a      	ldr	r2, [r7, #4]
 8005932:	68f9      	ldr	r1, [r7, #12]
 8005934:	6938      	ldr	r0, [r7, #16]
 8005936:	f7ff fe75 	bl	8005624 <_SendPacket>
  RECORD_END();
 800593a:	697b      	ldr	r3, [r7, #20]
 800593c:	f383 8811 	msr	BASEPRI, r3
}
 8005940:	bf00      	nop
 8005942:	3720      	adds	r7, #32
 8005944:	46bd      	mov	sp, r7
 8005946:	bd80      	pop	{r7, pc}
 8005948:	200083f4 	.word	0x200083f4

0800594c <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 800594c:	b580      	push	{r7, lr}
 800594e:	b08c      	sub	sp, #48	; 0x30
 8005950:	af00      	add	r7, sp, #0
 8005952:	60f8      	str	r0, [r7, #12]
 8005954:	60b9      	str	r1, [r7, #8]
 8005956:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8005958:	f3ef 8311 	mrs	r3, BASEPRI
 800595c:	f04f 0120 	mov.w	r1, #32
 8005960:	f381 8811 	msr	BASEPRI, r1
 8005964:	61fb      	str	r3, [r7, #28]
 8005966:	4825      	ldr	r0, [pc, #148]	; (80059fc <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8005968:	f7ff fd6d 	bl	8005446 <_PreparePacket>
 800596c:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 800596e:	69bb      	ldr	r3, [r7, #24]
 8005970:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8005972:	697b      	ldr	r3, [r7, #20]
 8005974:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005976:	68bb      	ldr	r3, [r7, #8]
 8005978:	62bb      	str	r3, [r7, #40]	; 0x28
 800597a:	e00b      	b.n	8005994 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 800597c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800597e:	b2da      	uxtb	r2, r3
 8005980:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005982:	1c59      	adds	r1, r3, #1
 8005984:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005986:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800598a:	b2d2      	uxtb	r2, r2
 800598c:	701a      	strb	r2, [r3, #0]
 800598e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005990:	09db      	lsrs	r3, r3, #7
 8005992:	62bb      	str	r3, [r7, #40]	; 0x28
 8005994:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005996:	2b7f      	cmp	r3, #127	; 0x7f
 8005998:	d8f0      	bhi.n	800597c <SEGGER_SYSVIEW_RecordU32x2+0x30>
 800599a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800599c:	1c5a      	adds	r2, r3, #1
 800599e:	62fa      	str	r2, [r7, #44]	; 0x2c
 80059a0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80059a2:	b2d2      	uxtb	r2, r2
 80059a4:	701a      	strb	r2, [r3, #0]
 80059a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059a8:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 80059aa:	697b      	ldr	r3, [r7, #20]
 80059ac:	627b      	str	r3, [r7, #36]	; 0x24
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	623b      	str	r3, [r7, #32]
 80059b2:	e00b      	b.n	80059cc <SEGGER_SYSVIEW_RecordU32x2+0x80>
 80059b4:	6a3b      	ldr	r3, [r7, #32]
 80059b6:	b2da      	uxtb	r2, r3
 80059b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059ba:	1c59      	adds	r1, r3, #1
 80059bc:	6279      	str	r1, [r7, #36]	; 0x24
 80059be:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80059c2:	b2d2      	uxtb	r2, r2
 80059c4:	701a      	strb	r2, [r3, #0]
 80059c6:	6a3b      	ldr	r3, [r7, #32]
 80059c8:	09db      	lsrs	r3, r3, #7
 80059ca:	623b      	str	r3, [r7, #32]
 80059cc:	6a3b      	ldr	r3, [r7, #32]
 80059ce:	2b7f      	cmp	r3, #127	; 0x7f
 80059d0:	d8f0      	bhi.n	80059b4 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 80059d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059d4:	1c5a      	adds	r2, r3, #1
 80059d6:	627a      	str	r2, [r7, #36]	; 0x24
 80059d8:	6a3a      	ldr	r2, [r7, #32]
 80059da:	b2d2      	uxtb	r2, r2
 80059dc:	701a      	strb	r2, [r3, #0]
 80059de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059e0:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80059e2:	68fa      	ldr	r2, [r7, #12]
 80059e4:	6979      	ldr	r1, [r7, #20]
 80059e6:	69b8      	ldr	r0, [r7, #24]
 80059e8:	f7ff fe1c 	bl	8005624 <_SendPacket>
  RECORD_END();
 80059ec:	69fb      	ldr	r3, [r7, #28]
 80059ee:	f383 8811 	msr	BASEPRI, r3
}
 80059f2:	bf00      	nop
 80059f4:	3730      	adds	r7, #48	; 0x30
 80059f6:	46bd      	mov	sp, r7
 80059f8:	bd80      	pop	{r7, pc}
 80059fa:	bf00      	nop
 80059fc:	200083f4 	.word	0x200083f4

08005a00 <SEGGER_SYSVIEW_RecordU32x3>:
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 8005a00:	b580      	push	{r7, lr}
 8005a02:	b08e      	sub	sp, #56	; 0x38
 8005a04:	af00      	add	r7, sp, #0
 8005a06:	60f8      	str	r0, [r7, #12]
 8005a08:	60b9      	str	r1, [r7, #8]
 8005a0a:	607a      	str	r2, [r7, #4]
 8005a0c:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 8005a0e:	f3ef 8311 	mrs	r3, BASEPRI
 8005a12:	f04f 0120 	mov.w	r1, #32
 8005a16:	f381 8811 	msr	BASEPRI, r1
 8005a1a:	61fb      	str	r3, [r7, #28]
 8005a1c:	4832      	ldr	r0, [pc, #200]	; (8005ae8 <SEGGER_SYSVIEW_RecordU32x3+0xe8>)
 8005a1e:	f7ff fd12 	bl	8005446 <_PreparePacket>
 8005a22:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8005a24:	69bb      	ldr	r3, [r7, #24]
 8005a26:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8005a28:	697b      	ldr	r3, [r7, #20]
 8005a2a:	637b      	str	r3, [r7, #52]	; 0x34
 8005a2c:	68bb      	ldr	r3, [r7, #8]
 8005a2e:	633b      	str	r3, [r7, #48]	; 0x30
 8005a30:	e00b      	b.n	8005a4a <SEGGER_SYSVIEW_RecordU32x3+0x4a>
 8005a32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a34:	b2da      	uxtb	r2, r3
 8005a36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a38:	1c59      	adds	r1, r3, #1
 8005a3a:	6379      	str	r1, [r7, #52]	; 0x34
 8005a3c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005a40:	b2d2      	uxtb	r2, r2
 8005a42:	701a      	strb	r2, [r3, #0]
 8005a44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a46:	09db      	lsrs	r3, r3, #7
 8005a48:	633b      	str	r3, [r7, #48]	; 0x30
 8005a4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a4c:	2b7f      	cmp	r3, #127	; 0x7f
 8005a4e:	d8f0      	bhi.n	8005a32 <SEGGER_SYSVIEW_RecordU32x3+0x32>
 8005a50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a52:	1c5a      	adds	r2, r3, #1
 8005a54:	637a      	str	r2, [r7, #52]	; 0x34
 8005a56:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005a58:	b2d2      	uxtb	r2, r2
 8005a5a:	701a      	strb	r2, [r3, #0]
 8005a5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a5e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8005a60:	697b      	ldr	r3, [r7, #20]
 8005a62:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	62bb      	str	r3, [r7, #40]	; 0x28
 8005a68:	e00b      	b.n	8005a82 <SEGGER_SYSVIEW_RecordU32x3+0x82>
 8005a6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a6c:	b2da      	uxtb	r2, r3
 8005a6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a70:	1c59      	adds	r1, r3, #1
 8005a72:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005a74:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005a78:	b2d2      	uxtb	r2, r2
 8005a7a:	701a      	strb	r2, [r3, #0]
 8005a7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a7e:	09db      	lsrs	r3, r3, #7
 8005a80:	62bb      	str	r3, [r7, #40]	; 0x28
 8005a82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a84:	2b7f      	cmp	r3, #127	; 0x7f
 8005a86:	d8f0      	bhi.n	8005a6a <SEGGER_SYSVIEW_RecordU32x3+0x6a>
 8005a88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a8a:	1c5a      	adds	r2, r3, #1
 8005a8c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005a8e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005a90:	b2d2      	uxtb	r2, r2
 8005a92:	701a      	strb	r2, [r3, #0]
 8005a94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a96:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8005a98:	697b      	ldr	r3, [r7, #20]
 8005a9a:	627b      	str	r3, [r7, #36]	; 0x24
 8005a9c:	683b      	ldr	r3, [r7, #0]
 8005a9e:	623b      	str	r3, [r7, #32]
 8005aa0:	e00b      	b.n	8005aba <SEGGER_SYSVIEW_RecordU32x3+0xba>
 8005aa2:	6a3b      	ldr	r3, [r7, #32]
 8005aa4:	b2da      	uxtb	r2, r3
 8005aa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aa8:	1c59      	adds	r1, r3, #1
 8005aaa:	6279      	str	r1, [r7, #36]	; 0x24
 8005aac:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005ab0:	b2d2      	uxtb	r2, r2
 8005ab2:	701a      	strb	r2, [r3, #0]
 8005ab4:	6a3b      	ldr	r3, [r7, #32]
 8005ab6:	09db      	lsrs	r3, r3, #7
 8005ab8:	623b      	str	r3, [r7, #32]
 8005aba:	6a3b      	ldr	r3, [r7, #32]
 8005abc:	2b7f      	cmp	r3, #127	; 0x7f
 8005abe:	d8f0      	bhi.n	8005aa2 <SEGGER_SYSVIEW_RecordU32x3+0xa2>
 8005ac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ac2:	1c5a      	adds	r2, r3, #1
 8005ac4:	627a      	str	r2, [r7, #36]	; 0x24
 8005ac6:	6a3a      	ldr	r2, [r7, #32]
 8005ac8:	b2d2      	uxtb	r2, r2
 8005aca:	701a      	strb	r2, [r3, #0]
 8005acc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ace:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8005ad0:	68fa      	ldr	r2, [r7, #12]
 8005ad2:	6979      	ldr	r1, [r7, #20]
 8005ad4:	69b8      	ldr	r0, [r7, #24]
 8005ad6:	f7ff fda5 	bl	8005624 <_SendPacket>
  RECORD_END();
 8005ada:	69fb      	ldr	r3, [r7, #28]
 8005adc:	f383 8811 	msr	BASEPRI, r3
}
 8005ae0:	bf00      	nop
 8005ae2:	3738      	adds	r7, #56	; 0x38
 8005ae4:	46bd      	mov	sp, r7
 8005ae6:	bd80      	pop	{r7, pc}
 8005ae8:	200083f4 	.word	0x200083f4

08005aec <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 8005aec:	b580      	push	{r7, lr}
 8005aee:	b090      	sub	sp, #64	; 0x40
 8005af0:	af00      	add	r7, sp, #0
 8005af2:	60f8      	str	r0, [r7, #12]
 8005af4:	60b9      	str	r1, [r7, #8]
 8005af6:	607a      	str	r2, [r7, #4]
 8005af8:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8005afa:	f3ef 8311 	mrs	r3, BASEPRI
 8005afe:	f04f 0120 	mov.w	r1, #32
 8005b02:	f381 8811 	msr	BASEPRI, r1
 8005b06:	61fb      	str	r3, [r7, #28]
 8005b08:	4840      	ldr	r0, [pc, #256]	; (8005c0c <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 8005b0a:	f7ff fc9c 	bl	8005446 <_PreparePacket>
 8005b0e:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8005b10:	69bb      	ldr	r3, [r7, #24]
 8005b12:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8005b14:	697b      	ldr	r3, [r7, #20]
 8005b16:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005b18:	68bb      	ldr	r3, [r7, #8]
 8005b1a:	63bb      	str	r3, [r7, #56]	; 0x38
 8005b1c:	e00b      	b.n	8005b36 <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 8005b1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b20:	b2da      	uxtb	r2, r3
 8005b22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b24:	1c59      	adds	r1, r3, #1
 8005b26:	63f9      	str	r1, [r7, #60]	; 0x3c
 8005b28:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005b2c:	b2d2      	uxtb	r2, r2
 8005b2e:	701a      	strb	r2, [r3, #0]
 8005b30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b32:	09db      	lsrs	r3, r3, #7
 8005b34:	63bb      	str	r3, [r7, #56]	; 0x38
 8005b36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b38:	2b7f      	cmp	r3, #127	; 0x7f
 8005b3a:	d8f0      	bhi.n	8005b1e <SEGGER_SYSVIEW_RecordU32x4+0x32>
 8005b3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b3e:	1c5a      	adds	r2, r3, #1
 8005b40:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005b42:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005b44:	b2d2      	uxtb	r2, r2
 8005b46:	701a      	strb	r2, [r3, #0]
 8005b48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b4a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8005b4c:	697b      	ldr	r3, [r7, #20]
 8005b4e:	637b      	str	r3, [r7, #52]	; 0x34
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	633b      	str	r3, [r7, #48]	; 0x30
 8005b54:	e00b      	b.n	8005b6e <SEGGER_SYSVIEW_RecordU32x4+0x82>
 8005b56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b58:	b2da      	uxtb	r2, r3
 8005b5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b5c:	1c59      	adds	r1, r3, #1
 8005b5e:	6379      	str	r1, [r7, #52]	; 0x34
 8005b60:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005b64:	b2d2      	uxtb	r2, r2
 8005b66:	701a      	strb	r2, [r3, #0]
 8005b68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b6a:	09db      	lsrs	r3, r3, #7
 8005b6c:	633b      	str	r3, [r7, #48]	; 0x30
 8005b6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b70:	2b7f      	cmp	r3, #127	; 0x7f
 8005b72:	d8f0      	bhi.n	8005b56 <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 8005b74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b76:	1c5a      	adds	r2, r3, #1
 8005b78:	637a      	str	r2, [r7, #52]	; 0x34
 8005b7a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005b7c:	b2d2      	uxtb	r2, r2
 8005b7e:	701a      	strb	r2, [r3, #0]
 8005b80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b82:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8005b84:	697b      	ldr	r3, [r7, #20]
 8005b86:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005b88:	683b      	ldr	r3, [r7, #0]
 8005b8a:	62bb      	str	r3, [r7, #40]	; 0x28
 8005b8c:	e00b      	b.n	8005ba6 <SEGGER_SYSVIEW_RecordU32x4+0xba>
 8005b8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b90:	b2da      	uxtb	r2, r3
 8005b92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b94:	1c59      	adds	r1, r3, #1
 8005b96:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005b98:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005b9c:	b2d2      	uxtb	r2, r2
 8005b9e:	701a      	strb	r2, [r3, #0]
 8005ba0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ba2:	09db      	lsrs	r3, r3, #7
 8005ba4:	62bb      	str	r3, [r7, #40]	; 0x28
 8005ba6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ba8:	2b7f      	cmp	r3, #127	; 0x7f
 8005baa:	d8f0      	bhi.n	8005b8e <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 8005bac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bae:	1c5a      	adds	r2, r3, #1
 8005bb0:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005bb2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005bb4:	b2d2      	uxtb	r2, r2
 8005bb6:	701a      	strb	r2, [r3, #0]
 8005bb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bba:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 8005bbc:	697b      	ldr	r3, [r7, #20]
 8005bbe:	627b      	str	r3, [r7, #36]	; 0x24
 8005bc0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005bc2:	623b      	str	r3, [r7, #32]
 8005bc4:	e00b      	b.n	8005bde <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 8005bc6:	6a3b      	ldr	r3, [r7, #32]
 8005bc8:	b2da      	uxtb	r2, r3
 8005bca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bcc:	1c59      	adds	r1, r3, #1
 8005bce:	6279      	str	r1, [r7, #36]	; 0x24
 8005bd0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005bd4:	b2d2      	uxtb	r2, r2
 8005bd6:	701a      	strb	r2, [r3, #0]
 8005bd8:	6a3b      	ldr	r3, [r7, #32]
 8005bda:	09db      	lsrs	r3, r3, #7
 8005bdc:	623b      	str	r3, [r7, #32]
 8005bde:	6a3b      	ldr	r3, [r7, #32]
 8005be0:	2b7f      	cmp	r3, #127	; 0x7f
 8005be2:	d8f0      	bhi.n	8005bc6 <SEGGER_SYSVIEW_RecordU32x4+0xda>
 8005be4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005be6:	1c5a      	adds	r2, r3, #1
 8005be8:	627a      	str	r2, [r7, #36]	; 0x24
 8005bea:	6a3a      	ldr	r2, [r7, #32]
 8005bec:	b2d2      	uxtb	r2, r2
 8005bee:	701a      	strb	r2, [r3, #0]
 8005bf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bf2:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8005bf4:	68fa      	ldr	r2, [r7, #12]
 8005bf6:	6979      	ldr	r1, [r7, #20]
 8005bf8:	69b8      	ldr	r0, [r7, #24]
 8005bfa:	f7ff fd13 	bl	8005624 <_SendPacket>
  RECORD_END();
 8005bfe:	69fb      	ldr	r3, [r7, #28]
 8005c00:	f383 8811 	msr	BASEPRI, r3
}
 8005c04:	bf00      	nop
 8005c06:	3740      	adds	r7, #64	; 0x40
 8005c08:	46bd      	mov	sp, r7
 8005c0a:	bd80      	pop	{r7, pc}
 8005c0c:	200083f4 	.word	0x200083f4

08005c10 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 8005c10:	b580      	push	{r7, lr}
 8005c12:	b08c      	sub	sp, #48	; 0x30
 8005c14:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 8005c16:	4b58      	ldr	r3, [pc, #352]	; (8005d78 <SEGGER_SYSVIEW_Start+0x168>)
 8005c18:	2201      	movs	r2, #1
 8005c1a:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8005c1c:	f3ef 8311 	mrs	r3, BASEPRI
 8005c20:	f04f 0120 	mov.w	r1, #32
 8005c24:	f381 8811 	msr	BASEPRI, r1
 8005c28:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 8005c2a:	4b53      	ldr	r3, [pc, #332]	; (8005d78 <SEGGER_SYSVIEW_Start+0x168>)
 8005c2c:	785b      	ldrb	r3, [r3, #1]
 8005c2e:	220a      	movs	r2, #10
 8005c30:	4952      	ldr	r1, [pc, #328]	; (8005d7c <SEGGER_SYSVIEW_Start+0x16c>)
 8005c32:	4618      	mov	r0, r3
 8005c34:	f7fa facc 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 8005c3e:	200a      	movs	r0, #10
 8005c40:	f7ff fe2a 	bl	8005898 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8005c44:	f3ef 8311 	mrs	r3, BASEPRI
 8005c48:	f04f 0120 	mov.w	r1, #32
 8005c4c:	f381 8811 	msr	BASEPRI, r1
 8005c50:	60bb      	str	r3, [r7, #8]
 8005c52:	484b      	ldr	r0, [pc, #300]	; (8005d80 <SEGGER_SYSVIEW_Start+0x170>)
 8005c54:	f7ff fbf7 	bl	8005446 <_PreparePacket>
 8005c58:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8005c5e:	683b      	ldr	r3, [r7, #0]
 8005c60:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005c62:	4b45      	ldr	r3, [pc, #276]	; (8005d78 <SEGGER_SYSVIEW_Start+0x168>)
 8005c64:	685b      	ldr	r3, [r3, #4]
 8005c66:	62bb      	str	r3, [r7, #40]	; 0x28
 8005c68:	e00b      	b.n	8005c82 <SEGGER_SYSVIEW_Start+0x72>
 8005c6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c6c:	b2da      	uxtb	r2, r3
 8005c6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c70:	1c59      	adds	r1, r3, #1
 8005c72:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005c74:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005c78:	b2d2      	uxtb	r2, r2
 8005c7a:	701a      	strb	r2, [r3, #0]
 8005c7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c7e:	09db      	lsrs	r3, r3, #7
 8005c80:	62bb      	str	r3, [r7, #40]	; 0x28
 8005c82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c84:	2b7f      	cmp	r3, #127	; 0x7f
 8005c86:	d8f0      	bhi.n	8005c6a <SEGGER_SYSVIEW_Start+0x5a>
 8005c88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c8a:	1c5a      	adds	r2, r3, #1
 8005c8c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005c8e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005c90:	b2d2      	uxtb	r2, r2
 8005c92:	701a      	strb	r2, [r3, #0]
 8005c94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c96:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8005c98:	683b      	ldr	r3, [r7, #0]
 8005c9a:	627b      	str	r3, [r7, #36]	; 0x24
 8005c9c:	4b36      	ldr	r3, [pc, #216]	; (8005d78 <SEGGER_SYSVIEW_Start+0x168>)
 8005c9e:	689b      	ldr	r3, [r3, #8]
 8005ca0:	623b      	str	r3, [r7, #32]
 8005ca2:	e00b      	b.n	8005cbc <SEGGER_SYSVIEW_Start+0xac>
 8005ca4:	6a3b      	ldr	r3, [r7, #32]
 8005ca6:	b2da      	uxtb	r2, r3
 8005ca8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005caa:	1c59      	adds	r1, r3, #1
 8005cac:	6279      	str	r1, [r7, #36]	; 0x24
 8005cae:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005cb2:	b2d2      	uxtb	r2, r2
 8005cb4:	701a      	strb	r2, [r3, #0]
 8005cb6:	6a3b      	ldr	r3, [r7, #32]
 8005cb8:	09db      	lsrs	r3, r3, #7
 8005cba:	623b      	str	r3, [r7, #32]
 8005cbc:	6a3b      	ldr	r3, [r7, #32]
 8005cbe:	2b7f      	cmp	r3, #127	; 0x7f
 8005cc0:	d8f0      	bhi.n	8005ca4 <SEGGER_SYSVIEW_Start+0x94>
 8005cc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cc4:	1c5a      	adds	r2, r3, #1
 8005cc6:	627a      	str	r2, [r7, #36]	; 0x24
 8005cc8:	6a3a      	ldr	r2, [r7, #32]
 8005cca:	b2d2      	uxtb	r2, r2
 8005ccc:	701a      	strb	r2, [r3, #0]
 8005cce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cd0:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8005cd2:	683b      	ldr	r3, [r7, #0]
 8005cd4:	61fb      	str	r3, [r7, #28]
 8005cd6:	4b28      	ldr	r3, [pc, #160]	; (8005d78 <SEGGER_SYSVIEW_Start+0x168>)
 8005cd8:	691b      	ldr	r3, [r3, #16]
 8005cda:	61bb      	str	r3, [r7, #24]
 8005cdc:	e00b      	b.n	8005cf6 <SEGGER_SYSVIEW_Start+0xe6>
 8005cde:	69bb      	ldr	r3, [r7, #24]
 8005ce0:	b2da      	uxtb	r2, r3
 8005ce2:	69fb      	ldr	r3, [r7, #28]
 8005ce4:	1c59      	adds	r1, r3, #1
 8005ce6:	61f9      	str	r1, [r7, #28]
 8005ce8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005cec:	b2d2      	uxtb	r2, r2
 8005cee:	701a      	strb	r2, [r3, #0]
 8005cf0:	69bb      	ldr	r3, [r7, #24]
 8005cf2:	09db      	lsrs	r3, r3, #7
 8005cf4:	61bb      	str	r3, [r7, #24]
 8005cf6:	69bb      	ldr	r3, [r7, #24]
 8005cf8:	2b7f      	cmp	r3, #127	; 0x7f
 8005cfa:	d8f0      	bhi.n	8005cde <SEGGER_SYSVIEW_Start+0xce>
 8005cfc:	69fb      	ldr	r3, [r7, #28]
 8005cfe:	1c5a      	adds	r2, r3, #1
 8005d00:	61fa      	str	r2, [r7, #28]
 8005d02:	69ba      	ldr	r2, [r7, #24]
 8005d04:	b2d2      	uxtb	r2, r2
 8005d06:	701a      	strb	r2, [r3, #0]
 8005d08:	69fb      	ldr	r3, [r7, #28]
 8005d0a:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8005d0c:	683b      	ldr	r3, [r7, #0]
 8005d0e:	617b      	str	r3, [r7, #20]
 8005d10:	2300      	movs	r3, #0
 8005d12:	613b      	str	r3, [r7, #16]
 8005d14:	e00b      	b.n	8005d2e <SEGGER_SYSVIEW_Start+0x11e>
 8005d16:	693b      	ldr	r3, [r7, #16]
 8005d18:	b2da      	uxtb	r2, r3
 8005d1a:	697b      	ldr	r3, [r7, #20]
 8005d1c:	1c59      	adds	r1, r3, #1
 8005d1e:	6179      	str	r1, [r7, #20]
 8005d20:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005d24:	b2d2      	uxtb	r2, r2
 8005d26:	701a      	strb	r2, [r3, #0]
 8005d28:	693b      	ldr	r3, [r7, #16]
 8005d2a:	09db      	lsrs	r3, r3, #7
 8005d2c:	613b      	str	r3, [r7, #16]
 8005d2e:	693b      	ldr	r3, [r7, #16]
 8005d30:	2b7f      	cmp	r3, #127	; 0x7f
 8005d32:	d8f0      	bhi.n	8005d16 <SEGGER_SYSVIEW_Start+0x106>
 8005d34:	697b      	ldr	r3, [r7, #20]
 8005d36:	1c5a      	adds	r2, r3, #1
 8005d38:	617a      	str	r2, [r7, #20]
 8005d3a:	693a      	ldr	r2, [r7, #16]
 8005d3c:	b2d2      	uxtb	r2, r2
 8005d3e:	701a      	strb	r2, [r3, #0]
 8005d40:	697b      	ldr	r3, [r7, #20]
 8005d42:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8005d44:	2218      	movs	r2, #24
 8005d46:	6839      	ldr	r1, [r7, #0]
 8005d48:	6878      	ldr	r0, [r7, #4]
 8005d4a:	f7ff fc6b 	bl	8005624 <_SendPacket>
      RECORD_END();
 8005d4e:	68bb      	ldr	r3, [r7, #8]
 8005d50:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8005d54:	4b08      	ldr	r3, [pc, #32]	; (8005d78 <SEGGER_SYSVIEW_Start+0x168>)
 8005d56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d002      	beq.n	8005d62 <SEGGER_SYSVIEW_Start+0x152>
      _SYSVIEW_Globals.pfSendSysDesc();
 8005d5c:	4b06      	ldr	r3, [pc, #24]	; (8005d78 <SEGGER_SYSVIEW_Start+0x168>)
 8005d5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d60:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 8005d62:	f000 f9eb 	bl	800613c <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 8005d66:	f000 f9b1 	bl	80060cc <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8005d6a:	f000 fc23 	bl	80065b4 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 8005d6e:	bf00      	nop
 8005d70:	3730      	adds	r7, #48	; 0x30
 8005d72:	46bd      	mov	sp, r7
 8005d74:	bd80      	pop	{r7, pc}
 8005d76:	bf00      	nop
 8005d78:	200083c4 	.word	0x200083c4
 8005d7c:	08006910 	.word	0x08006910
 8005d80:	200083f4 	.word	0x200083f4

08005d84 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8005d84:	b580      	push	{r7, lr}
 8005d86:	b082      	sub	sp, #8
 8005d88:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005d8a:	f3ef 8311 	mrs	r3, BASEPRI
 8005d8e:	f04f 0120 	mov.w	r1, #32
 8005d92:	f381 8811 	msr	BASEPRI, r1
 8005d96:	607b      	str	r3, [r7, #4]
 8005d98:	480b      	ldr	r0, [pc, #44]	; (8005dc8 <SEGGER_SYSVIEW_Stop+0x44>)
 8005d9a:	f7ff fb54 	bl	8005446 <_PreparePacket>
 8005d9e:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8005da0:	4b0a      	ldr	r3, [pc, #40]	; (8005dcc <SEGGER_SYSVIEW_Stop+0x48>)
 8005da2:	781b      	ldrb	r3, [r3, #0]
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d007      	beq.n	8005db8 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8005da8:	220b      	movs	r2, #11
 8005daa:	6839      	ldr	r1, [r7, #0]
 8005dac:	6838      	ldr	r0, [r7, #0]
 8005dae:	f7ff fc39 	bl	8005624 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 8005db2:	4b06      	ldr	r3, [pc, #24]	; (8005dcc <SEGGER_SYSVIEW_Stop+0x48>)
 8005db4:	2200      	movs	r2, #0
 8005db6:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	f383 8811 	msr	BASEPRI, r3
}
 8005dbe:	bf00      	nop
 8005dc0:	3708      	adds	r7, #8
 8005dc2:	46bd      	mov	sp, r7
 8005dc4:	bd80      	pop	{r7, pc}
 8005dc6:	bf00      	nop
 8005dc8:	200083f4 	.word	0x200083f4
 8005dcc:	200083c4 	.word	0x200083c4

08005dd0 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8005dd0:	b580      	push	{r7, lr}
 8005dd2:	b08c      	sub	sp, #48	; 0x30
 8005dd4:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8005dd6:	f3ef 8311 	mrs	r3, BASEPRI
 8005dda:	f04f 0120 	mov.w	r1, #32
 8005dde:	f381 8811 	msr	BASEPRI, r1
 8005de2:	60fb      	str	r3, [r7, #12]
 8005de4:	4845      	ldr	r0, [pc, #276]	; (8005efc <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 8005de6:	f7ff fb2e 	bl	8005446 <_PreparePacket>
 8005dea:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8005dec:	68bb      	ldr	r3, [r7, #8]
 8005dee:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005df4:	4b42      	ldr	r3, [pc, #264]	; (8005f00 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005df6:	685b      	ldr	r3, [r3, #4]
 8005df8:	62bb      	str	r3, [r7, #40]	; 0x28
 8005dfa:	e00b      	b.n	8005e14 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8005dfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dfe:	b2da      	uxtb	r2, r3
 8005e00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e02:	1c59      	adds	r1, r3, #1
 8005e04:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005e06:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005e0a:	b2d2      	uxtb	r2, r2
 8005e0c:	701a      	strb	r2, [r3, #0]
 8005e0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e10:	09db      	lsrs	r3, r3, #7
 8005e12:	62bb      	str	r3, [r7, #40]	; 0x28
 8005e14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e16:	2b7f      	cmp	r3, #127	; 0x7f
 8005e18:	d8f0      	bhi.n	8005dfc <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 8005e1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e1c:	1c5a      	adds	r2, r3, #1
 8005e1e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005e20:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005e22:	b2d2      	uxtb	r2, r2
 8005e24:	701a      	strb	r2, [r3, #0]
 8005e26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e28:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	627b      	str	r3, [r7, #36]	; 0x24
 8005e2e:	4b34      	ldr	r3, [pc, #208]	; (8005f00 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005e30:	689b      	ldr	r3, [r3, #8]
 8005e32:	623b      	str	r3, [r7, #32]
 8005e34:	e00b      	b.n	8005e4e <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 8005e36:	6a3b      	ldr	r3, [r7, #32]
 8005e38:	b2da      	uxtb	r2, r3
 8005e3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e3c:	1c59      	adds	r1, r3, #1
 8005e3e:	6279      	str	r1, [r7, #36]	; 0x24
 8005e40:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005e44:	b2d2      	uxtb	r2, r2
 8005e46:	701a      	strb	r2, [r3, #0]
 8005e48:	6a3b      	ldr	r3, [r7, #32]
 8005e4a:	09db      	lsrs	r3, r3, #7
 8005e4c:	623b      	str	r3, [r7, #32]
 8005e4e:	6a3b      	ldr	r3, [r7, #32]
 8005e50:	2b7f      	cmp	r3, #127	; 0x7f
 8005e52:	d8f0      	bhi.n	8005e36 <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8005e54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e56:	1c5a      	adds	r2, r3, #1
 8005e58:	627a      	str	r2, [r7, #36]	; 0x24
 8005e5a:	6a3a      	ldr	r2, [r7, #32]
 8005e5c:	b2d2      	uxtb	r2, r2
 8005e5e:	701a      	strb	r2, [r3, #0]
 8005e60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e62:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	61fb      	str	r3, [r7, #28]
 8005e68:	4b25      	ldr	r3, [pc, #148]	; (8005f00 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005e6a:	691b      	ldr	r3, [r3, #16]
 8005e6c:	61bb      	str	r3, [r7, #24]
 8005e6e:	e00b      	b.n	8005e88 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8005e70:	69bb      	ldr	r3, [r7, #24]
 8005e72:	b2da      	uxtb	r2, r3
 8005e74:	69fb      	ldr	r3, [r7, #28]
 8005e76:	1c59      	adds	r1, r3, #1
 8005e78:	61f9      	str	r1, [r7, #28]
 8005e7a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005e7e:	b2d2      	uxtb	r2, r2
 8005e80:	701a      	strb	r2, [r3, #0]
 8005e82:	69bb      	ldr	r3, [r7, #24]
 8005e84:	09db      	lsrs	r3, r3, #7
 8005e86:	61bb      	str	r3, [r7, #24]
 8005e88:	69bb      	ldr	r3, [r7, #24]
 8005e8a:	2b7f      	cmp	r3, #127	; 0x7f
 8005e8c:	d8f0      	bhi.n	8005e70 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 8005e8e:	69fb      	ldr	r3, [r7, #28]
 8005e90:	1c5a      	adds	r2, r3, #1
 8005e92:	61fa      	str	r2, [r7, #28]
 8005e94:	69ba      	ldr	r2, [r7, #24]
 8005e96:	b2d2      	uxtb	r2, r2
 8005e98:	701a      	strb	r2, [r3, #0]
 8005e9a:	69fb      	ldr	r3, [r7, #28]
 8005e9c:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	617b      	str	r3, [r7, #20]
 8005ea2:	2300      	movs	r3, #0
 8005ea4:	613b      	str	r3, [r7, #16]
 8005ea6:	e00b      	b.n	8005ec0 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8005ea8:	693b      	ldr	r3, [r7, #16]
 8005eaa:	b2da      	uxtb	r2, r3
 8005eac:	697b      	ldr	r3, [r7, #20]
 8005eae:	1c59      	adds	r1, r3, #1
 8005eb0:	6179      	str	r1, [r7, #20]
 8005eb2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005eb6:	b2d2      	uxtb	r2, r2
 8005eb8:	701a      	strb	r2, [r3, #0]
 8005eba:	693b      	ldr	r3, [r7, #16]
 8005ebc:	09db      	lsrs	r3, r3, #7
 8005ebe:	613b      	str	r3, [r7, #16]
 8005ec0:	693b      	ldr	r3, [r7, #16]
 8005ec2:	2b7f      	cmp	r3, #127	; 0x7f
 8005ec4:	d8f0      	bhi.n	8005ea8 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 8005ec6:	697b      	ldr	r3, [r7, #20]
 8005ec8:	1c5a      	adds	r2, r3, #1
 8005eca:	617a      	str	r2, [r7, #20]
 8005ecc:	693a      	ldr	r2, [r7, #16]
 8005ece:	b2d2      	uxtb	r2, r2
 8005ed0:	701a      	strb	r2, [r3, #0]
 8005ed2:	697b      	ldr	r3, [r7, #20]
 8005ed4:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8005ed6:	2218      	movs	r2, #24
 8005ed8:	6879      	ldr	r1, [r7, #4]
 8005eda:	68b8      	ldr	r0, [r7, #8]
 8005edc:	f7ff fba2 	bl	8005624 <_SendPacket>
  RECORD_END();
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 8005ee6:	4b06      	ldr	r3, [pc, #24]	; (8005f00 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005ee8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d002      	beq.n	8005ef4 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 8005eee:	4b04      	ldr	r3, [pc, #16]	; (8005f00 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005ef0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ef2:	4798      	blx	r3
  }
}
 8005ef4:	bf00      	nop
 8005ef6:	3730      	adds	r7, #48	; 0x30
 8005ef8:	46bd      	mov	sp, r7
 8005efa:	bd80      	pop	{r7, pc}
 8005efc:	200083f4 	.word	0x200083f4
 8005f00:	200083c4 	.word	0x200083c4

08005f04 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8005f04:	b580      	push	{r7, lr}
 8005f06:	b092      	sub	sp, #72	; 0x48
 8005f08:	af00      	add	r7, sp, #0
 8005f0a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8005f0c:	f3ef 8311 	mrs	r3, BASEPRI
 8005f10:	f04f 0120 	mov.w	r1, #32
 8005f14:	f381 8811 	msr	BASEPRI, r1
 8005f18:	617b      	str	r3, [r7, #20]
 8005f1a:	486a      	ldr	r0, [pc, #424]	; (80060c4 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 8005f1c:	f7ff fa93 	bl	8005446 <_PreparePacket>
 8005f20:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005f22:	693b      	ldr	r3, [r7, #16]
 8005f24:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	647b      	str	r3, [r7, #68]	; 0x44
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681a      	ldr	r2, [r3, #0]
 8005f2e:	4b66      	ldr	r3, [pc, #408]	; (80060c8 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8005f30:	691b      	ldr	r3, [r3, #16]
 8005f32:	1ad3      	subs	r3, r2, r3
 8005f34:	643b      	str	r3, [r7, #64]	; 0x40
 8005f36:	e00b      	b.n	8005f50 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 8005f38:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005f3a:	b2da      	uxtb	r2, r3
 8005f3c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005f3e:	1c59      	adds	r1, r3, #1
 8005f40:	6479      	str	r1, [r7, #68]	; 0x44
 8005f42:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005f46:	b2d2      	uxtb	r2, r2
 8005f48:	701a      	strb	r2, [r3, #0]
 8005f4a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005f4c:	09db      	lsrs	r3, r3, #7
 8005f4e:	643b      	str	r3, [r7, #64]	; 0x40
 8005f50:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005f52:	2b7f      	cmp	r3, #127	; 0x7f
 8005f54:	d8f0      	bhi.n	8005f38 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 8005f56:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005f58:	1c5a      	adds	r2, r3, #1
 8005f5a:	647a      	str	r2, [r7, #68]	; 0x44
 8005f5c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005f5e:	b2d2      	uxtb	r2, r2
 8005f60:	701a      	strb	r2, [r3, #0]
 8005f62:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005f64:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	689b      	ldr	r3, [r3, #8]
 8005f6e:	63bb      	str	r3, [r7, #56]	; 0x38
 8005f70:	e00b      	b.n	8005f8a <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 8005f72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f74:	b2da      	uxtb	r2, r3
 8005f76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f78:	1c59      	adds	r1, r3, #1
 8005f7a:	63f9      	str	r1, [r7, #60]	; 0x3c
 8005f7c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005f80:	b2d2      	uxtb	r2, r2
 8005f82:	701a      	strb	r2, [r3, #0]
 8005f84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f86:	09db      	lsrs	r3, r3, #7
 8005f88:	63bb      	str	r3, [r7, #56]	; 0x38
 8005f8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f8c:	2b7f      	cmp	r3, #127	; 0x7f
 8005f8e:	d8f0      	bhi.n	8005f72 <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 8005f90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f92:	1c5a      	adds	r2, r3, #1
 8005f94:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005f96:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005f98:	b2d2      	uxtb	r2, r2
 8005f9a:	701a      	strb	r2, [r3, #0]
 8005f9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f9e:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	685b      	ldr	r3, [r3, #4]
 8005fa4:	2220      	movs	r2, #32
 8005fa6:	4619      	mov	r1, r3
 8005fa8:	68f8      	ldr	r0, [r7, #12]
 8005faa:	f7ff f9ff 	bl	80053ac <_EncodeStr>
 8005fae:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8005fb0:	2209      	movs	r2, #9
 8005fb2:	68f9      	ldr	r1, [r7, #12]
 8005fb4:	6938      	ldr	r0, [r7, #16]
 8005fb6:	f7ff fb35 	bl	8005624 <_SendPacket>
  //
  pPayload = pPayloadStart;
 8005fba:	693b      	ldr	r3, [r7, #16]
 8005fbc:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	637b      	str	r3, [r7, #52]	; 0x34
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681a      	ldr	r2, [r3, #0]
 8005fc6:	4b40      	ldr	r3, [pc, #256]	; (80060c8 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8005fc8:	691b      	ldr	r3, [r3, #16]
 8005fca:	1ad3      	subs	r3, r2, r3
 8005fcc:	633b      	str	r3, [r7, #48]	; 0x30
 8005fce:	e00b      	b.n	8005fe8 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 8005fd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fd2:	b2da      	uxtb	r2, r3
 8005fd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005fd6:	1c59      	adds	r1, r3, #1
 8005fd8:	6379      	str	r1, [r7, #52]	; 0x34
 8005fda:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005fde:	b2d2      	uxtb	r2, r2
 8005fe0:	701a      	strb	r2, [r3, #0]
 8005fe2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fe4:	09db      	lsrs	r3, r3, #7
 8005fe6:	633b      	str	r3, [r7, #48]	; 0x30
 8005fe8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fea:	2b7f      	cmp	r3, #127	; 0x7f
 8005fec:	d8f0      	bhi.n	8005fd0 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 8005fee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ff0:	1c5a      	adds	r2, r3, #1
 8005ff2:	637a      	str	r2, [r7, #52]	; 0x34
 8005ff4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005ff6:	b2d2      	uxtb	r2, r2
 8005ff8:	701a      	strb	r2, [r3, #0]
 8005ffa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ffc:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	68db      	ldr	r3, [r3, #12]
 8006006:	62bb      	str	r3, [r7, #40]	; 0x28
 8006008:	e00b      	b.n	8006022 <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 800600a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800600c:	b2da      	uxtb	r2, r3
 800600e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006010:	1c59      	adds	r1, r3, #1
 8006012:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006014:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006018:	b2d2      	uxtb	r2, r2
 800601a:	701a      	strb	r2, [r3, #0]
 800601c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800601e:	09db      	lsrs	r3, r3, #7
 8006020:	62bb      	str	r3, [r7, #40]	; 0x28
 8006022:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006024:	2b7f      	cmp	r3, #127	; 0x7f
 8006026:	d8f0      	bhi.n	800600a <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 8006028:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800602a:	1c5a      	adds	r2, r3, #1
 800602c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800602e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006030:	b2d2      	uxtb	r2, r2
 8006032:	701a      	strb	r2, [r3, #0]
 8006034:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006036:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	627b      	str	r3, [r7, #36]	; 0x24
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	691b      	ldr	r3, [r3, #16]
 8006040:	623b      	str	r3, [r7, #32]
 8006042:	e00b      	b.n	800605c <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 8006044:	6a3b      	ldr	r3, [r7, #32]
 8006046:	b2da      	uxtb	r2, r3
 8006048:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800604a:	1c59      	adds	r1, r3, #1
 800604c:	6279      	str	r1, [r7, #36]	; 0x24
 800604e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006052:	b2d2      	uxtb	r2, r2
 8006054:	701a      	strb	r2, [r3, #0]
 8006056:	6a3b      	ldr	r3, [r7, #32]
 8006058:	09db      	lsrs	r3, r3, #7
 800605a:	623b      	str	r3, [r7, #32]
 800605c:	6a3b      	ldr	r3, [r7, #32]
 800605e:	2b7f      	cmp	r3, #127	; 0x7f
 8006060:	d8f0      	bhi.n	8006044 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 8006062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006064:	1c5a      	adds	r2, r3, #1
 8006066:	627a      	str	r2, [r7, #36]	; 0x24
 8006068:	6a3a      	ldr	r2, [r7, #32]
 800606a:	b2d2      	uxtb	r2, r2
 800606c:	701a      	strb	r2, [r3, #0]
 800606e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006070:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	61fb      	str	r3, [r7, #28]
 8006076:	2300      	movs	r3, #0
 8006078:	61bb      	str	r3, [r7, #24]
 800607a:	e00b      	b.n	8006094 <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 800607c:	69bb      	ldr	r3, [r7, #24]
 800607e:	b2da      	uxtb	r2, r3
 8006080:	69fb      	ldr	r3, [r7, #28]
 8006082:	1c59      	adds	r1, r3, #1
 8006084:	61f9      	str	r1, [r7, #28]
 8006086:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800608a:	b2d2      	uxtb	r2, r2
 800608c:	701a      	strb	r2, [r3, #0]
 800608e:	69bb      	ldr	r3, [r7, #24]
 8006090:	09db      	lsrs	r3, r3, #7
 8006092:	61bb      	str	r3, [r7, #24]
 8006094:	69bb      	ldr	r3, [r7, #24]
 8006096:	2b7f      	cmp	r3, #127	; 0x7f
 8006098:	d8f0      	bhi.n	800607c <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 800609a:	69fb      	ldr	r3, [r7, #28]
 800609c:	1c5a      	adds	r2, r3, #1
 800609e:	61fa      	str	r2, [r7, #28]
 80060a0:	69ba      	ldr	r2, [r7, #24]
 80060a2:	b2d2      	uxtb	r2, r2
 80060a4:	701a      	strb	r2, [r3, #0]
 80060a6:	69fb      	ldr	r3, [r7, #28]
 80060a8:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 80060aa:	2215      	movs	r2, #21
 80060ac:	68f9      	ldr	r1, [r7, #12]
 80060ae:	6938      	ldr	r0, [r7, #16]
 80060b0:	f7ff fab8 	bl	8005624 <_SendPacket>
  RECORD_END();
 80060b4:	697b      	ldr	r3, [r7, #20]
 80060b6:	f383 8811 	msr	BASEPRI, r3
}
 80060ba:	bf00      	nop
 80060bc:	3748      	adds	r7, #72	; 0x48
 80060be:	46bd      	mov	sp, r7
 80060c0:	bd80      	pop	{r7, pc}
 80060c2:	bf00      	nop
 80060c4:	200083f4 	.word	0x200083f4
 80060c8:	200083c4 	.word	0x200083c4

080060cc <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 80060cc:	b580      	push	{r7, lr}
 80060ce:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 80060d0:	4b07      	ldr	r3, [pc, #28]	; (80060f0 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80060d2:	6a1b      	ldr	r3, [r3, #32]
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d008      	beq.n	80060ea <SEGGER_SYSVIEW_SendTaskList+0x1e>
 80060d8:	4b05      	ldr	r3, [pc, #20]	; (80060f0 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80060da:	6a1b      	ldr	r3, [r3, #32]
 80060dc:	685b      	ldr	r3, [r3, #4]
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d003      	beq.n	80060ea <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 80060e2:	4b03      	ldr	r3, [pc, #12]	; (80060f0 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80060e4:	6a1b      	ldr	r3, [r3, #32]
 80060e6:	685b      	ldr	r3, [r3, #4]
 80060e8:	4798      	blx	r3
  }
}
 80060ea:	bf00      	nop
 80060ec:	bd80      	pop	{r7, pc}
 80060ee:	bf00      	nop
 80060f0:	200083c4 	.word	0x200083c4

080060f4 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 80060f4:	b580      	push	{r7, lr}
 80060f6:	b086      	sub	sp, #24
 80060f8:	af00      	add	r7, sp, #0
 80060fa:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80060fc:	f3ef 8311 	mrs	r3, BASEPRI
 8006100:	f04f 0120 	mov.w	r1, #32
 8006104:	f381 8811 	msr	BASEPRI, r1
 8006108:	617b      	str	r3, [r7, #20]
 800610a:	480b      	ldr	r0, [pc, #44]	; (8006138 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 800610c:	f7ff f99b 	bl	8005446 <_PreparePacket>
 8006110:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006112:	2280      	movs	r2, #128	; 0x80
 8006114:	6879      	ldr	r1, [r7, #4]
 8006116:	6938      	ldr	r0, [r7, #16]
 8006118:	f7ff f948 	bl	80053ac <_EncodeStr>
 800611c:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 800611e:	220e      	movs	r2, #14
 8006120:	68f9      	ldr	r1, [r7, #12]
 8006122:	6938      	ldr	r0, [r7, #16]
 8006124:	f7ff fa7e 	bl	8005624 <_SendPacket>
  RECORD_END();
 8006128:	697b      	ldr	r3, [r7, #20]
 800612a:	f383 8811 	msr	BASEPRI, r3
}
 800612e:	bf00      	nop
 8006130:	3718      	adds	r7, #24
 8006132:	46bd      	mov	sp, r7
 8006134:	bd80      	pop	{r7, pc}
 8006136:	bf00      	nop
 8006138:	200083f4 	.word	0x200083f4

0800613c <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 800613c:	b590      	push	{r4, r7, lr}
 800613e:	b083      	sub	sp, #12
 8006140:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 8006142:	4b15      	ldr	r3, [pc, #84]	; (8006198 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8006144:	6a1b      	ldr	r3, [r3, #32]
 8006146:	2b00      	cmp	r3, #0
 8006148:	d01a      	beq.n	8006180 <SEGGER_SYSVIEW_RecordSystime+0x44>
 800614a:	4b13      	ldr	r3, [pc, #76]	; (8006198 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 800614c:	6a1b      	ldr	r3, [r3, #32]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	2b00      	cmp	r3, #0
 8006152:	d015      	beq.n	8006180 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8006154:	4b10      	ldr	r3, [pc, #64]	; (8006198 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8006156:	6a1b      	ldr	r3, [r3, #32]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	4798      	blx	r3
 800615c:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8006160:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 8006162:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006166:	f04f 0200 	mov.w	r2, #0
 800616a:	f04f 0300 	mov.w	r3, #0
 800616e:	000a      	movs	r2, r1
 8006170:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8006172:	4613      	mov	r3, r2
 8006174:	461a      	mov	r2, r3
 8006176:	4621      	mov	r1, r4
 8006178:	200d      	movs	r0, #13
 800617a:	f7ff fbe7 	bl	800594c <SEGGER_SYSVIEW_RecordU32x2>
 800617e:	e006      	b.n	800618e <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8006180:	4b06      	ldr	r3, [pc, #24]	; (800619c <SEGGER_SYSVIEW_RecordSystime+0x60>)
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	4619      	mov	r1, r3
 8006186:	200c      	movs	r0, #12
 8006188:	f7ff fba4 	bl	80058d4 <SEGGER_SYSVIEW_RecordU32>
  }
}
 800618c:	bf00      	nop
 800618e:	bf00      	nop
 8006190:	370c      	adds	r7, #12
 8006192:	46bd      	mov	sp, r7
 8006194:	bd90      	pop	{r4, r7, pc}
 8006196:	bf00      	nop
 8006198:	200083c4 	.word	0x200083c4
 800619c:	e0001004 	.word	0xe0001004

080061a0 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 80061a0:	b580      	push	{r7, lr}
 80061a2:	b086      	sub	sp, #24
 80061a4:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80061a6:	f3ef 8311 	mrs	r3, BASEPRI
 80061aa:	f04f 0120 	mov.w	r1, #32
 80061ae:	f381 8811 	msr	BASEPRI, r1
 80061b2:	60fb      	str	r3, [r7, #12]
 80061b4:	4819      	ldr	r0, [pc, #100]	; (800621c <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 80061b6:	f7ff f946 	bl	8005446 <_PreparePacket>
 80061ba:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 80061bc:	68bb      	ldr	r3, [r7, #8]
 80061be:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 80061c0:	4b17      	ldr	r3, [pc, #92]	; (8006220 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80061c8:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	617b      	str	r3, [r7, #20]
 80061ce:	683b      	ldr	r3, [r7, #0]
 80061d0:	613b      	str	r3, [r7, #16]
 80061d2:	e00b      	b.n	80061ec <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 80061d4:	693b      	ldr	r3, [r7, #16]
 80061d6:	b2da      	uxtb	r2, r3
 80061d8:	697b      	ldr	r3, [r7, #20]
 80061da:	1c59      	adds	r1, r3, #1
 80061dc:	6179      	str	r1, [r7, #20]
 80061de:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80061e2:	b2d2      	uxtb	r2, r2
 80061e4:	701a      	strb	r2, [r3, #0]
 80061e6:	693b      	ldr	r3, [r7, #16]
 80061e8:	09db      	lsrs	r3, r3, #7
 80061ea:	613b      	str	r3, [r7, #16]
 80061ec:	693b      	ldr	r3, [r7, #16]
 80061ee:	2b7f      	cmp	r3, #127	; 0x7f
 80061f0:	d8f0      	bhi.n	80061d4 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 80061f2:	697b      	ldr	r3, [r7, #20]
 80061f4:	1c5a      	adds	r2, r3, #1
 80061f6:	617a      	str	r2, [r7, #20]
 80061f8:	693a      	ldr	r2, [r7, #16]
 80061fa:	b2d2      	uxtb	r2, r2
 80061fc:	701a      	strb	r2, [r3, #0]
 80061fe:	697b      	ldr	r3, [r7, #20]
 8006200:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 8006202:	2202      	movs	r2, #2
 8006204:	6879      	ldr	r1, [r7, #4]
 8006206:	68b8      	ldr	r0, [r7, #8]
 8006208:	f7ff fa0c 	bl	8005624 <_SendPacket>
  RECORD_END();
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	f383 8811 	msr	BASEPRI, r3
}
 8006212:	bf00      	nop
 8006214:	3718      	adds	r7, #24
 8006216:	46bd      	mov	sp, r7
 8006218:	bd80      	pop	{r7, pc}
 800621a:	bf00      	nop
 800621c:	200083f4 	.word	0x200083f4
 8006220:	e000ed04 	.word	0xe000ed04

08006224 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 8006224:	b580      	push	{r7, lr}
 8006226:	b082      	sub	sp, #8
 8006228:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800622a:	f3ef 8311 	mrs	r3, BASEPRI
 800622e:	f04f 0120 	mov.w	r1, #32
 8006232:	f381 8811 	msr	BASEPRI, r1
 8006236:	607b      	str	r3, [r7, #4]
 8006238:	4807      	ldr	r0, [pc, #28]	; (8006258 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 800623a:	f7ff f904 	bl	8005446 <_PreparePacket>
 800623e:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 8006240:	2203      	movs	r2, #3
 8006242:	6839      	ldr	r1, [r7, #0]
 8006244:	6838      	ldr	r0, [r7, #0]
 8006246:	f7ff f9ed 	bl	8005624 <_SendPacket>
  RECORD_END();
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	f383 8811 	msr	BASEPRI, r3
}
 8006250:	bf00      	nop
 8006252:	3708      	adds	r7, #8
 8006254:	46bd      	mov	sp, r7
 8006256:	bd80      	pop	{r7, pc}
 8006258:	200083f4 	.word	0x200083f4

0800625c <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 800625c:	b580      	push	{r7, lr}
 800625e:	b082      	sub	sp, #8
 8006260:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006262:	f3ef 8311 	mrs	r3, BASEPRI
 8006266:	f04f 0120 	mov.w	r1, #32
 800626a:	f381 8811 	msr	BASEPRI, r1
 800626e:	607b      	str	r3, [r7, #4]
 8006270:	4807      	ldr	r0, [pc, #28]	; (8006290 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 8006272:	f7ff f8e8 	bl	8005446 <_PreparePacket>
 8006276:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 8006278:	2212      	movs	r2, #18
 800627a:	6839      	ldr	r1, [r7, #0]
 800627c:	6838      	ldr	r0, [r7, #0]
 800627e:	f7ff f9d1 	bl	8005624 <_SendPacket>
  RECORD_END();
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	f383 8811 	msr	BASEPRI, r3
}
 8006288:	bf00      	nop
 800628a:	3708      	adds	r7, #8
 800628c:	46bd      	mov	sp, r7
 800628e:	bd80      	pop	{r7, pc}
 8006290:	200083f4 	.word	0x200083f4

08006294 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 8006294:	b580      	push	{r7, lr}
 8006296:	b082      	sub	sp, #8
 8006298:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800629a:	f3ef 8311 	mrs	r3, BASEPRI
 800629e:	f04f 0120 	mov.w	r1, #32
 80062a2:	f381 8811 	msr	BASEPRI, r1
 80062a6:	607b      	str	r3, [r7, #4]
 80062a8:	4807      	ldr	r0, [pc, #28]	; (80062c8 <SEGGER_SYSVIEW_OnIdle+0x34>)
 80062aa:	f7ff f8cc 	bl	8005446 <_PreparePacket>
 80062ae:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 80062b0:	2211      	movs	r2, #17
 80062b2:	6839      	ldr	r1, [r7, #0]
 80062b4:	6838      	ldr	r0, [r7, #0]
 80062b6:	f7ff f9b5 	bl	8005624 <_SendPacket>
  RECORD_END();
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	f383 8811 	msr	BASEPRI, r3
}
 80062c0:	bf00      	nop
 80062c2:	3708      	adds	r7, #8
 80062c4:	46bd      	mov	sp, r7
 80062c6:	bd80      	pop	{r7, pc}
 80062c8:	200083f4 	.word	0x200083f4

080062cc <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 80062cc:	b580      	push	{r7, lr}
 80062ce:	b088      	sub	sp, #32
 80062d0:	af00      	add	r7, sp, #0
 80062d2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80062d4:	f3ef 8311 	mrs	r3, BASEPRI
 80062d8:	f04f 0120 	mov.w	r1, #32
 80062dc:	f381 8811 	msr	BASEPRI, r1
 80062e0:	617b      	str	r3, [r7, #20]
 80062e2:	4819      	ldr	r0, [pc, #100]	; (8006348 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 80062e4:	f7ff f8af 	bl	8005446 <_PreparePacket>
 80062e8:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80062ea:	693b      	ldr	r3, [r7, #16]
 80062ec:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80062ee:	4b17      	ldr	r3, [pc, #92]	; (800634c <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 80062f0:	691b      	ldr	r3, [r3, #16]
 80062f2:	687a      	ldr	r2, [r7, #4]
 80062f4:	1ad3      	subs	r3, r2, r3
 80062f6:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	61fb      	str	r3, [r7, #28]
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	61bb      	str	r3, [r7, #24]
 8006300:	e00b      	b.n	800631a <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 8006302:	69bb      	ldr	r3, [r7, #24]
 8006304:	b2da      	uxtb	r2, r3
 8006306:	69fb      	ldr	r3, [r7, #28]
 8006308:	1c59      	adds	r1, r3, #1
 800630a:	61f9      	str	r1, [r7, #28]
 800630c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006310:	b2d2      	uxtb	r2, r2
 8006312:	701a      	strb	r2, [r3, #0]
 8006314:	69bb      	ldr	r3, [r7, #24]
 8006316:	09db      	lsrs	r3, r3, #7
 8006318:	61bb      	str	r3, [r7, #24]
 800631a:	69bb      	ldr	r3, [r7, #24]
 800631c:	2b7f      	cmp	r3, #127	; 0x7f
 800631e:	d8f0      	bhi.n	8006302 <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 8006320:	69fb      	ldr	r3, [r7, #28]
 8006322:	1c5a      	adds	r2, r3, #1
 8006324:	61fa      	str	r2, [r7, #28]
 8006326:	69ba      	ldr	r2, [r7, #24]
 8006328:	b2d2      	uxtb	r2, r2
 800632a:	701a      	strb	r2, [r3, #0]
 800632c:	69fb      	ldr	r3, [r7, #28]
 800632e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 8006330:	2208      	movs	r2, #8
 8006332:	68f9      	ldr	r1, [r7, #12]
 8006334:	6938      	ldr	r0, [r7, #16]
 8006336:	f7ff f975 	bl	8005624 <_SendPacket>
  RECORD_END();
 800633a:	697b      	ldr	r3, [r7, #20]
 800633c:	f383 8811 	msr	BASEPRI, r3
}
 8006340:	bf00      	nop
 8006342:	3720      	adds	r7, #32
 8006344:	46bd      	mov	sp, r7
 8006346:	bd80      	pop	{r7, pc}
 8006348:	200083f4 	.word	0x200083f4
 800634c:	200083c4 	.word	0x200083c4

08006350 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 8006350:	b580      	push	{r7, lr}
 8006352:	b088      	sub	sp, #32
 8006354:	af00      	add	r7, sp, #0
 8006356:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006358:	f3ef 8311 	mrs	r3, BASEPRI
 800635c:	f04f 0120 	mov.w	r1, #32
 8006360:	f381 8811 	msr	BASEPRI, r1
 8006364:	617b      	str	r3, [r7, #20]
 8006366:	4819      	ldr	r0, [pc, #100]	; (80063cc <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 8006368:	f7ff f86d 	bl	8005446 <_PreparePacket>
 800636c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800636e:	693b      	ldr	r3, [r7, #16]
 8006370:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006372:	4b17      	ldr	r3, [pc, #92]	; (80063d0 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8006374:	691b      	ldr	r3, [r3, #16]
 8006376:	687a      	ldr	r2, [r7, #4]
 8006378:	1ad3      	subs	r3, r2, r3
 800637a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	61fb      	str	r3, [r7, #28]
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	61bb      	str	r3, [r7, #24]
 8006384:	e00b      	b.n	800639e <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 8006386:	69bb      	ldr	r3, [r7, #24]
 8006388:	b2da      	uxtb	r2, r3
 800638a:	69fb      	ldr	r3, [r7, #28]
 800638c:	1c59      	adds	r1, r3, #1
 800638e:	61f9      	str	r1, [r7, #28]
 8006390:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006394:	b2d2      	uxtb	r2, r2
 8006396:	701a      	strb	r2, [r3, #0]
 8006398:	69bb      	ldr	r3, [r7, #24]
 800639a:	09db      	lsrs	r3, r3, #7
 800639c:	61bb      	str	r3, [r7, #24]
 800639e:	69bb      	ldr	r3, [r7, #24]
 80063a0:	2b7f      	cmp	r3, #127	; 0x7f
 80063a2:	d8f0      	bhi.n	8006386 <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 80063a4:	69fb      	ldr	r3, [r7, #28]
 80063a6:	1c5a      	adds	r2, r3, #1
 80063a8:	61fa      	str	r2, [r7, #28]
 80063aa:	69ba      	ldr	r2, [r7, #24]
 80063ac:	b2d2      	uxtb	r2, r2
 80063ae:	701a      	strb	r2, [r3, #0]
 80063b0:	69fb      	ldr	r3, [r7, #28]
 80063b2:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 80063b4:	2204      	movs	r2, #4
 80063b6:	68f9      	ldr	r1, [r7, #12]
 80063b8:	6938      	ldr	r0, [r7, #16]
 80063ba:	f7ff f933 	bl	8005624 <_SendPacket>
  RECORD_END();
 80063be:	697b      	ldr	r3, [r7, #20]
 80063c0:	f383 8811 	msr	BASEPRI, r3
}
 80063c4:	bf00      	nop
 80063c6:	3720      	adds	r7, #32
 80063c8:	46bd      	mov	sp, r7
 80063ca:	bd80      	pop	{r7, pc}
 80063cc:	200083f4 	.word	0x200083f4
 80063d0:	200083c4 	.word	0x200083c4

080063d4 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 80063d4:	b580      	push	{r7, lr}
 80063d6:	b088      	sub	sp, #32
 80063d8:	af00      	add	r7, sp, #0
 80063da:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80063dc:	f3ef 8311 	mrs	r3, BASEPRI
 80063e0:	f04f 0120 	mov.w	r1, #32
 80063e4:	f381 8811 	msr	BASEPRI, r1
 80063e8:	617b      	str	r3, [r7, #20]
 80063ea:	4819      	ldr	r0, [pc, #100]	; (8006450 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 80063ec:	f7ff f82b 	bl	8005446 <_PreparePacket>
 80063f0:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80063f2:	693b      	ldr	r3, [r7, #16]
 80063f4:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80063f6:	4b17      	ldr	r3, [pc, #92]	; (8006454 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 80063f8:	691b      	ldr	r3, [r3, #16]
 80063fa:	687a      	ldr	r2, [r7, #4]
 80063fc:	1ad3      	subs	r3, r2, r3
 80063fe:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	61fb      	str	r3, [r7, #28]
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	61bb      	str	r3, [r7, #24]
 8006408:	e00b      	b.n	8006422 <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 800640a:	69bb      	ldr	r3, [r7, #24]
 800640c:	b2da      	uxtb	r2, r3
 800640e:	69fb      	ldr	r3, [r7, #28]
 8006410:	1c59      	adds	r1, r3, #1
 8006412:	61f9      	str	r1, [r7, #28]
 8006414:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006418:	b2d2      	uxtb	r2, r2
 800641a:	701a      	strb	r2, [r3, #0]
 800641c:	69bb      	ldr	r3, [r7, #24]
 800641e:	09db      	lsrs	r3, r3, #7
 8006420:	61bb      	str	r3, [r7, #24]
 8006422:	69bb      	ldr	r3, [r7, #24]
 8006424:	2b7f      	cmp	r3, #127	; 0x7f
 8006426:	d8f0      	bhi.n	800640a <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 8006428:	69fb      	ldr	r3, [r7, #28]
 800642a:	1c5a      	adds	r2, r3, #1
 800642c:	61fa      	str	r2, [r7, #28]
 800642e:	69ba      	ldr	r2, [r7, #24]
 8006430:	b2d2      	uxtb	r2, r2
 8006432:	701a      	strb	r2, [r3, #0]
 8006434:	69fb      	ldr	r3, [r7, #28]
 8006436:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8006438:	2206      	movs	r2, #6
 800643a:	68f9      	ldr	r1, [r7, #12]
 800643c:	6938      	ldr	r0, [r7, #16]
 800643e:	f7ff f8f1 	bl	8005624 <_SendPacket>
  RECORD_END();
 8006442:	697b      	ldr	r3, [r7, #20]
 8006444:	f383 8811 	msr	BASEPRI, r3
}
 8006448:	bf00      	nop
 800644a:	3720      	adds	r7, #32
 800644c:	46bd      	mov	sp, r7
 800644e:	bd80      	pop	{r7, pc}
 8006450:	200083f4 	.word	0x200083f4
 8006454:	200083c4 	.word	0x200083c4

08006458 <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 8006458:	b480      	push	{r7}
 800645a:	b083      	sub	sp, #12
 800645c:	af00      	add	r7, sp, #0
 800645e:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 8006460:	4b04      	ldr	r3, [pc, #16]	; (8006474 <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 8006462:	691b      	ldr	r3, [r3, #16]
 8006464:	687a      	ldr	r2, [r7, #4]
 8006466:	1ad3      	subs	r3, r2, r3
}
 8006468:	4618      	mov	r0, r3
 800646a:	370c      	adds	r7, #12
 800646c:	46bd      	mov	sp, r7
 800646e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006472:	4770      	bx	lr
 8006474:	200083c4 	.word	0x200083c4

08006478 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8006478:	b580      	push	{r7, lr}
 800647a:	b08c      	sub	sp, #48	; 0x30
 800647c:	af00      	add	r7, sp, #0
 800647e:	4603      	mov	r3, r0
 8006480:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 8006482:	4b3b      	ldr	r3, [pc, #236]	; (8006570 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	2b00      	cmp	r3, #0
 8006488:	d06d      	beq.n	8006566 <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 800648a:	4b39      	ldr	r3, [pc, #228]	; (8006570 <SEGGER_SYSVIEW_SendModule+0xf8>)
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 8006490:	2300      	movs	r3, #0
 8006492:	62bb      	str	r3, [r7, #40]	; 0x28
 8006494:	e008      	b.n	80064a8 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 8006496:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006498:	691b      	ldr	r3, [r3, #16]
 800649a:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 800649c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d007      	beq.n	80064b2 <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 80064a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064a4:	3301      	adds	r3, #1
 80064a6:	62bb      	str	r3, [r7, #40]	; 0x28
 80064a8:	79fb      	ldrb	r3, [r7, #7]
 80064aa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80064ac:	429a      	cmp	r2, r3
 80064ae:	d3f2      	bcc.n	8006496 <SEGGER_SYSVIEW_SendModule+0x1e>
 80064b0:	e000      	b.n	80064b4 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 80064b2:	bf00      	nop
      }
    }
    if (pModule != 0) {
 80064b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d055      	beq.n	8006566 <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80064ba:	f3ef 8311 	mrs	r3, BASEPRI
 80064be:	f04f 0120 	mov.w	r1, #32
 80064c2:	f381 8811 	msr	BASEPRI, r1
 80064c6:	617b      	str	r3, [r7, #20]
 80064c8:	482a      	ldr	r0, [pc, #168]	; (8006574 <SEGGER_SYSVIEW_SendModule+0xfc>)
 80064ca:	f7fe ffbc 	bl	8005446 <_PreparePacket>
 80064ce:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 80064d0:	693b      	ldr	r3, [r7, #16]
 80064d2:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	627b      	str	r3, [r7, #36]	; 0x24
 80064d8:	79fb      	ldrb	r3, [r7, #7]
 80064da:	623b      	str	r3, [r7, #32]
 80064dc:	e00b      	b.n	80064f6 <SEGGER_SYSVIEW_SendModule+0x7e>
 80064de:	6a3b      	ldr	r3, [r7, #32]
 80064e0:	b2da      	uxtb	r2, r3
 80064e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064e4:	1c59      	adds	r1, r3, #1
 80064e6:	6279      	str	r1, [r7, #36]	; 0x24
 80064e8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80064ec:	b2d2      	uxtb	r2, r2
 80064ee:	701a      	strb	r2, [r3, #0]
 80064f0:	6a3b      	ldr	r3, [r7, #32]
 80064f2:	09db      	lsrs	r3, r3, #7
 80064f4:	623b      	str	r3, [r7, #32]
 80064f6:	6a3b      	ldr	r3, [r7, #32]
 80064f8:	2b7f      	cmp	r3, #127	; 0x7f
 80064fa:	d8f0      	bhi.n	80064de <SEGGER_SYSVIEW_SendModule+0x66>
 80064fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064fe:	1c5a      	adds	r2, r3, #1
 8006500:	627a      	str	r2, [r7, #36]	; 0x24
 8006502:	6a3a      	ldr	r2, [r7, #32]
 8006504:	b2d2      	uxtb	r2, r2
 8006506:	701a      	strb	r2, [r3, #0]
 8006508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800650a:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	61fb      	str	r3, [r7, #28]
 8006510:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006512:	689b      	ldr	r3, [r3, #8]
 8006514:	61bb      	str	r3, [r7, #24]
 8006516:	e00b      	b.n	8006530 <SEGGER_SYSVIEW_SendModule+0xb8>
 8006518:	69bb      	ldr	r3, [r7, #24]
 800651a:	b2da      	uxtb	r2, r3
 800651c:	69fb      	ldr	r3, [r7, #28]
 800651e:	1c59      	adds	r1, r3, #1
 8006520:	61f9      	str	r1, [r7, #28]
 8006522:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006526:	b2d2      	uxtb	r2, r2
 8006528:	701a      	strb	r2, [r3, #0]
 800652a:	69bb      	ldr	r3, [r7, #24]
 800652c:	09db      	lsrs	r3, r3, #7
 800652e:	61bb      	str	r3, [r7, #24]
 8006530:	69bb      	ldr	r3, [r7, #24]
 8006532:	2b7f      	cmp	r3, #127	; 0x7f
 8006534:	d8f0      	bhi.n	8006518 <SEGGER_SYSVIEW_SendModule+0xa0>
 8006536:	69fb      	ldr	r3, [r7, #28]
 8006538:	1c5a      	adds	r2, r3, #1
 800653a:	61fa      	str	r2, [r7, #28]
 800653c:	69ba      	ldr	r2, [r7, #24]
 800653e:	b2d2      	uxtb	r2, r2
 8006540:	701a      	strb	r2, [r3, #0]
 8006542:	69fb      	ldr	r3, [r7, #28]
 8006544:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006546:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	2280      	movs	r2, #128	; 0x80
 800654c:	4619      	mov	r1, r3
 800654e:	68f8      	ldr	r0, [r7, #12]
 8006550:	f7fe ff2c 	bl	80053ac <_EncodeStr>
 8006554:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 8006556:	2216      	movs	r2, #22
 8006558:	68f9      	ldr	r1, [r7, #12]
 800655a:	6938      	ldr	r0, [r7, #16]
 800655c:	f7ff f862 	bl	8005624 <_SendPacket>
      RECORD_END();
 8006560:	697b      	ldr	r3, [r7, #20]
 8006562:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 8006566:	bf00      	nop
 8006568:	3730      	adds	r7, #48	; 0x30
 800656a:	46bd      	mov	sp, r7
 800656c:	bd80      	pop	{r7, pc}
 800656e:	bf00      	nop
 8006570:	200083ec 	.word	0x200083ec
 8006574:	200083f4 	.word	0x200083f4

08006578 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8006578:	b580      	push	{r7, lr}
 800657a:	b082      	sub	sp, #8
 800657c:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 800657e:	4b0c      	ldr	r3, [pc, #48]	; (80065b0 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	2b00      	cmp	r3, #0
 8006584:	d00f      	beq.n	80065a6 <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 8006586:	4b0a      	ldr	r3, [pc, #40]	; (80065b0 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	68db      	ldr	r3, [r3, #12]
 8006590:	2b00      	cmp	r3, #0
 8006592:	d002      	beq.n	800659a <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	68db      	ldr	r3, [r3, #12]
 8006598:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	691b      	ldr	r3, [r3, #16]
 800659e:	607b      	str	r3, [r7, #4]
    } while (pModule);
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d1f2      	bne.n	800658c <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 80065a6:	bf00      	nop
 80065a8:	3708      	adds	r7, #8
 80065aa:	46bd      	mov	sp, r7
 80065ac:	bd80      	pop	{r7, pc}
 80065ae:	bf00      	nop
 80065b0:	200083ec 	.word	0x200083ec

080065b4 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 80065b4:	b580      	push	{r7, lr}
 80065b6:	b086      	sub	sp, #24
 80065b8:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 80065ba:	f3ef 8311 	mrs	r3, BASEPRI
 80065be:	f04f 0120 	mov.w	r1, #32
 80065c2:	f381 8811 	msr	BASEPRI, r1
 80065c6:	60fb      	str	r3, [r7, #12]
 80065c8:	4817      	ldr	r0, [pc, #92]	; (8006628 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 80065ca:	f7fe ff3c 	bl	8005446 <_PreparePacket>
 80065ce:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 80065d0:	68bb      	ldr	r3, [r7, #8]
 80065d2:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	617b      	str	r3, [r7, #20]
 80065d8:	4b14      	ldr	r3, [pc, #80]	; (800662c <SEGGER_SYSVIEW_SendNumModules+0x78>)
 80065da:	781b      	ldrb	r3, [r3, #0]
 80065dc:	613b      	str	r3, [r7, #16]
 80065de:	e00b      	b.n	80065f8 <SEGGER_SYSVIEW_SendNumModules+0x44>
 80065e0:	693b      	ldr	r3, [r7, #16]
 80065e2:	b2da      	uxtb	r2, r3
 80065e4:	697b      	ldr	r3, [r7, #20]
 80065e6:	1c59      	adds	r1, r3, #1
 80065e8:	6179      	str	r1, [r7, #20]
 80065ea:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80065ee:	b2d2      	uxtb	r2, r2
 80065f0:	701a      	strb	r2, [r3, #0]
 80065f2:	693b      	ldr	r3, [r7, #16]
 80065f4:	09db      	lsrs	r3, r3, #7
 80065f6:	613b      	str	r3, [r7, #16]
 80065f8:	693b      	ldr	r3, [r7, #16]
 80065fa:	2b7f      	cmp	r3, #127	; 0x7f
 80065fc:	d8f0      	bhi.n	80065e0 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 80065fe:	697b      	ldr	r3, [r7, #20]
 8006600:	1c5a      	adds	r2, r3, #1
 8006602:	617a      	str	r2, [r7, #20]
 8006604:	693a      	ldr	r2, [r7, #16]
 8006606:	b2d2      	uxtb	r2, r2
 8006608:	701a      	strb	r2, [r3, #0]
 800660a:	697b      	ldr	r3, [r7, #20]
 800660c:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 800660e:	221b      	movs	r2, #27
 8006610:	6879      	ldr	r1, [r7, #4]
 8006612:	68b8      	ldr	r0, [r7, #8]
 8006614:	f7ff f806 	bl	8005624 <_SendPacket>
  RECORD_END();
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	f383 8811 	msr	BASEPRI, r3
}
 800661e:	bf00      	nop
 8006620:	3718      	adds	r7, #24
 8006622:	46bd      	mov	sp, r7
 8006624:	bd80      	pop	{r7, pc}
 8006626:	bf00      	nop
 8006628:	200083f4 	.word	0x200083f4
 800662c:	200083f0 	.word	0x200083f0

08006630 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 8006630:	b580      	push	{r7, lr}
 8006632:	b08a      	sub	sp, #40	; 0x28
 8006634:	af00      	add	r7, sp, #0
 8006636:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006638:	f3ef 8311 	mrs	r3, BASEPRI
 800663c:	f04f 0120 	mov.w	r1, #32
 8006640:	f381 8811 	msr	BASEPRI, r1
 8006644:	617b      	str	r3, [r7, #20]
 8006646:	4827      	ldr	r0, [pc, #156]	; (80066e4 <SEGGER_SYSVIEW_Warn+0xb4>)
 8006648:	f7fe fefd 	bl	8005446 <_PreparePacket>
 800664c:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800664e:	2280      	movs	r2, #128	; 0x80
 8006650:	6879      	ldr	r1, [r7, #4]
 8006652:	6938      	ldr	r0, [r7, #16]
 8006654:	f7fe feaa 	bl	80053ac <_EncodeStr>
 8006658:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	627b      	str	r3, [r7, #36]	; 0x24
 800665e:	2301      	movs	r3, #1
 8006660:	623b      	str	r3, [r7, #32]
 8006662:	e00b      	b.n	800667c <SEGGER_SYSVIEW_Warn+0x4c>
 8006664:	6a3b      	ldr	r3, [r7, #32]
 8006666:	b2da      	uxtb	r2, r3
 8006668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800666a:	1c59      	adds	r1, r3, #1
 800666c:	6279      	str	r1, [r7, #36]	; 0x24
 800666e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006672:	b2d2      	uxtb	r2, r2
 8006674:	701a      	strb	r2, [r3, #0]
 8006676:	6a3b      	ldr	r3, [r7, #32]
 8006678:	09db      	lsrs	r3, r3, #7
 800667a:	623b      	str	r3, [r7, #32]
 800667c:	6a3b      	ldr	r3, [r7, #32]
 800667e:	2b7f      	cmp	r3, #127	; 0x7f
 8006680:	d8f0      	bhi.n	8006664 <SEGGER_SYSVIEW_Warn+0x34>
 8006682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006684:	1c5a      	adds	r2, r3, #1
 8006686:	627a      	str	r2, [r7, #36]	; 0x24
 8006688:	6a3a      	ldr	r2, [r7, #32]
 800668a:	b2d2      	uxtb	r2, r2
 800668c:	701a      	strb	r2, [r3, #0]
 800668e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006690:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	61fb      	str	r3, [r7, #28]
 8006696:	2300      	movs	r3, #0
 8006698:	61bb      	str	r3, [r7, #24]
 800669a:	e00b      	b.n	80066b4 <SEGGER_SYSVIEW_Warn+0x84>
 800669c:	69bb      	ldr	r3, [r7, #24]
 800669e:	b2da      	uxtb	r2, r3
 80066a0:	69fb      	ldr	r3, [r7, #28]
 80066a2:	1c59      	adds	r1, r3, #1
 80066a4:	61f9      	str	r1, [r7, #28]
 80066a6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80066aa:	b2d2      	uxtb	r2, r2
 80066ac:	701a      	strb	r2, [r3, #0]
 80066ae:	69bb      	ldr	r3, [r7, #24]
 80066b0:	09db      	lsrs	r3, r3, #7
 80066b2:	61bb      	str	r3, [r7, #24]
 80066b4:	69bb      	ldr	r3, [r7, #24]
 80066b6:	2b7f      	cmp	r3, #127	; 0x7f
 80066b8:	d8f0      	bhi.n	800669c <SEGGER_SYSVIEW_Warn+0x6c>
 80066ba:	69fb      	ldr	r3, [r7, #28]
 80066bc:	1c5a      	adds	r2, r3, #1
 80066be:	61fa      	str	r2, [r7, #28]
 80066c0:	69ba      	ldr	r2, [r7, #24]
 80066c2:	b2d2      	uxtb	r2, r2
 80066c4:	701a      	strb	r2, [r3, #0]
 80066c6:	69fb      	ldr	r3, [r7, #28]
 80066c8:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 80066ca:	221a      	movs	r2, #26
 80066cc:	68f9      	ldr	r1, [r7, #12]
 80066ce:	6938      	ldr	r0, [r7, #16]
 80066d0:	f7fe ffa8 	bl	8005624 <_SendPacket>
  RECORD_END();
 80066d4:	697b      	ldr	r3, [r7, #20]
 80066d6:	f383 8811 	msr	BASEPRI, r3
}
 80066da:	bf00      	nop
 80066dc:	3728      	adds	r7, #40	; 0x28
 80066de:	46bd      	mov	sp, r7
 80066e0:	bd80      	pop	{r7, pc}
 80066e2:	bf00      	nop
 80066e4:	200083f4 	.word	0x200083f4

080066e8 <memcmp>:
 80066e8:	b510      	push	{r4, lr}
 80066ea:	3901      	subs	r1, #1
 80066ec:	4402      	add	r2, r0
 80066ee:	4290      	cmp	r0, r2
 80066f0:	d101      	bne.n	80066f6 <memcmp+0xe>
 80066f2:	2000      	movs	r0, #0
 80066f4:	e005      	b.n	8006702 <memcmp+0x1a>
 80066f6:	7803      	ldrb	r3, [r0, #0]
 80066f8:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80066fc:	42a3      	cmp	r3, r4
 80066fe:	d001      	beq.n	8006704 <memcmp+0x1c>
 8006700:	1b18      	subs	r0, r3, r4
 8006702:	bd10      	pop	{r4, pc}
 8006704:	3001      	adds	r0, #1
 8006706:	e7f2      	b.n	80066ee <memcmp+0x6>

08006708 <memset>:
 8006708:	4402      	add	r2, r0
 800670a:	4603      	mov	r3, r0
 800670c:	4293      	cmp	r3, r2
 800670e:	d100      	bne.n	8006712 <memset+0xa>
 8006710:	4770      	bx	lr
 8006712:	f803 1b01 	strb.w	r1, [r3], #1
 8006716:	e7f9      	b.n	800670c <memset+0x4>

08006718 <__libc_init_array>:
 8006718:	b570      	push	{r4, r5, r6, lr}
 800671a:	4d0d      	ldr	r5, [pc, #52]	; (8006750 <__libc_init_array+0x38>)
 800671c:	4c0d      	ldr	r4, [pc, #52]	; (8006754 <__libc_init_array+0x3c>)
 800671e:	1b64      	subs	r4, r4, r5
 8006720:	10a4      	asrs	r4, r4, #2
 8006722:	2600      	movs	r6, #0
 8006724:	42a6      	cmp	r6, r4
 8006726:	d109      	bne.n	800673c <__libc_init_array+0x24>
 8006728:	4d0b      	ldr	r5, [pc, #44]	; (8006758 <__libc_init_array+0x40>)
 800672a:	4c0c      	ldr	r4, [pc, #48]	; (800675c <__libc_init_array+0x44>)
 800672c:	f000 f826 	bl	800677c <_init>
 8006730:	1b64      	subs	r4, r4, r5
 8006732:	10a4      	asrs	r4, r4, #2
 8006734:	2600      	movs	r6, #0
 8006736:	42a6      	cmp	r6, r4
 8006738:	d105      	bne.n	8006746 <__libc_init_array+0x2e>
 800673a:	bd70      	pop	{r4, r5, r6, pc}
 800673c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006740:	4798      	blx	r3
 8006742:	3601      	adds	r6, #1
 8006744:	e7ee      	b.n	8006724 <__libc_init_array+0xc>
 8006746:	f855 3b04 	ldr.w	r3, [r5], #4
 800674a:	4798      	blx	r3
 800674c:	3601      	adds	r6, #1
 800674e:	e7f2      	b.n	8006736 <__libc_init_array+0x1e>
 8006750:	0800691c 	.word	0x0800691c
 8006754:	0800691c 	.word	0x0800691c
 8006758:	0800691c 	.word	0x0800691c
 800675c:	08006920 	.word	0x08006920

08006760 <memcpy>:
 8006760:	440a      	add	r2, r1
 8006762:	4291      	cmp	r1, r2
 8006764:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8006768:	d100      	bne.n	800676c <memcpy+0xc>
 800676a:	4770      	bx	lr
 800676c:	b510      	push	{r4, lr}
 800676e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006772:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006776:	4291      	cmp	r1, r2
 8006778:	d1f9      	bne.n	800676e <memcpy+0xe>
 800677a:	bd10      	pop	{r4, pc}

0800677c <_init>:
 800677c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800677e:	bf00      	nop
 8006780:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006782:	bc08      	pop	{r3}
 8006784:	469e      	mov	lr, r3
 8006786:	4770      	bx	lr

08006788 <_fini>:
 8006788:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800678a:	bf00      	nop
 800678c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800678e:	bc08      	pop	{r3}
 8006790:	469e      	mov	lr, r3
 8006792:	4770      	bx	lr
