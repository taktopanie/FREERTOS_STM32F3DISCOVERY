
Toggling_LEDS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000767c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001b0  0800780c  0800780c  0001780c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080079bc  080079bc  00020064  2**0
                  CONTENTS
  4 .ARM          00000000  080079bc  080079bc  00020064  2**0
                  CONTENTS
  5 .preinit_array 00000000  080079bc  080079bc  00020064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080079bc  080079bc  000179bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080079c0  080079c0  000179c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  080079c4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020064  2**0
                  CONTENTS
 10 .bss          00005610  20000064  20000064  00020064  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20005674  20005674  00020064  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
 14 .debug_info   00013ddd  00000000  00000000  000200d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00002f9d  00000000  00000000  00033eb4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001320  00000000  00000000  00036e58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000eb0  00000000  00000000  00038178  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000204c4  00000000  00000000  00039028  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00015fd0  00000000  00000000  000594ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000c1be4  00000000  00000000  0006f4bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000054b8  00000000  00000000  001310a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 000000f2  00000000  00000000  00136558  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000064 	.word	0x20000064
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080077f4 	.word	0x080077f4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000068 	.word	0x20000068
 80001cc:	080077f4 	.word	0x080077f4

080001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001d0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001d2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001d6:	f8df 0088 	ldr.w	r0, [pc, #136]	; 8000260 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001da:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001de:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 80001e2:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 80001e4:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 80001e6:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 80001e8:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 80001ea:	d332      	bcc.n	8000252 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 80001ec:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 80001ee:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 80001f0:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 80001f2:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 80001f4:	d314      	bcc.n	8000220 <_CheckCase2>

080001f6 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 80001f6:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 80001f8:	19d0      	adds	r0, r2, r7
 80001fa:	bf00      	nop

080001fc <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 80001fc:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000200:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000204:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000206:	d005      	beq.n	8000214 <_CSDone>
        LDRB     R3,[R1], #+1
 8000208:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800020c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000210:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000212:	d1f3      	bne.n	80001fc <_LoopCopyStraight>

08000214 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000214:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000218:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800021a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800021c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800021e:	4770      	bx	lr

08000220 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000220:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000222:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000224:	d319      	bcc.n	800025a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000226:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000228:	1b12      	subs	r2, r2, r4

0800022a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800022a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800022e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000232:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000234:	d1f9      	bne.n	800022a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000236:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000238:	d005      	beq.n	8000246 <_No2ChunkNeeded>

0800023a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800023a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800023e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000242:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000244:	d1f9      	bne.n	800023a <_LoopCopyAfterWrapAround>

08000246 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000246:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800024a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800024c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800024e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000250:	4770      	bx	lr

08000252 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000252:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000254:	3801      	subs	r0, #1
        CMP      R0,R2
 8000256:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000258:	d2cd      	bcs.n	80001f6 <_Case4>

0800025a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800025a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800025c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800025e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000260:	20003f58 	.word	0x20003f58
	...

08000270 <memchr>:
 8000270:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000274:	2a10      	cmp	r2, #16
 8000276:	db2b      	blt.n	80002d0 <memchr+0x60>
 8000278:	f010 0f07 	tst.w	r0, #7
 800027c:	d008      	beq.n	8000290 <memchr+0x20>
 800027e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000282:	3a01      	subs	r2, #1
 8000284:	428b      	cmp	r3, r1
 8000286:	d02d      	beq.n	80002e4 <memchr+0x74>
 8000288:	f010 0f07 	tst.w	r0, #7
 800028c:	b342      	cbz	r2, 80002e0 <memchr+0x70>
 800028e:	d1f6      	bne.n	800027e <memchr+0xe>
 8000290:	b4f0      	push	{r4, r5, r6, r7}
 8000292:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000296:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800029a:	f022 0407 	bic.w	r4, r2, #7
 800029e:	f07f 0700 	mvns.w	r7, #0
 80002a2:	2300      	movs	r3, #0
 80002a4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002a8:	3c08      	subs	r4, #8
 80002aa:	ea85 0501 	eor.w	r5, r5, r1
 80002ae:	ea86 0601 	eor.w	r6, r6, r1
 80002b2:	fa85 f547 	uadd8	r5, r5, r7
 80002b6:	faa3 f587 	sel	r5, r3, r7
 80002ba:	fa86 f647 	uadd8	r6, r6, r7
 80002be:	faa5 f687 	sel	r6, r5, r7
 80002c2:	b98e      	cbnz	r6, 80002e8 <memchr+0x78>
 80002c4:	d1ee      	bne.n	80002a4 <memchr+0x34>
 80002c6:	bcf0      	pop	{r4, r5, r6, r7}
 80002c8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002cc:	f002 0207 	and.w	r2, r2, #7
 80002d0:	b132      	cbz	r2, 80002e0 <memchr+0x70>
 80002d2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002d6:	3a01      	subs	r2, #1
 80002d8:	ea83 0301 	eor.w	r3, r3, r1
 80002dc:	b113      	cbz	r3, 80002e4 <memchr+0x74>
 80002de:	d1f8      	bne.n	80002d2 <memchr+0x62>
 80002e0:	2000      	movs	r0, #0
 80002e2:	4770      	bx	lr
 80002e4:	3801      	subs	r0, #1
 80002e6:	4770      	bx	lr
 80002e8:	2d00      	cmp	r5, #0
 80002ea:	bf06      	itte	eq
 80002ec:	4635      	moveq	r5, r6
 80002ee:	3803      	subeq	r0, #3
 80002f0:	3807      	subne	r0, #7
 80002f2:	f015 0f01 	tst.w	r5, #1
 80002f6:	d107      	bne.n	8000308 <memchr+0x98>
 80002f8:	3001      	adds	r0, #1
 80002fa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002fe:	bf02      	ittt	eq
 8000300:	3001      	addeq	r0, #1
 8000302:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000306:	3001      	addeq	r0, #1
 8000308:	bcf0      	pop	{r4, r5, r6, r7}
 800030a:	3801      	subs	r0, #1
 800030c:	4770      	bx	lr
 800030e:	bf00      	nop

08000310 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000310:	b580      	push	{r7, lr}
 8000312:	b088      	sub	sp, #32
 8000314:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000316:	f000 fabb 	bl	8000890 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800031a:	f000 f853 	bl	80003c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800031e:	f000 f893 	bl	8000448 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  DWT_CTRL |= (1 << 0);
 8000322:	4b21      	ldr	r3, [pc, #132]	; (80003a8 <main+0x98>)
 8000324:	681b      	ldr	r3, [r3, #0]
 8000326:	4a20      	ldr	r2, [pc, #128]	; (80003a8 <main+0x98>)
 8000328:	f043 0301 	orr.w	r3, r3, #1
 800032c:	6013      	str	r3, [r2, #0]


  SEGGER_SYSVIEW_Conf();
 800032e:	f004 fd4f 	bl	8004dd0 <SEGGER_SYSVIEW_Conf>

  SEGGER_SYSVIEW_Start();
 8000332:	f006 f817 	bl	8006364 <SEGGER_SYSVIEW_Start>

  Status = xTaskCreate(task1_handler, "Task-1", configMINIMAL_STACK_SIZE, "Hello world from Task-1", 2, &task1_hadle );
 8000336:	f107 0308 	add.w	r3, r7, #8
 800033a:	9301      	str	r3, [sp, #4]
 800033c:	2302      	movs	r3, #2
 800033e:	9300      	str	r3, [sp, #0]
 8000340:	4b1a      	ldr	r3, [pc, #104]	; (80003ac <main+0x9c>)
 8000342:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000346:	491a      	ldr	r1, [pc, #104]	; (80003b0 <main+0xa0>)
 8000348:	481a      	ldr	r0, [pc, #104]	; (80003b4 <main+0xa4>)
 800034a:	f002 fe51 	bl	8002ff0 <xTaskCreate>
 800034e:	6178      	str	r0, [r7, #20]
  configASSERT(Status == pdPASS);
 8000350:	697b      	ldr	r3, [r7, #20]
 8000352:	2b01      	cmp	r3, #1
 8000354:	d00a      	beq.n	800036c <main+0x5c>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8000356:	f04f 0350 	mov.w	r3, #80	; 0x50
 800035a:	f383 8811 	msr	BASEPRI, r3
 800035e:	f3bf 8f6f 	isb	sy
 8000362:	f3bf 8f4f 	dsb	sy
 8000366:	613b      	str	r3, [r7, #16]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 8000368:	bf00      	nop
 800036a:	e7fe      	b.n	800036a <main+0x5a>

  Status = xTaskCreate(task2_handler, "Task-2", configMINIMAL_STACK_SIZE, "Hello world from Task-2", 2, &task2_hadle );
 800036c:	1d3b      	adds	r3, r7, #4
 800036e:	9301      	str	r3, [sp, #4]
 8000370:	2302      	movs	r3, #2
 8000372:	9300      	str	r3, [sp, #0]
 8000374:	4b10      	ldr	r3, [pc, #64]	; (80003b8 <main+0xa8>)
 8000376:	f44f 7280 	mov.w	r2, #256	; 0x100
 800037a:	4910      	ldr	r1, [pc, #64]	; (80003bc <main+0xac>)
 800037c:	4810      	ldr	r0, [pc, #64]	; (80003c0 <main+0xb0>)
 800037e:	f002 fe37 	bl	8002ff0 <xTaskCreate>
 8000382:	6178      	str	r0, [r7, #20]
  configASSERT(Status == pdPASS);
 8000384:	697b      	ldr	r3, [r7, #20]
 8000386:	2b01      	cmp	r3, #1
 8000388:	d00a      	beq.n	80003a0 <main+0x90>
        __asm volatile
 800038a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800038e:	f383 8811 	msr	BASEPRI, r3
 8000392:	f3bf 8f6f 	isb	sy
 8000396:	f3bf 8f4f 	dsb	sy
 800039a:	60fb      	str	r3, [r7, #12]
    }
 800039c:	bf00      	nop
 800039e:	e7fe      	b.n	800039e <main+0x8e>

  //START SCHEDULER
  vTaskStartScheduler();
 80003a0:	f002 ffae 	bl	8003300 <vTaskStartScheduler>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80003a4:	e7fe      	b.n	80003a4 <main+0x94>
 80003a6:	bf00      	nop
 80003a8:	e0001000 	.word	0xe0001000
 80003ac:	0800780c 	.word	0x0800780c
 80003b0:	08007824 	.word	0x08007824
 80003b4:	080005b1 	.word	0x080005b1
 80003b8:	0800782c 	.word	0x0800782c
 80003bc:	08007844 	.word	0x08007844
 80003c0:	080005d9 	.word	0x080005d9

080003c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80003c4:	b580      	push	{r7, lr}
 80003c6:	b090      	sub	sp, #64	; 0x40
 80003c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003ca:	f107 0318 	add.w	r3, r7, #24
 80003ce:	2228      	movs	r2, #40	; 0x28
 80003d0:	2100      	movs	r1, #0
 80003d2:	4618      	mov	r0, r3
 80003d4:	f006 fd8a 	bl	8006eec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003d8:	1d3b      	adds	r3, r7, #4
 80003da:	2200      	movs	r2, #0
 80003dc:	601a      	str	r2, [r3, #0]
 80003de:	605a      	str	r2, [r3, #4]
 80003e0:	609a      	str	r2, [r3, #8]
 80003e2:	60da      	str	r2, [r3, #12]
 80003e4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80003e6:	2302      	movs	r3, #2
 80003e8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80003ea:	2301      	movs	r3, #1
 80003ec:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80003ee:	2310      	movs	r3, #16
 80003f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80003f2:	2302      	movs	r3, #2
 80003f4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80003f6:	2300      	movs	r3, #0
 80003f8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 80003fa:	f44f 1320 	mov.w	r3, #2621440	; 0x280000
 80003fe:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000400:	f107 0318 	add.w	r3, r7, #24
 8000404:	4618      	mov	r0, r3
 8000406:	f000 fced 	bl	8000de4 <HAL_RCC_OscConfig>
 800040a:	4603      	mov	r3, r0
 800040c:	2b00      	cmp	r3, #0
 800040e:	d001      	beq.n	8000414 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000410:	f000 f908 	bl	8000624 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000414:	230f      	movs	r3, #15
 8000416:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000418:	2302      	movs	r3, #2
 800041a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800041c:	2300      	movs	r3, #0
 800041e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000420:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000424:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000426:	2300      	movs	r3, #0
 8000428:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800042a:	1d3b      	adds	r3, r7, #4
 800042c:	2101      	movs	r1, #1
 800042e:	4618      	mov	r0, r3
 8000430:	f001 fd16 	bl	8001e60 <HAL_RCC_ClockConfig>
 8000434:	4603      	mov	r3, r0
 8000436:	2b00      	cmp	r3, #0
 8000438:	d001      	beq.n	800043e <SystemClock_Config+0x7a>
  {
    Error_Handler();
 800043a:	f000 f8f3 	bl	8000624 <Error_Handler>
  }
}
 800043e:	bf00      	nop
 8000440:	3740      	adds	r7, #64	; 0x40
 8000442:	46bd      	mov	sp, r7
 8000444:	bd80      	pop	{r7, pc}
	...

08000448 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000448:	b580      	push	{r7, lr}
 800044a:	b08a      	sub	sp, #40	; 0x28
 800044c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800044e:	f107 0314 	add.w	r3, r7, #20
 8000452:	2200      	movs	r2, #0
 8000454:	601a      	str	r2, [r3, #0]
 8000456:	605a      	str	r2, [r3, #4]
 8000458:	609a      	str	r2, [r3, #8]
 800045a:	60da      	str	r2, [r3, #12]
 800045c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800045e:	4b51      	ldr	r3, [pc, #324]	; (80005a4 <MX_GPIO_Init+0x15c>)
 8000460:	695b      	ldr	r3, [r3, #20]
 8000462:	4a50      	ldr	r2, [pc, #320]	; (80005a4 <MX_GPIO_Init+0x15c>)
 8000464:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000468:	6153      	str	r3, [r2, #20]
 800046a:	4b4e      	ldr	r3, [pc, #312]	; (80005a4 <MX_GPIO_Init+0x15c>)
 800046c:	695b      	ldr	r3, [r3, #20]
 800046e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000472:	613b      	str	r3, [r7, #16]
 8000474:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000476:	4b4b      	ldr	r3, [pc, #300]	; (80005a4 <MX_GPIO_Init+0x15c>)
 8000478:	695b      	ldr	r3, [r3, #20]
 800047a:	4a4a      	ldr	r2, [pc, #296]	; (80005a4 <MX_GPIO_Init+0x15c>)
 800047c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000480:	6153      	str	r3, [r2, #20]
 8000482:	4b48      	ldr	r3, [pc, #288]	; (80005a4 <MX_GPIO_Init+0x15c>)
 8000484:	695b      	ldr	r3, [r3, #20]
 8000486:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800048a:	60fb      	str	r3, [r7, #12]
 800048c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800048e:	4b45      	ldr	r3, [pc, #276]	; (80005a4 <MX_GPIO_Init+0x15c>)
 8000490:	695b      	ldr	r3, [r3, #20]
 8000492:	4a44      	ldr	r2, [pc, #272]	; (80005a4 <MX_GPIO_Init+0x15c>)
 8000494:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000498:	6153      	str	r3, [r2, #20]
 800049a:	4b42      	ldr	r3, [pc, #264]	; (80005a4 <MX_GPIO_Init+0x15c>)
 800049c:	695b      	ldr	r3, [r3, #20]
 800049e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80004a2:	60bb      	str	r3, [r7, #8]
 80004a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004a6:	4b3f      	ldr	r3, [pc, #252]	; (80005a4 <MX_GPIO_Init+0x15c>)
 80004a8:	695b      	ldr	r3, [r3, #20]
 80004aa:	4a3e      	ldr	r2, [pc, #248]	; (80005a4 <MX_GPIO_Init+0x15c>)
 80004ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80004b0:	6153      	str	r3, [r2, #20]
 80004b2:	4b3c      	ldr	r3, [pc, #240]	; (80005a4 <MX_GPIO_Init+0x15c>)
 80004b4:	695b      	ldr	r3, [r3, #20]
 80004b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80004ba:	607b      	str	r3, [r7, #4]
 80004bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80004be:	4b39      	ldr	r3, [pc, #228]	; (80005a4 <MX_GPIO_Init+0x15c>)
 80004c0:	695b      	ldr	r3, [r3, #20]
 80004c2:	4a38      	ldr	r2, [pc, #224]	; (80005a4 <MX_GPIO_Init+0x15c>)
 80004c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80004c8:	6153      	str	r3, [r2, #20]
 80004ca:	4b36      	ldr	r3, [pc, #216]	; (80005a4 <MX_GPIO_Init+0x15c>)
 80004cc:	695b      	ldr	r3, [r3, #20]
 80004ce:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80004d2:	603b      	str	r3, [r7, #0]
 80004d4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 80004d6:	2200      	movs	r2, #0
 80004d8:	f64f 7108 	movw	r1, #65288	; 0xff08
 80004dc:	4832      	ldr	r0, [pc, #200]	; (80005a8 <MX_GPIO_Init+0x160>)
 80004de:	f000 fc69 	bl	8000db4 <HAL_GPIO_WritePin>
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : DRDY_Pin MEMS_INT3_Pin MEMS_INT4_Pin MEMS_INT1_Pin
                           MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = DRDY_Pin|MEMS_INT3_Pin|MEMS_INT4_Pin|MEMS_INT1_Pin
 80004e2:	2337      	movs	r3, #55	; 0x37
 80004e4:	617b      	str	r3, [r7, #20]
                          |MEMS_INT2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80004e6:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80004ea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004ec:	2300      	movs	r3, #0
 80004ee:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80004f0:	f107 0314 	add.w	r3, r7, #20
 80004f4:	4619      	mov	r1, r3
 80004f6:	482c      	ldr	r0, [pc, #176]	; (80005a8 <MX_GPIO_Init+0x160>)
 80004f8:	f000 fae2 	bl	8000ac0 <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_I2C_SPI_Pin LD4_Pin LD3_Pin LD5_Pin
                           LD7_Pin LD9_Pin LD10_Pin LD8_Pin
                           LD6_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 80004fc:	f64f 7308 	movw	r3, #65288	; 0xff08
 8000500:	617b      	str	r3, [r7, #20]
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000502:	2301      	movs	r3, #1
 8000504:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000506:	2300      	movs	r3, #0
 8000508:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800050a:	2300      	movs	r3, #0
 800050c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800050e:	f107 0314 	add.w	r3, r7, #20
 8000512:	4619      	mov	r1, r3
 8000514:	4824      	ldr	r0, [pc, #144]	; (80005a8 <MX_GPIO_Init+0x160>)
 8000516:	f000 fad3 	bl	8000ac0 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800051a:	2301      	movs	r3, #1
 800051c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800051e:	2300      	movs	r3, #0
 8000520:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000522:	2300      	movs	r3, #0
 8000524:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000526:	f107 0314 	add.w	r3, r7, #20
 800052a:	4619      	mov	r1, r3
 800052c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000530:	f000 fac6 	bl	8000ac0 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MISOA7_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MISOA7_Pin;
 8000534:	23e0      	movs	r3, #224	; 0xe0
 8000536:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000538:	2302      	movs	r3, #2
 800053a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800053c:	2300      	movs	r3, #0
 800053e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000540:	2300      	movs	r3, #0
 8000542:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000544:	2305      	movs	r3, #5
 8000546:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000548:	f107 0314 	add.w	r3, r7, #20
 800054c:	4619      	mov	r1, r3
 800054e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000552:	f000 fab5 	bl	8000ac0 <HAL_GPIO_Init>

  /*Configure GPIO pins : DM_Pin DP_Pin */
  GPIO_InitStruct.Pin = DM_Pin|DP_Pin;
 8000556:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800055a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800055c:	2302      	movs	r3, #2
 800055e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000560:	2300      	movs	r3, #0
 8000562:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000564:	2303      	movs	r3, #3
 8000566:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 8000568:	230e      	movs	r3, #14
 800056a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800056c:	f107 0314 	add.w	r3, r7, #20
 8000570:	4619      	mov	r1, r3
 8000572:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000576:	f000 faa3 	bl	8000ac0 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2C1_SCL_Pin I2C1_SDA_Pin */
  GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 800057a:	23c0      	movs	r3, #192	; 0xc0
 800057c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800057e:	2312      	movs	r3, #18
 8000580:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000582:	2300      	movs	r3, #0
 8000584:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000586:	2300      	movs	r3, #0
 8000588:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800058a:	2304      	movs	r3, #4
 800058c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800058e:	f107 0314 	add.w	r3, r7, #20
 8000592:	4619      	mov	r1, r3
 8000594:	4805      	ldr	r0, [pc, #20]	; (80005ac <MX_GPIO_Init+0x164>)
 8000596:	f000 fa93 	bl	8000ac0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800059a:	bf00      	nop
 800059c:	3728      	adds	r7, #40	; 0x28
 800059e:	46bd      	mov	sp, r7
 80005a0:	bd80      	pop	{r7, pc}
 80005a2:	bf00      	nop
 80005a4:	40021000 	.word	0x40021000
 80005a8:	48001000 	.word	0x48001000
 80005ac:	48000400 	.word	0x48000400

080005b0 <task1_handler>:

/* USER CODE BEGIN 4 */
static void task1_handler(void* parameters){
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b09c      	sub	sp, #112	; 0x70
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	6078      	str	r0, [r7, #4]

	char msg[100];
	while(1){
		//printf("%s\n", (char*) parameters);
		snprintf(msg, 100, "%s\n", (char*)parameters);
 80005b8:	f107 000c 	add.w	r0, r7, #12
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	4a05      	ldr	r2, [pc, #20]	; (80005d4 <task1_handler+0x24>)
 80005c0:	2164      	movs	r1, #100	; 0x64
 80005c2:	f006 fc4f 	bl	8006e64 <sniprintf>
		SEGGER_SYSVIEW_PrintfTarget(msg);
 80005c6:	f107 030c 	add.w	r3, r7, #12
 80005ca:	4618      	mov	r0, r3
 80005cc:	f006 fbda 	bl	8006d84 <SEGGER_SYSVIEW_PrintfTarget>
		snprintf(msg, 100, "%s\n", (char*)parameters);
 80005d0:	e7f2      	b.n	80005b8 <task1_handler+0x8>
 80005d2:	bf00      	nop
 80005d4:	0800784c 	.word	0x0800784c

080005d8 <task2_handler>:

		//taskYIELD();
	}
}

static void task2_handler(void* parameters){
 80005d8:	b580      	push	{r7, lr}
 80005da:	b09c      	sub	sp, #112	; 0x70
 80005dc:	af00      	add	r7, sp, #0
 80005de:	6078      	str	r0, [r7, #4]

	char msg[100];
	while(1){
		//printf("%s\n", (char*) parameters);
		snprintf(msg, 100, "%s\n", (char*)parameters);
 80005e0:	f107 000c 	add.w	r0, r7, #12
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	4a05      	ldr	r2, [pc, #20]	; (80005fc <task2_handler+0x24>)
 80005e8:	2164      	movs	r1, #100	; 0x64
 80005ea:	f006 fc3b 	bl	8006e64 <sniprintf>
		SEGGER_SYSVIEW_PrintfTarget(msg);
 80005ee:	f107 030c 	add.w	r3, r7, #12
 80005f2:	4618      	mov	r0, r3
 80005f4:	f006 fbc6 	bl	8006d84 <SEGGER_SYSVIEW_PrintfTarget>
		snprintf(msg, 100, "%s\n", (char*)parameters);
 80005f8:	e7f2      	b.n	80005e0 <task2_handler+0x8>
 80005fa:	bf00      	nop
 80005fc:	0800784c 	.word	0x0800784c

08000600 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	b082      	sub	sp, #8
 8000604:	af00      	add	r7, sp, #0
 8000606:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	4a04      	ldr	r2, [pc, #16]	; (8000620 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800060e:	4293      	cmp	r3, r2
 8000610:	d101      	bne.n	8000616 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000612:	f000 f953 	bl	80008bc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000616:	bf00      	nop
 8000618:	3708      	adds	r7, #8
 800061a:	46bd      	mov	sp, r7
 800061c:	bd80      	pop	{r7, pc}
 800061e:	bf00      	nop
 8000620:	40001000 	.word	0x40001000

08000624 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000624:	b480      	push	{r7}
 8000626:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000628:	b672      	cpsid	i
}
 800062a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800062c:	e7fe      	b.n	800062c <Error_Handler+0x8>
	...

08000630 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	b082      	sub	sp, #8
 8000634:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000636:	4b0f      	ldr	r3, [pc, #60]	; (8000674 <HAL_MspInit+0x44>)
 8000638:	699b      	ldr	r3, [r3, #24]
 800063a:	4a0e      	ldr	r2, [pc, #56]	; (8000674 <HAL_MspInit+0x44>)
 800063c:	f043 0301 	orr.w	r3, r3, #1
 8000640:	6193      	str	r3, [r2, #24]
 8000642:	4b0c      	ldr	r3, [pc, #48]	; (8000674 <HAL_MspInit+0x44>)
 8000644:	699b      	ldr	r3, [r3, #24]
 8000646:	f003 0301 	and.w	r3, r3, #1
 800064a:	607b      	str	r3, [r7, #4]
 800064c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800064e:	4b09      	ldr	r3, [pc, #36]	; (8000674 <HAL_MspInit+0x44>)
 8000650:	69db      	ldr	r3, [r3, #28]
 8000652:	4a08      	ldr	r2, [pc, #32]	; (8000674 <HAL_MspInit+0x44>)
 8000654:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000658:	61d3      	str	r3, [r2, #28]
 800065a:	4b06      	ldr	r3, [pc, #24]	; (8000674 <HAL_MspInit+0x44>)
 800065c:	69db      	ldr	r3, [r3, #28]
 800065e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000662:	603b      	str	r3, [r7, #0]
 8000664:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */
  vInitPrioGroupValue();
 8000666:	f004 f82f 	bl	80046c8 <vInitPrioGroupValue>
  /* USER CODE END MspInit 1 */
}
 800066a:	bf00      	nop
 800066c:	3708      	adds	r7, #8
 800066e:	46bd      	mov	sp, r7
 8000670:	bd80      	pop	{r7, pc}
 8000672:	bf00      	nop
 8000674:	40021000 	.word	0x40021000

08000678 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	b08e      	sub	sp, #56	; 0x38
 800067c:	af00      	add	r7, sp, #0
 800067e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000680:	2300      	movs	r3, #0
 8000682:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000684:	2300      	movs	r3, #0
 8000686:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000688:	4b33      	ldr	r3, [pc, #204]	; (8000758 <HAL_InitTick+0xe0>)
 800068a:	69db      	ldr	r3, [r3, #28]
 800068c:	4a32      	ldr	r2, [pc, #200]	; (8000758 <HAL_InitTick+0xe0>)
 800068e:	f043 0310 	orr.w	r3, r3, #16
 8000692:	61d3      	str	r3, [r2, #28]
 8000694:	4b30      	ldr	r3, [pc, #192]	; (8000758 <HAL_InitTick+0xe0>)
 8000696:	69db      	ldr	r3, [r3, #28]
 8000698:	f003 0310 	and.w	r3, r3, #16
 800069c:	60fb      	str	r3, [r7, #12]
 800069e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80006a0:	f107 0210 	add.w	r2, r7, #16
 80006a4:	f107 0314 	add.w	r3, r7, #20
 80006a8:	4611      	mov	r1, r2
 80006aa:	4618      	mov	r0, r3
 80006ac:	f001 fdec 	bl	8002288 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80006b0:	6a3b      	ldr	r3, [r7, #32]
 80006b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80006b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d103      	bne.n	80006c2 <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80006ba:	f001 fdc3 	bl	8002244 <HAL_RCC_GetPCLK1Freq>
 80006be:	6378      	str	r0, [r7, #52]	; 0x34
 80006c0:	e004      	b.n	80006cc <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80006c2:	f001 fdbf 	bl	8002244 <HAL_RCC_GetPCLK1Freq>
 80006c6:	4603      	mov	r3, r0
 80006c8:	005b      	lsls	r3, r3, #1
 80006ca:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80006cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80006ce:	4a23      	ldr	r2, [pc, #140]	; (800075c <HAL_InitTick+0xe4>)
 80006d0:	fba2 2303 	umull	r2, r3, r2, r3
 80006d4:	0c9b      	lsrs	r3, r3, #18
 80006d6:	3b01      	subs	r3, #1
 80006d8:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80006da:	4b21      	ldr	r3, [pc, #132]	; (8000760 <HAL_InitTick+0xe8>)
 80006dc:	4a21      	ldr	r2, [pc, #132]	; (8000764 <HAL_InitTick+0xec>)
 80006de:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80006e0:	4b1f      	ldr	r3, [pc, #124]	; (8000760 <HAL_InitTick+0xe8>)
 80006e2:	f240 32e7 	movw	r2, #999	; 0x3e7
 80006e6:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80006e8:	4a1d      	ldr	r2, [pc, #116]	; (8000760 <HAL_InitTick+0xe8>)
 80006ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80006ec:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80006ee:	4b1c      	ldr	r3, [pc, #112]	; (8000760 <HAL_InitTick+0xe8>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006f4:	4b1a      	ldr	r3, [pc, #104]	; (8000760 <HAL_InitTick+0xe8>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006fa:	4b19      	ldr	r3, [pc, #100]	; (8000760 <HAL_InitTick+0xe8>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000700:	4817      	ldr	r0, [pc, #92]	; (8000760 <HAL_InitTick+0xe8>)
 8000702:	f001 fdf3 	bl	80022ec <HAL_TIM_Base_Init>
 8000706:	4603      	mov	r3, r0
 8000708:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 800070c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000710:	2b00      	cmp	r3, #0
 8000712:	d11b      	bne.n	800074c <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000714:	4812      	ldr	r0, [pc, #72]	; (8000760 <HAL_InitTick+0xe8>)
 8000716:	f001 fe4b 	bl	80023b0 <HAL_TIM_Base_Start_IT>
 800071a:	4603      	mov	r3, r0
 800071c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000720:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000724:	2b00      	cmp	r3, #0
 8000726:	d111      	bne.n	800074c <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000728:	2036      	movs	r0, #54	; 0x36
 800072a:	f000 f9bb 	bl	8000aa4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	2b0f      	cmp	r3, #15
 8000732:	d808      	bhi.n	8000746 <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000734:	2200      	movs	r2, #0
 8000736:	6879      	ldr	r1, [r7, #4]
 8000738:	2036      	movs	r0, #54	; 0x36
 800073a:	f000 f997 	bl	8000a6c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800073e:	4a0a      	ldr	r2, [pc, #40]	; (8000768 <HAL_InitTick+0xf0>)
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	6013      	str	r3, [r2, #0]
 8000744:	e002      	b.n	800074c <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 8000746:	2301      	movs	r3, #1
 8000748:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 800074c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000750:	4618      	mov	r0, r3
 8000752:	3738      	adds	r7, #56	; 0x38
 8000754:	46bd      	mov	sp, r7
 8000756:	bd80      	pop	{r7, pc}
 8000758:	40021000 	.word	0x40021000
 800075c:	431bde83 	.word	0x431bde83
 8000760:	20000080 	.word	0x20000080
 8000764:	40001000 	.word	0x40001000
 8000768:	20000004 	.word	0x20000004

0800076c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800076c:	b480      	push	{r7}
 800076e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000770:	e7fe      	b.n	8000770 <NMI_Handler+0x4>

08000772 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000772:	b480      	push	{r7}
 8000774:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000776:	e7fe      	b.n	8000776 <HardFault_Handler+0x4>

08000778 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000778:	b480      	push	{r7}
 800077a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800077c:	e7fe      	b.n	800077c <MemManage_Handler+0x4>

0800077e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800077e:	b480      	push	{r7}
 8000780:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000782:	e7fe      	b.n	8000782 <BusFault_Handler+0x4>

08000784 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000784:	b480      	push	{r7}
 8000786:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000788:	e7fe      	b.n	8000788 <UsageFault_Handler+0x4>

0800078a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800078a:	b480      	push	{r7}
 800078c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800078e:	bf00      	nop
 8000790:	46bd      	mov	sp, r7
 8000792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000796:	4770      	bx	lr

08000798 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles Timer 6 interrupt and DAC underrun interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800079c:	4802      	ldr	r0, [pc, #8]	; (80007a8 <TIM6_DAC_IRQHandler+0x10>)
 800079e:	f001 fe71 	bl	8002484 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80007a2:	bf00      	nop
 80007a4:	bd80      	pop	{r7, pc}
 80007a6:	bf00      	nop
 80007a8:	20000080 	.word	0x20000080

080007ac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b086      	sub	sp, #24
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80007b4:	4a14      	ldr	r2, [pc, #80]	; (8000808 <_sbrk+0x5c>)
 80007b6:	4b15      	ldr	r3, [pc, #84]	; (800080c <_sbrk+0x60>)
 80007b8:	1ad3      	subs	r3, r2, r3
 80007ba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80007bc:	697b      	ldr	r3, [r7, #20]
 80007be:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80007c0:	4b13      	ldr	r3, [pc, #76]	; (8000810 <_sbrk+0x64>)
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d102      	bne.n	80007ce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80007c8:	4b11      	ldr	r3, [pc, #68]	; (8000810 <_sbrk+0x64>)
 80007ca:	4a12      	ldr	r2, [pc, #72]	; (8000814 <_sbrk+0x68>)
 80007cc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80007ce:	4b10      	ldr	r3, [pc, #64]	; (8000810 <_sbrk+0x64>)
 80007d0:	681a      	ldr	r2, [r3, #0]
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	4413      	add	r3, r2
 80007d6:	693a      	ldr	r2, [r7, #16]
 80007d8:	429a      	cmp	r2, r3
 80007da:	d207      	bcs.n	80007ec <_sbrk+0x40>
  {
    errno = ENOMEM;
 80007dc:	f006 fb8e 	bl	8006efc <__errno>
 80007e0:	4603      	mov	r3, r0
 80007e2:	220c      	movs	r2, #12
 80007e4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80007e6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80007ea:	e009      	b.n	8000800 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80007ec:	4b08      	ldr	r3, [pc, #32]	; (8000810 <_sbrk+0x64>)
 80007ee:	681b      	ldr	r3, [r3, #0]
 80007f0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80007f2:	4b07      	ldr	r3, [pc, #28]	; (8000810 <_sbrk+0x64>)
 80007f4:	681a      	ldr	r2, [r3, #0]
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	4413      	add	r3, r2
 80007fa:	4a05      	ldr	r2, [pc, #20]	; (8000810 <_sbrk+0x64>)
 80007fc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80007fe:	68fb      	ldr	r3, [r7, #12]
}
 8000800:	4618      	mov	r0, r3
 8000802:	3718      	adds	r7, #24
 8000804:	46bd      	mov	sp, r7
 8000806:	bd80      	pop	{r7, pc}
 8000808:	2000a000 	.word	0x2000a000
 800080c:	00000400 	.word	0x00000400
 8000810:	200000cc 	.word	0x200000cc
 8000814:	20005678 	.word	0x20005678

08000818 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000818:	b480      	push	{r7}
 800081a:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800081c:	4b06      	ldr	r3, [pc, #24]	; (8000838 <SystemInit+0x20>)
 800081e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000822:	4a05      	ldr	r2, [pc, #20]	; (8000838 <SystemInit+0x20>)
 8000824:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000828:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800082c:	bf00      	nop
 800082e:	46bd      	mov	sp, r7
 8000830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000834:	4770      	bx	lr
 8000836:	bf00      	nop
 8000838:	e000ed00 	.word	0xe000ed00

0800083c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800083c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000874 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000840:	f7ff ffea 	bl	8000818 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000844:	480c      	ldr	r0, [pc, #48]	; (8000878 <LoopForever+0x6>)
  ldr r1, =_edata
 8000846:	490d      	ldr	r1, [pc, #52]	; (800087c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000848:	4a0d      	ldr	r2, [pc, #52]	; (8000880 <LoopForever+0xe>)
  movs r3, #0
 800084a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800084c:	e002      	b.n	8000854 <LoopCopyDataInit>

0800084e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800084e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000850:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000852:	3304      	adds	r3, #4

08000854 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000854:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000856:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000858:	d3f9      	bcc.n	800084e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800085a:	4a0a      	ldr	r2, [pc, #40]	; (8000884 <LoopForever+0x12>)
  ldr r4, =_ebss
 800085c:	4c0a      	ldr	r4, [pc, #40]	; (8000888 <LoopForever+0x16>)
  movs r3, #0
 800085e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000860:	e001      	b.n	8000866 <LoopFillZerobss>

08000862 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000862:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000864:	3204      	adds	r2, #4

08000866 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000866:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000868:	d3fb      	bcc.n	8000862 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800086a:	f006 fb4d 	bl	8006f08 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800086e:	f7ff fd4f 	bl	8000310 <main>

08000872 <LoopForever>:

LoopForever:
    b LoopForever
 8000872:	e7fe      	b.n	8000872 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000874:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8000878:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800087c:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 8000880:	080079c4 	.word	0x080079c4
  ldr r2, =_sbss
 8000884:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 8000888:	20005674 	.word	0x20005674

0800088c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800088c:	e7fe      	b.n	800088c <ADC1_2_IRQHandler>
	...

08000890 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000894:	4b08      	ldr	r3, [pc, #32]	; (80008b8 <HAL_Init+0x28>)
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	4a07      	ldr	r2, [pc, #28]	; (80008b8 <HAL_Init+0x28>)
 800089a:	f043 0310 	orr.w	r3, r3, #16
 800089e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80008a0:	2003      	movs	r0, #3
 80008a2:	f000 f8d8 	bl	8000a56 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80008a6:	200f      	movs	r0, #15
 80008a8:	f7ff fee6 	bl	8000678 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80008ac:	f7ff fec0 	bl	8000630 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80008b0:	2300      	movs	r3, #0
}
 80008b2:	4618      	mov	r0, r3
 80008b4:	bd80      	pop	{r7, pc}
 80008b6:	bf00      	nop
 80008b8:	40022000 	.word	0x40022000

080008bc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80008bc:	b480      	push	{r7}
 80008be:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80008c0:	4b06      	ldr	r3, [pc, #24]	; (80008dc <HAL_IncTick+0x20>)
 80008c2:	781b      	ldrb	r3, [r3, #0]
 80008c4:	461a      	mov	r2, r3
 80008c6:	4b06      	ldr	r3, [pc, #24]	; (80008e0 <HAL_IncTick+0x24>)
 80008c8:	681b      	ldr	r3, [r3, #0]
 80008ca:	4413      	add	r3, r2
 80008cc:	4a04      	ldr	r2, [pc, #16]	; (80008e0 <HAL_IncTick+0x24>)
 80008ce:	6013      	str	r3, [r2, #0]
}
 80008d0:	bf00      	nop
 80008d2:	46bd      	mov	sp, r7
 80008d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d8:	4770      	bx	lr
 80008da:	bf00      	nop
 80008dc:	20000008 	.word	0x20000008
 80008e0:	200000d0 	.word	0x200000d0

080008e4 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80008e4:	b480      	push	{r7}
 80008e6:	af00      	add	r7, sp, #0
  return uwTick;  
 80008e8:	4b03      	ldr	r3, [pc, #12]	; (80008f8 <HAL_GetTick+0x14>)
 80008ea:	681b      	ldr	r3, [r3, #0]
}
 80008ec:	4618      	mov	r0, r3
 80008ee:	46bd      	mov	sp, r7
 80008f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f4:	4770      	bx	lr
 80008f6:	bf00      	nop
 80008f8:	200000d0 	.word	0x200000d0

080008fc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008fc:	b480      	push	{r7}
 80008fe:	b085      	sub	sp, #20
 8000900:	af00      	add	r7, sp, #0
 8000902:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	f003 0307 	and.w	r3, r3, #7
 800090a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800090c:	4b0c      	ldr	r3, [pc, #48]	; (8000940 <__NVIC_SetPriorityGrouping+0x44>)
 800090e:	68db      	ldr	r3, [r3, #12]
 8000910:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000912:	68ba      	ldr	r2, [r7, #8]
 8000914:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000918:	4013      	ands	r3, r2
 800091a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800091c:	68fb      	ldr	r3, [r7, #12]
 800091e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000920:	68bb      	ldr	r3, [r7, #8]
 8000922:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000924:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000928:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800092c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800092e:	4a04      	ldr	r2, [pc, #16]	; (8000940 <__NVIC_SetPriorityGrouping+0x44>)
 8000930:	68bb      	ldr	r3, [r7, #8]
 8000932:	60d3      	str	r3, [r2, #12]
}
 8000934:	bf00      	nop
 8000936:	3714      	adds	r7, #20
 8000938:	46bd      	mov	sp, r7
 800093a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800093e:	4770      	bx	lr
 8000940:	e000ed00 	.word	0xe000ed00

08000944 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000944:	b480      	push	{r7}
 8000946:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000948:	4b04      	ldr	r3, [pc, #16]	; (800095c <__NVIC_GetPriorityGrouping+0x18>)
 800094a:	68db      	ldr	r3, [r3, #12]
 800094c:	0a1b      	lsrs	r3, r3, #8
 800094e:	f003 0307 	and.w	r3, r3, #7
}
 8000952:	4618      	mov	r0, r3
 8000954:	46bd      	mov	sp, r7
 8000956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800095a:	4770      	bx	lr
 800095c:	e000ed00 	.word	0xe000ed00

08000960 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000960:	b480      	push	{r7}
 8000962:	b083      	sub	sp, #12
 8000964:	af00      	add	r7, sp, #0
 8000966:	4603      	mov	r3, r0
 8000968:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800096a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800096e:	2b00      	cmp	r3, #0
 8000970:	db0b      	blt.n	800098a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000972:	79fb      	ldrb	r3, [r7, #7]
 8000974:	f003 021f 	and.w	r2, r3, #31
 8000978:	4907      	ldr	r1, [pc, #28]	; (8000998 <__NVIC_EnableIRQ+0x38>)
 800097a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800097e:	095b      	lsrs	r3, r3, #5
 8000980:	2001      	movs	r0, #1
 8000982:	fa00 f202 	lsl.w	r2, r0, r2
 8000986:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800098a:	bf00      	nop
 800098c:	370c      	adds	r7, #12
 800098e:	46bd      	mov	sp, r7
 8000990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000994:	4770      	bx	lr
 8000996:	bf00      	nop
 8000998:	e000e100 	.word	0xe000e100

0800099c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800099c:	b480      	push	{r7}
 800099e:	b083      	sub	sp, #12
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	4603      	mov	r3, r0
 80009a4:	6039      	str	r1, [r7, #0]
 80009a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	db0a      	blt.n	80009c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009b0:	683b      	ldr	r3, [r7, #0]
 80009b2:	b2da      	uxtb	r2, r3
 80009b4:	490c      	ldr	r1, [pc, #48]	; (80009e8 <__NVIC_SetPriority+0x4c>)
 80009b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009ba:	0112      	lsls	r2, r2, #4
 80009bc:	b2d2      	uxtb	r2, r2
 80009be:	440b      	add	r3, r1
 80009c0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80009c4:	e00a      	b.n	80009dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009c6:	683b      	ldr	r3, [r7, #0]
 80009c8:	b2da      	uxtb	r2, r3
 80009ca:	4908      	ldr	r1, [pc, #32]	; (80009ec <__NVIC_SetPriority+0x50>)
 80009cc:	79fb      	ldrb	r3, [r7, #7]
 80009ce:	f003 030f 	and.w	r3, r3, #15
 80009d2:	3b04      	subs	r3, #4
 80009d4:	0112      	lsls	r2, r2, #4
 80009d6:	b2d2      	uxtb	r2, r2
 80009d8:	440b      	add	r3, r1
 80009da:	761a      	strb	r2, [r3, #24]
}
 80009dc:	bf00      	nop
 80009de:	370c      	adds	r7, #12
 80009e0:	46bd      	mov	sp, r7
 80009e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e6:	4770      	bx	lr
 80009e8:	e000e100 	.word	0xe000e100
 80009ec:	e000ed00 	.word	0xe000ed00

080009f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80009f0:	b480      	push	{r7}
 80009f2:	b089      	sub	sp, #36	; 0x24
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	60f8      	str	r0, [r7, #12]
 80009f8:	60b9      	str	r1, [r7, #8]
 80009fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80009fc:	68fb      	ldr	r3, [r7, #12]
 80009fe:	f003 0307 	and.w	r3, r3, #7
 8000a02:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a04:	69fb      	ldr	r3, [r7, #28]
 8000a06:	f1c3 0307 	rsb	r3, r3, #7
 8000a0a:	2b04      	cmp	r3, #4
 8000a0c:	bf28      	it	cs
 8000a0e:	2304      	movcs	r3, #4
 8000a10:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a12:	69fb      	ldr	r3, [r7, #28]
 8000a14:	3304      	adds	r3, #4
 8000a16:	2b06      	cmp	r3, #6
 8000a18:	d902      	bls.n	8000a20 <NVIC_EncodePriority+0x30>
 8000a1a:	69fb      	ldr	r3, [r7, #28]
 8000a1c:	3b03      	subs	r3, #3
 8000a1e:	e000      	b.n	8000a22 <NVIC_EncodePriority+0x32>
 8000a20:	2300      	movs	r3, #0
 8000a22:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a24:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000a28:	69bb      	ldr	r3, [r7, #24]
 8000a2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a2e:	43da      	mvns	r2, r3
 8000a30:	68bb      	ldr	r3, [r7, #8]
 8000a32:	401a      	ands	r2, r3
 8000a34:	697b      	ldr	r3, [r7, #20]
 8000a36:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a38:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000a3c:	697b      	ldr	r3, [r7, #20]
 8000a3e:	fa01 f303 	lsl.w	r3, r1, r3
 8000a42:	43d9      	mvns	r1, r3
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a48:	4313      	orrs	r3, r2
         );
}
 8000a4a:	4618      	mov	r0, r3
 8000a4c:	3724      	adds	r7, #36	; 0x24
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a54:	4770      	bx	lr

08000a56 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a56:	b580      	push	{r7, lr}
 8000a58:	b082      	sub	sp, #8
 8000a5a:	af00      	add	r7, sp, #0
 8000a5c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000a5e:	6878      	ldr	r0, [r7, #4]
 8000a60:	f7ff ff4c 	bl	80008fc <__NVIC_SetPriorityGrouping>
}
 8000a64:	bf00      	nop
 8000a66:	3708      	adds	r7, #8
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	bd80      	pop	{r7, pc}

08000a6c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b086      	sub	sp, #24
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	4603      	mov	r3, r0
 8000a74:	60b9      	str	r1, [r7, #8]
 8000a76:	607a      	str	r2, [r7, #4]
 8000a78:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000a7e:	f7ff ff61 	bl	8000944 <__NVIC_GetPriorityGrouping>
 8000a82:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000a84:	687a      	ldr	r2, [r7, #4]
 8000a86:	68b9      	ldr	r1, [r7, #8]
 8000a88:	6978      	ldr	r0, [r7, #20]
 8000a8a:	f7ff ffb1 	bl	80009f0 <NVIC_EncodePriority>
 8000a8e:	4602      	mov	r2, r0
 8000a90:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a94:	4611      	mov	r1, r2
 8000a96:	4618      	mov	r0, r3
 8000a98:	f7ff ff80 	bl	800099c <__NVIC_SetPriority>
}
 8000a9c:	bf00      	nop
 8000a9e:	3718      	adds	r7, #24
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	bd80      	pop	{r7, pc}

08000aa4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b082      	sub	sp, #8
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	4603      	mov	r3, r0
 8000aac:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000aae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	f7ff ff54 	bl	8000960 <__NVIC_EnableIRQ>
}
 8000ab8:	bf00      	nop
 8000aba:	3708      	adds	r7, #8
 8000abc:	46bd      	mov	sp, r7
 8000abe:	bd80      	pop	{r7, pc}

08000ac0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	b087      	sub	sp, #28
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	6078      	str	r0, [r7, #4]
 8000ac8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000aca:	2300      	movs	r3, #0
 8000acc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ace:	e154      	b.n	8000d7a <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000ad0:	683b      	ldr	r3, [r7, #0]
 8000ad2:	681a      	ldr	r2, [r3, #0]
 8000ad4:	2101      	movs	r1, #1
 8000ad6:	697b      	ldr	r3, [r7, #20]
 8000ad8:	fa01 f303 	lsl.w	r3, r1, r3
 8000adc:	4013      	ands	r3, r2
 8000ade:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000ae0:	68fb      	ldr	r3, [r7, #12]
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	f000 8146 	beq.w	8000d74 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000ae8:	683b      	ldr	r3, [r7, #0]
 8000aea:	685b      	ldr	r3, [r3, #4]
 8000aec:	f003 0303 	and.w	r3, r3, #3
 8000af0:	2b01      	cmp	r3, #1
 8000af2:	d005      	beq.n	8000b00 <HAL_GPIO_Init+0x40>
 8000af4:	683b      	ldr	r3, [r7, #0]
 8000af6:	685b      	ldr	r3, [r3, #4]
 8000af8:	f003 0303 	and.w	r3, r3, #3
 8000afc:	2b02      	cmp	r3, #2
 8000afe:	d130      	bne.n	8000b62 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	689b      	ldr	r3, [r3, #8]
 8000b04:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000b06:	697b      	ldr	r3, [r7, #20]
 8000b08:	005b      	lsls	r3, r3, #1
 8000b0a:	2203      	movs	r2, #3
 8000b0c:	fa02 f303 	lsl.w	r3, r2, r3
 8000b10:	43db      	mvns	r3, r3
 8000b12:	693a      	ldr	r2, [r7, #16]
 8000b14:	4013      	ands	r3, r2
 8000b16:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000b18:	683b      	ldr	r3, [r7, #0]
 8000b1a:	68da      	ldr	r2, [r3, #12]
 8000b1c:	697b      	ldr	r3, [r7, #20]
 8000b1e:	005b      	lsls	r3, r3, #1
 8000b20:	fa02 f303 	lsl.w	r3, r2, r3
 8000b24:	693a      	ldr	r2, [r7, #16]
 8000b26:	4313      	orrs	r3, r2
 8000b28:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	693a      	ldr	r2, [r7, #16]
 8000b2e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	685b      	ldr	r3, [r3, #4]
 8000b34:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000b36:	2201      	movs	r2, #1
 8000b38:	697b      	ldr	r3, [r7, #20]
 8000b3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b3e:	43db      	mvns	r3, r3
 8000b40:	693a      	ldr	r2, [r7, #16]
 8000b42:	4013      	ands	r3, r2
 8000b44:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000b46:	683b      	ldr	r3, [r7, #0]
 8000b48:	685b      	ldr	r3, [r3, #4]
 8000b4a:	091b      	lsrs	r3, r3, #4
 8000b4c:	f003 0201 	and.w	r2, r3, #1
 8000b50:	697b      	ldr	r3, [r7, #20]
 8000b52:	fa02 f303 	lsl.w	r3, r2, r3
 8000b56:	693a      	ldr	r2, [r7, #16]
 8000b58:	4313      	orrs	r3, r2
 8000b5a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	693a      	ldr	r2, [r7, #16]
 8000b60:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000b62:	683b      	ldr	r3, [r7, #0]
 8000b64:	685b      	ldr	r3, [r3, #4]
 8000b66:	f003 0303 	and.w	r3, r3, #3
 8000b6a:	2b03      	cmp	r3, #3
 8000b6c:	d017      	beq.n	8000b9e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	68db      	ldr	r3, [r3, #12]
 8000b72:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000b74:	697b      	ldr	r3, [r7, #20]
 8000b76:	005b      	lsls	r3, r3, #1
 8000b78:	2203      	movs	r2, #3
 8000b7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b7e:	43db      	mvns	r3, r3
 8000b80:	693a      	ldr	r2, [r7, #16]
 8000b82:	4013      	ands	r3, r2
 8000b84:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000b86:	683b      	ldr	r3, [r7, #0]
 8000b88:	689a      	ldr	r2, [r3, #8]
 8000b8a:	697b      	ldr	r3, [r7, #20]
 8000b8c:	005b      	lsls	r3, r3, #1
 8000b8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b92:	693a      	ldr	r2, [r7, #16]
 8000b94:	4313      	orrs	r3, r2
 8000b96:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	693a      	ldr	r2, [r7, #16]
 8000b9c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000b9e:	683b      	ldr	r3, [r7, #0]
 8000ba0:	685b      	ldr	r3, [r3, #4]
 8000ba2:	f003 0303 	and.w	r3, r3, #3
 8000ba6:	2b02      	cmp	r3, #2
 8000ba8:	d123      	bne.n	8000bf2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000baa:	697b      	ldr	r3, [r7, #20]
 8000bac:	08da      	lsrs	r2, r3, #3
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	3208      	adds	r2, #8
 8000bb2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000bb6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000bb8:	697b      	ldr	r3, [r7, #20]
 8000bba:	f003 0307 	and.w	r3, r3, #7
 8000bbe:	009b      	lsls	r3, r3, #2
 8000bc0:	220f      	movs	r2, #15
 8000bc2:	fa02 f303 	lsl.w	r3, r2, r3
 8000bc6:	43db      	mvns	r3, r3
 8000bc8:	693a      	ldr	r2, [r7, #16]
 8000bca:	4013      	ands	r3, r2
 8000bcc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000bce:	683b      	ldr	r3, [r7, #0]
 8000bd0:	691a      	ldr	r2, [r3, #16]
 8000bd2:	697b      	ldr	r3, [r7, #20]
 8000bd4:	f003 0307 	and.w	r3, r3, #7
 8000bd8:	009b      	lsls	r3, r3, #2
 8000bda:	fa02 f303 	lsl.w	r3, r2, r3
 8000bde:	693a      	ldr	r2, [r7, #16]
 8000be0:	4313      	orrs	r3, r2
 8000be2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000be4:	697b      	ldr	r3, [r7, #20]
 8000be6:	08da      	lsrs	r2, r3, #3
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	3208      	adds	r2, #8
 8000bec:	6939      	ldr	r1, [r7, #16]
 8000bee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000bf8:	697b      	ldr	r3, [r7, #20]
 8000bfa:	005b      	lsls	r3, r3, #1
 8000bfc:	2203      	movs	r2, #3
 8000bfe:	fa02 f303 	lsl.w	r3, r2, r3
 8000c02:	43db      	mvns	r3, r3
 8000c04:	693a      	ldr	r2, [r7, #16]
 8000c06:	4013      	ands	r3, r2
 8000c08:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000c0a:	683b      	ldr	r3, [r7, #0]
 8000c0c:	685b      	ldr	r3, [r3, #4]
 8000c0e:	f003 0203 	and.w	r2, r3, #3
 8000c12:	697b      	ldr	r3, [r7, #20]
 8000c14:	005b      	lsls	r3, r3, #1
 8000c16:	fa02 f303 	lsl.w	r3, r2, r3
 8000c1a:	693a      	ldr	r2, [r7, #16]
 8000c1c:	4313      	orrs	r3, r2
 8000c1e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	693a      	ldr	r2, [r7, #16]
 8000c24:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000c26:	683b      	ldr	r3, [r7, #0]
 8000c28:	685b      	ldr	r3, [r3, #4]
 8000c2a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	f000 80a0 	beq.w	8000d74 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c34:	4b58      	ldr	r3, [pc, #352]	; (8000d98 <HAL_GPIO_Init+0x2d8>)
 8000c36:	699b      	ldr	r3, [r3, #24]
 8000c38:	4a57      	ldr	r2, [pc, #348]	; (8000d98 <HAL_GPIO_Init+0x2d8>)
 8000c3a:	f043 0301 	orr.w	r3, r3, #1
 8000c3e:	6193      	str	r3, [r2, #24]
 8000c40:	4b55      	ldr	r3, [pc, #340]	; (8000d98 <HAL_GPIO_Init+0x2d8>)
 8000c42:	699b      	ldr	r3, [r3, #24]
 8000c44:	f003 0301 	and.w	r3, r3, #1
 8000c48:	60bb      	str	r3, [r7, #8]
 8000c4a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000c4c:	4a53      	ldr	r2, [pc, #332]	; (8000d9c <HAL_GPIO_Init+0x2dc>)
 8000c4e:	697b      	ldr	r3, [r7, #20]
 8000c50:	089b      	lsrs	r3, r3, #2
 8000c52:	3302      	adds	r3, #2
 8000c54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c58:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000c5a:	697b      	ldr	r3, [r7, #20]
 8000c5c:	f003 0303 	and.w	r3, r3, #3
 8000c60:	009b      	lsls	r3, r3, #2
 8000c62:	220f      	movs	r2, #15
 8000c64:	fa02 f303 	lsl.w	r3, r2, r3
 8000c68:	43db      	mvns	r3, r3
 8000c6a:	693a      	ldr	r2, [r7, #16]
 8000c6c:	4013      	ands	r3, r2
 8000c6e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000c76:	d019      	beq.n	8000cac <HAL_GPIO_Init+0x1ec>
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	4a49      	ldr	r2, [pc, #292]	; (8000da0 <HAL_GPIO_Init+0x2e0>)
 8000c7c:	4293      	cmp	r3, r2
 8000c7e:	d013      	beq.n	8000ca8 <HAL_GPIO_Init+0x1e8>
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	4a48      	ldr	r2, [pc, #288]	; (8000da4 <HAL_GPIO_Init+0x2e4>)
 8000c84:	4293      	cmp	r3, r2
 8000c86:	d00d      	beq.n	8000ca4 <HAL_GPIO_Init+0x1e4>
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	4a47      	ldr	r2, [pc, #284]	; (8000da8 <HAL_GPIO_Init+0x2e8>)
 8000c8c:	4293      	cmp	r3, r2
 8000c8e:	d007      	beq.n	8000ca0 <HAL_GPIO_Init+0x1e0>
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	4a46      	ldr	r2, [pc, #280]	; (8000dac <HAL_GPIO_Init+0x2ec>)
 8000c94:	4293      	cmp	r3, r2
 8000c96:	d101      	bne.n	8000c9c <HAL_GPIO_Init+0x1dc>
 8000c98:	2304      	movs	r3, #4
 8000c9a:	e008      	b.n	8000cae <HAL_GPIO_Init+0x1ee>
 8000c9c:	2305      	movs	r3, #5
 8000c9e:	e006      	b.n	8000cae <HAL_GPIO_Init+0x1ee>
 8000ca0:	2303      	movs	r3, #3
 8000ca2:	e004      	b.n	8000cae <HAL_GPIO_Init+0x1ee>
 8000ca4:	2302      	movs	r3, #2
 8000ca6:	e002      	b.n	8000cae <HAL_GPIO_Init+0x1ee>
 8000ca8:	2301      	movs	r3, #1
 8000caa:	e000      	b.n	8000cae <HAL_GPIO_Init+0x1ee>
 8000cac:	2300      	movs	r3, #0
 8000cae:	697a      	ldr	r2, [r7, #20]
 8000cb0:	f002 0203 	and.w	r2, r2, #3
 8000cb4:	0092      	lsls	r2, r2, #2
 8000cb6:	4093      	lsls	r3, r2
 8000cb8:	693a      	ldr	r2, [r7, #16]
 8000cba:	4313      	orrs	r3, r2
 8000cbc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000cbe:	4937      	ldr	r1, [pc, #220]	; (8000d9c <HAL_GPIO_Init+0x2dc>)
 8000cc0:	697b      	ldr	r3, [r7, #20]
 8000cc2:	089b      	lsrs	r3, r3, #2
 8000cc4:	3302      	adds	r3, #2
 8000cc6:	693a      	ldr	r2, [r7, #16]
 8000cc8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000ccc:	4b38      	ldr	r3, [pc, #224]	; (8000db0 <HAL_GPIO_Init+0x2f0>)
 8000cce:	689b      	ldr	r3, [r3, #8]
 8000cd0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000cd2:	68fb      	ldr	r3, [r7, #12]
 8000cd4:	43db      	mvns	r3, r3
 8000cd6:	693a      	ldr	r2, [r7, #16]
 8000cd8:	4013      	ands	r3, r2
 8000cda:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000cdc:	683b      	ldr	r3, [r7, #0]
 8000cde:	685b      	ldr	r3, [r3, #4]
 8000ce0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d003      	beq.n	8000cf0 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8000ce8:	693a      	ldr	r2, [r7, #16]
 8000cea:	68fb      	ldr	r3, [r7, #12]
 8000cec:	4313      	orrs	r3, r2
 8000cee:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000cf0:	4a2f      	ldr	r2, [pc, #188]	; (8000db0 <HAL_GPIO_Init+0x2f0>)
 8000cf2:	693b      	ldr	r3, [r7, #16]
 8000cf4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000cf6:	4b2e      	ldr	r3, [pc, #184]	; (8000db0 <HAL_GPIO_Init+0x2f0>)
 8000cf8:	68db      	ldr	r3, [r3, #12]
 8000cfa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000cfc:	68fb      	ldr	r3, [r7, #12]
 8000cfe:	43db      	mvns	r3, r3
 8000d00:	693a      	ldr	r2, [r7, #16]
 8000d02:	4013      	ands	r3, r2
 8000d04:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000d06:	683b      	ldr	r3, [r7, #0]
 8000d08:	685b      	ldr	r3, [r3, #4]
 8000d0a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d003      	beq.n	8000d1a <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8000d12:	693a      	ldr	r2, [r7, #16]
 8000d14:	68fb      	ldr	r3, [r7, #12]
 8000d16:	4313      	orrs	r3, r2
 8000d18:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000d1a:	4a25      	ldr	r2, [pc, #148]	; (8000db0 <HAL_GPIO_Init+0x2f0>)
 8000d1c:	693b      	ldr	r3, [r7, #16]
 8000d1e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000d20:	4b23      	ldr	r3, [pc, #140]	; (8000db0 <HAL_GPIO_Init+0x2f0>)
 8000d22:	685b      	ldr	r3, [r3, #4]
 8000d24:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d26:	68fb      	ldr	r3, [r7, #12]
 8000d28:	43db      	mvns	r3, r3
 8000d2a:	693a      	ldr	r2, [r7, #16]
 8000d2c:	4013      	ands	r3, r2
 8000d2e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000d30:	683b      	ldr	r3, [r7, #0]
 8000d32:	685b      	ldr	r3, [r3, #4]
 8000d34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d003      	beq.n	8000d44 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8000d3c:	693a      	ldr	r2, [r7, #16]
 8000d3e:	68fb      	ldr	r3, [r7, #12]
 8000d40:	4313      	orrs	r3, r2
 8000d42:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000d44:	4a1a      	ldr	r2, [pc, #104]	; (8000db0 <HAL_GPIO_Init+0x2f0>)
 8000d46:	693b      	ldr	r3, [r7, #16]
 8000d48:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000d4a:	4b19      	ldr	r3, [pc, #100]	; (8000db0 <HAL_GPIO_Init+0x2f0>)
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d50:	68fb      	ldr	r3, [r7, #12]
 8000d52:	43db      	mvns	r3, r3
 8000d54:	693a      	ldr	r2, [r7, #16]
 8000d56:	4013      	ands	r3, r2
 8000d58:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000d5a:	683b      	ldr	r3, [r7, #0]
 8000d5c:	685b      	ldr	r3, [r3, #4]
 8000d5e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d003      	beq.n	8000d6e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8000d66:	693a      	ldr	r2, [r7, #16]
 8000d68:	68fb      	ldr	r3, [r7, #12]
 8000d6a:	4313      	orrs	r3, r2
 8000d6c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000d6e:	4a10      	ldr	r2, [pc, #64]	; (8000db0 <HAL_GPIO_Init+0x2f0>)
 8000d70:	693b      	ldr	r3, [r7, #16]
 8000d72:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000d74:	697b      	ldr	r3, [r7, #20]
 8000d76:	3301      	adds	r3, #1
 8000d78:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d7a:	683b      	ldr	r3, [r7, #0]
 8000d7c:	681a      	ldr	r2, [r3, #0]
 8000d7e:	697b      	ldr	r3, [r7, #20]
 8000d80:	fa22 f303 	lsr.w	r3, r2, r3
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	f47f aea3 	bne.w	8000ad0 <HAL_GPIO_Init+0x10>
  }
}
 8000d8a:	bf00      	nop
 8000d8c:	bf00      	nop
 8000d8e:	371c      	adds	r7, #28
 8000d90:	46bd      	mov	sp, r7
 8000d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d96:	4770      	bx	lr
 8000d98:	40021000 	.word	0x40021000
 8000d9c:	40010000 	.word	0x40010000
 8000da0:	48000400 	.word	0x48000400
 8000da4:	48000800 	.word	0x48000800
 8000da8:	48000c00 	.word	0x48000c00
 8000dac:	48001000 	.word	0x48001000
 8000db0:	40010400 	.word	0x40010400

08000db4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000db4:	b480      	push	{r7}
 8000db6:	b083      	sub	sp, #12
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]
 8000dbc:	460b      	mov	r3, r1
 8000dbe:	807b      	strh	r3, [r7, #2]
 8000dc0:	4613      	mov	r3, r2
 8000dc2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000dc4:	787b      	ldrb	r3, [r7, #1]
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d003      	beq.n	8000dd2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000dca:	887a      	ldrh	r2, [r7, #2]
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000dd0:	e002      	b.n	8000dd8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000dd2:	887a      	ldrh	r2, [r7, #2]
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000dd8:	bf00      	nop
 8000dda:	370c      	adds	r7, #12
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de2:	4770      	bx	lr

08000de4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8000dea:	af00      	add	r7, sp, #0
 8000dec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000df0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000df4:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000df6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000dfa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d102      	bne.n	8000e0a <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8000e04:	2301      	movs	r3, #1
 8000e06:	f001 b823 	b.w	8001e50 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000e0a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000e0e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	f003 0301 	and.w	r3, r3, #1
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	f000 817d 	beq.w	800111a <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000e20:	4bbc      	ldr	r3, [pc, #752]	; (8001114 <HAL_RCC_OscConfig+0x330>)
 8000e22:	685b      	ldr	r3, [r3, #4]
 8000e24:	f003 030c 	and.w	r3, r3, #12
 8000e28:	2b04      	cmp	r3, #4
 8000e2a:	d00c      	beq.n	8000e46 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000e2c:	4bb9      	ldr	r3, [pc, #740]	; (8001114 <HAL_RCC_OscConfig+0x330>)
 8000e2e:	685b      	ldr	r3, [r3, #4]
 8000e30:	f003 030c 	and.w	r3, r3, #12
 8000e34:	2b08      	cmp	r3, #8
 8000e36:	d15c      	bne.n	8000ef2 <HAL_RCC_OscConfig+0x10e>
 8000e38:	4bb6      	ldr	r3, [pc, #728]	; (8001114 <HAL_RCC_OscConfig+0x330>)
 8000e3a:	685b      	ldr	r3, [r3, #4]
 8000e3c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000e44:	d155      	bne.n	8000ef2 <HAL_RCC_OscConfig+0x10e>
 8000e46:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000e4a:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e4e:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8000e52:	fa93 f3a3 	rbit	r3, r3
 8000e56:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000e5a:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e5e:	fab3 f383 	clz	r3, r3
 8000e62:	b2db      	uxtb	r3, r3
 8000e64:	095b      	lsrs	r3, r3, #5
 8000e66:	b2db      	uxtb	r3, r3
 8000e68:	f043 0301 	orr.w	r3, r3, #1
 8000e6c:	b2db      	uxtb	r3, r3
 8000e6e:	2b01      	cmp	r3, #1
 8000e70:	d102      	bne.n	8000e78 <HAL_RCC_OscConfig+0x94>
 8000e72:	4ba8      	ldr	r3, [pc, #672]	; (8001114 <HAL_RCC_OscConfig+0x330>)
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	e015      	b.n	8000ea4 <HAL_RCC_OscConfig+0xc0>
 8000e78:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000e7c:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e80:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8000e84:	fa93 f3a3 	rbit	r3, r3
 8000e88:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8000e8c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000e90:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8000e94:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8000e98:	fa93 f3a3 	rbit	r3, r3
 8000e9c:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8000ea0:	4b9c      	ldr	r3, [pc, #624]	; (8001114 <HAL_RCC_OscConfig+0x330>)
 8000ea2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ea4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000ea8:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8000eac:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8000eb0:	fa92 f2a2 	rbit	r2, r2
 8000eb4:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8000eb8:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8000ebc:	fab2 f282 	clz	r2, r2
 8000ec0:	b2d2      	uxtb	r2, r2
 8000ec2:	f042 0220 	orr.w	r2, r2, #32
 8000ec6:	b2d2      	uxtb	r2, r2
 8000ec8:	f002 021f 	and.w	r2, r2, #31
 8000ecc:	2101      	movs	r1, #1
 8000ece:	fa01 f202 	lsl.w	r2, r1, r2
 8000ed2:	4013      	ands	r3, r2
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	f000 811f 	beq.w	8001118 <HAL_RCC_OscConfig+0x334>
 8000eda:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000ede:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	685b      	ldr	r3, [r3, #4]
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	f040 8116 	bne.w	8001118 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8000eec:	2301      	movs	r3, #1
 8000eee:	f000 bfaf 	b.w	8001e50 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000ef2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000ef6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	685b      	ldr	r3, [r3, #4]
 8000efe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f02:	d106      	bne.n	8000f12 <HAL_RCC_OscConfig+0x12e>
 8000f04:	4b83      	ldr	r3, [pc, #524]	; (8001114 <HAL_RCC_OscConfig+0x330>)
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	4a82      	ldr	r2, [pc, #520]	; (8001114 <HAL_RCC_OscConfig+0x330>)
 8000f0a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f0e:	6013      	str	r3, [r2, #0]
 8000f10:	e036      	b.n	8000f80 <HAL_RCC_OscConfig+0x19c>
 8000f12:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000f16:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	685b      	ldr	r3, [r3, #4]
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d10c      	bne.n	8000f3c <HAL_RCC_OscConfig+0x158>
 8000f22:	4b7c      	ldr	r3, [pc, #496]	; (8001114 <HAL_RCC_OscConfig+0x330>)
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	4a7b      	ldr	r2, [pc, #492]	; (8001114 <HAL_RCC_OscConfig+0x330>)
 8000f28:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f2c:	6013      	str	r3, [r2, #0]
 8000f2e:	4b79      	ldr	r3, [pc, #484]	; (8001114 <HAL_RCC_OscConfig+0x330>)
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	4a78      	ldr	r2, [pc, #480]	; (8001114 <HAL_RCC_OscConfig+0x330>)
 8000f34:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f38:	6013      	str	r3, [r2, #0]
 8000f3a:	e021      	b.n	8000f80 <HAL_RCC_OscConfig+0x19c>
 8000f3c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000f40:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	685b      	ldr	r3, [r3, #4]
 8000f48:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000f4c:	d10c      	bne.n	8000f68 <HAL_RCC_OscConfig+0x184>
 8000f4e:	4b71      	ldr	r3, [pc, #452]	; (8001114 <HAL_RCC_OscConfig+0x330>)
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	4a70      	ldr	r2, [pc, #448]	; (8001114 <HAL_RCC_OscConfig+0x330>)
 8000f54:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f58:	6013      	str	r3, [r2, #0]
 8000f5a:	4b6e      	ldr	r3, [pc, #440]	; (8001114 <HAL_RCC_OscConfig+0x330>)
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	4a6d      	ldr	r2, [pc, #436]	; (8001114 <HAL_RCC_OscConfig+0x330>)
 8000f60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f64:	6013      	str	r3, [r2, #0]
 8000f66:	e00b      	b.n	8000f80 <HAL_RCC_OscConfig+0x19c>
 8000f68:	4b6a      	ldr	r3, [pc, #424]	; (8001114 <HAL_RCC_OscConfig+0x330>)
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	4a69      	ldr	r2, [pc, #420]	; (8001114 <HAL_RCC_OscConfig+0x330>)
 8000f6e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f72:	6013      	str	r3, [r2, #0]
 8000f74:	4b67      	ldr	r3, [pc, #412]	; (8001114 <HAL_RCC_OscConfig+0x330>)
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	4a66      	ldr	r2, [pc, #408]	; (8001114 <HAL_RCC_OscConfig+0x330>)
 8000f7a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f7e:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000f80:	4b64      	ldr	r3, [pc, #400]	; (8001114 <HAL_RCC_OscConfig+0x330>)
 8000f82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f84:	f023 020f 	bic.w	r2, r3, #15
 8000f88:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000f8c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	689b      	ldr	r3, [r3, #8]
 8000f94:	495f      	ldr	r1, [pc, #380]	; (8001114 <HAL_RCC_OscConfig+0x330>)
 8000f96:	4313      	orrs	r3, r2
 8000f98:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000f9a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000f9e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	685b      	ldr	r3, [r3, #4]
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d059      	beq.n	800105e <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000faa:	f7ff fc9b 	bl	80008e4 <HAL_GetTick>
 8000fae:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000fb2:	e00a      	b.n	8000fca <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000fb4:	f7ff fc96 	bl	80008e4 <HAL_GetTick>
 8000fb8:	4602      	mov	r2, r0
 8000fba:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000fbe:	1ad3      	subs	r3, r2, r3
 8000fc0:	2b64      	cmp	r3, #100	; 0x64
 8000fc2:	d902      	bls.n	8000fca <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8000fc4:	2303      	movs	r3, #3
 8000fc6:	f000 bf43 	b.w	8001e50 <HAL_RCC_OscConfig+0x106c>
 8000fca:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000fce:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000fd2:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8000fd6:	fa93 f3a3 	rbit	r3, r3
 8000fda:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8000fde:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000fe2:	fab3 f383 	clz	r3, r3
 8000fe6:	b2db      	uxtb	r3, r3
 8000fe8:	095b      	lsrs	r3, r3, #5
 8000fea:	b2db      	uxtb	r3, r3
 8000fec:	f043 0301 	orr.w	r3, r3, #1
 8000ff0:	b2db      	uxtb	r3, r3
 8000ff2:	2b01      	cmp	r3, #1
 8000ff4:	d102      	bne.n	8000ffc <HAL_RCC_OscConfig+0x218>
 8000ff6:	4b47      	ldr	r3, [pc, #284]	; (8001114 <HAL_RCC_OscConfig+0x330>)
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	e015      	b.n	8001028 <HAL_RCC_OscConfig+0x244>
 8000ffc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001000:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001004:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8001008:	fa93 f3a3 	rbit	r3, r3
 800100c:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8001010:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001014:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8001018:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 800101c:	fa93 f3a3 	rbit	r3, r3
 8001020:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8001024:	4b3b      	ldr	r3, [pc, #236]	; (8001114 <HAL_RCC_OscConfig+0x330>)
 8001026:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001028:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800102c:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8001030:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8001034:	fa92 f2a2 	rbit	r2, r2
 8001038:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 800103c:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8001040:	fab2 f282 	clz	r2, r2
 8001044:	b2d2      	uxtb	r2, r2
 8001046:	f042 0220 	orr.w	r2, r2, #32
 800104a:	b2d2      	uxtb	r2, r2
 800104c:	f002 021f 	and.w	r2, r2, #31
 8001050:	2101      	movs	r1, #1
 8001052:	fa01 f202 	lsl.w	r2, r1, r2
 8001056:	4013      	ands	r3, r2
 8001058:	2b00      	cmp	r3, #0
 800105a:	d0ab      	beq.n	8000fb4 <HAL_RCC_OscConfig+0x1d0>
 800105c:	e05d      	b.n	800111a <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800105e:	f7ff fc41 	bl	80008e4 <HAL_GetTick>
 8001062:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001066:	e00a      	b.n	800107e <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001068:	f7ff fc3c 	bl	80008e4 <HAL_GetTick>
 800106c:	4602      	mov	r2, r0
 800106e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001072:	1ad3      	subs	r3, r2, r3
 8001074:	2b64      	cmp	r3, #100	; 0x64
 8001076:	d902      	bls.n	800107e <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8001078:	2303      	movs	r3, #3
 800107a:	f000 bee9 	b.w	8001e50 <HAL_RCC_OscConfig+0x106c>
 800107e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001082:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001086:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 800108a:	fa93 f3a3 	rbit	r3, r3
 800108e:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8001092:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001096:	fab3 f383 	clz	r3, r3
 800109a:	b2db      	uxtb	r3, r3
 800109c:	095b      	lsrs	r3, r3, #5
 800109e:	b2db      	uxtb	r3, r3
 80010a0:	f043 0301 	orr.w	r3, r3, #1
 80010a4:	b2db      	uxtb	r3, r3
 80010a6:	2b01      	cmp	r3, #1
 80010a8:	d102      	bne.n	80010b0 <HAL_RCC_OscConfig+0x2cc>
 80010aa:	4b1a      	ldr	r3, [pc, #104]	; (8001114 <HAL_RCC_OscConfig+0x330>)
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	e015      	b.n	80010dc <HAL_RCC_OscConfig+0x2f8>
 80010b0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80010b4:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010b8:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 80010bc:	fa93 f3a3 	rbit	r3, r3
 80010c0:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80010c4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80010c8:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80010cc:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80010d0:	fa93 f3a3 	rbit	r3, r3
 80010d4:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 80010d8:	4b0e      	ldr	r3, [pc, #56]	; (8001114 <HAL_RCC_OscConfig+0x330>)
 80010da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010dc:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80010e0:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 80010e4:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80010e8:	fa92 f2a2 	rbit	r2, r2
 80010ec:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 80010f0:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 80010f4:	fab2 f282 	clz	r2, r2
 80010f8:	b2d2      	uxtb	r2, r2
 80010fa:	f042 0220 	orr.w	r2, r2, #32
 80010fe:	b2d2      	uxtb	r2, r2
 8001100:	f002 021f 	and.w	r2, r2, #31
 8001104:	2101      	movs	r1, #1
 8001106:	fa01 f202 	lsl.w	r2, r1, r2
 800110a:	4013      	ands	r3, r2
 800110c:	2b00      	cmp	r3, #0
 800110e:	d1ab      	bne.n	8001068 <HAL_RCC_OscConfig+0x284>
 8001110:	e003      	b.n	800111a <HAL_RCC_OscConfig+0x336>
 8001112:	bf00      	nop
 8001114:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001118:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800111a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800111e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	f003 0302 	and.w	r3, r3, #2
 800112a:	2b00      	cmp	r3, #0
 800112c:	f000 817d 	beq.w	800142a <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001130:	4ba6      	ldr	r3, [pc, #664]	; (80013cc <HAL_RCC_OscConfig+0x5e8>)
 8001132:	685b      	ldr	r3, [r3, #4]
 8001134:	f003 030c 	and.w	r3, r3, #12
 8001138:	2b00      	cmp	r3, #0
 800113a:	d00b      	beq.n	8001154 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800113c:	4ba3      	ldr	r3, [pc, #652]	; (80013cc <HAL_RCC_OscConfig+0x5e8>)
 800113e:	685b      	ldr	r3, [r3, #4]
 8001140:	f003 030c 	and.w	r3, r3, #12
 8001144:	2b08      	cmp	r3, #8
 8001146:	d172      	bne.n	800122e <HAL_RCC_OscConfig+0x44a>
 8001148:	4ba0      	ldr	r3, [pc, #640]	; (80013cc <HAL_RCC_OscConfig+0x5e8>)
 800114a:	685b      	ldr	r3, [r3, #4]
 800114c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001150:	2b00      	cmp	r3, #0
 8001152:	d16c      	bne.n	800122e <HAL_RCC_OscConfig+0x44a>
 8001154:	2302      	movs	r3, #2
 8001156:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800115a:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800115e:	fa93 f3a3 	rbit	r3, r3
 8001162:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8001166:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800116a:	fab3 f383 	clz	r3, r3
 800116e:	b2db      	uxtb	r3, r3
 8001170:	095b      	lsrs	r3, r3, #5
 8001172:	b2db      	uxtb	r3, r3
 8001174:	f043 0301 	orr.w	r3, r3, #1
 8001178:	b2db      	uxtb	r3, r3
 800117a:	2b01      	cmp	r3, #1
 800117c:	d102      	bne.n	8001184 <HAL_RCC_OscConfig+0x3a0>
 800117e:	4b93      	ldr	r3, [pc, #588]	; (80013cc <HAL_RCC_OscConfig+0x5e8>)
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	e013      	b.n	80011ac <HAL_RCC_OscConfig+0x3c8>
 8001184:	2302      	movs	r3, #2
 8001186:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800118a:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 800118e:	fa93 f3a3 	rbit	r3, r3
 8001192:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8001196:	2302      	movs	r3, #2
 8001198:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 800119c:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80011a0:	fa93 f3a3 	rbit	r3, r3
 80011a4:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 80011a8:	4b88      	ldr	r3, [pc, #544]	; (80013cc <HAL_RCC_OscConfig+0x5e8>)
 80011aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011ac:	2202      	movs	r2, #2
 80011ae:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 80011b2:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80011b6:	fa92 f2a2 	rbit	r2, r2
 80011ba:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 80011be:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 80011c2:	fab2 f282 	clz	r2, r2
 80011c6:	b2d2      	uxtb	r2, r2
 80011c8:	f042 0220 	orr.w	r2, r2, #32
 80011cc:	b2d2      	uxtb	r2, r2
 80011ce:	f002 021f 	and.w	r2, r2, #31
 80011d2:	2101      	movs	r1, #1
 80011d4:	fa01 f202 	lsl.w	r2, r1, r2
 80011d8:	4013      	ands	r3, r2
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d00a      	beq.n	80011f4 <HAL_RCC_OscConfig+0x410>
 80011de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80011e2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	691b      	ldr	r3, [r3, #16]
 80011ea:	2b01      	cmp	r3, #1
 80011ec:	d002      	beq.n	80011f4 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 80011ee:	2301      	movs	r3, #1
 80011f0:	f000 be2e 	b.w	8001e50 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011f4:	4b75      	ldr	r3, [pc, #468]	; (80013cc <HAL_RCC_OscConfig+0x5e8>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80011fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001200:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	695b      	ldr	r3, [r3, #20]
 8001208:	21f8      	movs	r1, #248	; 0xf8
 800120a:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800120e:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8001212:	fa91 f1a1 	rbit	r1, r1
 8001216:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 800121a:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 800121e:	fab1 f181 	clz	r1, r1
 8001222:	b2c9      	uxtb	r1, r1
 8001224:	408b      	lsls	r3, r1
 8001226:	4969      	ldr	r1, [pc, #420]	; (80013cc <HAL_RCC_OscConfig+0x5e8>)
 8001228:	4313      	orrs	r3, r2
 800122a:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800122c:	e0fd      	b.n	800142a <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800122e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001232:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	691b      	ldr	r3, [r3, #16]
 800123a:	2b00      	cmp	r3, #0
 800123c:	f000 8088 	beq.w	8001350 <HAL_RCC_OscConfig+0x56c>
 8001240:	2301      	movs	r3, #1
 8001242:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001246:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 800124a:	fa93 f3a3 	rbit	r3, r3
 800124e:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8001252:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001256:	fab3 f383 	clz	r3, r3
 800125a:	b2db      	uxtb	r3, r3
 800125c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001260:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001264:	009b      	lsls	r3, r3, #2
 8001266:	461a      	mov	r2, r3
 8001268:	2301      	movs	r3, #1
 800126a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800126c:	f7ff fb3a 	bl	80008e4 <HAL_GetTick>
 8001270:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001274:	e00a      	b.n	800128c <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001276:	f7ff fb35 	bl	80008e4 <HAL_GetTick>
 800127a:	4602      	mov	r2, r0
 800127c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001280:	1ad3      	subs	r3, r2, r3
 8001282:	2b02      	cmp	r3, #2
 8001284:	d902      	bls.n	800128c <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8001286:	2303      	movs	r3, #3
 8001288:	f000 bde2 	b.w	8001e50 <HAL_RCC_OscConfig+0x106c>
 800128c:	2302      	movs	r3, #2
 800128e:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001292:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8001296:	fa93 f3a3 	rbit	r3, r3
 800129a:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 800129e:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012a2:	fab3 f383 	clz	r3, r3
 80012a6:	b2db      	uxtb	r3, r3
 80012a8:	095b      	lsrs	r3, r3, #5
 80012aa:	b2db      	uxtb	r3, r3
 80012ac:	f043 0301 	orr.w	r3, r3, #1
 80012b0:	b2db      	uxtb	r3, r3
 80012b2:	2b01      	cmp	r3, #1
 80012b4:	d102      	bne.n	80012bc <HAL_RCC_OscConfig+0x4d8>
 80012b6:	4b45      	ldr	r3, [pc, #276]	; (80013cc <HAL_RCC_OscConfig+0x5e8>)
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	e013      	b.n	80012e4 <HAL_RCC_OscConfig+0x500>
 80012bc:	2302      	movs	r3, #2
 80012be:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012c2:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80012c6:	fa93 f3a3 	rbit	r3, r3
 80012ca:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80012ce:	2302      	movs	r3, #2
 80012d0:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80012d4:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80012d8:	fa93 f3a3 	rbit	r3, r3
 80012dc:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 80012e0:	4b3a      	ldr	r3, [pc, #232]	; (80013cc <HAL_RCC_OscConfig+0x5e8>)
 80012e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012e4:	2202      	movs	r2, #2
 80012e6:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 80012ea:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80012ee:	fa92 f2a2 	rbit	r2, r2
 80012f2:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 80012f6:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 80012fa:	fab2 f282 	clz	r2, r2
 80012fe:	b2d2      	uxtb	r2, r2
 8001300:	f042 0220 	orr.w	r2, r2, #32
 8001304:	b2d2      	uxtb	r2, r2
 8001306:	f002 021f 	and.w	r2, r2, #31
 800130a:	2101      	movs	r1, #1
 800130c:	fa01 f202 	lsl.w	r2, r1, r2
 8001310:	4013      	ands	r3, r2
 8001312:	2b00      	cmp	r3, #0
 8001314:	d0af      	beq.n	8001276 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001316:	4b2d      	ldr	r3, [pc, #180]	; (80013cc <HAL_RCC_OscConfig+0x5e8>)
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800131e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001322:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	695b      	ldr	r3, [r3, #20]
 800132a:	21f8      	movs	r1, #248	; 0xf8
 800132c:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001330:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8001334:	fa91 f1a1 	rbit	r1, r1
 8001338:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 800133c:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8001340:	fab1 f181 	clz	r1, r1
 8001344:	b2c9      	uxtb	r1, r1
 8001346:	408b      	lsls	r3, r1
 8001348:	4920      	ldr	r1, [pc, #128]	; (80013cc <HAL_RCC_OscConfig+0x5e8>)
 800134a:	4313      	orrs	r3, r2
 800134c:	600b      	str	r3, [r1, #0]
 800134e:	e06c      	b.n	800142a <HAL_RCC_OscConfig+0x646>
 8001350:	2301      	movs	r3, #1
 8001352:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001356:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800135a:	fa93 f3a3 	rbit	r3, r3
 800135e:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8001362:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001366:	fab3 f383 	clz	r3, r3
 800136a:	b2db      	uxtb	r3, r3
 800136c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001370:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001374:	009b      	lsls	r3, r3, #2
 8001376:	461a      	mov	r2, r3
 8001378:	2300      	movs	r3, #0
 800137a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800137c:	f7ff fab2 	bl	80008e4 <HAL_GetTick>
 8001380:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001384:	e00a      	b.n	800139c <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001386:	f7ff faad 	bl	80008e4 <HAL_GetTick>
 800138a:	4602      	mov	r2, r0
 800138c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001390:	1ad3      	subs	r3, r2, r3
 8001392:	2b02      	cmp	r3, #2
 8001394:	d902      	bls.n	800139c <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8001396:	2303      	movs	r3, #3
 8001398:	f000 bd5a 	b.w	8001e50 <HAL_RCC_OscConfig+0x106c>
 800139c:	2302      	movs	r3, #2
 800139e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013a2:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80013a6:	fa93 f3a3 	rbit	r3, r3
 80013aa:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 80013ae:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013b2:	fab3 f383 	clz	r3, r3
 80013b6:	b2db      	uxtb	r3, r3
 80013b8:	095b      	lsrs	r3, r3, #5
 80013ba:	b2db      	uxtb	r3, r3
 80013bc:	f043 0301 	orr.w	r3, r3, #1
 80013c0:	b2db      	uxtb	r3, r3
 80013c2:	2b01      	cmp	r3, #1
 80013c4:	d104      	bne.n	80013d0 <HAL_RCC_OscConfig+0x5ec>
 80013c6:	4b01      	ldr	r3, [pc, #4]	; (80013cc <HAL_RCC_OscConfig+0x5e8>)
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	e015      	b.n	80013f8 <HAL_RCC_OscConfig+0x614>
 80013cc:	40021000 	.word	0x40021000
 80013d0:	2302      	movs	r3, #2
 80013d2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013d6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80013da:	fa93 f3a3 	rbit	r3, r3
 80013de:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80013e2:	2302      	movs	r3, #2
 80013e4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80013e8:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80013ec:	fa93 f3a3 	rbit	r3, r3
 80013f0:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80013f4:	4bc8      	ldr	r3, [pc, #800]	; (8001718 <HAL_RCC_OscConfig+0x934>)
 80013f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013f8:	2202      	movs	r2, #2
 80013fa:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 80013fe:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001402:	fa92 f2a2 	rbit	r2, r2
 8001406:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 800140a:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800140e:	fab2 f282 	clz	r2, r2
 8001412:	b2d2      	uxtb	r2, r2
 8001414:	f042 0220 	orr.w	r2, r2, #32
 8001418:	b2d2      	uxtb	r2, r2
 800141a:	f002 021f 	and.w	r2, r2, #31
 800141e:	2101      	movs	r1, #1
 8001420:	fa01 f202 	lsl.w	r2, r1, r2
 8001424:	4013      	ands	r3, r2
 8001426:	2b00      	cmp	r3, #0
 8001428:	d1ad      	bne.n	8001386 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800142a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800142e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	f003 0308 	and.w	r3, r3, #8
 800143a:	2b00      	cmp	r3, #0
 800143c:	f000 8110 	beq.w	8001660 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001440:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001444:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	699b      	ldr	r3, [r3, #24]
 800144c:	2b00      	cmp	r3, #0
 800144e:	d079      	beq.n	8001544 <HAL_RCC_OscConfig+0x760>
 8001450:	2301      	movs	r3, #1
 8001452:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001456:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800145a:	fa93 f3a3 	rbit	r3, r3
 800145e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8001462:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001466:	fab3 f383 	clz	r3, r3
 800146a:	b2db      	uxtb	r3, r3
 800146c:	461a      	mov	r2, r3
 800146e:	4bab      	ldr	r3, [pc, #684]	; (800171c <HAL_RCC_OscConfig+0x938>)
 8001470:	4413      	add	r3, r2
 8001472:	009b      	lsls	r3, r3, #2
 8001474:	461a      	mov	r2, r3
 8001476:	2301      	movs	r3, #1
 8001478:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800147a:	f7ff fa33 	bl	80008e4 <HAL_GetTick>
 800147e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001482:	e00a      	b.n	800149a <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001484:	f7ff fa2e 	bl	80008e4 <HAL_GetTick>
 8001488:	4602      	mov	r2, r0
 800148a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800148e:	1ad3      	subs	r3, r2, r3
 8001490:	2b02      	cmp	r3, #2
 8001492:	d902      	bls.n	800149a <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8001494:	2303      	movs	r3, #3
 8001496:	f000 bcdb 	b.w	8001e50 <HAL_RCC_OscConfig+0x106c>
 800149a:	2302      	movs	r3, #2
 800149c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014a0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80014a4:	fa93 f3a3 	rbit	r3, r3
 80014a8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80014ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014b0:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80014b4:	2202      	movs	r2, #2
 80014b6:	601a      	str	r2, [r3, #0]
 80014b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014bc:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	fa93 f2a3 	rbit	r2, r3
 80014c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014ca:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80014ce:	601a      	str	r2, [r3, #0]
 80014d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014d4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80014d8:	2202      	movs	r2, #2
 80014da:	601a      	str	r2, [r3, #0]
 80014dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014e0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	fa93 f2a3 	rbit	r2, r3
 80014ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014ee:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80014f2:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014f4:	4b88      	ldr	r3, [pc, #544]	; (8001718 <HAL_RCC_OscConfig+0x934>)
 80014f6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80014f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014fc:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001500:	2102      	movs	r1, #2
 8001502:	6019      	str	r1, [r3, #0]
 8001504:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001508:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	fa93 f1a3 	rbit	r1, r3
 8001512:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001516:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800151a:	6019      	str	r1, [r3, #0]
  return result;
 800151c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001520:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	fab3 f383 	clz	r3, r3
 800152a:	b2db      	uxtb	r3, r3
 800152c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001530:	b2db      	uxtb	r3, r3
 8001532:	f003 031f 	and.w	r3, r3, #31
 8001536:	2101      	movs	r1, #1
 8001538:	fa01 f303 	lsl.w	r3, r1, r3
 800153c:	4013      	ands	r3, r2
 800153e:	2b00      	cmp	r3, #0
 8001540:	d0a0      	beq.n	8001484 <HAL_RCC_OscConfig+0x6a0>
 8001542:	e08d      	b.n	8001660 <HAL_RCC_OscConfig+0x87c>
 8001544:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001548:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800154c:	2201      	movs	r2, #1
 800154e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001550:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001554:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	fa93 f2a3 	rbit	r2, r3
 800155e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001562:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001566:	601a      	str	r2, [r3, #0]
  return result;
 8001568:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800156c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001570:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001572:	fab3 f383 	clz	r3, r3
 8001576:	b2db      	uxtb	r3, r3
 8001578:	461a      	mov	r2, r3
 800157a:	4b68      	ldr	r3, [pc, #416]	; (800171c <HAL_RCC_OscConfig+0x938>)
 800157c:	4413      	add	r3, r2
 800157e:	009b      	lsls	r3, r3, #2
 8001580:	461a      	mov	r2, r3
 8001582:	2300      	movs	r3, #0
 8001584:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001586:	f7ff f9ad 	bl	80008e4 <HAL_GetTick>
 800158a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800158e:	e00a      	b.n	80015a6 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001590:	f7ff f9a8 	bl	80008e4 <HAL_GetTick>
 8001594:	4602      	mov	r2, r0
 8001596:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800159a:	1ad3      	subs	r3, r2, r3
 800159c:	2b02      	cmp	r3, #2
 800159e:	d902      	bls.n	80015a6 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 80015a0:	2303      	movs	r3, #3
 80015a2:	f000 bc55 	b.w	8001e50 <HAL_RCC_OscConfig+0x106c>
 80015a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015aa:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80015ae:	2202      	movs	r2, #2
 80015b0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015b6:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	fa93 f2a3 	rbit	r2, r3
 80015c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015c4:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80015c8:	601a      	str	r2, [r3, #0]
 80015ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015ce:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80015d2:	2202      	movs	r2, #2
 80015d4:	601a      	str	r2, [r3, #0]
 80015d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015da:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	fa93 f2a3 	rbit	r2, r3
 80015e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015e8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80015ec:	601a      	str	r2, [r3, #0]
 80015ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015f2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80015f6:	2202      	movs	r2, #2
 80015f8:	601a      	str	r2, [r3, #0]
 80015fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015fe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	fa93 f2a3 	rbit	r2, r3
 8001608:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800160c:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001610:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001612:	4b41      	ldr	r3, [pc, #260]	; (8001718 <HAL_RCC_OscConfig+0x934>)
 8001614:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001616:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800161a:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800161e:	2102      	movs	r1, #2
 8001620:	6019      	str	r1, [r3, #0]
 8001622:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001626:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	fa93 f1a3 	rbit	r1, r3
 8001630:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001634:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001638:	6019      	str	r1, [r3, #0]
  return result;
 800163a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800163e:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	fab3 f383 	clz	r3, r3
 8001648:	b2db      	uxtb	r3, r3
 800164a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800164e:	b2db      	uxtb	r3, r3
 8001650:	f003 031f 	and.w	r3, r3, #31
 8001654:	2101      	movs	r1, #1
 8001656:	fa01 f303 	lsl.w	r3, r1, r3
 800165a:	4013      	ands	r3, r2
 800165c:	2b00      	cmp	r3, #0
 800165e:	d197      	bne.n	8001590 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001660:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001664:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	f003 0304 	and.w	r3, r3, #4
 8001670:	2b00      	cmp	r3, #0
 8001672:	f000 81a1 	beq.w	80019b8 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001676:	2300      	movs	r3, #0
 8001678:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800167c:	4b26      	ldr	r3, [pc, #152]	; (8001718 <HAL_RCC_OscConfig+0x934>)
 800167e:	69db      	ldr	r3, [r3, #28]
 8001680:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001684:	2b00      	cmp	r3, #0
 8001686:	d116      	bne.n	80016b6 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001688:	4b23      	ldr	r3, [pc, #140]	; (8001718 <HAL_RCC_OscConfig+0x934>)
 800168a:	69db      	ldr	r3, [r3, #28]
 800168c:	4a22      	ldr	r2, [pc, #136]	; (8001718 <HAL_RCC_OscConfig+0x934>)
 800168e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001692:	61d3      	str	r3, [r2, #28]
 8001694:	4b20      	ldr	r3, [pc, #128]	; (8001718 <HAL_RCC_OscConfig+0x934>)
 8001696:	69db      	ldr	r3, [r3, #28]
 8001698:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 800169c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016a0:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 80016a4:	601a      	str	r2, [r3, #0]
 80016a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016aa:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 80016ae:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80016b0:	2301      	movs	r3, #1
 80016b2:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016b6:	4b1a      	ldr	r3, [pc, #104]	; (8001720 <HAL_RCC_OscConfig+0x93c>)
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d11a      	bne.n	80016f8 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80016c2:	4b17      	ldr	r3, [pc, #92]	; (8001720 <HAL_RCC_OscConfig+0x93c>)
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	4a16      	ldr	r2, [pc, #88]	; (8001720 <HAL_RCC_OscConfig+0x93c>)
 80016c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016cc:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80016ce:	f7ff f909 	bl	80008e4 <HAL_GetTick>
 80016d2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016d6:	e009      	b.n	80016ec <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80016d8:	f7ff f904 	bl	80008e4 <HAL_GetTick>
 80016dc:	4602      	mov	r2, r0
 80016de:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80016e2:	1ad3      	subs	r3, r2, r3
 80016e4:	2b64      	cmp	r3, #100	; 0x64
 80016e6:	d901      	bls.n	80016ec <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 80016e8:	2303      	movs	r3, #3
 80016ea:	e3b1      	b.n	8001e50 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016ec:	4b0c      	ldr	r3, [pc, #48]	; (8001720 <HAL_RCC_OscConfig+0x93c>)
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d0ef      	beq.n	80016d8 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80016f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016fc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	68db      	ldr	r3, [r3, #12]
 8001704:	2b01      	cmp	r3, #1
 8001706:	d10d      	bne.n	8001724 <HAL_RCC_OscConfig+0x940>
 8001708:	4b03      	ldr	r3, [pc, #12]	; (8001718 <HAL_RCC_OscConfig+0x934>)
 800170a:	6a1b      	ldr	r3, [r3, #32]
 800170c:	4a02      	ldr	r2, [pc, #8]	; (8001718 <HAL_RCC_OscConfig+0x934>)
 800170e:	f043 0301 	orr.w	r3, r3, #1
 8001712:	6213      	str	r3, [r2, #32]
 8001714:	e03c      	b.n	8001790 <HAL_RCC_OscConfig+0x9ac>
 8001716:	bf00      	nop
 8001718:	40021000 	.word	0x40021000
 800171c:	10908120 	.word	0x10908120
 8001720:	40007000 	.word	0x40007000
 8001724:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001728:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	68db      	ldr	r3, [r3, #12]
 8001730:	2b00      	cmp	r3, #0
 8001732:	d10c      	bne.n	800174e <HAL_RCC_OscConfig+0x96a>
 8001734:	4bc1      	ldr	r3, [pc, #772]	; (8001a3c <HAL_RCC_OscConfig+0xc58>)
 8001736:	6a1b      	ldr	r3, [r3, #32]
 8001738:	4ac0      	ldr	r2, [pc, #768]	; (8001a3c <HAL_RCC_OscConfig+0xc58>)
 800173a:	f023 0301 	bic.w	r3, r3, #1
 800173e:	6213      	str	r3, [r2, #32]
 8001740:	4bbe      	ldr	r3, [pc, #760]	; (8001a3c <HAL_RCC_OscConfig+0xc58>)
 8001742:	6a1b      	ldr	r3, [r3, #32]
 8001744:	4abd      	ldr	r2, [pc, #756]	; (8001a3c <HAL_RCC_OscConfig+0xc58>)
 8001746:	f023 0304 	bic.w	r3, r3, #4
 800174a:	6213      	str	r3, [r2, #32]
 800174c:	e020      	b.n	8001790 <HAL_RCC_OscConfig+0x9ac>
 800174e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001752:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	68db      	ldr	r3, [r3, #12]
 800175a:	2b05      	cmp	r3, #5
 800175c:	d10c      	bne.n	8001778 <HAL_RCC_OscConfig+0x994>
 800175e:	4bb7      	ldr	r3, [pc, #732]	; (8001a3c <HAL_RCC_OscConfig+0xc58>)
 8001760:	6a1b      	ldr	r3, [r3, #32]
 8001762:	4ab6      	ldr	r2, [pc, #728]	; (8001a3c <HAL_RCC_OscConfig+0xc58>)
 8001764:	f043 0304 	orr.w	r3, r3, #4
 8001768:	6213      	str	r3, [r2, #32]
 800176a:	4bb4      	ldr	r3, [pc, #720]	; (8001a3c <HAL_RCC_OscConfig+0xc58>)
 800176c:	6a1b      	ldr	r3, [r3, #32]
 800176e:	4ab3      	ldr	r2, [pc, #716]	; (8001a3c <HAL_RCC_OscConfig+0xc58>)
 8001770:	f043 0301 	orr.w	r3, r3, #1
 8001774:	6213      	str	r3, [r2, #32]
 8001776:	e00b      	b.n	8001790 <HAL_RCC_OscConfig+0x9ac>
 8001778:	4bb0      	ldr	r3, [pc, #704]	; (8001a3c <HAL_RCC_OscConfig+0xc58>)
 800177a:	6a1b      	ldr	r3, [r3, #32]
 800177c:	4aaf      	ldr	r2, [pc, #700]	; (8001a3c <HAL_RCC_OscConfig+0xc58>)
 800177e:	f023 0301 	bic.w	r3, r3, #1
 8001782:	6213      	str	r3, [r2, #32]
 8001784:	4bad      	ldr	r3, [pc, #692]	; (8001a3c <HAL_RCC_OscConfig+0xc58>)
 8001786:	6a1b      	ldr	r3, [r3, #32]
 8001788:	4aac      	ldr	r2, [pc, #688]	; (8001a3c <HAL_RCC_OscConfig+0xc58>)
 800178a:	f023 0304 	bic.w	r3, r3, #4
 800178e:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001790:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001794:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	68db      	ldr	r3, [r3, #12]
 800179c:	2b00      	cmp	r3, #0
 800179e:	f000 8081 	beq.w	80018a4 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017a2:	f7ff f89f 	bl	80008e4 <HAL_GetTick>
 80017a6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017aa:	e00b      	b.n	80017c4 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80017ac:	f7ff f89a 	bl	80008e4 <HAL_GetTick>
 80017b0:	4602      	mov	r2, r0
 80017b2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80017b6:	1ad3      	subs	r3, r2, r3
 80017b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80017bc:	4293      	cmp	r3, r2
 80017be:	d901      	bls.n	80017c4 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 80017c0:	2303      	movs	r3, #3
 80017c2:	e345      	b.n	8001e50 <HAL_RCC_OscConfig+0x106c>
 80017c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017c8:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80017cc:	2202      	movs	r2, #2
 80017ce:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017d4:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	fa93 f2a3 	rbit	r2, r3
 80017de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017e2:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80017e6:	601a      	str	r2, [r3, #0]
 80017e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017ec:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80017f0:	2202      	movs	r2, #2
 80017f2:	601a      	str	r2, [r3, #0]
 80017f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017f8:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	fa93 f2a3 	rbit	r2, r3
 8001802:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001806:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800180a:	601a      	str	r2, [r3, #0]
  return result;
 800180c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001810:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8001814:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001816:	fab3 f383 	clz	r3, r3
 800181a:	b2db      	uxtb	r3, r3
 800181c:	095b      	lsrs	r3, r3, #5
 800181e:	b2db      	uxtb	r3, r3
 8001820:	f043 0302 	orr.w	r3, r3, #2
 8001824:	b2db      	uxtb	r3, r3
 8001826:	2b02      	cmp	r3, #2
 8001828:	d102      	bne.n	8001830 <HAL_RCC_OscConfig+0xa4c>
 800182a:	4b84      	ldr	r3, [pc, #528]	; (8001a3c <HAL_RCC_OscConfig+0xc58>)
 800182c:	6a1b      	ldr	r3, [r3, #32]
 800182e:	e013      	b.n	8001858 <HAL_RCC_OscConfig+0xa74>
 8001830:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001834:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8001838:	2202      	movs	r2, #2
 800183a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800183c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001840:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	fa93 f2a3 	rbit	r2, r3
 800184a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800184e:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8001852:	601a      	str	r2, [r3, #0]
 8001854:	4b79      	ldr	r3, [pc, #484]	; (8001a3c <HAL_RCC_OscConfig+0xc58>)
 8001856:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001858:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800185c:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8001860:	2102      	movs	r1, #2
 8001862:	6011      	str	r1, [r2, #0]
 8001864:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001868:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 800186c:	6812      	ldr	r2, [r2, #0]
 800186e:	fa92 f1a2 	rbit	r1, r2
 8001872:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001876:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 800187a:	6011      	str	r1, [r2, #0]
  return result;
 800187c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001880:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8001884:	6812      	ldr	r2, [r2, #0]
 8001886:	fab2 f282 	clz	r2, r2
 800188a:	b2d2      	uxtb	r2, r2
 800188c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001890:	b2d2      	uxtb	r2, r2
 8001892:	f002 021f 	and.w	r2, r2, #31
 8001896:	2101      	movs	r1, #1
 8001898:	fa01 f202 	lsl.w	r2, r1, r2
 800189c:	4013      	ands	r3, r2
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d084      	beq.n	80017ac <HAL_RCC_OscConfig+0x9c8>
 80018a2:	e07f      	b.n	80019a4 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018a4:	f7ff f81e 	bl	80008e4 <HAL_GetTick>
 80018a8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80018ac:	e00b      	b.n	80018c6 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80018ae:	f7ff f819 	bl	80008e4 <HAL_GetTick>
 80018b2:	4602      	mov	r2, r0
 80018b4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80018b8:	1ad3      	subs	r3, r2, r3
 80018ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80018be:	4293      	cmp	r3, r2
 80018c0:	d901      	bls.n	80018c6 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 80018c2:	2303      	movs	r3, #3
 80018c4:	e2c4      	b.n	8001e50 <HAL_RCC_OscConfig+0x106c>
 80018c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018ca:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80018ce:	2202      	movs	r2, #2
 80018d0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018d6:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	fa93 f2a3 	rbit	r2, r3
 80018e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018e4:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80018e8:	601a      	str	r2, [r3, #0]
 80018ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018ee:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80018f2:	2202      	movs	r2, #2
 80018f4:	601a      	str	r2, [r3, #0]
 80018f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018fa:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	fa93 f2a3 	rbit	r2, r3
 8001904:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001908:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 800190c:	601a      	str	r2, [r3, #0]
  return result;
 800190e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001912:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8001916:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001918:	fab3 f383 	clz	r3, r3
 800191c:	b2db      	uxtb	r3, r3
 800191e:	095b      	lsrs	r3, r3, #5
 8001920:	b2db      	uxtb	r3, r3
 8001922:	f043 0302 	orr.w	r3, r3, #2
 8001926:	b2db      	uxtb	r3, r3
 8001928:	2b02      	cmp	r3, #2
 800192a:	d102      	bne.n	8001932 <HAL_RCC_OscConfig+0xb4e>
 800192c:	4b43      	ldr	r3, [pc, #268]	; (8001a3c <HAL_RCC_OscConfig+0xc58>)
 800192e:	6a1b      	ldr	r3, [r3, #32]
 8001930:	e013      	b.n	800195a <HAL_RCC_OscConfig+0xb76>
 8001932:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001936:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800193a:	2202      	movs	r2, #2
 800193c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800193e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001942:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	fa93 f2a3 	rbit	r2, r3
 800194c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001950:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8001954:	601a      	str	r2, [r3, #0]
 8001956:	4b39      	ldr	r3, [pc, #228]	; (8001a3c <HAL_RCC_OscConfig+0xc58>)
 8001958:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800195a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800195e:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8001962:	2102      	movs	r1, #2
 8001964:	6011      	str	r1, [r2, #0]
 8001966:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800196a:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 800196e:	6812      	ldr	r2, [r2, #0]
 8001970:	fa92 f1a2 	rbit	r1, r2
 8001974:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001978:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 800197c:	6011      	str	r1, [r2, #0]
  return result;
 800197e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001982:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8001986:	6812      	ldr	r2, [r2, #0]
 8001988:	fab2 f282 	clz	r2, r2
 800198c:	b2d2      	uxtb	r2, r2
 800198e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001992:	b2d2      	uxtb	r2, r2
 8001994:	f002 021f 	and.w	r2, r2, #31
 8001998:	2101      	movs	r1, #1
 800199a:	fa01 f202 	lsl.w	r2, r1, r2
 800199e:	4013      	ands	r3, r2
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d184      	bne.n	80018ae <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80019a4:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 80019a8:	2b01      	cmp	r3, #1
 80019aa:	d105      	bne.n	80019b8 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80019ac:	4b23      	ldr	r3, [pc, #140]	; (8001a3c <HAL_RCC_OscConfig+0xc58>)
 80019ae:	69db      	ldr	r3, [r3, #28]
 80019b0:	4a22      	ldr	r2, [pc, #136]	; (8001a3c <HAL_RCC_OscConfig+0xc58>)
 80019b2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80019b6:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80019b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019bc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	69db      	ldr	r3, [r3, #28]
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	f000 8242 	beq.w	8001e4e <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80019ca:	4b1c      	ldr	r3, [pc, #112]	; (8001a3c <HAL_RCC_OscConfig+0xc58>)
 80019cc:	685b      	ldr	r3, [r3, #4]
 80019ce:	f003 030c 	and.w	r3, r3, #12
 80019d2:	2b08      	cmp	r3, #8
 80019d4:	f000 8213 	beq.w	8001dfe <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80019d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019dc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	69db      	ldr	r3, [r3, #28]
 80019e4:	2b02      	cmp	r3, #2
 80019e6:	f040 8162 	bne.w	8001cae <HAL_RCC_OscConfig+0xeca>
 80019ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019ee:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 80019f2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80019f6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019fc:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	fa93 f2a3 	rbit	r2, r3
 8001a06:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a0a:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8001a0e:	601a      	str	r2, [r3, #0]
  return result;
 8001a10:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a14:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8001a18:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a1a:	fab3 f383 	clz	r3, r3
 8001a1e:	b2db      	uxtb	r3, r3
 8001a20:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001a24:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001a28:	009b      	lsls	r3, r3, #2
 8001a2a:	461a      	mov	r2, r3
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a30:	f7fe ff58 	bl	80008e4 <HAL_GetTick>
 8001a34:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a38:	e00c      	b.n	8001a54 <HAL_RCC_OscConfig+0xc70>
 8001a3a:	bf00      	nop
 8001a3c:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a40:	f7fe ff50 	bl	80008e4 <HAL_GetTick>
 8001a44:	4602      	mov	r2, r0
 8001a46:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001a4a:	1ad3      	subs	r3, r2, r3
 8001a4c:	2b02      	cmp	r3, #2
 8001a4e:	d901      	bls.n	8001a54 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8001a50:	2303      	movs	r3, #3
 8001a52:	e1fd      	b.n	8001e50 <HAL_RCC_OscConfig+0x106c>
 8001a54:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a58:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8001a5c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001a60:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a62:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a66:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	fa93 f2a3 	rbit	r2, r3
 8001a70:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a74:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001a78:	601a      	str	r2, [r3, #0]
  return result;
 8001a7a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a7e:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001a82:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a84:	fab3 f383 	clz	r3, r3
 8001a88:	b2db      	uxtb	r3, r3
 8001a8a:	095b      	lsrs	r3, r3, #5
 8001a8c:	b2db      	uxtb	r3, r3
 8001a8e:	f043 0301 	orr.w	r3, r3, #1
 8001a92:	b2db      	uxtb	r3, r3
 8001a94:	2b01      	cmp	r3, #1
 8001a96:	d102      	bne.n	8001a9e <HAL_RCC_OscConfig+0xcba>
 8001a98:	4bb0      	ldr	r3, [pc, #704]	; (8001d5c <HAL_RCC_OscConfig+0xf78>)
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	e027      	b.n	8001aee <HAL_RCC_OscConfig+0xd0a>
 8001a9e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001aa2:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8001aa6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001aaa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001aac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ab0:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	fa93 f2a3 	rbit	r2, r3
 8001aba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001abe:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8001ac2:	601a      	str	r2, [r3, #0]
 8001ac4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ac8:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8001acc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001ad0:	601a      	str	r2, [r3, #0]
 8001ad2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ad6:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	fa93 f2a3 	rbit	r2, r3
 8001ae0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ae4:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8001ae8:	601a      	str	r2, [r3, #0]
 8001aea:	4b9c      	ldr	r3, [pc, #624]	; (8001d5c <HAL_RCC_OscConfig+0xf78>)
 8001aec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aee:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001af2:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8001af6:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001afa:	6011      	str	r1, [r2, #0]
 8001afc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001b00:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8001b04:	6812      	ldr	r2, [r2, #0]
 8001b06:	fa92 f1a2 	rbit	r1, r2
 8001b0a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001b0e:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8001b12:	6011      	str	r1, [r2, #0]
  return result;
 8001b14:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001b18:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8001b1c:	6812      	ldr	r2, [r2, #0]
 8001b1e:	fab2 f282 	clz	r2, r2
 8001b22:	b2d2      	uxtb	r2, r2
 8001b24:	f042 0220 	orr.w	r2, r2, #32
 8001b28:	b2d2      	uxtb	r2, r2
 8001b2a:	f002 021f 	and.w	r2, r2, #31
 8001b2e:	2101      	movs	r1, #1
 8001b30:	fa01 f202 	lsl.w	r2, r1, r2
 8001b34:	4013      	ands	r3, r2
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d182      	bne.n	8001a40 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001b3a:	4b88      	ldr	r3, [pc, #544]	; (8001d5c <HAL_RCC_OscConfig+0xf78>)
 8001b3c:	685b      	ldr	r3, [r3, #4]
 8001b3e:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001b42:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b46:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8001b4e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b52:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	6a1b      	ldr	r3, [r3, #32]
 8001b5a:	430b      	orrs	r3, r1
 8001b5c:	497f      	ldr	r1, [pc, #508]	; (8001d5c <HAL_RCC_OscConfig+0xf78>)
 8001b5e:	4313      	orrs	r3, r2
 8001b60:	604b      	str	r3, [r1, #4]
 8001b62:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b66:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8001b6a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001b6e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b70:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b74:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	fa93 f2a3 	rbit	r2, r3
 8001b7e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b82:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8001b86:	601a      	str	r2, [r3, #0]
  return result;
 8001b88:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b8c:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8001b90:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b92:	fab3 f383 	clz	r3, r3
 8001b96:	b2db      	uxtb	r3, r3
 8001b98:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001b9c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001ba0:	009b      	lsls	r3, r3, #2
 8001ba2:	461a      	mov	r2, r3
 8001ba4:	2301      	movs	r3, #1
 8001ba6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ba8:	f7fe fe9c 	bl	80008e4 <HAL_GetTick>
 8001bac:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001bb0:	e009      	b.n	8001bc6 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001bb2:	f7fe fe97 	bl	80008e4 <HAL_GetTick>
 8001bb6:	4602      	mov	r2, r0
 8001bb8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001bbc:	1ad3      	subs	r3, r2, r3
 8001bbe:	2b02      	cmp	r3, #2
 8001bc0:	d901      	bls.n	8001bc6 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8001bc2:	2303      	movs	r3, #3
 8001bc4:	e144      	b.n	8001e50 <HAL_RCC_OscConfig+0x106c>
 8001bc6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bca:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8001bce:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001bd2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bd4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bd8:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	fa93 f2a3 	rbit	r2, r3
 8001be2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001be6:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8001bea:	601a      	str	r2, [r3, #0]
  return result;
 8001bec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bf0:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8001bf4:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001bf6:	fab3 f383 	clz	r3, r3
 8001bfa:	b2db      	uxtb	r3, r3
 8001bfc:	095b      	lsrs	r3, r3, #5
 8001bfe:	b2db      	uxtb	r3, r3
 8001c00:	f043 0301 	orr.w	r3, r3, #1
 8001c04:	b2db      	uxtb	r3, r3
 8001c06:	2b01      	cmp	r3, #1
 8001c08:	d102      	bne.n	8001c10 <HAL_RCC_OscConfig+0xe2c>
 8001c0a:	4b54      	ldr	r3, [pc, #336]	; (8001d5c <HAL_RCC_OscConfig+0xf78>)
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	e027      	b.n	8001c60 <HAL_RCC_OscConfig+0xe7c>
 8001c10:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c14:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8001c18:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001c1c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c1e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c22:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	fa93 f2a3 	rbit	r2, r3
 8001c2c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c30:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8001c34:	601a      	str	r2, [r3, #0]
 8001c36:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c3a:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8001c3e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001c42:	601a      	str	r2, [r3, #0]
 8001c44:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c48:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	fa93 f2a3 	rbit	r2, r3
 8001c52:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c56:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8001c5a:	601a      	str	r2, [r3, #0]
 8001c5c:	4b3f      	ldr	r3, [pc, #252]	; (8001d5c <HAL_RCC_OscConfig+0xf78>)
 8001c5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c60:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001c64:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8001c68:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001c6c:	6011      	str	r1, [r2, #0]
 8001c6e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001c72:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8001c76:	6812      	ldr	r2, [r2, #0]
 8001c78:	fa92 f1a2 	rbit	r1, r2
 8001c7c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001c80:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8001c84:	6011      	str	r1, [r2, #0]
  return result;
 8001c86:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001c8a:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8001c8e:	6812      	ldr	r2, [r2, #0]
 8001c90:	fab2 f282 	clz	r2, r2
 8001c94:	b2d2      	uxtb	r2, r2
 8001c96:	f042 0220 	orr.w	r2, r2, #32
 8001c9a:	b2d2      	uxtb	r2, r2
 8001c9c:	f002 021f 	and.w	r2, r2, #31
 8001ca0:	2101      	movs	r1, #1
 8001ca2:	fa01 f202 	lsl.w	r2, r1, r2
 8001ca6:	4013      	ands	r3, r2
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d082      	beq.n	8001bb2 <HAL_RCC_OscConfig+0xdce>
 8001cac:	e0cf      	b.n	8001e4e <HAL_RCC_OscConfig+0x106a>
 8001cae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cb2:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8001cb6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001cba:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cbc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cc0:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	fa93 f2a3 	rbit	r2, r3
 8001cca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cce:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8001cd2:	601a      	str	r2, [r3, #0]
  return result;
 8001cd4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cd8:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8001cdc:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001cde:	fab3 f383 	clz	r3, r3
 8001ce2:	b2db      	uxtb	r3, r3
 8001ce4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001ce8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001cec:	009b      	lsls	r3, r3, #2
 8001cee:	461a      	mov	r2, r3
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cf4:	f7fe fdf6 	bl	80008e4 <HAL_GetTick>
 8001cf8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001cfc:	e009      	b.n	8001d12 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001cfe:	f7fe fdf1 	bl	80008e4 <HAL_GetTick>
 8001d02:	4602      	mov	r2, r0
 8001d04:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001d08:	1ad3      	subs	r3, r2, r3
 8001d0a:	2b02      	cmp	r3, #2
 8001d0c:	d901      	bls.n	8001d12 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8001d0e:	2303      	movs	r3, #3
 8001d10:	e09e      	b.n	8001e50 <HAL_RCC_OscConfig+0x106c>
 8001d12:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d16:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8001d1a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001d1e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d20:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d24:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	fa93 f2a3 	rbit	r2, r3
 8001d2e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d32:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8001d36:	601a      	str	r2, [r3, #0]
  return result;
 8001d38:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d3c:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8001d40:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d42:	fab3 f383 	clz	r3, r3
 8001d46:	b2db      	uxtb	r3, r3
 8001d48:	095b      	lsrs	r3, r3, #5
 8001d4a:	b2db      	uxtb	r3, r3
 8001d4c:	f043 0301 	orr.w	r3, r3, #1
 8001d50:	b2db      	uxtb	r3, r3
 8001d52:	2b01      	cmp	r3, #1
 8001d54:	d104      	bne.n	8001d60 <HAL_RCC_OscConfig+0xf7c>
 8001d56:	4b01      	ldr	r3, [pc, #4]	; (8001d5c <HAL_RCC_OscConfig+0xf78>)
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	e029      	b.n	8001db0 <HAL_RCC_OscConfig+0xfcc>
 8001d5c:	40021000 	.word	0x40021000
 8001d60:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d64:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8001d68:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001d6c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d6e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d72:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	fa93 f2a3 	rbit	r2, r3
 8001d7c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d80:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8001d84:	601a      	str	r2, [r3, #0]
 8001d86:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d8a:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8001d8e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001d92:	601a      	str	r2, [r3, #0]
 8001d94:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d98:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	fa93 f2a3 	rbit	r2, r3
 8001da2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001da6:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8001daa:	601a      	str	r2, [r3, #0]
 8001dac:	4b2b      	ldr	r3, [pc, #172]	; (8001e5c <HAL_RCC_OscConfig+0x1078>)
 8001dae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001db0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001db4:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8001db8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001dbc:	6011      	str	r1, [r2, #0]
 8001dbe:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001dc2:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8001dc6:	6812      	ldr	r2, [r2, #0]
 8001dc8:	fa92 f1a2 	rbit	r1, r2
 8001dcc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001dd0:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8001dd4:	6011      	str	r1, [r2, #0]
  return result;
 8001dd6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001dda:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8001dde:	6812      	ldr	r2, [r2, #0]
 8001de0:	fab2 f282 	clz	r2, r2
 8001de4:	b2d2      	uxtb	r2, r2
 8001de6:	f042 0220 	orr.w	r2, r2, #32
 8001dea:	b2d2      	uxtb	r2, r2
 8001dec:	f002 021f 	and.w	r2, r2, #31
 8001df0:	2101      	movs	r1, #1
 8001df2:	fa01 f202 	lsl.w	r2, r1, r2
 8001df6:	4013      	ands	r3, r2
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d180      	bne.n	8001cfe <HAL_RCC_OscConfig+0xf1a>
 8001dfc:	e027      	b.n	8001e4e <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001dfe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e02:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	69db      	ldr	r3, [r3, #28]
 8001e0a:	2b01      	cmp	r3, #1
 8001e0c:	d101      	bne.n	8001e12 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8001e0e:	2301      	movs	r3, #1
 8001e10:	e01e      	b.n	8001e50 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001e12:	4b12      	ldr	r3, [pc, #72]	; (8001e5c <HAL_RCC_OscConfig+0x1078>)
 8001e14:	685b      	ldr	r3, [r3, #4]
 8001e16:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001e1a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001e1e:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001e22:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e26:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	6a1b      	ldr	r3, [r3, #32]
 8001e2e:	429a      	cmp	r2, r3
 8001e30:	d10b      	bne.n	8001e4a <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8001e32:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001e36:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001e3a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e3e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001e46:	429a      	cmp	r2, r3
 8001e48:	d001      	beq.n	8001e4e <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8001e4a:	2301      	movs	r3, #1
 8001e4c:	e000      	b.n	8001e50 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8001e4e:	2300      	movs	r3, #0
}
 8001e50:	4618      	mov	r0, r3
 8001e52:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8001e56:	46bd      	mov	sp, r7
 8001e58:	bd80      	pop	{r7, pc}
 8001e5a:	bf00      	nop
 8001e5c:	40021000 	.word	0x40021000

08001e60 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b09e      	sub	sp, #120	; 0x78
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
 8001e68:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d101      	bne.n	8001e78 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001e74:	2301      	movs	r3, #1
 8001e76:	e162      	b.n	800213e <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001e78:	4b90      	ldr	r3, [pc, #576]	; (80020bc <HAL_RCC_ClockConfig+0x25c>)
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f003 0307 	and.w	r3, r3, #7
 8001e80:	683a      	ldr	r2, [r7, #0]
 8001e82:	429a      	cmp	r2, r3
 8001e84:	d910      	bls.n	8001ea8 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e86:	4b8d      	ldr	r3, [pc, #564]	; (80020bc <HAL_RCC_ClockConfig+0x25c>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f023 0207 	bic.w	r2, r3, #7
 8001e8e:	498b      	ldr	r1, [pc, #556]	; (80020bc <HAL_RCC_ClockConfig+0x25c>)
 8001e90:	683b      	ldr	r3, [r7, #0]
 8001e92:	4313      	orrs	r3, r2
 8001e94:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e96:	4b89      	ldr	r3, [pc, #548]	; (80020bc <HAL_RCC_ClockConfig+0x25c>)
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f003 0307 	and.w	r3, r3, #7
 8001e9e:	683a      	ldr	r2, [r7, #0]
 8001ea0:	429a      	cmp	r2, r3
 8001ea2:	d001      	beq.n	8001ea8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001ea4:	2301      	movs	r3, #1
 8001ea6:	e14a      	b.n	800213e <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f003 0302 	and.w	r3, r3, #2
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d008      	beq.n	8001ec6 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001eb4:	4b82      	ldr	r3, [pc, #520]	; (80020c0 <HAL_RCC_ClockConfig+0x260>)
 8001eb6:	685b      	ldr	r3, [r3, #4]
 8001eb8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	689b      	ldr	r3, [r3, #8]
 8001ec0:	497f      	ldr	r1, [pc, #508]	; (80020c0 <HAL_RCC_ClockConfig+0x260>)
 8001ec2:	4313      	orrs	r3, r2
 8001ec4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f003 0301 	and.w	r3, r3, #1
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	f000 80dc 	beq.w	800208c <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	685b      	ldr	r3, [r3, #4]
 8001ed8:	2b01      	cmp	r3, #1
 8001eda:	d13c      	bne.n	8001f56 <HAL_RCC_ClockConfig+0xf6>
 8001edc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001ee0:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ee2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001ee4:	fa93 f3a3 	rbit	r3, r3
 8001ee8:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8001eea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001eec:	fab3 f383 	clz	r3, r3
 8001ef0:	b2db      	uxtb	r3, r3
 8001ef2:	095b      	lsrs	r3, r3, #5
 8001ef4:	b2db      	uxtb	r3, r3
 8001ef6:	f043 0301 	orr.w	r3, r3, #1
 8001efa:	b2db      	uxtb	r3, r3
 8001efc:	2b01      	cmp	r3, #1
 8001efe:	d102      	bne.n	8001f06 <HAL_RCC_ClockConfig+0xa6>
 8001f00:	4b6f      	ldr	r3, [pc, #444]	; (80020c0 <HAL_RCC_ClockConfig+0x260>)
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	e00f      	b.n	8001f26 <HAL_RCC_ClockConfig+0xc6>
 8001f06:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001f0a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f0c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001f0e:	fa93 f3a3 	rbit	r3, r3
 8001f12:	667b      	str	r3, [r7, #100]	; 0x64
 8001f14:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001f18:	663b      	str	r3, [r7, #96]	; 0x60
 8001f1a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001f1c:	fa93 f3a3 	rbit	r3, r3
 8001f20:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001f22:	4b67      	ldr	r3, [pc, #412]	; (80020c0 <HAL_RCC_ClockConfig+0x260>)
 8001f24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f26:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001f2a:	65ba      	str	r2, [r7, #88]	; 0x58
 8001f2c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001f2e:	fa92 f2a2 	rbit	r2, r2
 8001f32:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8001f34:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001f36:	fab2 f282 	clz	r2, r2
 8001f3a:	b2d2      	uxtb	r2, r2
 8001f3c:	f042 0220 	orr.w	r2, r2, #32
 8001f40:	b2d2      	uxtb	r2, r2
 8001f42:	f002 021f 	and.w	r2, r2, #31
 8001f46:	2101      	movs	r1, #1
 8001f48:	fa01 f202 	lsl.w	r2, r1, r2
 8001f4c:	4013      	ands	r3, r2
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d17b      	bne.n	800204a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001f52:	2301      	movs	r3, #1
 8001f54:	e0f3      	b.n	800213e <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	685b      	ldr	r3, [r3, #4]
 8001f5a:	2b02      	cmp	r3, #2
 8001f5c:	d13c      	bne.n	8001fd8 <HAL_RCC_ClockConfig+0x178>
 8001f5e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001f62:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f64:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001f66:	fa93 f3a3 	rbit	r3, r3
 8001f6a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001f6c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f6e:	fab3 f383 	clz	r3, r3
 8001f72:	b2db      	uxtb	r3, r3
 8001f74:	095b      	lsrs	r3, r3, #5
 8001f76:	b2db      	uxtb	r3, r3
 8001f78:	f043 0301 	orr.w	r3, r3, #1
 8001f7c:	b2db      	uxtb	r3, r3
 8001f7e:	2b01      	cmp	r3, #1
 8001f80:	d102      	bne.n	8001f88 <HAL_RCC_ClockConfig+0x128>
 8001f82:	4b4f      	ldr	r3, [pc, #316]	; (80020c0 <HAL_RCC_ClockConfig+0x260>)
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	e00f      	b.n	8001fa8 <HAL_RCC_ClockConfig+0x148>
 8001f88:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001f8c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f8e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001f90:	fa93 f3a3 	rbit	r3, r3
 8001f94:	647b      	str	r3, [r7, #68]	; 0x44
 8001f96:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001f9a:	643b      	str	r3, [r7, #64]	; 0x40
 8001f9c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001f9e:	fa93 f3a3 	rbit	r3, r3
 8001fa2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001fa4:	4b46      	ldr	r3, [pc, #280]	; (80020c0 <HAL_RCC_ClockConfig+0x260>)
 8001fa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fa8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001fac:	63ba      	str	r2, [r7, #56]	; 0x38
 8001fae:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001fb0:	fa92 f2a2 	rbit	r2, r2
 8001fb4:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8001fb6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001fb8:	fab2 f282 	clz	r2, r2
 8001fbc:	b2d2      	uxtb	r2, r2
 8001fbe:	f042 0220 	orr.w	r2, r2, #32
 8001fc2:	b2d2      	uxtb	r2, r2
 8001fc4:	f002 021f 	and.w	r2, r2, #31
 8001fc8:	2101      	movs	r1, #1
 8001fca:	fa01 f202 	lsl.w	r2, r1, r2
 8001fce:	4013      	ands	r3, r2
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d13a      	bne.n	800204a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001fd4:	2301      	movs	r3, #1
 8001fd6:	e0b2      	b.n	800213e <HAL_RCC_ClockConfig+0x2de>
 8001fd8:	2302      	movs	r3, #2
 8001fda:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001fde:	fa93 f3a3 	rbit	r3, r3
 8001fe2:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8001fe4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fe6:	fab3 f383 	clz	r3, r3
 8001fea:	b2db      	uxtb	r3, r3
 8001fec:	095b      	lsrs	r3, r3, #5
 8001fee:	b2db      	uxtb	r3, r3
 8001ff0:	f043 0301 	orr.w	r3, r3, #1
 8001ff4:	b2db      	uxtb	r3, r3
 8001ff6:	2b01      	cmp	r3, #1
 8001ff8:	d102      	bne.n	8002000 <HAL_RCC_ClockConfig+0x1a0>
 8001ffa:	4b31      	ldr	r3, [pc, #196]	; (80020c0 <HAL_RCC_ClockConfig+0x260>)
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	e00d      	b.n	800201c <HAL_RCC_ClockConfig+0x1bc>
 8002000:	2302      	movs	r3, #2
 8002002:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002004:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002006:	fa93 f3a3 	rbit	r3, r3
 800200a:	627b      	str	r3, [r7, #36]	; 0x24
 800200c:	2302      	movs	r3, #2
 800200e:	623b      	str	r3, [r7, #32]
 8002010:	6a3b      	ldr	r3, [r7, #32]
 8002012:	fa93 f3a3 	rbit	r3, r3
 8002016:	61fb      	str	r3, [r7, #28]
 8002018:	4b29      	ldr	r3, [pc, #164]	; (80020c0 <HAL_RCC_ClockConfig+0x260>)
 800201a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800201c:	2202      	movs	r2, #2
 800201e:	61ba      	str	r2, [r7, #24]
 8002020:	69ba      	ldr	r2, [r7, #24]
 8002022:	fa92 f2a2 	rbit	r2, r2
 8002026:	617a      	str	r2, [r7, #20]
  return result;
 8002028:	697a      	ldr	r2, [r7, #20]
 800202a:	fab2 f282 	clz	r2, r2
 800202e:	b2d2      	uxtb	r2, r2
 8002030:	f042 0220 	orr.w	r2, r2, #32
 8002034:	b2d2      	uxtb	r2, r2
 8002036:	f002 021f 	and.w	r2, r2, #31
 800203a:	2101      	movs	r1, #1
 800203c:	fa01 f202 	lsl.w	r2, r1, r2
 8002040:	4013      	ands	r3, r2
 8002042:	2b00      	cmp	r3, #0
 8002044:	d101      	bne.n	800204a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002046:	2301      	movs	r3, #1
 8002048:	e079      	b.n	800213e <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800204a:	4b1d      	ldr	r3, [pc, #116]	; (80020c0 <HAL_RCC_ClockConfig+0x260>)
 800204c:	685b      	ldr	r3, [r3, #4]
 800204e:	f023 0203 	bic.w	r2, r3, #3
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	685b      	ldr	r3, [r3, #4]
 8002056:	491a      	ldr	r1, [pc, #104]	; (80020c0 <HAL_RCC_ClockConfig+0x260>)
 8002058:	4313      	orrs	r3, r2
 800205a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800205c:	f7fe fc42 	bl	80008e4 <HAL_GetTick>
 8002060:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002062:	e00a      	b.n	800207a <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002064:	f7fe fc3e 	bl	80008e4 <HAL_GetTick>
 8002068:	4602      	mov	r2, r0
 800206a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800206c:	1ad3      	subs	r3, r2, r3
 800206e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002072:	4293      	cmp	r3, r2
 8002074:	d901      	bls.n	800207a <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8002076:	2303      	movs	r3, #3
 8002078:	e061      	b.n	800213e <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800207a:	4b11      	ldr	r3, [pc, #68]	; (80020c0 <HAL_RCC_ClockConfig+0x260>)
 800207c:	685b      	ldr	r3, [r3, #4]
 800207e:	f003 020c 	and.w	r2, r3, #12
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	685b      	ldr	r3, [r3, #4]
 8002086:	009b      	lsls	r3, r3, #2
 8002088:	429a      	cmp	r2, r3
 800208a:	d1eb      	bne.n	8002064 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800208c:	4b0b      	ldr	r3, [pc, #44]	; (80020bc <HAL_RCC_ClockConfig+0x25c>)
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f003 0307 	and.w	r3, r3, #7
 8002094:	683a      	ldr	r2, [r7, #0]
 8002096:	429a      	cmp	r2, r3
 8002098:	d214      	bcs.n	80020c4 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800209a:	4b08      	ldr	r3, [pc, #32]	; (80020bc <HAL_RCC_ClockConfig+0x25c>)
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f023 0207 	bic.w	r2, r3, #7
 80020a2:	4906      	ldr	r1, [pc, #24]	; (80020bc <HAL_RCC_ClockConfig+0x25c>)
 80020a4:	683b      	ldr	r3, [r7, #0]
 80020a6:	4313      	orrs	r3, r2
 80020a8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80020aa:	4b04      	ldr	r3, [pc, #16]	; (80020bc <HAL_RCC_ClockConfig+0x25c>)
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f003 0307 	and.w	r3, r3, #7
 80020b2:	683a      	ldr	r2, [r7, #0]
 80020b4:	429a      	cmp	r2, r3
 80020b6:	d005      	beq.n	80020c4 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80020b8:	2301      	movs	r3, #1
 80020ba:	e040      	b.n	800213e <HAL_RCC_ClockConfig+0x2de>
 80020bc:	40022000 	.word	0x40022000
 80020c0:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f003 0304 	and.w	r3, r3, #4
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d008      	beq.n	80020e2 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80020d0:	4b1d      	ldr	r3, [pc, #116]	; (8002148 <HAL_RCC_ClockConfig+0x2e8>)
 80020d2:	685b      	ldr	r3, [r3, #4]
 80020d4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	68db      	ldr	r3, [r3, #12]
 80020dc:	491a      	ldr	r1, [pc, #104]	; (8002148 <HAL_RCC_ClockConfig+0x2e8>)
 80020de:	4313      	orrs	r3, r2
 80020e0:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f003 0308 	and.w	r3, r3, #8
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d009      	beq.n	8002102 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80020ee:	4b16      	ldr	r3, [pc, #88]	; (8002148 <HAL_RCC_ClockConfig+0x2e8>)
 80020f0:	685b      	ldr	r3, [r3, #4]
 80020f2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	691b      	ldr	r3, [r3, #16]
 80020fa:	00db      	lsls	r3, r3, #3
 80020fc:	4912      	ldr	r1, [pc, #72]	; (8002148 <HAL_RCC_ClockConfig+0x2e8>)
 80020fe:	4313      	orrs	r3, r2
 8002100:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002102:	f000 f829 	bl	8002158 <HAL_RCC_GetSysClockFreq>
 8002106:	4601      	mov	r1, r0
 8002108:	4b0f      	ldr	r3, [pc, #60]	; (8002148 <HAL_RCC_ClockConfig+0x2e8>)
 800210a:	685b      	ldr	r3, [r3, #4]
 800210c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002110:	22f0      	movs	r2, #240	; 0xf0
 8002112:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002114:	693a      	ldr	r2, [r7, #16]
 8002116:	fa92 f2a2 	rbit	r2, r2
 800211a:	60fa      	str	r2, [r7, #12]
  return result;
 800211c:	68fa      	ldr	r2, [r7, #12]
 800211e:	fab2 f282 	clz	r2, r2
 8002122:	b2d2      	uxtb	r2, r2
 8002124:	40d3      	lsrs	r3, r2
 8002126:	4a09      	ldr	r2, [pc, #36]	; (800214c <HAL_RCC_ClockConfig+0x2ec>)
 8002128:	5cd3      	ldrb	r3, [r2, r3]
 800212a:	fa21 f303 	lsr.w	r3, r1, r3
 800212e:	4a08      	ldr	r2, [pc, #32]	; (8002150 <HAL_RCC_ClockConfig+0x2f0>)
 8002130:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002132:	4b08      	ldr	r3, [pc, #32]	; (8002154 <HAL_RCC_ClockConfig+0x2f4>)
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	4618      	mov	r0, r3
 8002138:	f7fe fa9e 	bl	8000678 <HAL_InitTick>
  
  return HAL_OK;
 800213c:	2300      	movs	r3, #0
}
 800213e:	4618      	mov	r0, r3
 8002140:	3778      	adds	r7, #120	; 0x78
 8002142:	46bd      	mov	sp, r7
 8002144:	bd80      	pop	{r7, pc}
 8002146:	bf00      	nop
 8002148:	40021000 	.word	0x40021000
 800214c:	0800792c 	.word	0x0800792c
 8002150:	20000000 	.word	0x20000000
 8002154:	20000004 	.word	0x20000004

08002158 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002158:	b480      	push	{r7}
 800215a:	b08b      	sub	sp, #44	; 0x2c
 800215c:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800215e:	2300      	movs	r3, #0
 8002160:	61fb      	str	r3, [r7, #28]
 8002162:	2300      	movs	r3, #0
 8002164:	61bb      	str	r3, [r7, #24]
 8002166:	2300      	movs	r3, #0
 8002168:	627b      	str	r3, [r7, #36]	; 0x24
 800216a:	2300      	movs	r3, #0
 800216c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800216e:	2300      	movs	r3, #0
 8002170:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8002172:	4b29      	ldr	r3, [pc, #164]	; (8002218 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002174:	685b      	ldr	r3, [r3, #4]
 8002176:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002178:	69fb      	ldr	r3, [r7, #28]
 800217a:	f003 030c 	and.w	r3, r3, #12
 800217e:	2b04      	cmp	r3, #4
 8002180:	d002      	beq.n	8002188 <HAL_RCC_GetSysClockFreq+0x30>
 8002182:	2b08      	cmp	r3, #8
 8002184:	d003      	beq.n	800218e <HAL_RCC_GetSysClockFreq+0x36>
 8002186:	e03c      	b.n	8002202 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002188:	4b24      	ldr	r3, [pc, #144]	; (800221c <HAL_RCC_GetSysClockFreq+0xc4>)
 800218a:	623b      	str	r3, [r7, #32]
      break;
 800218c:	e03c      	b.n	8002208 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800218e:	69fb      	ldr	r3, [r7, #28]
 8002190:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002194:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8002198:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800219a:	68ba      	ldr	r2, [r7, #8]
 800219c:	fa92 f2a2 	rbit	r2, r2
 80021a0:	607a      	str	r2, [r7, #4]
  return result;
 80021a2:	687a      	ldr	r2, [r7, #4]
 80021a4:	fab2 f282 	clz	r2, r2
 80021a8:	b2d2      	uxtb	r2, r2
 80021aa:	40d3      	lsrs	r3, r2
 80021ac:	4a1c      	ldr	r2, [pc, #112]	; (8002220 <HAL_RCC_GetSysClockFreq+0xc8>)
 80021ae:	5cd3      	ldrb	r3, [r2, r3]
 80021b0:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80021b2:	4b19      	ldr	r3, [pc, #100]	; (8002218 <HAL_RCC_GetSysClockFreq+0xc0>)
 80021b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021b6:	f003 030f 	and.w	r3, r3, #15
 80021ba:	220f      	movs	r2, #15
 80021bc:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021be:	693a      	ldr	r2, [r7, #16]
 80021c0:	fa92 f2a2 	rbit	r2, r2
 80021c4:	60fa      	str	r2, [r7, #12]
  return result;
 80021c6:	68fa      	ldr	r2, [r7, #12]
 80021c8:	fab2 f282 	clz	r2, r2
 80021cc:	b2d2      	uxtb	r2, r2
 80021ce:	40d3      	lsrs	r3, r2
 80021d0:	4a14      	ldr	r2, [pc, #80]	; (8002224 <HAL_RCC_GetSysClockFreq+0xcc>)
 80021d2:	5cd3      	ldrb	r3, [r2, r3]
 80021d4:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80021d6:	69fb      	ldr	r3, [r7, #28]
 80021d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d008      	beq.n	80021f2 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80021e0:	4a0e      	ldr	r2, [pc, #56]	; (800221c <HAL_RCC_GetSysClockFreq+0xc4>)
 80021e2:	69bb      	ldr	r3, [r7, #24]
 80021e4:	fbb2 f2f3 	udiv	r2, r2, r3
 80021e8:	697b      	ldr	r3, [r7, #20]
 80021ea:	fb02 f303 	mul.w	r3, r2, r3
 80021ee:	627b      	str	r3, [r7, #36]	; 0x24
 80021f0:	e004      	b.n	80021fc <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80021f2:	697b      	ldr	r3, [r7, #20]
 80021f4:	4a0c      	ldr	r2, [pc, #48]	; (8002228 <HAL_RCC_GetSysClockFreq+0xd0>)
 80021f6:	fb02 f303 	mul.w	r3, r2, r3
 80021fa:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80021fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021fe:	623b      	str	r3, [r7, #32]
      break;
 8002200:	e002      	b.n	8002208 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002202:	4b06      	ldr	r3, [pc, #24]	; (800221c <HAL_RCC_GetSysClockFreq+0xc4>)
 8002204:	623b      	str	r3, [r7, #32]
      break;
 8002206:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002208:	6a3b      	ldr	r3, [r7, #32]
}
 800220a:	4618      	mov	r0, r3
 800220c:	372c      	adds	r7, #44	; 0x2c
 800220e:	46bd      	mov	sp, r7
 8002210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002214:	4770      	bx	lr
 8002216:	bf00      	nop
 8002218:	40021000 	.word	0x40021000
 800221c:	007a1200 	.word	0x007a1200
 8002220:	08007944 	.word	0x08007944
 8002224:	08007954 	.word	0x08007954
 8002228:	003d0900 	.word	0x003d0900

0800222c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800222c:	b480      	push	{r7}
 800222e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002230:	4b03      	ldr	r3, [pc, #12]	; (8002240 <HAL_RCC_GetHCLKFreq+0x14>)
 8002232:	681b      	ldr	r3, [r3, #0]
}
 8002234:	4618      	mov	r0, r3
 8002236:	46bd      	mov	sp, r7
 8002238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223c:	4770      	bx	lr
 800223e:	bf00      	nop
 8002240:	20000000 	.word	0x20000000

08002244 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	b082      	sub	sp, #8
 8002248:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800224a:	f7ff ffef 	bl	800222c <HAL_RCC_GetHCLKFreq>
 800224e:	4601      	mov	r1, r0
 8002250:	4b0b      	ldr	r3, [pc, #44]	; (8002280 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8002252:	685b      	ldr	r3, [r3, #4]
 8002254:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002258:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800225c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800225e:	687a      	ldr	r2, [r7, #4]
 8002260:	fa92 f2a2 	rbit	r2, r2
 8002264:	603a      	str	r2, [r7, #0]
  return result;
 8002266:	683a      	ldr	r2, [r7, #0]
 8002268:	fab2 f282 	clz	r2, r2
 800226c:	b2d2      	uxtb	r2, r2
 800226e:	40d3      	lsrs	r3, r2
 8002270:	4a04      	ldr	r2, [pc, #16]	; (8002284 <HAL_RCC_GetPCLK1Freq+0x40>)
 8002272:	5cd3      	ldrb	r3, [r2, r3]
 8002274:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002278:	4618      	mov	r0, r3
 800227a:	3708      	adds	r7, #8
 800227c:	46bd      	mov	sp, r7
 800227e:	bd80      	pop	{r7, pc}
 8002280:	40021000 	.word	0x40021000
 8002284:	0800793c 	.word	0x0800793c

08002288 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002288:	b480      	push	{r7}
 800228a:	b083      	sub	sp, #12
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
 8002290:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	220f      	movs	r2, #15
 8002296:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002298:	4b12      	ldr	r3, [pc, #72]	; (80022e4 <HAL_RCC_GetClockConfig+0x5c>)
 800229a:	685b      	ldr	r3, [r3, #4]
 800229c:	f003 0203 	and.w	r2, r3, #3
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 80022a4:	4b0f      	ldr	r3, [pc, #60]	; (80022e4 <HAL_RCC_GetClockConfig+0x5c>)
 80022a6:	685b      	ldr	r3, [r3, #4]
 80022a8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 80022b0:	4b0c      	ldr	r3, [pc, #48]	; (80022e4 <HAL_RCC_GetClockConfig+0x5c>)
 80022b2:	685b      	ldr	r3, [r3, #4]
 80022b4:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	60da      	str	r2, [r3, #12]
  
  /* Get the APB2 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80022bc:	4b09      	ldr	r3, [pc, #36]	; (80022e4 <HAL_RCC_GetClockConfig+0x5c>)
 80022be:	685b      	ldr	r3, [r3, #4]
 80022c0:	08db      	lsrs	r3, r3, #3
 80022c2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	611a      	str	r2, [r3, #16]
  
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 80022ca:	4b07      	ldr	r3, [pc, #28]	; (80022e8 <HAL_RCC_GetClockConfig+0x60>)
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f003 0207 	and.w	r2, r3, #7
 80022d2:	683b      	ldr	r3, [r7, #0]
 80022d4:	601a      	str	r2, [r3, #0]
}
 80022d6:	bf00      	nop
 80022d8:	370c      	adds	r7, #12
 80022da:	46bd      	mov	sp, r7
 80022dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e0:	4770      	bx	lr
 80022e2:	bf00      	nop
 80022e4:	40021000 	.word	0x40021000
 80022e8:	40022000 	.word	0x40022000

080022ec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b082      	sub	sp, #8
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d101      	bne.n	80022fe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80022fa:	2301      	movs	r3, #1
 80022fc:	e049      	b.n	8002392 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002304:	b2db      	uxtb	r3, r3
 8002306:	2b00      	cmp	r3, #0
 8002308:	d106      	bne.n	8002318 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	2200      	movs	r2, #0
 800230e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002312:	6878      	ldr	r0, [r7, #4]
 8002314:	f000 f841 	bl	800239a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	2202      	movs	r2, #2
 800231c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681a      	ldr	r2, [r3, #0]
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	3304      	adds	r3, #4
 8002328:	4619      	mov	r1, r3
 800232a:	4610      	mov	r0, r2
 800232c:	f000 f9f2 	bl	8002714 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	2201      	movs	r2, #1
 8002334:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	2201      	movs	r2, #1
 800233c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	2201      	movs	r2, #1
 8002344:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	2201      	movs	r2, #1
 800234c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	2201      	movs	r2, #1
 8002354:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	2201      	movs	r2, #1
 800235c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	2201      	movs	r2, #1
 8002364:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	2201      	movs	r2, #1
 800236c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	2201      	movs	r2, #1
 8002374:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	2201      	movs	r2, #1
 800237c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	2201      	movs	r2, #1
 8002384:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	2201      	movs	r2, #1
 800238c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002390:	2300      	movs	r3, #0
}
 8002392:	4618      	mov	r0, r3
 8002394:	3708      	adds	r7, #8
 8002396:	46bd      	mov	sp, r7
 8002398:	bd80      	pop	{r7, pc}

0800239a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800239a:	b480      	push	{r7}
 800239c:	b083      	sub	sp, #12
 800239e:	af00      	add	r7, sp, #0
 80023a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80023a2:	bf00      	nop
 80023a4:	370c      	adds	r7, #12
 80023a6:	46bd      	mov	sp, r7
 80023a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ac:	4770      	bx	lr
	...

080023b0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80023b0:	b480      	push	{r7}
 80023b2:	b085      	sub	sp, #20
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80023be:	b2db      	uxtb	r3, r3
 80023c0:	2b01      	cmp	r3, #1
 80023c2:	d001      	beq.n	80023c8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80023c4:	2301      	movs	r3, #1
 80023c6:	e04a      	b.n	800245e <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	2202      	movs	r2, #2
 80023cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	68da      	ldr	r2, [r3, #12]
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f042 0201 	orr.w	r2, r2, #1
 80023de:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	4a21      	ldr	r2, [pc, #132]	; (800246c <HAL_TIM_Base_Start_IT+0xbc>)
 80023e6:	4293      	cmp	r3, r2
 80023e8:	d018      	beq.n	800241c <HAL_TIM_Base_Start_IT+0x6c>
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80023f2:	d013      	beq.n	800241c <HAL_TIM_Base_Start_IT+0x6c>
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	4a1d      	ldr	r2, [pc, #116]	; (8002470 <HAL_TIM_Base_Start_IT+0xc0>)
 80023fa:	4293      	cmp	r3, r2
 80023fc:	d00e      	beq.n	800241c <HAL_TIM_Base_Start_IT+0x6c>
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	4a1c      	ldr	r2, [pc, #112]	; (8002474 <HAL_TIM_Base_Start_IT+0xc4>)
 8002404:	4293      	cmp	r3, r2
 8002406:	d009      	beq.n	800241c <HAL_TIM_Base_Start_IT+0x6c>
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	4a1a      	ldr	r2, [pc, #104]	; (8002478 <HAL_TIM_Base_Start_IT+0xc8>)
 800240e:	4293      	cmp	r3, r2
 8002410:	d004      	beq.n	800241c <HAL_TIM_Base_Start_IT+0x6c>
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	4a19      	ldr	r2, [pc, #100]	; (800247c <HAL_TIM_Base_Start_IT+0xcc>)
 8002418:	4293      	cmp	r3, r2
 800241a:	d115      	bne.n	8002448 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	689a      	ldr	r2, [r3, #8]
 8002422:	4b17      	ldr	r3, [pc, #92]	; (8002480 <HAL_TIM_Base_Start_IT+0xd0>)
 8002424:	4013      	ands	r3, r2
 8002426:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	2b06      	cmp	r3, #6
 800242c:	d015      	beq.n	800245a <HAL_TIM_Base_Start_IT+0xaa>
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002434:	d011      	beq.n	800245a <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	681a      	ldr	r2, [r3, #0]
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f042 0201 	orr.w	r2, r2, #1
 8002444:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002446:	e008      	b.n	800245a <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	681a      	ldr	r2, [r3, #0]
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f042 0201 	orr.w	r2, r2, #1
 8002456:	601a      	str	r2, [r3, #0]
 8002458:	e000      	b.n	800245c <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800245a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800245c:	2300      	movs	r3, #0
}
 800245e:	4618      	mov	r0, r3
 8002460:	3714      	adds	r7, #20
 8002462:	46bd      	mov	sp, r7
 8002464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002468:	4770      	bx	lr
 800246a:	bf00      	nop
 800246c:	40012c00 	.word	0x40012c00
 8002470:	40000400 	.word	0x40000400
 8002474:	40000800 	.word	0x40000800
 8002478:	40013400 	.word	0x40013400
 800247c:	40014000 	.word	0x40014000
 8002480:	00010007 	.word	0x00010007

08002484 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	b082      	sub	sp, #8
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	691b      	ldr	r3, [r3, #16]
 8002492:	f003 0302 	and.w	r3, r3, #2
 8002496:	2b02      	cmp	r3, #2
 8002498:	d122      	bne.n	80024e0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	68db      	ldr	r3, [r3, #12]
 80024a0:	f003 0302 	and.w	r3, r3, #2
 80024a4:	2b02      	cmp	r3, #2
 80024a6:	d11b      	bne.n	80024e0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f06f 0202 	mvn.w	r2, #2
 80024b0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	2201      	movs	r2, #1
 80024b6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	699b      	ldr	r3, [r3, #24]
 80024be:	f003 0303 	and.w	r3, r3, #3
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d003      	beq.n	80024ce <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80024c6:	6878      	ldr	r0, [r7, #4]
 80024c8:	f000 f905 	bl	80026d6 <HAL_TIM_IC_CaptureCallback>
 80024cc:	e005      	b.n	80024da <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80024ce:	6878      	ldr	r0, [r7, #4]
 80024d0:	f000 f8f7 	bl	80026c2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80024d4:	6878      	ldr	r0, [r7, #4]
 80024d6:	f000 f908 	bl	80026ea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	2200      	movs	r2, #0
 80024de:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	691b      	ldr	r3, [r3, #16]
 80024e6:	f003 0304 	and.w	r3, r3, #4
 80024ea:	2b04      	cmp	r3, #4
 80024ec:	d122      	bne.n	8002534 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	68db      	ldr	r3, [r3, #12]
 80024f4:	f003 0304 	and.w	r3, r3, #4
 80024f8:	2b04      	cmp	r3, #4
 80024fa:	d11b      	bne.n	8002534 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f06f 0204 	mvn.w	r2, #4
 8002504:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	2202      	movs	r2, #2
 800250a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	699b      	ldr	r3, [r3, #24]
 8002512:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002516:	2b00      	cmp	r3, #0
 8002518:	d003      	beq.n	8002522 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800251a:	6878      	ldr	r0, [r7, #4]
 800251c:	f000 f8db 	bl	80026d6 <HAL_TIM_IC_CaptureCallback>
 8002520:	e005      	b.n	800252e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002522:	6878      	ldr	r0, [r7, #4]
 8002524:	f000 f8cd 	bl	80026c2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002528:	6878      	ldr	r0, [r7, #4]
 800252a:	f000 f8de 	bl	80026ea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	2200      	movs	r2, #0
 8002532:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	691b      	ldr	r3, [r3, #16]
 800253a:	f003 0308 	and.w	r3, r3, #8
 800253e:	2b08      	cmp	r3, #8
 8002540:	d122      	bne.n	8002588 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	68db      	ldr	r3, [r3, #12]
 8002548:	f003 0308 	and.w	r3, r3, #8
 800254c:	2b08      	cmp	r3, #8
 800254e:	d11b      	bne.n	8002588 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f06f 0208 	mvn.w	r2, #8
 8002558:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	2204      	movs	r2, #4
 800255e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	69db      	ldr	r3, [r3, #28]
 8002566:	f003 0303 	and.w	r3, r3, #3
 800256a:	2b00      	cmp	r3, #0
 800256c:	d003      	beq.n	8002576 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800256e:	6878      	ldr	r0, [r7, #4]
 8002570:	f000 f8b1 	bl	80026d6 <HAL_TIM_IC_CaptureCallback>
 8002574:	e005      	b.n	8002582 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002576:	6878      	ldr	r0, [r7, #4]
 8002578:	f000 f8a3 	bl	80026c2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800257c:	6878      	ldr	r0, [r7, #4]
 800257e:	f000 f8b4 	bl	80026ea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	2200      	movs	r2, #0
 8002586:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	691b      	ldr	r3, [r3, #16]
 800258e:	f003 0310 	and.w	r3, r3, #16
 8002592:	2b10      	cmp	r3, #16
 8002594:	d122      	bne.n	80025dc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	68db      	ldr	r3, [r3, #12]
 800259c:	f003 0310 	and.w	r3, r3, #16
 80025a0:	2b10      	cmp	r3, #16
 80025a2:	d11b      	bne.n	80025dc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f06f 0210 	mvn.w	r2, #16
 80025ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	2208      	movs	r2, #8
 80025b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	69db      	ldr	r3, [r3, #28]
 80025ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d003      	beq.n	80025ca <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80025c2:	6878      	ldr	r0, [r7, #4]
 80025c4:	f000 f887 	bl	80026d6 <HAL_TIM_IC_CaptureCallback>
 80025c8:	e005      	b.n	80025d6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80025ca:	6878      	ldr	r0, [r7, #4]
 80025cc:	f000 f879 	bl	80026c2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80025d0:	6878      	ldr	r0, [r7, #4]
 80025d2:	f000 f88a 	bl	80026ea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	2200      	movs	r2, #0
 80025da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	691b      	ldr	r3, [r3, #16]
 80025e2:	f003 0301 	and.w	r3, r3, #1
 80025e6:	2b01      	cmp	r3, #1
 80025e8:	d10e      	bne.n	8002608 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	68db      	ldr	r3, [r3, #12]
 80025f0:	f003 0301 	and.w	r3, r3, #1
 80025f4:	2b01      	cmp	r3, #1
 80025f6:	d107      	bne.n	8002608 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f06f 0201 	mvn.w	r2, #1
 8002600:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002602:	6878      	ldr	r0, [r7, #4]
 8002604:	f7fd fffc 	bl	8000600 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	691b      	ldr	r3, [r3, #16]
 800260e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002612:	2b80      	cmp	r3, #128	; 0x80
 8002614:	d10e      	bne.n	8002634 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	68db      	ldr	r3, [r3, #12]
 800261c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002620:	2b80      	cmp	r3, #128	; 0x80
 8002622:	d107      	bne.n	8002634 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800262c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800262e:	6878      	ldr	r0, [r7, #4]
 8002630:	f000 f90a 	bl	8002848 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	691b      	ldr	r3, [r3, #16]
 800263a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800263e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002642:	d10e      	bne.n	8002662 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	68db      	ldr	r3, [r3, #12]
 800264a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800264e:	2b80      	cmp	r3, #128	; 0x80
 8002650:	d107      	bne.n	8002662 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800265a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800265c:	6878      	ldr	r0, [r7, #4]
 800265e:	f000 f8fd 	bl	800285c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	691b      	ldr	r3, [r3, #16]
 8002668:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800266c:	2b40      	cmp	r3, #64	; 0x40
 800266e:	d10e      	bne.n	800268e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	68db      	ldr	r3, [r3, #12]
 8002676:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800267a:	2b40      	cmp	r3, #64	; 0x40
 800267c:	d107      	bne.n	800268e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002686:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002688:	6878      	ldr	r0, [r7, #4]
 800268a:	f000 f838 	bl	80026fe <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	691b      	ldr	r3, [r3, #16]
 8002694:	f003 0320 	and.w	r3, r3, #32
 8002698:	2b20      	cmp	r3, #32
 800269a:	d10e      	bne.n	80026ba <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	68db      	ldr	r3, [r3, #12]
 80026a2:	f003 0320 	and.w	r3, r3, #32
 80026a6:	2b20      	cmp	r3, #32
 80026a8:	d107      	bne.n	80026ba <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f06f 0220 	mvn.w	r2, #32
 80026b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80026b4:	6878      	ldr	r0, [r7, #4]
 80026b6:	f000 f8bd 	bl	8002834 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80026ba:	bf00      	nop
 80026bc:	3708      	adds	r7, #8
 80026be:	46bd      	mov	sp, r7
 80026c0:	bd80      	pop	{r7, pc}

080026c2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80026c2:	b480      	push	{r7}
 80026c4:	b083      	sub	sp, #12
 80026c6:	af00      	add	r7, sp, #0
 80026c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80026ca:	bf00      	nop
 80026cc:	370c      	adds	r7, #12
 80026ce:	46bd      	mov	sp, r7
 80026d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d4:	4770      	bx	lr

080026d6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80026d6:	b480      	push	{r7}
 80026d8:	b083      	sub	sp, #12
 80026da:	af00      	add	r7, sp, #0
 80026dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80026de:	bf00      	nop
 80026e0:	370c      	adds	r7, #12
 80026e2:	46bd      	mov	sp, r7
 80026e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e8:	4770      	bx	lr

080026ea <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80026ea:	b480      	push	{r7}
 80026ec:	b083      	sub	sp, #12
 80026ee:	af00      	add	r7, sp, #0
 80026f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80026f2:	bf00      	nop
 80026f4:	370c      	adds	r7, #12
 80026f6:	46bd      	mov	sp, r7
 80026f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fc:	4770      	bx	lr

080026fe <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80026fe:	b480      	push	{r7}
 8002700:	b083      	sub	sp, #12
 8002702:	af00      	add	r7, sp, #0
 8002704:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002706:	bf00      	nop
 8002708:	370c      	adds	r7, #12
 800270a:	46bd      	mov	sp, r7
 800270c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002710:	4770      	bx	lr
	...

08002714 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002714:	b480      	push	{r7}
 8002716:	b085      	sub	sp, #20
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
 800271c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	4a3c      	ldr	r2, [pc, #240]	; (8002818 <TIM_Base_SetConfig+0x104>)
 8002728:	4293      	cmp	r3, r2
 800272a:	d00f      	beq.n	800274c <TIM_Base_SetConfig+0x38>
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002732:	d00b      	beq.n	800274c <TIM_Base_SetConfig+0x38>
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	4a39      	ldr	r2, [pc, #228]	; (800281c <TIM_Base_SetConfig+0x108>)
 8002738:	4293      	cmp	r3, r2
 800273a:	d007      	beq.n	800274c <TIM_Base_SetConfig+0x38>
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	4a38      	ldr	r2, [pc, #224]	; (8002820 <TIM_Base_SetConfig+0x10c>)
 8002740:	4293      	cmp	r3, r2
 8002742:	d003      	beq.n	800274c <TIM_Base_SetConfig+0x38>
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	4a37      	ldr	r2, [pc, #220]	; (8002824 <TIM_Base_SetConfig+0x110>)
 8002748:	4293      	cmp	r3, r2
 800274a:	d108      	bne.n	800275e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002752:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002754:	683b      	ldr	r3, [r7, #0]
 8002756:	685b      	ldr	r3, [r3, #4]
 8002758:	68fa      	ldr	r2, [r7, #12]
 800275a:	4313      	orrs	r3, r2
 800275c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	4a2d      	ldr	r2, [pc, #180]	; (8002818 <TIM_Base_SetConfig+0x104>)
 8002762:	4293      	cmp	r3, r2
 8002764:	d01b      	beq.n	800279e <TIM_Base_SetConfig+0x8a>
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800276c:	d017      	beq.n	800279e <TIM_Base_SetConfig+0x8a>
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	4a2a      	ldr	r2, [pc, #168]	; (800281c <TIM_Base_SetConfig+0x108>)
 8002772:	4293      	cmp	r3, r2
 8002774:	d013      	beq.n	800279e <TIM_Base_SetConfig+0x8a>
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	4a29      	ldr	r2, [pc, #164]	; (8002820 <TIM_Base_SetConfig+0x10c>)
 800277a:	4293      	cmp	r3, r2
 800277c:	d00f      	beq.n	800279e <TIM_Base_SetConfig+0x8a>
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	4a28      	ldr	r2, [pc, #160]	; (8002824 <TIM_Base_SetConfig+0x110>)
 8002782:	4293      	cmp	r3, r2
 8002784:	d00b      	beq.n	800279e <TIM_Base_SetConfig+0x8a>
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	4a27      	ldr	r2, [pc, #156]	; (8002828 <TIM_Base_SetConfig+0x114>)
 800278a:	4293      	cmp	r3, r2
 800278c:	d007      	beq.n	800279e <TIM_Base_SetConfig+0x8a>
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	4a26      	ldr	r2, [pc, #152]	; (800282c <TIM_Base_SetConfig+0x118>)
 8002792:	4293      	cmp	r3, r2
 8002794:	d003      	beq.n	800279e <TIM_Base_SetConfig+0x8a>
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	4a25      	ldr	r2, [pc, #148]	; (8002830 <TIM_Base_SetConfig+0x11c>)
 800279a:	4293      	cmp	r3, r2
 800279c:	d108      	bne.n	80027b0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80027a4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80027a6:	683b      	ldr	r3, [r7, #0]
 80027a8:	68db      	ldr	r3, [r3, #12]
 80027aa:	68fa      	ldr	r2, [r7, #12]
 80027ac:	4313      	orrs	r3, r2
 80027ae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80027b6:	683b      	ldr	r3, [r7, #0]
 80027b8:	695b      	ldr	r3, [r3, #20]
 80027ba:	4313      	orrs	r3, r2
 80027bc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	68fa      	ldr	r2, [r7, #12]
 80027c2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80027c4:	683b      	ldr	r3, [r7, #0]
 80027c6:	689a      	ldr	r2, [r3, #8]
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80027cc:	683b      	ldr	r3, [r7, #0]
 80027ce:	681a      	ldr	r2, [r3, #0]
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	4a10      	ldr	r2, [pc, #64]	; (8002818 <TIM_Base_SetConfig+0x104>)
 80027d8:	4293      	cmp	r3, r2
 80027da:	d00f      	beq.n	80027fc <TIM_Base_SetConfig+0xe8>
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	4a11      	ldr	r2, [pc, #68]	; (8002824 <TIM_Base_SetConfig+0x110>)
 80027e0:	4293      	cmp	r3, r2
 80027e2:	d00b      	beq.n	80027fc <TIM_Base_SetConfig+0xe8>
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	4a10      	ldr	r2, [pc, #64]	; (8002828 <TIM_Base_SetConfig+0x114>)
 80027e8:	4293      	cmp	r3, r2
 80027ea:	d007      	beq.n	80027fc <TIM_Base_SetConfig+0xe8>
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	4a0f      	ldr	r2, [pc, #60]	; (800282c <TIM_Base_SetConfig+0x118>)
 80027f0:	4293      	cmp	r3, r2
 80027f2:	d003      	beq.n	80027fc <TIM_Base_SetConfig+0xe8>
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	4a0e      	ldr	r2, [pc, #56]	; (8002830 <TIM_Base_SetConfig+0x11c>)
 80027f8:	4293      	cmp	r3, r2
 80027fa:	d103      	bne.n	8002804 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80027fc:	683b      	ldr	r3, [r7, #0]
 80027fe:	691a      	ldr	r2, [r3, #16]
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	2201      	movs	r2, #1
 8002808:	615a      	str	r2, [r3, #20]
}
 800280a:	bf00      	nop
 800280c:	3714      	adds	r7, #20
 800280e:	46bd      	mov	sp, r7
 8002810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002814:	4770      	bx	lr
 8002816:	bf00      	nop
 8002818:	40012c00 	.word	0x40012c00
 800281c:	40000400 	.word	0x40000400
 8002820:	40000800 	.word	0x40000800
 8002824:	40013400 	.word	0x40013400
 8002828:	40014000 	.word	0x40014000
 800282c:	40014400 	.word	0x40014400
 8002830:	40014800 	.word	0x40014800

08002834 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002834:	b480      	push	{r7}
 8002836:	b083      	sub	sp, #12
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800283c:	bf00      	nop
 800283e:	370c      	adds	r7, #12
 8002840:	46bd      	mov	sp, r7
 8002842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002846:	4770      	bx	lr

08002848 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002848:	b480      	push	{r7}
 800284a:	b083      	sub	sp, #12
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002850:	bf00      	nop
 8002852:	370c      	adds	r7, #12
 8002854:	46bd      	mov	sp, r7
 8002856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285a:	4770      	bx	lr

0800285c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800285c:	b480      	push	{r7}
 800285e:	b083      	sub	sp, #12
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002864:	bf00      	nop
 8002866:	370c      	adds	r7, #12
 8002868:	46bd      	mov	sp, r7
 800286a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286e:	4770      	bx	lr

08002870 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002870:	b480      	push	{r7}
 8002872:	b083      	sub	sp, #12
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	f103 0208 	add.w	r2, r3, #8
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002888:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	f103 0208 	add.w	r2, r3, #8
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	f103 0208 	add.w	r2, r3, #8
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	2200      	movs	r2, #0
 80028a2:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80028a4:	bf00      	nop
 80028a6:	370c      	adds	r7, #12
 80028a8:	46bd      	mov	sp, r7
 80028aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ae:	4770      	bx	lr

080028b0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80028b0:	b480      	push	{r7}
 80028b2:	b083      	sub	sp, #12
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	2200      	movs	r2, #0
 80028bc:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80028be:	bf00      	nop
 80028c0:	370c      	adds	r7, #12
 80028c2:	46bd      	mov	sp, r7
 80028c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c8:	4770      	bx	lr

080028ca <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 80028ca:	b480      	push	{r7}
 80028cc:	b085      	sub	sp, #20
 80028ce:	af00      	add	r7, sp, #0
 80028d0:	6078      	str	r0, [r7, #4]
 80028d2:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80028d4:	683b      	ldr	r3, [r7, #0]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 80028da:	68bb      	ldr	r3, [r7, #8]
 80028dc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80028e0:	d103      	bne.n	80028ea <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	691b      	ldr	r3, [r3, #16]
 80028e6:	60fb      	str	r3, [r7, #12]
 80028e8:	e00c      	b.n	8002904 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	3308      	adds	r3, #8
 80028ee:	60fb      	str	r3, [r7, #12]
 80028f0:	e002      	b.n	80028f8 <vListInsert+0x2e>
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	685b      	ldr	r3, [r3, #4]
 80028f6:	60fb      	str	r3, [r7, #12]
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	685b      	ldr	r3, [r3, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	68ba      	ldr	r2, [r7, #8]
 8002900:	429a      	cmp	r2, r3
 8002902:	d2f6      	bcs.n	80028f2 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	685a      	ldr	r2, [r3, #4]
 8002908:	683b      	ldr	r3, [r7, #0]
 800290a:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800290c:	683b      	ldr	r3, [r7, #0]
 800290e:	685b      	ldr	r3, [r3, #4]
 8002910:	683a      	ldr	r2, [r7, #0]
 8002912:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	68fa      	ldr	r2, [r7, #12]
 8002918:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	683a      	ldr	r2, [r7, #0]
 800291e:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8002920:	683b      	ldr	r3, [r7, #0]
 8002922:	687a      	ldr	r2, [r7, #4]
 8002924:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	1c5a      	adds	r2, r3, #1
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	601a      	str	r2, [r3, #0]
}
 8002930:	bf00      	nop
 8002932:	3714      	adds	r7, #20
 8002934:	46bd      	mov	sp, r7
 8002936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293a:	4770      	bx	lr

0800293c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800293c:	b480      	push	{r7}
 800293e:	b085      	sub	sp, #20
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	691b      	ldr	r3, [r3, #16]
 8002948:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	685b      	ldr	r3, [r3, #4]
 800294e:	687a      	ldr	r2, [r7, #4]
 8002950:	6892      	ldr	r2, [r2, #8]
 8002952:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	689b      	ldr	r3, [r3, #8]
 8002958:	687a      	ldr	r2, [r7, #4]
 800295a:	6852      	ldr	r2, [r2, #4]
 800295c:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	685b      	ldr	r3, [r3, #4]
 8002962:	687a      	ldr	r2, [r7, #4]
 8002964:	429a      	cmp	r2, r3
 8002966:	d103      	bne.n	8002970 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	689a      	ldr	r2, [r3, #8]
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	2200      	movs	r2, #0
 8002974:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	1e5a      	subs	r2, r3, #1
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	681b      	ldr	r3, [r3, #0]
}
 8002984:	4618      	mov	r0, r3
 8002986:	3714      	adds	r7, #20
 8002988:	46bd      	mov	sp, r7
 800298a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298e:	4770      	bx	lr

08002990 <xQueueGenericReset>:
    }
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8002990:	b580      	push	{r7, lr}
 8002992:	b086      	sub	sp, #24
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]
 8002998:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 800299a:	2301      	movs	r3, #1
 800299c:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 80029a2:	693b      	ldr	r3, [r7, #16]
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d10a      	bne.n	80029be <xQueueGenericReset+0x2e>
        __asm volatile
 80029a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029ac:	f383 8811 	msr	BASEPRI, r3
 80029b0:	f3bf 8f6f 	isb	sy
 80029b4:	f3bf 8f4f 	dsb	sy
 80029b8:	60fb      	str	r3, [r7, #12]
    }
 80029ba:	bf00      	nop
 80029bc:	e7fe      	b.n	80029bc <xQueueGenericReset+0x2c>

    if( ( pxQueue != NULL ) &&
 80029be:	693b      	ldr	r3, [r7, #16]
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d05d      	beq.n	8002a80 <xQueueGenericReset+0xf0>
        ( pxQueue->uxLength >= 1U ) &&
 80029c4:	693b      	ldr	r3, [r7, #16]
 80029c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    if( ( pxQueue != NULL ) &&
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d059      	beq.n	8002a80 <xQueueGenericReset+0xf0>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 80029cc:	693b      	ldr	r3, [r7, #16]
 80029ce:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80029d0:	693b      	ldr	r3, [r7, #16]
 80029d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029d4:	2100      	movs	r1, #0
 80029d6:	fba3 2302 	umull	r2, r3, r3, r2
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d000      	beq.n	80029e0 <xQueueGenericReset+0x50>
 80029de:	2101      	movs	r1, #1
 80029e0:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d14c      	bne.n	8002a80 <xQueueGenericReset+0xf0>
    {
        taskENTER_CRITICAL();
 80029e6:	f001 feed 	bl	80047c4 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80029ea:	693b      	ldr	r3, [r7, #16]
 80029ec:	681a      	ldr	r2, [r3, #0]
 80029ee:	693b      	ldr	r3, [r7, #16]
 80029f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029f2:	6939      	ldr	r1, [r7, #16]
 80029f4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80029f6:	fb01 f303 	mul.w	r3, r1, r3
 80029fa:	441a      	add	r2, r3
 80029fc:	693b      	ldr	r3, [r7, #16]
 80029fe:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002a00:	693b      	ldr	r3, [r7, #16]
 8002a02:	2200      	movs	r2, #0
 8002a04:	639a      	str	r2, [r3, #56]	; 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8002a06:	693b      	ldr	r3, [r7, #16]
 8002a08:	681a      	ldr	r2, [r3, #0]
 8002a0a:	693b      	ldr	r3, [r7, #16]
 8002a0c:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002a0e:	693b      	ldr	r3, [r7, #16]
 8002a10:	681a      	ldr	r2, [r3, #0]
 8002a12:	693b      	ldr	r3, [r7, #16]
 8002a14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a16:	3b01      	subs	r3, #1
 8002a18:	6939      	ldr	r1, [r7, #16]
 8002a1a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002a1c:	fb01 f303 	mul.w	r3, r1, r3
 8002a20:	441a      	add	r2, r3
 8002a22:	693b      	ldr	r3, [r7, #16]
 8002a24:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 8002a26:	693b      	ldr	r3, [r7, #16]
 8002a28:	22ff      	movs	r2, #255	; 0xff
 8002a2a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 8002a2e:	693b      	ldr	r3, [r7, #16]
 8002a30:	22ff      	movs	r2, #255	; 0xff
 8002a32:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

            if( xNewQueue == pdFALSE )
 8002a36:	683b      	ldr	r3, [r7, #0]
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d114      	bne.n	8002a66 <xQueueGenericReset+0xd6>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002a3c:	693b      	ldr	r3, [r7, #16]
 8002a3e:	691b      	ldr	r3, [r3, #16]
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d01a      	beq.n	8002a7a <xQueueGenericReset+0xea>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002a44:	693b      	ldr	r3, [r7, #16]
 8002a46:	3310      	adds	r3, #16
 8002a48:	4618      	mov	r0, r3
 8002a4a:	f000 ffdb 	bl	8003a04 <xTaskRemoveFromEventList>
 8002a4e:	4603      	mov	r3, r0
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d012      	beq.n	8002a7a <xQueueGenericReset+0xea>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8002a54:	4b15      	ldr	r3, [pc, #84]	; (8002aac <xQueueGenericReset+0x11c>)
 8002a56:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002a5a:	601a      	str	r2, [r3, #0]
 8002a5c:	f3bf 8f4f 	dsb	sy
 8002a60:	f3bf 8f6f 	isb	sy
 8002a64:	e009      	b.n	8002a7a <xQueueGenericReset+0xea>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002a66:	693b      	ldr	r3, [r7, #16]
 8002a68:	3310      	adds	r3, #16
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	f7ff ff00 	bl	8002870 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002a70:	693b      	ldr	r3, [r7, #16]
 8002a72:	3324      	adds	r3, #36	; 0x24
 8002a74:	4618      	mov	r0, r3
 8002a76:	f7ff fefb 	bl	8002870 <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 8002a7a:	f001 fed3 	bl	8004824 <vPortExitCritical>
 8002a7e:	e001      	b.n	8002a84 <xQueueGenericReset+0xf4>
    }
    else
    {
        xReturn = pdFAIL;
 8002a80:	2300      	movs	r3, #0
 8002a82:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 8002a84:	697b      	ldr	r3, [r7, #20]
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d10a      	bne.n	8002aa0 <xQueueGenericReset+0x110>
        __asm volatile
 8002a8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a8e:	f383 8811 	msr	BASEPRI, r3
 8002a92:	f3bf 8f6f 	isb	sy
 8002a96:	f3bf 8f4f 	dsb	sy
 8002a9a:	60bb      	str	r3, [r7, #8]
    }
 8002a9c:	bf00      	nop
 8002a9e:	e7fe      	b.n	8002a9e <xQueueGenericReset+0x10e>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 8002aa0:	697b      	ldr	r3, [r7, #20]
}
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	3718      	adds	r7, #24
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	bd80      	pop	{r7, pc}
 8002aaa:	bf00      	nop
 8002aac:	e000ed04 	.word	0xe000ed04

08002ab0 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	b08a      	sub	sp, #40	; 0x28
 8002ab4:	af02      	add	r7, sp, #8
 8002ab6:	60f8      	str	r0, [r7, #12]
 8002ab8:	60b9      	str	r1, [r7, #8]
 8002aba:	4613      	mov	r3, r2
 8002abc:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 8002abe:	2300      	movs	r3, #0
 8002ac0:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d02e      	beq.n	8002b26 <xQueueGenericCreate+0x76>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8002ac8:	2100      	movs	r1, #0
 8002aca:	68ba      	ldr	r2, [r7, #8]
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	fba3 2302 	umull	r2, r3, r3, r2
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d000      	beq.n	8002ad8 <xQueueGenericCreate+0x28>
 8002ad6:	2101      	movs	r1, #1
 8002ad8:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d123      	bne.n	8002b26 <xQueueGenericCreate+0x76>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	68ba      	ldr	r2, [r7, #8]
 8002ae2:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8002ae6:	f113 0f51 	cmn.w	r3, #81	; 0x51
 8002aea:	d81c      	bhi.n	8002b26 <xQueueGenericCreate+0x76>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	68ba      	ldr	r2, [r7, #8]
 8002af0:	fb02 f303 	mul.w	r3, r2, r3
 8002af4:	61bb      	str	r3, [r7, #24]
             * alignment requirements of the Queue_t structure - which in this case
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
             * are greater than or equal to the pointer to char requirements the cast
             * is safe.  In other cases alignment requirements are not strict (one or
             * two bytes). */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8002af6:	69bb      	ldr	r3, [r7, #24]
 8002af8:	3350      	adds	r3, #80	; 0x50
 8002afa:	4618      	mov	r0, r3
 8002afc:	f001 ff8e 	bl	8004a1c <pvPortMalloc>
 8002b00:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 8002b02:	69fb      	ldr	r3, [r7, #28]
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d01c      	beq.n	8002b42 <xQueueGenericCreate+0x92>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8002b08:	69fb      	ldr	r3, [r7, #28]
 8002b0a:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002b0c:	697b      	ldr	r3, [r7, #20]
 8002b0e:	3350      	adds	r3, #80	; 0x50
 8002b10:	617b      	str	r3, [r7, #20]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002b12:	79fa      	ldrb	r2, [r7, #7]
 8002b14:	69fb      	ldr	r3, [r7, #28]
 8002b16:	9300      	str	r3, [sp, #0]
 8002b18:	4613      	mov	r3, r2
 8002b1a:	697a      	ldr	r2, [r7, #20]
 8002b1c:	68b9      	ldr	r1, [r7, #8]
 8002b1e:	68f8      	ldr	r0, [r7, #12]
 8002b20:	f000 f814 	bl	8002b4c <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 8002b24:	e00d      	b.n	8002b42 <xQueueGenericCreate+0x92>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 8002b26:	69fb      	ldr	r3, [r7, #28]
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d10a      	bne.n	8002b42 <xQueueGenericCreate+0x92>
        __asm volatile
 8002b2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b30:	f383 8811 	msr	BASEPRI, r3
 8002b34:	f3bf 8f6f 	isb	sy
 8002b38:	f3bf 8f4f 	dsb	sy
 8002b3c:	613b      	str	r3, [r7, #16]
    }
 8002b3e:	bf00      	nop
 8002b40:	e7fe      	b.n	8002b40 <xQueueGenericCreate+0x90>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8002b42:	69fb      	ldr	r3, [r7, #28]
    }
 8002b44:	4618      	mov	r0, r3
 8002b46:	3720      	adds	r7, #32
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	bd80      	pop	{r7, pc}

08002b4c <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	b084      	sub	sp, #16
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	60f8      	str	r0, [r7, #12]
 8002b54:	60b9      	str	r1, [r7, #8]
 8002b56:	607a      	str	r2, [r7, #4]
 8002b58:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8002b5a:	68bb      	ldr	r3, [r7, #8]
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d103      	bne.n	8002b68 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002b60:	69bb      	ldr	r3, [r7, #24]
 8002b62:	69ba      	ldr	r2, [r7, #24]
 8002b64:	601a      	str	r2, [r3, #0]
 8002b66:	e002      	b.n	8002b6e <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002b68:	69bb      	ldr	r3, [r7, #24]
 8002b6a:	687a      	ldr	r2, [r7, #4]
 8002b6c:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8002b6e:	69bb      	ldr	r3, [r7, #24]
 8002b70:	68fa      	ldr	r2, [r7, #12]
 8002b72:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8002b74:	69bb      	ldr	r3, [r7, #24]
 8002b76:	68ba      	ldr	r2, [r7, #8]
 8002b78:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002b7a:	2101      	movs	r1, #1
 8002b7c:	69b8      	ldr	r0, [r7, #24]
 8002b7e:	f7ff ff07 	bl	8002990 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
    {
        pxNewQueue->ucQueueType = ucQueueType;
 8002b82:	69bb      	ldr	r3, [r7, #24]
 8002b84:	78fa      	ldrb	r2, [r7, #3]
 8002b86:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    {
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
 8002b8a:	78fb      	ldrb	r3, [r7, #3]
 8002b8c:	68ba      	ldr	r2, [r7, #8]
 8002b8e:	68f9      	ldr	r1, [r7, #12]
 8002b90:	2073      	movs	r0, #115	; 0x73
 8002b92:	f003 fadf 	bl	8006154 <SEGGER_SYSVIEW_RecordU32x3>
}
 8002b96:	bf00      	nop
 8002b98:	3710      	adds	r7, #16
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	bd80      	pop	{r7, pc}
	...

08002ba0 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8002ba0:	b590      	push	{r4, r7, lr}
 8002ba2:	b08f      	sub	sp, #60	; 0x3c
 8002ba4:	af02      	add	r7, sp, #8
 8002ba6:	60f8      	str	r0, [r7, #12]
 8002ba8:	60b9      	str	r1, [r7, #8]
 8002baa:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8002bac:	2300      	movs	r3, #0
 8002bae:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8002bb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d10a      	bne.n	8002bd0 <xQueueReceive+0x30>
        __asm volatile
 8002bba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bbe:	f383 8811 	msr	BASEPRI, r3
 8002bc2:	f3bf 8f6f 	isb	sy
 8002bc6:	f3bf 8f4f 	dsb	sy
 8002bca:	623b      	str	r3, [r7, #32]
    }
 8002bcc:	bf00      	nop
 8002bce:	e7fe      	b.n	8002bce <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002bd0:	68bb      	ldr	r3, [r7, #8]
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d103      	bne.n	8002bde <xQueueReceive+0x3e>
 8002bd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d101      	bne.n	8002be2 <xQueueReceive+0x42>
 8002bde:	2301      	movs	r3, #1
 8002be0:	e000      	b.n	8002be4 <xQueueReceive+0x44>
 8002be2:	2300      	movs	r3, #0
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d10a      	bne.n	8002bfe <xQueueReceive+0x5e>
        __asm volatile
 8002be8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bec:	f383 8811 	msr	BASEPRI, r3
 8002bf0:	f3bf 8f6f 	isb	sy
 8002bf4:	f3bf 8f4f 	dsb	sy
 8002bf8:	61fb      	str	r3, [r7, #28]
    }
 8002bfa:	bf00      	nop
 8002bfc:	e7fe      	b.n	8002bfc <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002bfe:	f001 f913 	bl	8003e28 <xTaskGetSchedulerState>
 8002c02:	4603      	mov	r3, r0
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d102      	bne.n	8002c0e <xQueueReceive+0x6e>
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d101      	bne.n	8002c12 <xQueueReceive+0x72>
 8002c0e:	2301      	movs	r3, #1
 8002c10:	e000      	b.n	8002c14 <xQueueReceive+0x74>
 8002c12:	2300      	movs	r3, #0
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d10a      	bne.n	8002c2e <xQueueReceive+0x8e>
        __asm volatile
 8002c18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c1c:	f383 8811 	msr	BASEPRI, r3
 8002c20:	f3bf 8f6f 	isb	sy
 8002c24:	f3bf 8f4f 	dsb	sy
 8002c28:	61bb      	str	r3, [r7, #24]
    }
 8002c2a:	bf00      	nop
 8002c2c:	e7fe      	b.n	8002c2c <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8002c2e:	f001 fdc9 	bl	80047c4 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002c32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c36:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d02f      	beq.n	8002c9e <xQueueReceive+0xfe>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002c3e:	68b9      	ldr	r1, [r7, #8]
 8002c40:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002c42:	f000 f8bd 	bl	8002dc0 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
 8002c46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c48:	4618      	mov	r0, r3
 8002c4a:	f003 ffaf 	bl	8006bac <SEGGER_SYSVIEW_ShrinkId>
 8002c4e:	4604      	mov	r4, r0
 8002c50:	2000      	movs	r0, #0
 8002c52:	f003 ffab 	bl	8006bac <SEGGER_SYSVIEW_ShrinkId>
 8002c56:	4602      	mov	r2, r0
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	2101      	movs	r1, #1
 8002c5c:	9100      	str	r1, [sp, #0]
 8002c5e:	4621      	mov	r1, r4
 8002c60:	205c      	movs	r0, #92	; 0x5c
 8002c62:	f003 faed 	bl	8006240 <SEGGER_SYSVIEW_RecordU32x4>
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002c66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c68:	1e5a      	subs	r2, r3, #1
 8002c6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c6c:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002c6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c70:	691b      	ldr	r3, [r3, #16]
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d00f      	beq.n	8002c96 <xQueueReceive+0xf6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002c76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c78:	3310      	adds	r3, #16
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	f000 fec2 	bl	8003a04 <xTaskRemoveFromEventList>
 8002c80:	4603      	mov	r3, r0
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d007      	beq.n	8002c96 <xQueueReceive+0xf6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8002c86:	4b4d      	ldr	r3, [pc, #308]	; (8002dbc <xQueueReceive+0x21c>)
 8002c88:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002c8c:	601a      	str	r2, [r3, #0]
 8002c8e:	f3bf 8f4f 	dsb	sy
 8002c92:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8002c96:	f001 fdc5 	bl	8004824 <vPortExitCritical>
                return pdPASS;
 8002c9a:	2301      	movs	r3, #1
 8002c9c:	e08a      	b.n	8002db4 <xQueueReceive+0x214>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d113      	bne.n	8002ccc <xQueueReceive+0x12c>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8002ca4:	f001 fdbe 	bl	8004824 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
 8002ca8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002caa:	4618      	mov	r0, r3
 8002cac:	f003 ff7e 	bl	8006bac <SEGGER_SYSVIEW_ShrinkId>
 8002cb0:	4604      	mov	r4, r0
 8002cb2:	2000      	movs	r0, #0
 8002cb4:	f003 ff7a 	bl	8006bac <SEGGER_SYSVIEW_ShrinkId>
 8002cb8:	4602      	mov	r2, r0
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	2101      	movs	r1, #1
 8002cbe:	9100      	str	r1, [sp, #0]
 8002cc0:	4621      	mov	r1, r4
 8002cc2:	205c      	movs	r0, #92	; 0x5c
 8002cc4:	f003 fabc 	bl	8006240 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_EMPTY;
 8002cc8:	2300      	movs	r3, #0
 8002cca:	e073      	b.n	8002db4 <xQueueReceive+0x214>
                }
                else if( xEntryTimeSet == pdFALSE )
 8002ccc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d106      	bne.n	8002ce0 <xQueueReceive+0x140>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8002cd2:	f107 0310 	add.w	r3, r7, #16
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	f000 ff6c 	bl	8003bb4 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8002cdc:	2301      	movs	r3, #1
 8002cde:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8002ce0:	f001 fda0 	bl	8004824 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8002ce4:	f000 fb6e 	bl	80033c4 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8002ce8:	f001 fd6c 	bl	80047c4 <vPortEnterCritical>
 8002cec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cee:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002cf2:	b25b      	sxtb	r3, r3
 8002cf4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002cf8:	d103      	bne.n	8002d02 <xQueueReceive+0x162>
 8002cfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002d02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d04:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002d08:	b25b      	sxtb	r3, r3
 8002d0a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002d0e:	d103      	bne.n	8002d18 <xQueueReceive+0x178>
 8002d10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d12:	2200      	movs	r2, #0
 8002d14:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002d18:	f001 fd84 	bl	8004824 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002d1c:	1d3a      	adds	r2, r7, #4
 8002d1e:	f107 0310 	add.w	r3, r7, #16
 8002d22:	4611      	mov	r1, r2
 8002d24:	4618      	mov	r0, r3
 8002d26:	f000 ff5b 	bl	8003be0 <xTaskCheckForTimeOut>
 8002d2a:	4603      	mov	r3, r0
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d124      	bne.n	8002d7a <xQueueReceive+0x1da>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002d30:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002d32:	f000 f8bd 	bl	8002eb0 <prvIsQueueEmpty>
 8002d36:	4603      	mov	r3, r0
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d018      	beq.n	8002d6e <xQueueReceive+0x1ce>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002d3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d3e:	3324      	adds	r3, #36	; 0x24
 8002d40:	687a      	ldr	r2, [r7, #4]
 8002d42:	4611      	mov	r1, r2
 8002d44:	4618      	mov	r0, r3
 8002d46:	f000 fdf1 	bl	800392c <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8002d4a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002d4c:	f000 f85e 	bl	8002e0c <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8002d50:	f000 fb46 	bl	80033e0 <xTaskResumeAll>
 8002d54:	4603      	mov	r3, r0
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	f47f af69 	bne.w	8002c2e <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 8002d5c:	4b17      	ldr	r3, [pc, #92]	; (8002dbc <xQueueReceive+0x21c>)
 8002d5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002d62:	601a      	str	r2, [r3, #0]
 8002d64:	f3bf 8f4f 	dsb	sy
 8002d68:	f3bf 8f6f 	isb	sy
 8002d6c:	e75f      	b.n	8002c2e <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8002d6e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002d70:	f000 f84c 	bl	8002e0c <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8002d74:	f000 fb34 	bl	80033e0 <xTaskResumeAll>
 8002d78:	e759      	b.n	8002c2e <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8002d7a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002d7c:	f000 f846 	bl	8002e0c <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8002d80:	f000 fb2e 	bl	80033e0 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002d84:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002d86:	f000 f893 	bl	8002eb0 <prvIsQueueEmpty>
 8002d8a:	4603      	mov	r3, r0
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	f43f af4e 	beq.w	8002c2e <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
 8002d92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d94:	4618      	mov	r0, r3
 8002d96:	f003 ff09 	bl	8006bac <SEGGER_SYSVIEW_ShrinkId>
 8002d9a:	4604      	mov	r4, r0
 8002d9c:	2000      	movs	r0, #0
 8002d9e:	f003 ff05 	bl	8006bac <SEGGER_SYSVIEW_ShrinkId>
 8002da2:	4602      	mov	r2, r0
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	2101      	movs	r1, #1
 8002da8:	9100      	str	r1, [sp, #0]
 8002daa:	4621      	mov	r1, r4
 8002dac:	205c      	movs	r0, #92	; 0x5c
 8002dae:	f003 fa47 	bl	8006240 <SEGGER_SYSVIEW_RecordU32x4>
                return errQUEUE_EMPTY;
 8002db2:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8002db4:	4618      	mov	r0, r3
 8002db6:	3734      	adds	r7, #52	; 0x34
 8002db8:	46bd      	mov	sp, r7
 8002dba:	bd90      	pop	{r4, r7, pc}
 8002dbc:	e000ed04 	.word	0xe000ed04

08002dc0 <prvCopyDataFromQueue>:
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	b082      	sub	sp, #8
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]
 8002dc8:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d018      	beq.n	8002e04 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	68da      	ldr	r2, [r3, #12]
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dda:	441a      	add	r2, r3
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	68da      	ldr	r2, [r3, #12]
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	689b      	ldr	r3, [r3, #8]
 8002de8:	429a      	cmp	r2, r3
 8002dea:	d303      	bcc.n	8002df4 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681a      	ldr	r2, [r3, #0]
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	68d9      	ldr	r1, [r3, #12]
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dfc:	461a      	mov	r2, r3
 8002dfe:	6838      	ldr	r0, [r7, #0]
 8002e00:	f004 f8a8 	bl	8006f54 <memcpy>
    }
}
 8002e04:	bf00      	nop
 8002e06:	3708      	adds	r7, #8
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	bd80      	pop	{r7, pc}

08002e0c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	b084      	sub	sp, #16
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8002e14:	f001 fcd6 	bl	80047c4 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002e1e:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8002e20:	e011      	b.n	8002e46 <prvUnlockQueue+0x3a>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d012      	beq.n	8002e50 <prvUnlockQueue+0x44>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	3324      	adds	r3, #36	; 0x24
 8002e2e:	4618      	mov	r0, r3
 8002e30:	f000 fde8 	bl	8003a04 <xTaskRemoveFromEventList>
 8002e34:	4603      	mov	r3, r0
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d001      	beq.n	8002e3e <prvUnlockQueue+0x32>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 8002e3a:	f000 ff37 	bl	8003cac <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8002e3e:	7bfb      	ldrb	r3, [r7, #15]
 8002e40:	3b01      	subs	r3, #1
 8002e42:	b2db      	uxtb	r3, r3
 8002e44:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8002e46:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	dce9      	bgt.n	8002e22 <prvUnlockQueue+0x16>
 8002e4e:	e000      	b.n	8002e52 <prvUnlockQueue+0x46>
                    break;
 8002e50:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	22ff      	movs	r2, #255	; 0xff
 8002e56:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 8002e5a:	f001 fce3 	bl	8004824 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8002e5e:	f001 fcb1 	bl	80047c4 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002e68:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002e6a:	e011      	b.n	8002e90 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	691b      	ldr	r3, [r3, #16]
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d012      	beq.n	8002e9a <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	3310      	adds	r3, #16
 8002e78:	4618      	mov	r0, r3
 8002e7a:	f000 fdc3 	bl	8003a04 <xTaskRemoveFromEventList>
 8002e7e:	4603      	mov	r3, r0
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d001      	beq.n	8002e88 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8002e84:	f000 ff12 	bl	8003cac <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8002e88:	7bbb      	ldrb	r3, [r7, #14]
 8002e8a:	3b01      	subs	r3, #1
 8002e8c:	b2db      	uxtb	r3, r3
 8002e8e:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002e90:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	dce9      	bgt.n	8002e6c <prvUnlockQueue+0x60>
 8002e98:	e000      	b.n	8002e9c <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8002e9a:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	22ff      	movs	r2, #255	; 0xff
 8002ea0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 8002ea4:	f001 fcbe 	bl	8004824 <vPortExitCritical>
}
 8002ea8:	bf00      	nop
 8002eaa:	3710      	adds	r7, #16
 8002eac:	46bd      	mov	sp, r7
 8002eae:	bd80      	pop	{r7, pc}

08002eb0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	b084      	sub	sp, #16
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8002eb8:	f001 fc84 	bl	80047c4 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d102      	bne.n	8002eca <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8002ec4:	2301      	movs	r3, #1
 8002ec6:	60fb      	str	r3, [r7, #12]
 8002ec8:	e001      	b.n	8002ece <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8002eca:	2300      	movs	r3, #0
 8002ecc:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8002ece:	f001 fca9 	bl	8004824 <vPortExitCritical>

    return xReturn;
 8002ed2:	68fb      	ldr	r3, [r7, #12]
}
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	3710      	adds	r7, #16
 8002ed8:	46bd      	mov	sp, r7
 8002eda:	bd80      	pop	{r7, pc}

08002edc <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8002edc:	b580      	push	{r7, lr}
 8002ede:	b086      	sub	sp, #24
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	6078      	str	r0, [r7, #4]
 8002ee4:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;
        QueueRegistryItem_t * pxEntryToWrite = NULL;
 8002ee6:	2300      	movs	r3, #0
 8002ee8:	613b      	str	r3, [r7, #16]

        configASSERT( xQueue );
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d10a      	bne.n	8002f06 <vQueueAddToRegistry+0x2a>
        __asm volatile
 8002ef0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ef4:	f383 8811 	msr	BASEPRI, r3
 8002ef8:	f3bf 8f6f 	isb	sy
 8002efc:	f3bf 8f4f 	dsb	sy
 8002f00:	60fb      	str	r3, [r7, #12]
    }
 8002f02:	bf00      	nop
 8002f04:	e7fe      	b.n	8002f04 <vQueueAddToRegistry+0x28>

        if( pcQueueName != NULL )
 8002f06:	683b      	ldr	r3, [r7, #0]
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d024      	beq.n	8002f56 <vQueueAddToRegistry+0x7a>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002f0c:	2300      	movs	r3, #0
 8002f0e:	617b      	str	r3, [r7, #20]
 8002f10:	e01e      	b.n	8002f50 <vQueueAddToRegistry+0x74>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 8002f12:	4a1c      	ldr	r2, [pc, #112]	; (8002f84 <vQueueAddToRegistry+0xa8>)
 8002f14:	697b      	ldr	r3, [r7, #20]
 8002f16:	00db      	lsls	r3, r3, #3
 8002f18:	4413      	add	r3, r2
 8002f1a:	685b      	ldr	r3, [r3, #4]
 8002f1c:	687a      	ldr	r2, [r7, #4]
 8002f1e:	429a      	cmp	r2, r3
 8002f20:	d105      	bne.n	8002f2e <vQueueAddToRegistry+0x52>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8002f22:	697b      	ldr	r3, [r7, #20]
 8002f24:	00db      	lsls	r3, r3, #3
 8002f26:	4a17      	ldr	r2, [pc, #92]	; (8002f84 <vQueueAddToRegistry+0xa8>)
 8002f28:	4413      	add	r3, r2
 8002f2a:	613b      	str	r3, [r7, #16]
                    break;
 8002f2c:	e013      	b.n	8002f56 <vQueueAddToRegistry+0x7a>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 8002f2e:	693b      	ldr	r3, [r7, #16]
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d10a      	bne.n	8002f4a <vQueueAddToRegistry+0x6e>
 8002f34:	4a13      	ldr	r2, [pc, #76]	; (8002f84 <vQueueAddToRegistry+0xa8>)
 8002f36:	697b      	ldr	r3, [r7, #20]
 8002f38:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d104      	bne.n	8002f4a <vQueueAddToRegistry+0x6e>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8002f40:	697b      	ldr	r3, [r7, #20]
 8002f42:	00db      	lsls	r3, r3, #3
 8002f44:	4a0f      	ldr	r2, [pc, #60]	; (8002f84 <vQueueAddToRegistry+0xa8>)
 8002f46:	4413      	add	r3, r2
 8002f48:	613b      	str	r3, [r7, #16]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002f4a:	697b      	ldr	r3, [r7, #20]
 8002f4c:	3301      	adds	r3, #1
 8002f4e:	617b      	str	r3, [r7, #20]
 8002f50:	697b      	ldr	r3, [r7, #20]
 8002f52:	2b07      	cmp	r3, #7
 8002f54:	d9dd      	bls.n	8002f12 <vQueueAddToRegistry+0x36>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 8002f56:	693b      	ldr	r3, [r7, #16]
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d00f      	beq.n	8002f7c <vQueueAddToRegistry+0xa0>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 8002f5c:	693b      	ldr	r3, [r7, #16]
 8002f5e:	683a      	ldr	r2, [r7, #0]
 8002f60:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 8002f62:	693b      	ldr	r3, [r7, #16]
 8002f64:	687a      	ldr	r2, [r7, #4]
 8002f66:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	f003 fe1e 	bl	8006bac <SEGGER_SYSVIEW_ShrinkId>
 8002f70:	4601      	mov	r1, r0
 8002f72:	683b      	ldr	r3, [r7, #0]
 8002f74:	461a      	mov	r2, r3
 8002f76:	2071      	movs	r0, #113	; 0x71
 8002f78:	f003 f892 	bl	80060a0 <SEGGER_SYSVIEW_RecordU32x2>
        }
    }
 8002f7c:	bf00      	nop
 8002f7e:	3718      	adds	r7, #24
 8002f80:	46bd      	mov	sp, r7
 8002f82:	bd80      	pop	{r7, pc}
 8002f84:	200000d4 	.word	0x200000d4

08002f88 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	b086      	sub	sp, #24
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	60f8      	str	r0, [r7, #12]
 8002f90:	60b9      	str	r1, [r7, #8]
 8002f92:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8002f98:	f001 fc14 	bl	80047c4 <vPortEnterCritical>
 8002f9c:	697b      	ldr	r3, [r7, #20]
 8002f9e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002fa2:	b25b      	sxtb	r3, r3
 8002fa4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002fa8:	d103      	bne.n	8002fb2 <vQueueWaitForMessageRestricted+0x2a>
 8002faa:	697b      	ldr	r3, [r7, #20]
 8002fac:	2200      	movs	r2, #0
 8002fae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002fb2:	697b      	ldr	r3, [r7, #20]
 8002fb4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002fb8:	b25b      	sxtb	r3, r3
 8002fba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002fbe:	d103      	bne.n	8002fc8 <vQueueWaitForMessageRestricted+0x40>
 8002fc0:	697b      	ldr	r3, [r7, #20]
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002fc8:	f001 fc2c 	bl	8004824 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8002fcc:	697b      	ldr	r3, [r7, #20]
 8002fce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d106      	bne.n	8002fe2 <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8002fd4:	697b      	ldr	r3, [r7, #20]
 8002fd6:	3324      	adds	r3, #36	; 0x24
 8002fd8:	687a      	ldr	r2, [r7, #4]
 8002fda:	68b9      	ldr	r1, [r7, #8]
 8002fdc:	4618      	mov	r0, r3
 8002fde:	f000 fcc9 	bl	8003974 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8002fe2:	6978      	ldr	r0, [r7, #20]
 8002fe4:	f7ff ff12 	bl	8002e0c <prvUnlockQueue>
    }
 8002fe8:	bf00      	nop
 8002fea:	3718      	adds	r7, #24
 8002fec:	46bd      	mov	sp, r7
 8002fee:	bd80      	pop	{r7, pc}

08002ff0 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	b08c      	sub	sp, #48	; 0x30
 8002ff4:	af04      	add	r7, sp, #16
 8002ff6:	60f8      	str	r0, [r7, #12]
 8002ff8:	60b9      	str	r1, [r7, #8]
 8002ffa:	603b      	str	r3, [r7, #0]
 8002ffc:	4613      	mov	r3, r2
 8002ffe:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
        {
            StackType_t * pxStack;

            /* Allocate space for the stack used by the task being created. */
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003000:	88fb      	ldrh	r3, [r7, #6]
 8003002:	009b      	lsls	r3, r3, #2
 8003004:	4618      	mov	r0, r3
 8003006:	f001 fd09 	bl	8004a1c <pvPortMalloc>
 800300a:	6178      	str	r0, [r7, #20]

            if( pxStack != NULL )
 800300c:	697b      	ldr	r3, [r7, #20]
 800300e:	2b00      	cmp	r3, #0
 8003010:	d013      	beq.n	800303a <xTaskCreate+0x4a>
            {
                /* Allocate space for the TCB. */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003012:	2058      	movs	r0, #88	; 0x58
 8003014:	f001 fd02 	bl	8004a1c <pvPortMalloc>
 8003018:	61f8      	str	r0, [r7, #28]

                if( pxNewTCB != NULL )
 800301a:	69fb      	ldr	r3, [r7, #28]
 800301c:	2b00      	cmp	r3, #0
 800301e:	d008      	beq.n	8003032 <xTaskCreate+0x42>
                {
                    memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 8003020:	2258      	movs	r2, #88	; 0x58
 8003022:	2100      	movs	r1, #0
 8003024:	69f8      	ldr	r0, [r7, #28]
 8003026:	f003 ff61 	bl	8006eec <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 800302a:	69fb      	ldr	r3, [r7, #28]
 800302c:	697a      	ldr	r2, [r7, #20]
 800302e:	631a      	str	r2, [r3, #48]	; 0x30
 8003030:	e005      	b.n	800303e <xTaskCreate+0x4e>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 8003032:	6978      	ldr	r0, [r7, #20]
 8003034:	f001 fdac 	bl	8004b90 <vPortFree>
 8003038:	e001      	b.n	800303e <xTaskCreate+0x4e>
                }
            }
            else
            {
                pxNewTCB = NULL;
 800303a:	2300      	movs	r3, #0
 800303c:	61fb      	str	r3, [r7, #28]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 800303e:	69fb      	ldr	r3, [r7, #28]
 8003040:	2b00      	cmp	r3, #0
 8003042:	d013      	beq.n	800306c <xTaskCreate+0x7c>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003044:	88fa      	ldrh	r2, [r7, #6]
 8003046:	2300      	movs	r3, #0
 8003048:	9303      	str	r3, [sp, #12]
 800304a:	69fb      	ldr	r3, [r7, #28]
 800304c:	9302      	str	r3, [sp, #8]
 800304e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003050:	9301      	str	r3, [sp, #4]
 8003052:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003054:	9300      	str	r3, [sp, #0]
 8003056:	683b      	ldr	r3, [r7, #0]
 8003058:	68b9      	ldr	r1, [r7, #8]
 800305a:	68f8      	ldr	r0, [r7, #12]
 800305c:	f000 f80e 	bl	800307c <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8003060:	69f8      	ldr	r0, [r7, #28]
 8003062:	f000 f899 	bl	8003198 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8003066:	2301      	movs	r3, #1
 8003068:	61bb      	str	r3, [r7, #24]
 800306a:	e002      	b.n	8003072 <xTaskCreate+0x82>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800306c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003070:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8003072:	69bb      	ldr	r3, [r7, #24]
    }
 8003074:	4618      	mov	r0, r3
 8003076:	3720      	adds	r7, #32
 8003078:	46bd      	mov	sp, r7
 800307a:	bd80      	pop	{r7, pc}

0800307c <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 800307c:	b580      	push	{r7, lr}
 800307e:	b088      	sub	sp, #32
 8003080:	af00      	add	r7, sp, #0
 8003082:	60f8      	str	r0, [r7, #12]
 8003084:	60b9      	str	r1, [r7, #8]
 8003086:	607a      	str	r2, [r7, #4]
 8003088:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800308a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800308c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	009b      	lsls	r3, r3, #2
 8003092:	461a      	mov	r2, r3
 8003094:	21a5      	movs	r1, #165	; 0xa5
 8003096:	f003 ff29 	bl	8006eec <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800309a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800309c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80030a4:	3b01      	subs	r3, #1
 80030a6:	009b      	lsls	r3, r3, #2
 80030a8:	4413      	add	r3, r2
 80030aa:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80030ac:	69bb      	ldr	r3, [r7, #24]
 80030ae:	f023 0307 	bic.w	r3, r3, #7
 80030b2:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80030b4:	69bb      	ldr	r3, [r7, #24]
 80030b6:	f003 0307 	and.w	r3, r3, #7
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d00a      	beq.n	80030d4 <prvInitialiseNewTask+0x58>
        __asm volatile
 80030be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030c2:	f383 8811 	msr	BASEPRI, r3
 80030c6:	f3bf 8f6f 	isb	sy
 80030ca:	f3bf 8f4f 	dsb	sy
 80030ce:	617b      	str	r3, [r7, #20]
    }
 80030d0:	bf00      	nop
 80030d2:	e7fe      	b.n	80030d2 <prvInitialiseNewTask+0x56>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 80030d4:	68bb      	ldr	r3, [r7, #8]
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d01e      	beq.n	8003118 <prvInitialiseNewTask+0x9c>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80030da:	2300      	movs	r3, #0
 80030dc:	61fb      	str	r3, [r7, #28]
 80030de:	e012      	b.n	8003106 <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80030e0:	68ba      	ldr	r2, [r7, #8]
 80030e2:	69fb      	ldr	r3, [r7, #28]
 80030e4:	4413      	add	r3, r2
 80030e6:	7819      	ldrb	r1, [r3, #0]
 80030e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80030ea:	69fb      	ldr	r3, [r7, #28]
 80030ec:	4413      	add	r3, r2
 80030ee:	3334      	adds	r3, #52	; 0x34
 80030f0:	460a      	mov	r2, r1
 80030f2:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 80030f4:	68ba      	ldr	r2, [r7, #8]
 80030f6:	69fb      	ldr	r3, [r7, #28]
 80030f8:	4413      	add	r3, r2
 80030fa:	781b      	ldrb	r3, [r3, #0]
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d006      	beq.n	800310e <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003100:	69fb      	ldr	r3, [r7, #28]
 8003102:	3301      	adds	r3, #1
 8003104:	61fb      	str	r3, [r7, #28]
 8003106:	69fb      	ldr	r3, [r7, #28]
 8003108:	2b09      	cmp	r3, #9
 800310a:	d9e9      	bls.n	80030e0 <prvInitialiseNewTask+0x64>
 800310c:	e000      	b.n	8003110 <prvInitialiseNewTask+0x94>
            {
                break;
 800310e:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003110:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003112:	2200      	movs	r2, #0
 8003114:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 8003118:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800311a:	2b07      	cmp	r3, #7
 800311c:	d90a      	bls.n	8003134 <prvInitialiseNewTask+0xb8>
        __asm volatile
 800311e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003122:	f383 8811 	msr	BASEPRI, r3
 8003126:	f3bf 8f6f 	isb	sy
 800312a:	f3bf 8f4f 	dsb	sy
 800312e:	613b      	str	r3, [r7, #16]
    }
 8003130:	bf00      	nop
 8003132:	e7fe      	b.n	8003132 <prvInitialiseNewTask+0xb6>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003134:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003136:	2b07      	cmp	r3, #7
 8003138:	d901      	bls.n	800313e <prvInitialiseNewTask+0xc2>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800313a:	2307      	movs	r3, #7
 800313c:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 800313e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003140:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003142:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 8003144:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003146:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003148:	649a      	str	r2, [r3, #72]	; 0x48
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800314a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800314c:	3304      	adds	r3, #4
 800314e:	4618      	mov	r0, r3
 8003150:	f7ff fbae 	bl	80028b0 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003154:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003156:	3318      	adds	r3, #24
 8003158:	4618      	mov	r0, r3
 800315a:	f7ff fba9 	bl	80028b0 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800315e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003160:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003162:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003164:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003166:	f1c3 0208 	rsb	r2, r3, #8
 800316a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800316c:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800316e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003170:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003172:	625a      	str	r2, [r3, #36]	; 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003174:	683a      	ldr	r2, [r7, #0]
 8003176:	68f9      	ldr	r1, [r7, #12]
 8003178:	69b8      	ldr	r0, [r7, #24]
 800317a:	f001 f977 	bl	800446c <pxPortInitialiseStack>
 800317e:	4602      	mov	r2, r0
 8003180:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003182:	601a      	str	r2, [r3, #0]
        }
        #endif /* portHAS_STACK_OVERFLOW_CHECKING */
    }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8003184:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003186:	2b00      	cmp	r3, #0
 8003188:	d002      	beq.n	8003190 <prvInitialiseNewTask+0x114>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800318a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800318c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800318e:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8003190:	bf00      	nop
 8003192:	3720      	adds	r7, #32
 8003194:	46bd      	mov	sp, r7
 8003196:	bd80      	pop	{r7, pc}

08003198 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8003198:	b5b0      	push	{r4, r5, r7, lr}
 800319a:	b086      	sub	sp, #24
 800319c:	af02      	add	r7, sp, #8
 800319e:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 80031a0:	f001 fb10 	bl	80047c4 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 80031a4:	4b4f      	ldr	r3, [pc, #316]	; (80032e4 <prvAddNewTaskToReadyList+0x14c>)
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	3301      	adds	r3, #1
 80031aa:	4a4e      	ldr	r2, [pc, #312]	; (80032e4 <prvAddNewTaskToReadyList+0x14c>)
 80031ac:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 80031ae:	4b4e      	ldr	r3, [pc, #312]	; (80032e8 <prvAddNewTaskToReadyList+0x150>)
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d109      	bne.n	80031ca <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 80031b6:	4a4c      	ldr	r2, [pc, #304]	; (80032e8 <prvAddNewTaskToReadyList+0x150>)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80031bc:	4b49      	ldr	r3, [pc, #292]	; (80032e4 <prvAddNewTaskToReadyList+0x14c>)
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	2b01      	cmp	r3, #1
 80031c2:	d110      	bne.n	80031e6 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 80031c4:	f000 fd96 	bl	8003cf4 <prvInitialiseTaskLists>
 80031c8:	e00d      	b.n	80031e6 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 80031ca:	4b48      	ldr	r3, [pc, #288]	; (80032ec <prvAddNewTaskToReadyList+0x154>)
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d109      	bne.n	80031e6 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80031d2:	4b45      	ldr	r3, [pc, #276]	; (80032e8 <prvAddNewTaskToReadyList+0x150>)
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031dc:	429a      	cmp	r2, r3
 80031de:	d802      	bhi.n	80031e6 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 80031e0:	4a41      	ldr	r2, [pc, #260]	; (80032e8 <prvAddNewTaskToReadyList+0x150>)
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 80031e6:	4b42      	ldr	r3, [pc, #264]	; (80032f0 <prvAddNewTaskToReadyList+0x158>)
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	3301      	adds	r3, #1
 80031ec:	4a40      	ldr	r2, [pc, #256]	; (80032f0 <prvAddNewTaskToReadyList+0x158>)
 80031ee:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
        {
            /* Add a counter into the TCB for tracing only. */
            pxNewTCB->uxTCBNumber = uxTaskNumber;
 80031f0:	4b3f      	ldr	r3, [pc, #252]	; (80032f0 <prvAddNewTaskToReadyList+0x158>)
 80031f2:	681a      	ldr	r2, [r3, #0]
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	641a      	str	r2, [r3, #64]	; 0x40
        }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d016      	beq.n	800322c <prvAddNewTaskToReadyList+0x94>
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	4618      	mov	r0, r3
 8003202:	f003 fc0d 	bl	8006a20 <SEGGER_SYSVIEW_OnTaskCreate>
 8003206:	6878      	ldr	r0, [r7, #4]
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003216:	461d      	mov	r5, r3
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	461c      	mov	r4, r3
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003222:	1ae3      	subs	r3, r4, r3
 8003224:	9300      	str	r3, [sp, #0]
 8003226:	462b      	mov	r3, r5
 8003228:	f001 fe74 	bl	8004f14 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	4618      	mov	r0, r3
 8003230:	f003 fc7a 	bl	8006b28 <SEGGER_SYSVIEW_OnTaskStartReady>
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003238:	2201      	movs	r2, #1
 800323a:	409a      	lsls	r2, r3
 800323c:	4b2d      	ldr	r3, [pc, #180]	; (80032f4 <prvAddNewTaskToReadyList+0x15c>)
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	4313      	orrs	r3, r2
 8003242:	4a2c      	ldr	r2, [pc, #176]	; (80032f4 <prvAddNewTaskToReadyList+0x15c>)
 8003244:	6013      	str	r3, [r2, #0]
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800324a:	492b      	ldr	r1, [pc, #172]	; (80032f8 <prvAddNewTaskToReadyList+0x160>)
 800324c:	4613      	mov	r3, r2
 800324e:	009b      	lsls	r3, r3, #2
 8003250:	4413      	add	r3, r2
 8003252:	009b      	lsls	r3, r3, #2
 8003254:	440b      	add	r3, r1
 8003256:	3304      	adds	r3, #4
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	60fb      	str	r3, [r7, #12]
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	68fa      	ldr	r2, [r7, #12]
 8003260:	609a      	str	r2, [r3, #8]
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	689a      	ldr	r2, [r3, #8]
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	60da      	str	r2, [r3, #12]
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	689b      	ldr	r3, [r3, #8]
 800326e:	687a      	ldr	r2, [r7, #4]
 8003270:	3204      	adds	r2, #4
 8003272:	605a      	str	r2, [r3, #4]
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	1d1a      	adds	r2, r3, #4
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	609a      	str	r2, [r3, #8]
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003280:	4613      	mov	r3, r2
 8003282:	009b      	lsls	r3, r3, #2
 8003284:	4413      	add	r3, r2
 8003286:	009b      	lsls	r3, r3, #2
 8003288:	4a1b      	ldr	r2, [pc, #108]	; (80032f8 <prvAddNewTaskToReadyList+0x160>)
 800328a:	441a      	add	r2, r3
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	615a      	str	r2, [r3, #20]
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003294:	4918      	ldr	r1, [pc, #96]	; (80032f8 <prvAddNewTaskToReadyList+0x160>)
 8003296:	4613      	mov	r3, r2
 8003298:	009b      	lsls	r3, r3, #2
 800329a:	4413      	add	r3, r2
 800329c:	009b      	lsls	r3, r3, #2
 800329e:	440b      	add	r3, r1
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	1c59      	adds	r1, r3, #1
 80032a4:	4814      	ldr	r0, [pc, #80]	; (80032f8 <prvAddNewTaskToReadyList+0x160>)
 80032a6:	4613      	mov	r3, r2
 80032a8:	009b      	lsls	r3, r3, #2
 80032aa:	4413      	add	r3, r2
 80032ac:	009b      	lsls	r3, r3, #2
 80032ae:	4403      	add	r3, r0
 80032b0:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 80032b2:	f001 fab7 	bl	8004824 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 80032b6:	4b0d      	ldr	r3, [pc, #52]	; (80032ec <prvAddNewTaskToReadyList+0x154>)
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d00e      	beq.n	80032dc <prvAddNewTaskToReadyList+0x144>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80032be:	4b0a      	ldr	r3, [pc, #40]	; (80032e8 <prvAddNewTaskToReadyList+0x150>)
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032c8:	429a      	cmp	r2, r3
 80032ca:	d207      	bcs.n	80032dc <prvAddNewTaskToReadyList+0x144>
        {
            taskYIELD_IF_USING_PREEMPTION();
 80032cc:	4b0b      	ldr	r3, [pc, #44]	; (80032fc <prvAddNewTaskToReadyList+0x164>)
 80032ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80032d2:	601a      	str	r2, [r3, #0]
 80032d4:	f3bf 8f4f 	dsb	sy
 80032d8:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80032dc:	bf00      	nop
 80032de:	3710      	adds	r7, #16
 80032e0:	46bd      	mov	sp, r7
 80032e2:	bdb0      	pop	{r4, r5, r7, pc}
 80032e4:	20000228 	.word	0x20000228
 80032e8:	20000114 	.word	0x20000114
 80032ec:	20000234 	.word	0x20000234
 80032f0:	20000244 	.word	0x20000244
 80032f4:	20000230 	.word	0x20000230
 80032f8:	20000118 	.word	0x20000118
 80032fc:	e000ed04 	.word	0xe000ed04

08003300 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003300:	b580      	push	{r7, lr}
 8003302:	b086      	sub	sp, #24
 8003304:	af02      	add	r7, sp, #8
        }
    }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
    {
        /* The Idle task is being created using dynamically allocated RAM. */
        xReturn = xTaskCreate( prvIdleTask,
 8003306:	4b27      	ldr	r3, [pc, #156]	; (80033a4 <vTaskStartScheduler+0xa4>)
 8003308:	9301      	str	r3, [sp, #4]
 800330a:	2300      	movs	r3, #0
 800330c:	9300      	str	r3, [sp, #0]
 800330e:	2300      	movs	r3, #0
 8003310:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003314:	4924      	ldr	r1, [pc, #144]	; (80033a8 <vTaskStartScheduler+0xa8>)
 8003316:	4825      	ldr	r0, [pc, #148]	; (80033ac <vTaskStartScheduler+0xac>)
 8003318:	f7ff fe6a 	bl	8002ff0 <xTaskCreate>
 800331c:	60f8      	str	r0, [r7, #12]
    }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	2b01      	cmp	r3, #1
 8003322:	d102      	bne.n	800332a <vTaskStartScheduler+0x2a>
        {
            xReturn = xTimerCreateTimerTask();
 8003324:	f000 fe1e 	bl	8003f64 <xTimerCreateTimerTask>
 8003328:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	2b01      	cmp	r3, #1
 800332e:	d124      	bne.n	800337a <vTaskStartScheduler+0x7a>
        __asm volatile
 8003330:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003334:	f383 8811 	msr	BASEPRI, r3
 8003338:	f3bf 8f6f 	isb	sy
 800333c:	f3bf 8f4f 	dsb	sy
 8003340:	60bb      	str	r3, [r7, #8]
    }
 8003342:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 8003344:	4b1a      	ldr	r3, [pc, #104]	; (80033b0 <vTaskStartScheduler+0xb0>)
 8003346:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800334a:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 800334c:	4b19      	ldr	r3, [pc, #100]	; (80033b4 <vTaskStartScheduler+0xb4>)
 800334e:	2201      	movs	r2, #1
 8003350:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003352:	4b19      	ldr	r3, [pc, #100]	; (80033b8 <vTaskStartScheduler+0xb8>)
 8003354:	2200      	movs	r2, #0
 8003356:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 8003358:	4b18      	ldr	r3, [pc, #96]	; (80033bc <vTaskStartScheduler+0xbc>)
 800335a:	681a      	ldr	r2, [r3, #0]
 800335c:	4b11      	ldr	r3, [pc, #68]	; (80033a4 <vTaskStartScheduler+0xa4>)
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	429a      	cmp	r2, r3
 8003362:	d102      	bne.n	800336a <vTaskStartScheduler+0x6a>
 8003364:	f003 fb40 	bl	80069e8 <SEGGER_SYSVIEW_OnIdle>
 8003368:	e004      	b.n	8003374 <vTaskStartScheduler+0x74>
 800336a:	4b14      	ldr	r3, [pc, #80]	; (80033bc <vTaskStartScheduler+0xbc>)
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	4618      	mov	r0, r3
 8003370:	f003 fb98 	bl	8006aa4 <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        xPortStartScheduler();
 8003374:	f001 f906 	bl	8004584 <xPortStartScheduler>
 8003378:	e00e      	b.n	8003398 <vTaskStartScheduler+0x98>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003380:	d10a      	bne.n	8003398 <vTaskStartScheduler+0x98>
        __asm volatile
 8003382:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003386:	f383 8811 	msr	BASEPRI, r3
 800338a:	f3bf 8f6f 	isb	sy
 800338e:	f3bf 8f4f 	dsb	sy
 8003392:	607b      	str	r3, [r7, #4]
    }
 8003394:	bf00      	nop
 8003396:	e7fe      	b.n	8003396 <vTaskStartScheduler+0x96>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8003398:	4b09      	ldr	r3, [pc, #36]	; (80033c0 <vTaskStartScheduler+0xc0>)
 800339a:	681b      	ldr	r3, [r3, #0]
}
 800339c:	bf00      	nop
 800339e:	3710      	adds	r7, #16
 80033a0:	46bd      	mov	sp, r7
 80033a2:	bd80      	pop	{r7, pc}
 80033a4:	2000024c 	.word	0x2000024c
 80033a8:	08007850 	.word	0x08007850
 80033ac:	08003cc5 	.word	0x08003cc5
 80033b0:	20000248 	.word	0x20000248
 80033b4:	20000234 	.word	0x20000234
 80033b8:	2000022c 	.word	0x2000022c
 80033bc:	20000114 	.word	0x20000114
 80033c0:	2000000c 	.word	0x2000000c

080033c4 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80033c4:	b480      	push	{r7}
 80033c6:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 80033c8:	4b04      	ldr	r3, [pc, #16]	; (80033dc <vTaskSuspendAll+0x18>)
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	3301      	adds	r3, #1
 80033ce:	4a03      	ldr	r2, [pc, #12]	; (80033dc <vTaskSuspendAll+0x18>)
 80033d0:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 80033d2:	bf00      	nop
 80033d4:	46bd      	mov	sp, r7
 80033d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033da:	4770      	bx	lr
 80033dc:	20000250 	.word	0x20000250

080033e0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80033e0:	b580      	push	{r7, lr}
 80033e2:	b088      	sub	sp, #32
 80033e4:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 80033e6:	2300      	movs	r3, #0
 80033e8:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 80033ea:	2300      	movs	r3, #0
 80033ec:	61bb      	str	r3, [r7, #24]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 80033ee:	4b73      	ldr	r3, [pc, #460]	; (80035bc <xTaskResumeAll+0x1dc>)
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d10a      	bne.n	800340c <xTaskResumeAll+0x2c>
        __asm volatile
 80033f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033fa:	f383 8811 	msr	BASEPRI, r3
 80033fe:	f3bf 8f6f 	isb	sy
 8003402:	f3bf 8f4f 	dsb	sy
 8003406:	607b      	str	r3, [r7, #4]
    }
 8003408:	bf00      	nop
 800340a:	e7fe      	b.n	800340a <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 800340c:	f001 f9da 	bl	80047c4 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8003410:	4b6a      	ldr	r3, [pc, #424]	; (80035bc <xTaskResumeAll+0x1dc>)
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	3b01      	subs	r3, #1
 8003416:	4a69      	ldr	r2, [pc, #420]	; (80035bc <xTaskResumeAll+0x1dc>)
 8003418:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800341a:	4b68      	ldr	r3, [pc, #416]	; (80035bc <xTaskResumeAll+0x1dc>)
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	2b00      	cmp	r3, #0
 8003420:	f040 80c4 	bne.w	80035ac <xTaskResumeAll+0x1cc>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003424:	4b66      	ldr	r3, [pc, #408]	; (80035c0 <xTaskResumeAll+0x1e0>)
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	2b00      	cmp	r3, #0
 800342a:	f000 80bf 	beq.w	80035ac <xTaskResumeAll+0x1cc>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800342e:	e08e      	b.n	800354e <xTaskResumeAll+0x16e>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003430:	4b64      	ldr	r3, [pc, #400]	; (80035c4 <xTaskResumeAll+0x1e4>)
 8003432:	68db      	ldr	r3, [r3, #12]
 8003434:	68db      	ldr	r3, [r3, #12]
 8003436:	61fb      	str	r3, [r7, #28]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8003438:	69fb      	ldr	r3, [r7, #28]
 800343a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800343c:	613b      	str	r3, [r7, #16]
 800343e:	69fb      	ldr	r3, [r7, #28]
 8003440:	69db      	ldr	r3, [r3, #28]
 8003442:	69fa      	ldr	r2, [r7, #28]
 8003444:	6a12      	ldr	r2, [r2, #32]
 8003446:	609a      	str	r2, [r3, #8]
 8003448:	69fb      	ldr	r3, [r7, #28]
 800344a:	6a1b      	ldr	r3, [r3, #32]
 800344c:	69fa      	ldr	r2, [r7, #28]
 800344e:	69d2      	ldr	r2, [r2, #28]
 8003450:	605a      	str	r2, [r3, #4]
 8003452:	693b      	ldr	r3, [r7, #16]
 8003454:	685a      	ldr	r2, [r3, #4]
 8003456:	69fb      	ldr	r3, [r7, #28]
 8003458:	3318      	adds	r3, #24
 800345a:	429a      	cmp	r2, r3
 800345c:	d103      	bne.n	8003466 <xTaskResumeAll+0x86>
 800345e:	69fb      	ldr	r3, [r7, #28]
 8003460:	6a1a      	ldr	r2, [r3, #32]
 8003462:	693b      	ldr	r3, [r7, #16]
 8003464:	605a      	str	r2, [r3, #4]
 8003466:	69fb      	ldr	r3, [r7, #28]
 8003468:	2200      	movs	r2, #0
 800346a:	629a      	str	r2, [r3, #40]	; 0x28
 800346c:	693b      	ldr	r3, [r7, #16]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	1e5a      	subs	r2, r3, #1
 8003472:	693b      	ldr	r3, [r7, #16]
 8003474:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8003476:	69fb      	ldr	r3, [r7, #28]
 8003478:	695b      	ldr	r3, [r3, #20]
 800347a:	60fb      	str	r3, [r7, #12]
 800347c:	69fb      	ldr	r3, [r7, #28]
 800347e:	689b      	ldr	r3, [r3, #8]
 8003480:	69fa      	ldr	r2, [r7, #28]
 8003482:	68d2      	ldr	r2, [r2, #12]
 8003484:	609a      	str	r2, [r3, #8]
 8003486:	69fb      	ldr	r3, [r7, #28]
 8003488:	68db      	ldr	r3, [r3, #12]
 800348a:	69fa      	ldr	r2, [r7, #28]
 800348c:	6892      	ldr	r2, [r2, #8]
 800348e:	605a      	str	r2, [r3, #4]
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	685a      	ldr	r2, [r3, #4]
 8003494:	69fb      	ldr	r3, [r7, #28]
 8003496:	3304      	adds	r3, #4
 8003498:	429a      	cmp	r2, r3
 800349a:	d103      	bne.n	80034a4 <xTaskResumeAll+0xc4>
 800349c:	69fb      	ldr	r3, [r7, #28]
 800349e:	68da      	ldr	r2, [r3, #12]
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	605a      	str	r2, [r3, #4]
 80034a4:	69fb      	ldr	r3, [r7, #28]
 80034a6:	2200      	movs	r2, #0
 80034a8:	615a      	str	r2, [r3, #20]
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	1e5a      	subs	r2, r3, #1
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 80034b4:	69fb      	ldr	r3, [r7, #28]
 80034b6:	4618      	mov	r0, r3
 80034b8:	f003 fb36 	bl	8006b28 <SEGGER_SYSVIEW_OnTaskStartReady>
 80034bc:	69fb      	ldr	r3, [r7, #28]
 80034be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034c0:	2201      	movs	r2, #1
 80034c2:	409a      	lsls	r2, r3
 80034c4:	4b40      	ldr	r3, [pc, #256]	; (80035c8 <xTaskResumeAll+0x1e8>)
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	4313      	orrs	r3, r2
 80034ca:	4a3f      	ldr	r2, [pc, #252]	; (80035c8 <xTaskResumeAll+0x1e8>)
 80034cc:	6013      	str	r3, [r2, #0]
 80034ce:	69fb      	ldr	r3, [r7, #28]
 80034d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034d2:	493e      	ldr	r1, [pc, #248]	; (80035cc <xTaskResumeAll+0x1ec>)
 80034d4:	4613      	mov	r3, r2
 80034d6:	009b      	lsls	r3, r3, #2
 80034d8:	4413      	add	r3, r2
 80034da:	009b      	lsls	r3, r3, #2
 80034dc:	440b      	add	r3, r1
 80034de:	3304      	adds	r3, #4
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	60bb      	str	r3, [r7, #8]
 80034e4:	69fb      	ldr	r3, [r7, #28]
 80034e6:	68ba      	ldr	r2, [r7, #8]
 80034e8:	609a      	str	r2, [r3, #8]
 80034ea:	68bb      	ldr	r3, [r7, #8]
 80034ec:	689a      	ldr	r2, [r3, #8]
 80034ee:	69fb      	ldr	r3, [r7, #28]
 80034f0:	60da      	str	r2, [r3, #12]
 80034f2:	68bb      	ldr	r3, [r7, #8]
 80034f4:	689b      	ldr	r3, [r3, #8]
 80034f6:	69fa      	ldr	r2, [r7, #28]
 80034f8:	3204      	adds	r2, #4
 80034fa:	605a      	str	r2, [r3, #4]
 80034fc:	69fb      	ldr	r3, [r7, #28]
 80034fe:	1d1a      	adds	r2, r3, #4
 8003500:	68bb      	ldr	r3, [r7, #8]
 8003502:	609a      	str	r2, [r3, #8]
 8003504:	69fb      	ldr	r3, [r7, #28]
 8003506:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003508:	4613      	mov	r3, r2
 800350a:	009b      	lsls	r3, r3, #2
 800350c:	4413      	add	r3, r2
 800350e:	009b      	lsls	r3, r3, #2
 8003510:	4a2e      	ldr	r2, [pc, #184]	; (80035cc <xTaskResumeAll+0x1ec>)
 8003512:	441a      	add	r2, r3
 8003514:	69fb      	ldr	r3, [r7, #28]
 8003516:	615a      	str	r2, [r3, #20]
 8003518:	69fb      	ldr	r3, [r7, #28]
 800351a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800351c:	492b      	ldr	r1, [pc, #172]	; (80035cc <xTaskResumeAll+0x1ec>)
 800351e:	4613      	mov	r3, r2
 8003520:	009b      	lsls	r3, r3, #2
 8003522:	4413      	add	r3, r2
 8003524:	009b      	lsls	r3, r3, #2
 8003526:	440b      	add	r3, r1
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	1c59      	adds	r1, r3, #1
 800352c:	4827      	ldr	r0, [pc, #156]	; (80035cc <xTaskResumeAll+0x1ec>)
 800352e:	4613      	mov	r3, r2
 8003530:	009b      	lsls	r3, r3, #2
 8003532:	4413      	add	r3, r2
 8003534:	009b      	lsls	r3, r3, #2
 8003536:	4403      	add	r3, r0
 8003538:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800353a:	69fb      	ldr	r3, [r7, #28]
 800353c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800353e:	4b24      	ldr	r3, [pc, #144]	; (80035d0 <xTaskResumeAll+0x1f0>)
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003544:	429a      	cmp	r2, r3
 8003546:	d302      	bcc.n	800354e <xTaskResumeAll+0x16e>
                    {
                        xYieldPending = pdTRUE;
 8003548:	4b22      	ldr	r3, [pc, #136]	; (80035d4 <xTaskResumeAll+0x1f4>)
 800354a:	2201      	movs	r2, #1
 800354c:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800354e:	4b1d      	ldr	r3, [pc, #116]	; (80035c4 <xTaskResumeAll+0x1e4>)
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	2b00      	cmp	r3, #0
 8003554:	f47f af6c 	bne.w	8003430 <xTaskResumeAll+0x50>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8003558:	69fb      	ldr	r3, [r7, #28]
 800355a:	2b00      	cmp	r3, #0
 800355c:	d001      	beq.n	8003562 <xTaskResumeAll+0x182>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 800355e:	f000 fc47 	bl	8003df0 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003562:	4b1d      	ldr	r3, [pc, #116]	; (80035d8 <xTaskResumeAll+0x1f8>)
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	617b      	str	r3, [r7, #20]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8003568:	697b      	ldr	r3, [r7, #20]
 800356a:	2b00      	cmp	r3, #0
 800356c:	d010      	beq.n	8003590 <xTaskResumeAll+0x1b0>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 800356e:	f000 f859 	bl	8003624 <xTaskIncrementTick>
 8003572:	4603      	mov	r3, r0
 8003574:	2b00      	cmp	r3, #0
 8003576:	d002      	beq.n	800357e <xTaskResumeAll+0x19e>
                            {
                                xYieldPending = pdTRUE;
 8003578:	4b16      	ldr	r3, [pc, #88]	; (80035d4 <xTaskResumeAll+0x1f4>)
 800357a:	2201      	movs	r2, #1
 800357c:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 800357e:	697b      	ldr	r3, [r7, #20]
 8003580:	3b01      	subs	r3, #1
 8003582:	617b      	str	r3, [r7, #20]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8003584:	697b      	ldr	r3, [r7, #20]
 8003586:	2b00      	cmp	r3, #0
 8003588:	d1f1      	bne.n	800356e <xTaskResumeAll+0x18e>

                        xPendedTicks = 0;
 800358a:	4b13      	ldr	r3, [pc, #76]	; (80035d8 <xTaskResumeAll+0x1f8>)
 800358c:	2200      	movs	r2, #0
 800358e:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8003590:	4b10      	ldr	r3, [pc, #64]	; (80035d4 <xTaskResumeAll+0x1f4>)
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	2b00      	cmp	r3, #0
 8003596:	d009      	beq.n	80035ac <xTaskResumeAll+0x1cc>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                    {
                        xAlreadyYielded = pdTRUE;
 8003598:	2301      	movs	r3, #1
 800359a:	61bb      	str	r3, [r7, #24]
                    }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 800359c:	4b0f      	ldr	r3, [pc, #60]	; (80035dc <xTaskResumeAll+0x1fc>)
 800359e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80035a2:	601a      	str	r2, [r3, #0]
 80035a4:	f3bf 8f4f 	dsb	sy
 80035a8:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 80035ac:	f001 f93a 	bl	8004824 <vPortExitCritical>

    return xAlreadyYielded;
 80035b0:	69bb      	ldr	r3, [r7, #24]
}
 80035b2:	4618      	mov	r0, r3
 80035b4:	3720      	adds	r7, #32
 80035b6:	46bd      	mov	sp, r7
 80035b8:	bd80      	pop	{r7, pc}
 80035ba:	bf00      	nop
 80035bc:	20000250 	.word	0x20000250
 80035c0:	20000228 	.word	0x20000228
 80035c4:	200001e8 	.word	0x200001e8
 80035c8:	20000230 	.word	0x20000230
 80035cc:	20000118 	.word	0x20000118
 80035d0:	20000114 	.word	0x20000114
 80035d4:	2000023c 	.word	0x2000023c
 80035d8:	20000238 	.word	0x20000238
 80035dc:	e000ed04 	.word	0xe000ed04

080035e0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80035e0:	b480      	push	{r7}
 80035e2:	b083      	sub	sp, #12
 80035e4:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 80035e6:	4b05      	ldr	r3, [pc, #20]	; (80035fc <xTaskGetTickCount+0x1c>)
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 80035ec:	687b      	ldr	r3, [r7, #4]
}
 80035ee:	4618      	mov	r0, r3
 80035f0:	370c      	adds	r7, #12
 80035f2:	46bd      	mov	sp, r7
 80035f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f8:	4770      	bx	lr
 80035fa:	bf00      	nop
 80035fc:	2000022c 	.word	0x2000022c

08003600 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8003600:	b580      	push	{r7, lr}
 8003602:	b082      	sub	sp, #8
 8003604:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003606:	f001 f9c9 	bl	800499c <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800360a:	2300      	movs	r3, #0
 800360c:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 800360e:	4b04      	ldr	r3, [pc, #16]	; (8003620 <xTaskGetTickCountFromISR+0x20>)
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8003614:	683b      	ldr	r3, [r7, #0]
}
 8003616:	4618      	mov	r0, r3
 8003618:	3708      	adds	r7, #8
 800361a:	46bd      	mov	sp, r7
 800361c:	bd80      	pop	{r7, pc}
 800361e:	bf00      	nop
 8003620:	2000022c 	.word	0x2000022c

08003624 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003624:	b580      	push	{r7, lr}
 8003626:	b08a      	sub	sp, #40	; 0x28
 8003628:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 800362a:	2300      	movs	r3, #0
 800362c:	627b      	str	r3, [r7, #36]	; 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800362e:	4b7f      	ldr	r3, [pc, #508]	; (800382c <xTaskIncrementTick+0x208>)
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	2b00      	cmp	r3, #0
 8003634:	f040 80f0 	bne.w	8003818 <xTaskIncrementTick+0x1f4>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003638:	4b7d      	ldr	r3, [pc, #500]	; (8003830 <xTaskIncrementTick+0x20c>)
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	3301      	adds	r3, #1
 800363e:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8003640:	4a7b      	ldr	r2, [pc, #492]	; (8003830 <xTaskIncrementTick+0x20c>)
 8003642:	6a3b      	ldr	r3, [r7, #32]
 8003644:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003646:	6a3b      	ldr	r3, [r7, #32]
 8003648:	2b00      	cmp	r3, #0
 800364a:	d120      	bne.n	800368e <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 800364c:	4b79      	ldr	r3, [pc, #484]	; (8003834 <xTaskIncrementTick+0x210>)
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	2b00      	cmp	r3, #0
 8003654:	d00a      	beq.n	800366c <xTaskIncrementTick+0x48>
        __asm volatile
 8003656:	f04f 0350 	mov.w	r3, #80	; 0x50
 800365a:	f383 8811 	msr	BASEPRI, r3
 800365e:	f3bf 8f6f 	isb	sy
 8003662:	f3bf 8f4f 	dsb	sy
 8003666:	607b      	str	r3, [r7, #4]
    }
 8003668:	bf00      	nop
 800366a:	e7fe      	b.n	800366a <xTaskIncrementTick+0x46>
 800366c:	4b71      	ldr	r3, [pc, #452]	; (8003834 <xTaskIncrementTick+0x210>)
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	61fb      	str	r3, [r7, #28]
 8003672:	4b71      	ldr	r3, [pc, #452]	; (8003838 <xTaskIncrementTick+0x214>)
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	4a6f      	ldr	r2, [pc, #444]	; (8003834 <xTaskIncrementTick+0x210>)
 8003678:	6013      	str	r3, [r2, #0]
 800367a:	4a6f      	ldr	r2, [pc, #444]	; (8003838 <xTaskIncrementTick+0x214>)
 800367c:	69fb      	ldr	r3, [r7, #28]
 800367e:	6013      	str	r3, [r2, #0]
 8003680:	4b6e      	ldr	r3, [pc, #440]	; (800383c <xTaskIncrementTick+0x218>)
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	3301      	adds	r3, #1
 8003686:	4a6d      	ldr	r2, [pc, #436]	; (800383c <xTaskIncrementTick+0x218>)
 8003688:	6013      	str	r3, [r2, #0]
 800368a:	f000 fbb1 	bl	8003df0 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 800368e:	4b6c      	ldr	r3, [pc, #432]	; (8003840 <xTaskIncrementTick+0x21c>)
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	6a3a      	ldr	r2, [r7, #32]
 8003694:	429a      	cmp	r2, r3
 8003696:	f0c0 80aa 	bcc.w	80037ee <xTaskIncrementTick+0x1ca>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800369a:	4b66      	ldr	r3, [pc, #408]	; (8003834 <xTaskIncrementTick+0x210>)
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d104      	bne.n	80036ae <xTaskIncrementTick+0x8a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80036a4:	4b66      	ldr	r3, [pc, #408]	; (8003840 <xTaskIncrementTick+0x21c>)
 80036a6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80036aa:	601a      	str	r2, [r3, #0]
                    break;
 80036ac:	e09f      	b.n	80037ee <xTaskIncrementTick+0x1ca>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80036ae:	4b61      	ldr	r3, [pc, #388]	; (8003834 <xTaskIncrementTick+0x210>)
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	68db      	ldr	r3, [r3, #12]
 80036b4:	68db      	ldr	r3, [r3, #12]
 80036b6:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80036b8:	69bb      	ldr	r3, [r7, #24]
 80036ba:	685b      	ldr	r3, [r3, #4]
 80036bc:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 80036be:	6a3a      	ldr	r2, [r7, #32]
 80036c0:	697b      	ldr	r3, [r7, #20]
 80036c2:	429a      	cmp	r2, r3
 80036c4:	d203      	bcs.n	80036ce <xTaskIncrementTick+0xaa>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 80036c6:	4a5e      	ldr	r2, [pc, #376]	; (8003840 <xTaskIncrementTick+0x21c>)
 80036c8:	697b      	ldr	r3, [r7, #20]
 80036ca:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 80036cc:	e08f      	b.n	80037ee <xTaskIncrementTick+0x1ca>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 80036ce:	69bb      	ldr	r3, [r7, #24]
 80036d0:	695b      	ldr	r3, [r3, #20]
 80036d2:	613b      	str	r3, [r7, #16]
 80036d4:	69bb      	ldr	r3, [r7, #24]
 80036d6:	689b      	ldr	r3, [r3, #8]
 80036d8:	69ba      	ldr	r2, [r7, #24]
 80036da:	68d2      	ldr	r2, [r2, #12]
 80036dc:	609a      	str	r2, [r3, #8]
 80036de:	69bb      	ldr	r3, [r7, #24]
 80036e0:	68db      	ldr	r3, [r3, #12]
 80036e2:	69ba      	ldr	r2, [r7, #24]
 80036e4:	6892      	ldr	r2, [r2, #8]
 80036e6:	605a      	str	r2, [r3, #4]
 80036e8:	693b      	ldr	r3, [r7, #16]
 80036ea:	685a      	ldr	r2, [r3, #4]
 80036ec:	69bb      	ldr	r3, [r7, #24]
 80036ee:	3304      	adds	r3, #4
 80036f0:	429a      	cmp	r2, r3
 80036f2:	d103      	bne.n	80036fc <xTaskIncrementTick+0xd8>
 80036f4:	69bb      	ldr	r3, [r7, #24]
 80036f6:	68da      	ldr	r2, [r3, #12]
 80036f8:	693b      	ldr	r3, [r7, #16]
 80036fa:	605a      	str	r2, [r3, #4]
 80036fc:	69bb      	ldr	r3, [r7, #24]
 80036fe:	2200      	movs	r2, #0
 8003700:	615a      	str	r2, [r3, #20]
 8003702:	693b      	ldr	r3, [r7, #16]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	1e5a      	subs	r2, r3, #1
 8003708:	693b      	ldr	r3, [r7, #16]
 800370a:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800370c:	69bb      	ldr	r3, [r7, #24]
 800370e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003710:	2b00      	cmp	r3, #0
 8003712:	d01e      	beq.n	8003752 <xTaskIncrementTick+0x12e>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8003714:	69bb      	ldr	r3, [r7, #24]
 8003716:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003718:	60fb      	str	r3, [r7, #12]
 800371a:	69bb      	ldr	r3, [r7, #24]
 800371c:	69db      	ldr	r3, [r3, #28]
 800371e:	69ba      	ldr	r2, [r7, #24]
 8003720:	6a12      	ldr	r2, [r2, #32]
 8003722:	609a      	str	r2, [r3, #8]
 8003724:	69bb      	ldr	r3, [r7, #24]
 8003726:	6a1b      	ldr	r3, [r3, #32]
 8003728:	69ba      	ldr	r2, [r7, #24]
 800372a:	69d2      	ldr	r2, [r2, #28]
 800372c:	605a      	str	r2, [r3, #4]
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	685a      	ldr	r2, [r3, #4]
 8003732:	69bb      	ldr	r3, [r7, #24]
 8003734:	3318      	adds	r3, #24
 8003736:	429a      	cmp	r2, r3
 8003738:	d103      	bne.n	8003742 <xTaskIncrementTick+0x11e>
 800373a:	69bb      	ldr	r3, [r7, #24]
 800373c:	6a1a      	ldr	r2, [r3, #32]
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	605a      	str	r2, [r3, #4]
 8003742:	69bb      	ldr	r3, [r7, #24]
 8003744:	2200      	movs	r2, #0
 8003746:	629a      	str	r2, [r3, #40]	; 0x28
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	1e5a      	subs	r2, r3, #1
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8003752:	69bb      	ldr	r3, [r7, #24]
 8003754:	4618      	mov	r0, r3
 8003756:	f003 f9e7 	bl	8006b28 <SEGGER_SYSVIEW_OnTaskStartReady>
 800375a:	69bb      	ldr	r3, [r7, #24]
 800375c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800375e:	2201      	movs	r2, #1
 8003760:	409a      	lsls	r2, r3
 8003762:	4b38      	ldr	r3, [pc, #224]	; (8003844 <xTaskIncrementTick+0x220>)
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	4313      	orrs	r3, r2
 8003768:	4a36      	ldr	r2, [pc, #216]	; (8003844 <xTaskIncrementTick+0x220>)
 800376a:	6013      	str	r3, [r2, #0]
 800376c:	69bb      	ldr	r3, [r7, #24]
 800376e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003770:	4935      	ldr	r1, [pc, #212]	; (8003848 <xTaskIncrementTick+0x224>)
 8003772:	4613      	mov	r3, r2
 8003774:	009b      	lsls	r3, r3, #2
 8003776:	4413      	add	r3, r2
 8003778:	009b      	lsls	r3, r3, #2
 800377a:	440b      	add	r3, r1
 800377c:	3304      	adds	r3, #4
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	60bb      	str	r3, [r7, #8]
 8003782:	69bb      	ldr	r3, [r7, #24]
 8003784:	68ba      	ldr	r2, [r7, #8]
 8003786:	609a      	str	r2, [r3, #8]
 8003788:	68bb      	ldr	r3, [r7, #8]
 800378a:	689a      	ldr	r2, [r3, #8]
 800378c:	69bb      	ldr	r3, [r7, #24]
 800378e:	60da      	str	r2, [r3, #12]
 8003790:	68bb      	ldr	r3, [r7, #8]
 8003792:	689b      	ldr	r3, [r3, #8]
 8003794:	69ba      	ldr	r2, [r7, #24]
 8003796:	3204      	adds	r2, #4
 8003798:	605a      	str	r2, [r3, #4]
 800379a:	69bb      	ldr	r3, [r7, #24]
 800379c:	1d1a      	adds	r2, r3, #4
 800379e:	68bb      	ldr	r3, [r7, #8]
 80037a0:	609a      	str	r2, [r3, #8]
 80037a2:	69bb      	ldr	r3, [r7, #24]
 80037a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037a6:	4613      	mov	r3, r2
 80037a8:	009b      	lsls	r3, r3, #2
 80037aa:	4413      	add	r3, r2
 80037ac:	009b      	lsls	r3, r3, #2
 80037ae:	4a26      	ldr	r2, [pc, #152]	; (8003848 <xTaskIncrementTick+0x224>)
 80037b0:	441a      	add	r2, r3
 80037b2:	69bb      	ldr	r3, [r7, #24]
 80037b4:	615a      	str	r2, [r3, #20]
 80037b6:	69bb      	ldr	r3, [r7, #24]
 80037b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037ba:	4923      	ldr	r1, [pc, #140]	; (8003848 <xTaskIncrementTick+0x224>)
 80037bc:	4613      	mov	r3, r2
 80037be:	009b      	lsls	r3, r3, #2
 80037c0:	4413      	add	r3, r2
 80037c2:	009b      	lsls	r3, r3, #2
 80037c4:	440b      	add	r3, r1
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	1c59      	adds	r1, r3, #1
 80037ca:	481f      	ldr	r0, [pc, #124]	; (8003848 <xTaskIncrementTick+0x224>)
 80037cc:	4613      	mov	r3, r2
 80037ce:	009b      	lsls	r3, r3, #2
 80037d0:	4413      	add	r3, r2
 80037d2:	009b      	lsls	r3, r3, #2
 80037d4:	4403      	add	r3, r0
 80037d6:	6019      	str	r1, [r3, #0]
                         * task.
                         * The case of equal priority tasks sharing
                         * processing time (which happens when both
                         * preemption and time slicing are on) is
                         * handled below.*/
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80037d8:	69bb      	ldr	r3, [r7, #24]
 80037da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037dc:	4b1b      	ldr	r3, [pc, #108]	; (800384c <xTaskIncrementTick+0x228>)
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037e2:	429a      	cmp	r2, r3
 80037e4:	f67f af59 	bls.w	800369a <xTaskIncrementTick+0x76>
                        {
                            xSwitchRequired = pdTRUE;
 80037e8:	2301      	movs	r3, #1
 80037ea:	627b      	str	r3, [r7, #36]	; 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80037ec:	e755      	b.n	800369a <xTaskIncrementTick+0x76>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80037ee:	4b17      	ldr	r3, [pc, #92]	; (800384c <xTaskIncrementTick+0x228>)
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037f4:	4914      	ldr	r1, [pc, #80]	; (8003848 <xTaskIncrementTick+0x224>)
 80037f6:	4613      	mov	r3, r2
 80037f8:	009b      	lsls	r3, r3, #2
 80037fa:	4413      	add	r3, r2
 80037fc:	009b      	lsls	r3, r3, #2
 80037fe:	440b      	add	r3, r1
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	2b01      	cmp	r3, #1
 8003804:	d901      	bls.n	800380a <xTaskIncrementTick+0x1e6>
            {
                xSwitchRequired = pdTRUE;
 8003806:	2301      	movs	r3, #1
 8003808:	627b      	str	r3, [r7, #36]	; 0x24
        }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
        {
            if( xYieldPending != pdFALSE )
 800380a:	4b11      	ldr	r3, [pc, #68]	; (8003850 <xTaskIncrementTick+0x22c>)
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	2b00      	cmp	r3, #0
 8003810:	d007      	beq.n	8003822 <xTaskIncrementTick+0x1fe>
            {
                xSwitchRequired = pdTRUE;
 8003812:	2301      	movs	r3, #1
 8003814:	627b      	str	r3, [r7, #36]	; 0x24
 8003816:	e004      	b.n	8003822 <xTaskIncrementTick+0x1fe>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8003818:	4b0e      	ldr	r3, [pc, #56]	; (8003854 <xTaskIncrementTick+0x230>)
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	3301      	adds	r3, #1
 800381e:	4a0d      	ldr	r2, [pc, #52]	; (8003854 <xTaskIncrementTick+0x230>)
 8003820:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 8003822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003824:	4618      	mov	r0, r3
 8003826:	3728      	adds	r7, #40	; 0x28
 8003828:	46bd      	mov	sp, r7
 800382a:	bd80      	pop	{r7, pc}
 800382c:	20000250 	.word	0x20000250
 8003830:	2000022c 	.word	0x2000022c
 8003834:	200001e0 	.word	0x200001e0
 8003838:	200001e4 	.word	0x200001e4
 800383c:	20000240 	.word	0x20000240
 8003840:	20000248 	.word	0x20000248
 8003844:	20000230 	.word	0x20000230
 8003848:	20000118 	.word	0x20000118
 800384c:	20000114 	.word	0x20000114
 8003850:	2000023c 	.word	0x2000023c
 8003854:	20000238 	.word	0x20000238

08003858 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003858:	b580      	push	{r7, lr}
 800385a:	b086      	sub	sp, #24
 800385c:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800385e:	4b2d      	ldr	r3, [pc, #180]	; (8003914 <vTaskSwitchContext+0xbc>)
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	2b00      	cmp	r3, #0
 8003864:	d003      	beq.n	800386e <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8003866:	4b2c      	ldr	r3, [pc, #176]	; (8003918 <vTaskSwitchContext+0xc0>)
 8003868:	2201      	movs	r2, #1
 800386a:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 800386c:	e04d      	b.n	800390a <vTaskSwitchContext+0xb2>
        xYieldPending = pdFALSE;
 800386e:	4b2a      	ldr	r3, [pc, #168]	; (8003918 <vTaskSwitchContext+0xc0>)
 8003870:	2200      	movs	r2, #0
 8003872:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003874:	4b29      	ldr	r3, [pc, #164]	; (800391c <vTaskSwitchContext+0xc4>)
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	fab3 f383 	clz	r3, r3
 8003880:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8003882:	7afb      	ldrb	r3, [r7, #11]
 8003884:	f1c3 031f 	rsb	r3, r3, #31
 8003888:	617b      	str	r3, [r7, #20]
 800388a:	4925      	ldr	r1, [pc, #148]	; (8003920 <vTaskSwitchContext+0xc8>)
 800388c:	697a      	ldr	r2, [r7, #20]
 800388e:	4613      	mov	r3, r2
 8003890:	009b      	lsls	r3, r3, #2
 8003892:	4413      	add	r3, r2
 8003894:	009b      	lsls	r3, r3, #2
 8003896:	440b      	add	r3, r1
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	2b00      	cmp	r3, #0
 800389c:	d10a      	bne.n	80038b4 <vTaskSwitchContext+0x5c>
        __asm volatile
 800389e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038a2:	f383 8811 	msr	BASEPRI, r3
 80038a6:	f3bf 8f6f 	isb	sy
 80038aa:	f3bf 8f4f 	dsb	sy
 80038ae:	607b      	str	r3, [r7, #4]
    }
 80038b0:	bf00      	nop
 80038b2:	e7fe      	b.n	80038b2 <vTaskSwitchContext+0x5a>
 80038b4:	697a      	ldr	r2, [r7, #20]
 80038b6:	4613      	mov	r3, r2
 80038b8:	009b      	lsls	r3, r3, #2
 80038ba:	4413      	add	r3, r2
 80038bc:	009b      	lsls	r3, r3, #2
 80038be:	4a18      	ldr	r2, [pc, #96]	; (8003920 <vTaskSwitchContext+0xc8>)
 80038c0:	4413      	add	r3, r2
 80038c2:	613b      	str	r3, [r7, #16]
 80038c4:	693b      	ldr	r3, [r7, #16]
 80038c6:	685b      	ldr	r3, [r3, #4]
 80038c8:	685a      	ldr	r2, [r3, #4]
 80038ca:	693b      	ldr	r3, [r7, #16]
 80038cc:	605a      	str	r2, [r3, #4]
 80038ce:	693b      	ldr	r3, [r7, #16]
 80038d0:	685a      	ldr	r2, [r3, #4]
 80038d2:	693b      	ldr	r3, [r7, #16]
 80038d4:	3308      	adds	r3, #8
 80038d6:	429a      	cmp	r2, r3
 80038d8:	d104      	bne.n	80038e4 <vTaskSwitchContext+0x8c>
 80038da:	693b      	ldr	r3, [r7, #16]
 80038dc:	685b      	ldr	r3, [r3, #4]
 80038de:	685a      	ldr	r2, [r3, #4]
 80038e0:	693b      	ldr	r3, [r7, #16]
 80038e2:	605a      	str	r2, [r3, #4]
 80038e4:	693b      	ldr	r3, [r7, #16]
 80038e6:	685b      	ldr	r3, [r3, #4]
 80038e8:	68db      	ldr	r3, [r3, #12]
 80038ea:	4a0e      	ldr	r2, [pc, #56]	; (8003924 <vTaskSwitchContext+0xcc>)
 80038ec:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 80038ee:	4b0d      	ldr	r3, [pc, #52]	; (8003924 <vTaskSwitchContext+0xcc>)
 80038f0:	681a      	ldr	r2, [r3, #0]
 80038f2:	4b0d      	ldr	r3, [pc, #52]	; (8003928 <vTaskSwitchContext+0xd0>)
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	429a      	cmp	r2, r3
 80038f8:	d102      	bne.n	8003900 <vTaskSwitchContext+0xa8>
 80038fa:	f003 f875 	bl	80069e8 <SEGGER_SYSVIEW_OnIdle>
}
 80038fe:	e004      	b.n	800390a <vTaskSwitchContext+0xb2>
        traceTASK_SWITCHED_IN();
 8003900:	4b08      	ldr	r3, [pc, #32]	; (8003924 <vTaskSwitchContext+0xcc>)
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	4618      	mov	r0, r3
 8003906:	f003 f8cd 	bl	8006aa4 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 800390a:	bf00      	nop
 800390c:	3718      	adds	r7, #24
 800390e:	46bd      	mov	sp, r7
 8003910:	bd80      	pop	{r7, pc}
 8003912:	bf00      	nop
 8003914:	20000250 	.word	0x20000250
 8003918:	2000023c 	.word	0x2000023c
 800391c:	20000230 	.word	0x20000230
 8003920:	20000118 	.word	0x20000118
 8003924:	20000114 	.word	0x20000114
 8003928:	2000024c 	.word	0x2000024c

0800392c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 800392c:	b580      	push	{r7, lr}
 800392e:	b084      	sub	sp, #16
 8003930:	af00      	add	r7, sp, #0
 8003932:	6078      	str	r0, [r7, #4]
 8003934:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	2b00      	cmp	r3, #0
 800393a:	d10a      	bne.n	8003952 <vTaskPlaceOnEventList+0x26>
        __asm volatile
 800393c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003940:	f383 8811 	msr	BASEPRI, r3
 8003944:	f3bf 8f6f 	isb	sy
 8003948:	f3bf 8f4f 	dsb	sy
 800394c:	60fb      	str	r3, [r7, #12]
    }
 800394e:	bf00      	nop
 8003950:	e7fe      	b.n	8003950 <vTaskPlaceOnEventList+0x24>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003952:	4b07      	ldr	r3, [pc, #28]	; (8003970 <vTaskPlaceOnEventList+0x44>)
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	3318      	adds	r3, #24
 8003958:	4619      	mov	r1, r3
 800395a:	6878      	ldr	r0, [r7, #4]
 800395c:	f7fe ffb5 	bl	80028ca <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003960:	2101      	movs	r1, #1
 8003962:	6838      	ldr	r0, [r7, #0]
 8003964:	f000 fa7e 	bl	8003e64 <prvAddCurrentTaskToDelayedList>
}
 8003968:	bf00      	nop
 800396a:	3710      	adds	r7, #16
 800396c:	46bd      	mov	sp, r7
 800396e:	bd80      	pop	{r7, pc}
 8003970:	20000114 	.word	0x20000114

08003974 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8003974:	b580      	push	{r7, lr}
 8003976:	b086      	sub	sp, #24
 8003978:	af00      	add	r7, sp, #0
 800397a:	60f8      	str	r0, [r7, #12]
 800397c:	60b9      	str	r1, [r7, #8]
 800397e:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	2b00      	cmp	r3, #0
 8003984:	d10a      	bne.n	800399c <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 8003986:	f04f 0350 	mov.w	r3, #80	; 0x50
 800398a:	f383 8811 	msr	BASEPRI, r3
 800398e:	f3bf 8f6f 	isb	sy
 8003992:	f3bf 8f4f 	dsb	sy
 8003996:	613b      	str	r3, [r7, #16]
    }
 8003998:	bf00      	nop
 800399a:	e7fe      	b.n	800399a <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	685b      	ldr	r3, [r3, #4]
 80039a0:	617b      	str	r3, [r7, #20]
 80039a2:	4b17      	ldr	r3, [pc, #92]	; (8003a00 <vTaskPlaceOnEventListRestricted+0x8c>)
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	697a      	ldr	r2, [r7, #20]
 80039a8:	61da      	str	r2, [r3, #28]
 80039aa:	4b15      	ldr	r3, [pc, #84]	; (8003a00 <vTaskPlaceOnEventListRestricted+0x8c>)
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	697a      	ldr	r2, [r7, #20]
 80039b0:	6892      	ldr	r2, [r2, #8]
 80039b2:	621a      	str	r2, [r3, #32]
 80039b4:	4b12      	ldr	r3, [pc, #72]	; (8003a00 <vTaskPlaceOnEventListRestricted+0x8c>)
 80039b6:	681a      	ldr	r2, [r3, #0]
 80039b8:	697b      	ldr	r3, [r7, #20]
 80039ba:	689b      	ldr	r3, [r3, #8]
 80039bc:	3218      	adds	r2, #24
 80039be:	605a      	str	r2, [r3, #4]
 80039c0:	4b0f      	ldr	r3, [pc, #60]	; (8003a00 <vTaskPlaceOnEventListRestricted+0x8c>)
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f103 0218 	add.w	r2, r3, #24
 80039c8:	697b      	ldr	r3, [r7, #20]
 80039ca:	609a      	str	r2, [r3, #8]
 80039cc:	4b0c      	ldr	r3, [pc, #48]	; (8003a00 <vTaskPlaceOnEventListRestricted+0x8c>)
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	68fa      	ldr	r2, [r7, #12]
 80039d2:	629a      	str	r2, [r3, #40]	; 0x28
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	1c5a      	adds	r2, r3, #1
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d002      	beq.n	80039ea <vTaskPlaceOnEventListRestricted+0x76>
        {
            xTicksToWait = portMAX_DELAY;
 80039e4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80039e8:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 80039ea:	2024      	movs	r0, #36	; 0x24
 80039ec:	f002 fafe 	bl	8005fec <SEGGER_SYSVIEW_RecordVoid>
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80039f0:	6879      	ldr	r1, [r7, #4]
 80039f2:	68b8      	ldr	r0, [r7, #8]
 80039f4:	f000 fa36 	bl	8003e64 <prvAddCurrentTaskToDelayedList>
    }
 80039f8:	bf00      	nop
 80039fa:	3718      	adds	r7, #24
 80039fc:	46bd      	mov	sp, r7
 80039fe:	bd80      	pop	{r7, pc}
 8003a00:	20000114 	.word	0x20000114

08003a04 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003a04:	b580      	push	{r7, lr}
 8003a06:	b08a      	sub	sp, #40	; 0x28
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	68db      	ldr	r3, [r3, #12]
 8003a10:	68db      	ldr	r3, [r3, #12]
 8003a12:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
 8003a14:	6a3b      	ldr	r3, [r7, #32]
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d10a      	bne.n	8003a30 <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 8003a1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a1e:	f383 8811 	msr	BASEPRI, r3
 8003a22:	f3bf 8f6f 	isb	sy
 8003a26:	f3bf 8f4f 	dsb	sy
 8003a2a:	60fb      	str	r3, [r7, #12]
    }
 8003a2c:	bf00      	nop
 8003a2e:	e7fe      	b.n	8003a2e <xTaskRemoveFromEventList+0x2a>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 8003a30:	6a3b      	ldr	r3, [r7, #32]
 8003a32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a34:	61fb      	str	r3, [r7, #28]
 8003a36:	6a3b      	ldr	r3, [r7, #32]
 8003a38:	69db      	ldr	r3, [r3, #28]
 8003a3a:	6a3a      	ldr	r2, [r7, #32]
 8003a3c:	6a12      	ldr	r2, [r2, #32]
 8003a3e:	609a      	str	r2, [r3, #8]
 8003a40:	6a3b      	ldr	r3, [r7, #32]
 8003a42:	6a1b      	ldr	r3, [r3, #32]
 8003a44:	6a3a      	ldr	r2, [r7, #32]
 8003a46:	69d2      	ldr	r2, [r2, #28]
 8003a48:	605a      	str	r2, [r3, #4]
 8003a4a:	69fb      	ldr	r3, [r7, #28]
 8003a4c:	685a      	ldr	r2, [r3, #4]
 8003a4e:	6a3b      	ldr	r3, [r7, #32]
 8003a50:	3318      	adds	r3, #24
 8003a52:	429a      	cmp	r2, r3
 8003a54:	d103      	bne.n	8003a5e <xTaskRemoveFromEventList+0x5a>
 8003a56:	6a3b      	ldr	r3, [r7, #32]
 8003a58:	6a1a      	ldr	r2, [r3, #32]
 8003a5a:	69fb      	ldr	r3, [r7, #28]
 8003a5c:	605a      	str	r2, [r3, #4]
 8003a5e:	6a3b      	ldr	r3, [r7, #32]
 8003a60:	2200      	movs	r2, #0
 8003a62:	629a      	str	r2, [r3, #40]	; 0x28
 8003a64:	69fb      	ldr	r3, [r7, #28]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	1e5a      	subs	r2, r3, #1
 8003a6a:	69fb      	ldr	r3, [r7, #28]
 8003a6c:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003a6e:	4b4b      	ldr	r3, [pc, #300]	; (8003b9c <xTaskRemoveFromEventList+0x198>)
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d162      	bne.n	8003b3c <xTaskRemoveFromEventList+0x138>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 8003a76:	6a3b      	ldr	r3, [r7, #32]
 8003a78:	695b      	ldr	r3, [r3, #20]
 8003a7a:	617b      	str	r3, [r7, #20]
 8003a7c:	6a3b      	ldr	r3, [r7, #32]
 8003a7e:	689b      	ldr	r3, [r3, #8]
 8003a80:	6a3a      	ldr	r2, [r7, #32]
 8003a82:	68d2      	ldr	r2, [r2, #12]
 8003a84:	609a      	str	r2, [r3, #8]
 8003a86:	6a3b      	ldr	r3, [r7, #32]
 8003a88:	68db      	ldr	r3, [r3, #12]
 8003a8a:	6a3a      	ldr	r2, [r7, #32]
 8003a8c:	6892      	ldr	r2, [r2, #8]
 8003a8e:	605a      	str	r2, [r3, #4]
 8003a90:	697b      	ldr	r3, [r7, #20]
 8003a92:	685a      	ldr	r2, [r3, #4]
 8003a94:	6a3b      	ldr	r3, [r7, #32]
 8003a96:	3304      	adds	r3, #4
 8003a98:	429a      	cmp	r2, r3
 8003a9a:	d103      	bne.n	8003aa4 <xTaskRemoveFromEventList+0xa0>
 8003a9c:	6a3b      	ldr	r3, [r7, #32]
 8003a9e:	68da      	ldr	r2, [r3, #12]
 8003aa0:	697b      	ldr	r3, [r7, #20]
 8003aa2:	605a      	str	r2, [r3, #4]
 8003aa4:	6a3b      	ldr	r3, [r7, #32]
 8003aa6:	2200      	movs	r2, #0
 8003aa8:	615a      	str	r2, [r3, #20]
 8003aaa:	697b      	ldr	r3, [r7, #20]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	1e5a      	subs	r2, r3, #1
 8003ab0:	697b      	ldr	r3, [r7, #20]
 8003ab2:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 8003ab4:	6a3b      	ldr	r3, [r7, #32]
 8003ab6:	4618      	mov	r0, r3
 8003ab8:	f003 f836 	bl	8006b28 <SEGGER_SYSVIEW_OnTaskStartReady>
 8003abc:	6a3b      	ldr	r3, [r7, #32]
 8003abe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ac0:	2201      	movs	r2, #1
 8003ac2:	409a      	lsls	r2, r3
 8003ac4:	4b36      	ldr	r3, [pc, #216]	; (8003ba0 <xTaskRemoveFromEventList+0x19c>)
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	4313      	orrs	r3, r2
 8003aca:	4a35      	ldr	r2, [pc, #212]	; (8003ba0 <xTaskRemoveFromEventList+0x19c>)
 8003acc:	6013      	str	r3, [r2, #0]
 8003ace:	6a3b      	ldr	r3, [r7, #32]
 8003ad0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ad2:	4934      	ldr	r1, [pc, #208]	; (8003ba4 <xTaskRemoveFromEventList+0x1a0>)
 8003ad4:	4613      	mov	r3, r2
 8003ad6:	009b      	lsls	r3, r3, #2
 8003ad8:	4413      	add	r3, r2
 8003ada:	009b      	lsls	r3, r3, #2
 8003adc:	440b      	add	r3, r1
 8003ade:	3304      	adds	r3, #4
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	613b      	str	r3, [r7, #16]
 8003ae4:	6a3b      	ldr	r3, [r7, #32]
 8003ae6:	693a      	ldr	r2, [r7, #16]
 8003ae8:	609a      	str	r2, [r3, #8]
 8003aea:	693b      	ldr	r3, [r7, #16]
 8003aec:	689a      	ldr	r2, [r3, #8]
 8003aee:	6a3b      	ldr	r3, [r7, #32]
 8003af0:	60da      	str	r2, [r3, #12]
 8003af2:	693b      	ldr	r3, [r7, #16]
 8003af4:	689b      	ldr	r3, [r3, #8]
 8003af6:	6a3a      	ldr	r2, [r7, #32]
 8003af8:	3204      	adds	r2, #4
 8003afa:	605a      	str	r2, [r3, #4]
 8003afc:	6a3b      	ldr	r3, [r7, #32]
 8003afe:	1d1a      	adds	r2, r3, #4
 8003b00:	693b      	ldr	r3, [r7, #16]
 8003b02:	609a      	str	r2, [r3, #8]
 8003b04:	6a3b      	ldr	r3, [r7, #32]
 8003b06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b08:	4613      	mov	r3, r2
 8003b0a:	009b      	lsls	r3, r3, #2
 8003b0c:	4413      	add	r3, r2
 8003b0e:	009b      	lsls	r3, r3, #2
 8003b10:	4a24      	ldr	r2, [pc, #144]	; (8003ba4 <xTaskRemoveFromEventList+0x1a0>)
 8003b12:	441a      	add	r2, r3
 8003b14:	6a3b      	ldr	r3, [r7, #32]
 8003b16:	615a      	str	r2, [r3, #20]
 8003b18:	6a3b      	ldr	r3, [r7, #32]
 8003b1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b1c:	4921      	ldr	r1, [pc, #132]	; (8003ba4 <xTaskRemoveFromEventList+0x1a0>)
 8003b1e:	4613      	mov	r3, r2
 8003b20:	009b      	lsls	r3, r3, #2
 8003b22:	4413      	add	r3, r2
 8003b24:	009b      	lsls	r3, r3, #2
 8003b26:	440b      	add	r3, r1
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	1c59      	adds	r1, r3, #1
 8003b2c:	481d      	ldr	r0, [pc, #116]	; (8003ba4 <xTaskRemoveFromEventList+0x1a0>)
 8003b2e:	4613      	mov	r3, r2
 8003b30:	009b      	lsls	r3, r3, #2
 8003b32:	4413      	add	r3, r2
 8003b34:	009b      	lsls	r3, r3, #2
 8003b36:	4403      	add	r3, r0
 8003b38:	6019      	str	r1, [r3, #0]
 8003b3a:	e01b      	b.n	8003b74 <xTaskRemoveFromEventList+0x170>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003b3c:	4b1a      	ldr	r3, [pc, #104]	; (8003ba8 <xTaskRemoveFromEventList+0x1a4>)
 8003b3e:	685b      	ldr	r3, [r3, #4]
 8003b40:	61bb      	str	r3, [r7, #24]
 8003b42:	6a3b      	ldr	r3, [r7, #32]
 8003b44:	69ba      	ldr	r2, [r7, #24]
 8003b46:	61da      	str	r2, [r3, #28]
 8003b48:	69bb      	ldr	r3, [r7, #24]
 8003b4a:	689a      	ldr	r2, [r3, #8]
 8003b4c:	6a3b      	ldr	r3, [r7, #32]
 8003b4e:	621a      	str	r2, [r3, #32]
 8003b50:	69bb      	ldr	r3, [r7, #24]
 8003b52:	689b      	ldr	r3, [r3, #8]
 8003b54:	6a3a      	ldr	r2, [r7, #32]
 8003b56:	3218      	adds	r2, #24
 8003b58:	605a      	str	r2, [r3, #4]
 8003b5a:	6a3b      	ldr	r3, [r7, #32]
 8003b5c:	f103 0218 	add.w	r2, r3, #24
 8003b60:	69bb      	ldr	r3, [r7, #24]
 8003b62:	609a      	str	r2, [r3, #8]
 8003b64:	6a3b      	ldr	r3, [r7, #32]
 8003b66:	4a10      	ldr	r2, [pc, #64]	; (8003ba8 <xTaskRemoveFromEventList+0x1a4>)
 8003b68:	629a      	str	r2, [r3, #40]	; 0x28
 8003b6a:	4b0f      	ldr	r3, [pc, #60]	; (8003ba8 <xTaskRemoveFromEventList+0x1a4>)
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	3301      	adds	r3, #1
 8003b70:	4a0d      	ldr	r2, [pc, #52]	; (8003ba8 <xTaskRemoveFromEventList+0x1a4>)
 8003b72:	6013      	str	r3, [r2, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003b74:	6a3b      	ldr	r3, [r7, #32]
 8003b76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b78:	4b0c      	ldr	r3, [pc, #48]	; (8003bac <xTaskRemoveFromEventList+0x1a8>)
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b7e:	429a      	cmp	r2, r3
 8003b80:	d905      	bls.n	8003b8e <xTaskRemoveFromEventList+0x18a>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8003b82:	2301      	movs	r3, #1
 8003b84:	627b      	str	r3, [r7, #36]	; 0x24

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8003b86:	4b0a      	ldr	r3, [pc, #40]	; (8003bb0 <xTaskRemoveFromEventList+0x1ac>)
 8003b88:	2201      	movs	r2, #1
 8003b8a:	601a      	str	r2, [r3, #0]
 8003b8c:	e001      	b.n	8003b92 <xTaskRemoveFromEventList+0x18e>
    }
    else
    {
        xReturn = pdFALSE;
 8003b8e:	2300      	movs	r3, #0
 8003b90:	627b      	str	r3, [r7, #36]	; 0x24
    }

    return xReturn;
 8003b92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003b94:	4618      	mov	r0, r3
 8003b96:	3728      	adds	r7, #40	; 0x28
 8003b98:	46bd      	mov	sp, r7
 8003b9a:	bd80      	pop	{r7, pc}
 8003b9c:	20000250 	.word	0x20000250
 8003ba0:	20000230 	.word	0x20000230
 8003ba4:	20000118 	.word	0x20000118
 8003ba8:	200001e8 	.word	0x200001e8
 8003bac:	20000114 	.word	0x20000114
 8003bb0:	2000023c 	.word	0x2000023c

08003bb4 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003bb4:	b480      	push	{r7}
 8003bb6:	b083      	sub	sp, #12
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003bbc:	4b06      	ldr	r3, [pc, #24]	; (8003bd8 <vTaskInternalSetTimeOutState+0x24>)
 8003bbe:	681a      	ldr	r2, [r3, #0]
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8003bc4:	4b05      	ldr	r3, [pc, #20]	; (8003bdc <vTaskInternalSetTimeOutState+0x28>)
 8003bc6:	681a      	ldr	r2, [r3, #0]
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	605a      	str	r2, [r3, #4]
}
 8003bcc:	bf00      	nop
 8003bce:	370c      	adds	r7, #12
 8003bd0:	46bd      	mov	sp, r7
 8003bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd6:	4770      	bx	lr
 8003bd8:	20000240 	.word	0x20000240
 8003bdc:	2000022c 	.word	0x2000022c

08003be0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8003be0:	b580      	push	{r7, lr}
 8003be2:	b088      	sub	sp, #32
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	6078      	str	r0, [r7, #4]
 8003be8:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d10a      	bne.n	8003c06 <xTaskCheckForTimeOut+0x26>
        __asm volatile
 8003bf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bf4:	f383 8811 	msr	BASEPRI, r3
 8003bf8:	f3bf 8f6f 	isb	sy
 8003bfc:	f3bf 8f4f 	dsb	sy
 8003c00:	613b      	str	r3, [r7, #16]
    }
 8003c02:	bf00      	nop
 8003c04:	e7fe      	b.n	8003c04 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 8003c06:	683b      	ldr	r3, [r7, #0]
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d10a      	bne.n	8003c22 <xTaskCheckForTimeOut+0x42>
        __asm volatile
 8003c0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c10:	f383 8811 	msr	BASEPRI, r3
 8003c14:	f3bf 8f6f 	isb	sy
 8003c18:	f3bf 8f4f 	dsb	sy
 8003c1c:	60fb      	str	r3, [r7, #12]
    }
 8003c1e:	bf00      	nop
 8003c20:	e7fe      	b.n	8003c20 <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 8003c22:	f000 fdcf 	bl	80047c4 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8003c26:	4b1f      	ldr	r3, [pc, #124]	; (8003ca4 <xTaskCheckForTimeOut+0xc4>)
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	685b      	ldr	r3, [r3, #4]
 8003c30:	69ba      	ldr	r2, [r7, #24]
 8003c32:	1ad3      	subs	r3, r2, r3
 8003c34:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8003c36:	683b      	ldr	r3, [r7, #0]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003c3e:	d102      	bne.n	8003c46 <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8003c40:	2300      	movs	r3, #0
 8003c42:	61fb      	str	r3, [r7, #28]
 8003c44:	e026      	b.n	8003c94 <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681a      	ldr	r2, [r3, #0]
 8003c4a:	4b17      	ldr	r3, [pc, #92]	; (8003ca8 <xTaskCheckForTimeOut+0xc8>)
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	429a      	cmp	r2, r3
 8003c50:	d00a      	beq.n	8003c68 <xTaskCheckForTimeOut+0x88>
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	685b      	ldr	r3, [r3, #4]
 8003c56:	69ba      	ldr	r2, [r7, #24]
 8003c58:	429a      	cmp	r2, r3
 8003c5a:	d305      	bcc.n	8003c68 <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8003c5c:	2301      	movs	r3, #1
 8003c5e:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8003c60:	683b      	ldr	r3, [r7, #0]
 8003c62:	2200      	movs	r2, #0
 8003c64:	601a      	str	r2, [r3, #0]
 8003c66:	e015      	b.n	8003c94 <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003c68:	683b      	ldr	r3, [r7, #0]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	697a      	ldr	r2, [r7, #20]
 8003c6e:	429a      	cmp	r2, r3
 8003c70:	d20b      	bcs.n	8003c8a <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8003c72:	683b      	ldr	r3, [r7, #0]
 8003c74:	681a      	ldr	r2, [r3, #0]
 8003c76:	697b      	ldr	r3, [r7, #20]
 8003c78:	1ad2      	subs	r2, r2, r3
 8003c7a:	683b      	ldr	r3, [r7, #0]
 8003c7c:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8003c7e:	6878      	ldr	r0, [r7, #4]
 8003c80:	f7ff ff98 	bl	8003bb4 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8003c84:	2300      	movs	r3, #0
 8003c86:	61fb      	str	r3, [r7, #28]
 8003c88:	e004      	b.n	8003c94 <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8003c8a:	683b      	ldr	r3, [r7, #0]
 8003c8c:	2200      	movs	r2, #0
 8003c8e:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8003c90:	2301      	movs	r3, #1
 8003c92:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8003c94:	f000 fdc6 	bl	8004824 <vPortExitCritical>

    return xReturn;
 8003c98:	69fb      	ldr	r3, [r7, #28]
}
 8003c9a:	4618      	mov	r0, r3
 8003c9c:	3720      	adds	r7, #32
 8003c9e:	46bd      	mov	sp, r7
 8003ca0:	bd80      	pop	{r7, pc}
 8003ca2:	bf00      	nop
 8003ca4:	2000022c 	.word	0x2000022c
 8003ca8:	20000240 	.word	0x20000240

08003cac <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003cac:	b480      	push	{r7}
 8003cae:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8003cb0:	4b03      	ldr	r3, [pc, #12]	; (8003cc0 <vTaskMissedYield+0x14>)
 8003cb2:	2201      	movs	r2, #1
 8003cb4:	601a      	str	r2, [r3, #0]
}
 8003cb6:	bf00      	nop
 8003cb8:	46bd      	mov	sp, r7
 8003cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cbe:	4770      	bx	lr
 8003cc0:	2000023c 	.word	0x2000023c

08003cc4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003cc4:	b580      	push	{r7, lr}
 8003cc6:	b082      	sub	sp, #8
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8003ccc:	f000 f852 	bl	8003d74 <prvCheckTasksWaitingTermination>
             *
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains more than one task
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003cd0:	4b06      	ldr	r3, [pc, #24]	; (8003cec <prvIdleTask+0x28>)
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	2b01      	cmp	r3, #1
 8003cd6:	d9f9      	bls.n	8003ccc <prvIdleTask+0x8>
            {
                taskYIELD();
 8003cd8:	4b05      	ldr	r3, [pc, #20]	; (8003cf0 <prvIdleTask+0x2c>)
 8003cda:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003cde:	601a      	str	r2, [r3, #0]
 8003ce0:	f3bf 8f4f 	dsb	sy
 8003ce4:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8003ce8:	e7f0      	b.n	8003ccc <prvIdleTask+0x8>
 8003cea:	bf00      	nop
 8003cec:	20000118 	.word	0x20000118
 8003cf0:	e000ed04 	.word	0xe000ed04

08003cf4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003cf4:	b580      	push	{r7, lr}
 8003cf6:	b082      	sub	sp, #8
 8003cf8:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003cfa:	2300      	movs	r3, #0
 8003cfc:	607b      	str	r3, [r7, #4]
 8003cfe:	e00c      	b.n	8003d1a <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003d00:	687a      	ldr	r2, [r7, #4]
 8003d02:	4613      	mov	r3, r2
 8003d04:	009b      	lsls	r3, r3, #2
 8003d06:	4413      	add	r3, r2
 8003d08:	009b      	lsls	r3, r3, #2
 8003d0a:	4a12      	ldr	r2, [pc, #72]	; (8003d54 <prvInitialiseTaskLists+0x60>)
 8003d0c:	4413      	add	r3, r2
 8003d0e:	4618      	mov	r0, r3
 8003d10:	f7fe fdae 	bl	8002870 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	3301      	adds	r3, #1
 8003d18:	607b      	str	r3, [r7, #4]
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	2b07      	cmp	r3, #7
 8003d1e:	d9ef      	bls.n	8003d00 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8003d20:	480d      	ldr	r0, [pc, #52]	; (8003d58 <prvInitialiseTaskLists+0x64>)
 8003d22:	f7fe fda5 	bl	8002870 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8003d26:	480d      	ldr	r0, [pc, #52]	; (8003d5c <prvInitialiseTaskLists+0x68>)
 8003d28:	f7fe fda2 	bl	8002870 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8003d2c:	480c      	ldr	r0, [pc, #48]	; (8003d60 <prvInitialiseTaskLists+0x6c>)
 8003d2e:	f7fe fd9f 	bl	8002870 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 8003d32:	480c      	ldr	r0, [pc, #48]	; (8003d64 <prvInitialiseTaskLists+0x70>)
 8003d34:	f7fe fd9c 	bl	8002870 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 8003d38:	480b      	ldr	r0, [pc, #44]	; (8003d68 <prvInitialiseTaskLists+0x74>)
 8003d3a:	f7fe fd99 	bl	8002870 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8003d3e:	4b0b      	ldr	r3, [pc, #44]	; (8003d6c <prvInitialiseTaskLists+0x78>)
 8003d40:	4a05      	ldr	r2, [pc, #20]	; (8003d58 <prvInitialiseTaskLists+0x64>)
 8003d42:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003d44:	4b0a      	ldr	r3, [pc, #40]	; (8003d70 <prvInitialiseTaskLists+0x7c>)
 8003d46:	4a05      	ldr	r2, [pc, #20]	; (8003d5c <prvInitialiseTaskLists+0x68>)
 8003d48:	601a      	str	r2, [r3, #0]
}
 8003d4a:	bf00      	nop
 8003d4c:	3708      	adds	r7, #8
 8003d4e:	46bd      	mov	sp, r7
 8003d50:	bd80      	pop	{r7, pc}
 8003d52:	bf00      	nop
 8003d54:	20000118 	.word	0x20000118
 8003d58:	200001b8 	.word	0x200001b8
 8003d5c:	200001cc 	.word	0x200001cc
 8003d60:	200001e8 	.word	0x200001e8
 8003d64:	200001fc 	.word	0x200001fc
 8003d68:	20000214 	.word	0x20000214
 8003d6c:	200001e0 	.word	0x200001e0
 8003d70:	200001e4 	.word	0x200001e4

08003d74 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003d74:	b580      	push	{r7, lr}
 8003d76:	b082      	sub	sp, #8
 8003d78:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003d7a:	e019      	b.n	8003db0 <prvCheckTasksWaitingTermination+0x3c>
        {
            taskENTER_CRITICAL();
 8003d7c:	f000 fd22 	bl	80047c4 <vPortEnterCritical>
            {
                pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003d80:	4b10      	ldr	r3, [pc, #64]	; (8003dc4 <prvCheckTasksWaitingTermination+0x50>)
 8003d82:	68db      	ldr	r3, [r3, #12]
 8003d84:	68db      	ldr	r3, [r3, #12]
 8003d86:	607b      	str	r3, [r7, #4]
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	3304      	adds	r3, #4
 8003d8c:	4618      	mov	r0, r3
 8003d8e:	f7fe fdd5 	bl	800293c <uxListRemove>
                --uxCurrentNumberOfTasks;
 8003d92:	4b0d      	ldr	r3, [pc, #52]	; (8003dc8 <prvCheckTasksWaitingTermination+0x54>)
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	3b01      	subs	r3, #1
 8003d98:	4a0b      	ldr	r2, [pc, #44]	; (8003dc8 <prvCheckTasksWaitingTermination+0x54>)
 8003d9a:	6013      	str	r3, [r2, #0]
                --uxDeletedTasksWaitingCleanUp;
 8003d9c:	4b0b      	ldr	r3, [pc, #44]	; (8003dcc <prvCheckTasksWaitingTermination+0x58>)
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	3b01      	subs	r3, #1
 8003da2:	4a0a      	ldr	r2, [pc, #40]	; (8003dcc <prvCheckTasksWaitingTermination+0x58>)
 8003da4:	6013      	str	r3, [r2, #0]
            }
            taskEXIT_CRITICAL();
 8003da6:	f000 fd3d 	bl	8004824 <vPortExitCritical>

            prvDeleteTCB( pxTCB );
 8003daa:	6878      	ldr	r0, [r7, #4]
 8003dac:	f000 f810 	bl	8003dd0 <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003db0:	4b06      	ldr	r3, [pc, #24]	; (8003dcc <prvCheckTasksWaitingTermination+0x58>)
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d1e1      	bne.n	8003d7c <prvCheckTasksWaitingTermination+0x8>
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 8003db8:	bf00      	nop
 8003dba:	bf00      	nop
 8003dbc:	3708      	adds	r7, #8
 8003dbe:	46bd      	mov	sp, r7
 8003dc0:	bd80      	pop	{r7, pc}
 8003dc2:	bf00      	nop
 8003dc4:	200001fc 	.word	0x200001fc
 8003dc8:	20000228 	.word	0x20000228
 8003dcc:	20000210 	.word	0x20000210

08003dd0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8003dd0:	b580      	push	{r7, lr}
 8003dd2:	b082      	sub	sp, #8
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ddc:	4618      	mov	r0, r3
 8003dde:	f000 fed7 	bl	8004b90 <vPortFree>
            vPortFree( pxTCB );
 8003de2:	6878      	ldr	r0, [r7, #4]
 8003de4:	f000 fed4 	bl	8004b90 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8003de8:	bf00      	nop
 8003dea:	3708      	adds	r7, #8
 8003dec:	46bd      	mov	sp, r7
 8003dee:	bd80      	pop	{r7, pc}

08003df0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003df0:	b480      	push	{r7}
 8003df2:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003df4:	4b0a      	ldr	r3, [pc, #40]	; (8003e20 <prvResetNextTaskUnblockTime+0x30>)
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d104      	bne.n	8003e08 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8003dfe:	4b09      	ldr	r3, [pc, #36]	; (8003e24 <prvResetNextTaskUnblockTime+0x34>)
 8003e00:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003e04:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8003e06:	e005      	b.n	8003e14 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003e08:	4b05      	ldr	r3, [pc, #20]	; (8003e20 <prvResetNextTaskUnblockTime+0x30>)
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	68db      	ldr	r3, [r3, #12]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	4a04      	ldr	r2, [pc, #16]	; (8003e24 <prvResetNextTaskUnblockTime+0x34>)
 8003e12:	6013      	str	r3, [r2, #0]
}
 8003e14:	bf00      	nop
 8003e16:	46bd      	mov	sp, r7
 8003e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e1c:	4770      	bx	lr
 8003e1e:	bf00      	nop
 8003e20:	200001e0 	.word	0x200001e0
 8003e24:	20000248 	.word	0x20000248

08003e28 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8003e28:	b480      	push	{r7}
 8003e2a:	b083      	sub	sp, #12
 8003e2c:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 8003e2e:	4b0b      	ldr	r3, [pc, #44]	; (8003e5c <xTaskGetSchedulerState+0x34>)
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d102      	bne.n	8003e3c <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8003e36:	2301      	movs	r3, #1
 8003e38:	607b      	str	r3, [r7, #4]
 8003e3a:	e008      	b.n	8003e4e <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003e3c:	4b08      	ldr	r3, [pc, #32]	; (8003e60 <xTaskGetSchedulerState+0x38>)
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d102      	bne.n	8003e4a <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8003e44:	2302      	movs	r3, #2
 8003e46:	607b      	str	r3, [r7, #4]
 8003e48:	e001      	b.n	8003e4e <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8003e4a:	2300      	movs	r3, #0
 8003e4c:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8003e4e:	687b      	ldr	r3, [r7, #4]
    }
 8003e50:	4618      	mov	r0, r3
 8003e52:	370c      	adds	r7, #12
 8003e54:	46bd      	mov	sp, r7
 8003e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5a:	4770      	bx	lr
 8003e5c:	20000234 	.word	0x20000234
 8003e60:	20000250 	.word	0x20000250

08003e64 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8003e64:	b580      	push	{r7, lr}
 8003e66:	b086      	sub	sp, #24
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6078      	str	r0, [r7, #4]
 8003e6c:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8003e6e:	4b36      	ldr	r3, [pc, #216]	; (8003f48 <prvAddCurrentTaskToDelayedList+0xe4>)
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003e74:	4b35      	ldr	r3, [pc, #212]	; (8003f4c <prvAddCurrentTaskToDelayedList+0xe8>)
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	3304      	adds	r3, #4
 8003e7a:	4618      	mov	r0, r3
 8003e7c:	f7fe fd5e 	bl	800293c <uxListRemove>
 8003e80:	4603      	mov	r3, r0
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d10b      	bne.n	8003e9e <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8003e86:	4b31      	ldr	r3, [pc, #196]	; (8003f4c <prvAddCurrentTaskToDelayedList+0xe8>)
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e8c:	2201      	movs	r2, #1
 8003e8e:	fa02 f303 	lsl.w	r3, r2, r3
 8003e92:	43da      	mvns	r2, r3
 8003e94:	4b2e      	ldr	r3, [pc, #184]	; (8003f50 <prvAddCurrentTaskToDelayedList+0xec>)
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	4013      	ands	r3, r2
 8003e9a:	4a2d      	ldr	r2, [pc, #180]	; (8003f50 <prvAddCurrentTaskToDelayedList+0xec>)
 8003e9c:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003ea4:	d124      	bne.n	8003ef0 <prvAddCurrentTaskToDelayedList+0x8c>
 8003ea6:	683b      	ldr	r3, [r7, #0]
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d021      	beq.n	8003ef0 <prvAddCurrentTaskToDelayedList+0x8c>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003eac:	4b29      	ldr	r3, [pc, #164]	; (8003f54 <prvAddCurrentTaskToDelayedList+0xf0>)
 8003eae:	685b      	ldr	r3, [r3, #4]
 8003eb0:	613b      	str	r3, [r7, #16]
 8003eb2:	4b26      	ldr	r3, [pc, #152]	; (8003f4c <prvAddCurrentTaskToDelayedList+0xe8>)
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	693a      	ldr	r2, [r7, #16]
 8003eb8:	609a      	str	r2, [r3, #8]
 8003eba:	4b24      	ldr	r3, [pc, #144]	; (8003f4c <prvAddCurrentTaskToDelayedList+0xe8>)
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	693a      	ldr	r2, [r7, #16]
 8003ec0:	6892      	ldr	r2, [r2, #8]
 8003ec2:	60da      	str	r2, [r3, #12]
 8003ec4:	4b21      	ldr	r3, [pc, #132]	; (8003f4c <prvAddCurrentTaskToDelayedList+0xe8>)
 8003ec6:	681a      	ldr	r2, [r3, #0]
 8003ec8:	693b      	ldr	r3, [r7, #16]
 8003eca:	689b      	ldr	r3, [r3, #8]
 8003ecc:	3204      	adds	r2, #4
 8003ece:	605a      	str	r2, [r3, #4]
 8003ed0:	4b1e      	ldr	r3, [pc, #120]	; (8003f4c <prvAddCurrentTaskToDelayedList+0xe8>)
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	1d1a      	adds	r2, r3, #4
 8003ed6:	693b      	ldr	r3, [r7, #16]
 8003ed8:	609a      	str	r2, [r3, #8]
 8003eda:	4b1c      	ldr	r3, [pc, #112]	; (8003f4c <prvAddCurrentTaskToDelayedList+0xe8>)
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	4a1d      	ldr	r2, [pc, #116]	; (8003f54 <prvAddCurrentTaskToDelayedList+0xf0>)
 8003ee0:	615a      	str	r2, [r3, #20]
 8003ee2:	4b1c      	ldr	r3, [pc, #112]	; (8003f54 <prvAddCurrentTaskToDelayedList+0xf0>)
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	3301      	adds	r3, #1
 8003ee8:	4a1a      	ldr	r2, [pc, #104]	; (8003f54 <prvAddCurrentTaskToDelayedList+0xf0>)
 8003eea:	6013      	str	r3, [r2, #0]
 8003eec:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 8003eee:	e026      	b.n	8003f3e <prvAddCurrentTaskToDelayedList+0xda>
            xTimeToWake = xConstTickCount + xTicksToWait;
 8003ef0:	697a      	ldr	r2, [r7, #20]
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	4413      	add	r3, r2
 8003ef6:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003ef8:	4b14      	ldr	r3, [pc, #80]	; (8003f4c <prvAddCurrentTaskToDelayedList+0xe8>)
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	68fa      	ldr	r2, [r7, #12]
 8003efe:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 8003f00:	68fa      	ldr	r2, [r7, #12]
 8003f02:	697b      	ldr	r3, [r7, #20]
 8003f04:	429a      	cmp	r2, r3
 8003f06:	d209      	bcs.n	8003f1c <prvAddCurrentTaskToDelayedList+0xb8>
                vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003f08:	4b13      	ldr	r3, [pc, #76]	; (8003f58 <prvAddCurrentTaskToDelayedList+0xf4>)
 8003f0a:	681a      	ldr	r2, [r3, #0]
 8003f0c:	4b0f      	ldr	r3, [pc, #60]	; (8003f4c <prvAddCurrentTaskToDelayedList+0xe8>)
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	3304      	adds	r3, #4
 8003f12:	4619      	mov	r1, r3
 8003f14:	4610      	mov	r0, r2
 8003f16:	f7fe fcd8 	bl	80028ca <vListInsert>
}
 8003f1a:	e010      	b.n	8003f3e <prvAddCurrentTaskToDelayedList+0xda>
                vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003f1c:	4b0f      	ldr	r3, [pc, #60]	; (8003f5c <prvAddCurrentTaskToDelayedList+0xf8>)
 8003f1e:	681a      	ldr	r2, [r3, #0]
 8003f20:	4b0a      	ldr	r3, [pc, #40]	; (8003f4c <prvAddCurrentTaskToDelayedList+0xe8>)
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	3304      	adds	r3, #4
 8003f26:	4619      	mov	r1, r3
 8003f28:	4610      	mov	r0, r2
 8003f2a:	f7fe fcce 	bl	80028ca <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 8003f2e:	4b0c      	ldr	r3, [pc, #48]	; (8003f60 <prvAddCurrentTaskToDelayedList+0xfc>)
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	68fa      	ldr	r2, [r7, #12]
 8003f34:	429a      	cmp	r2, r3
 8003f36:	d202      	bcs.n	8003f3e <prvAddCurrentTaskToDelayedList+0xda>
                    xNextTaskUnblockTime = xTimeToWake;
 8003f38:	4a09      	ldr	r2, [pc, #36]	; (8003f60 <prvAddCurrentTaskToDelayedList+0xfc>)
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	6013      	str	r3, [r2, #0]
}
 8003f3e:	bf00      	nop
 8003f40:	3718      	adds	r7, #24
 8003f42:	46bd      	mov	sp, r7
 8003f44:	bd80      	pop	{r7, pc}
 8003f46:	bf00      	nop
 8003f48:	2000022c 	.word	0x2000022c
 8003f4c:	20000114 	.word	0x20000114
 8003f50:	20000230 	.word	0x20000230
 8003f54:	20000214 	.word	0x20000214
 8003f58:	200001e4 	.word	0x200001e4
 8003f5c:	200001e0 	.word	0x200001e0
 8003f60:	20000248 	.word	0x20000248

08003f64 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8003f64:	b580      	push	{r7, lr}
 8003f66:	b084      	sub	sp, #16
 8003f68:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 8003f6a:	2300      	movs	r3, #0
 8003f6c:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8003f6e:	f000 fa47 	bl	8004400 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8003f72:	4b11      	ldr	r3, [pc, #68]	; (8003fb8 <xTimerCreateTimerTask+0x54>)
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d00b      	beq.n	8003f92 <xTimerCreateTimerTask+0x2e>
                    xReturn = pdPASS;
                }
            }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
            {
                xReturn = xTaskCreate( prvTimerTask,
 8003f7a:	4b10      	ldr	r3, [pc, #64]	; (8003fbc <xTimerCreateTimerTask+0x58>)
 8003f7c:	9301      	str	r3, [sp, #4]
 8003f7e:	2302      	movs	r3, #2
 8003f80:	9300      	str	r3, [sp, #0]
 8003f82:	2300      	movs	r3, #0
 8003f84:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003f88:	490d      	ldr	r1, [pc, #52]	; (8003fc0 <xTimerCreateTimerTask+0x5c>)
 8003f8a:	480e      	ldr	r0, [pc, #56]	; (8003fc4 <xTimerCreateTimerTask+0x60>)
 8003f8c:	f7ff f830 	bl	8002ff0 <xTaskCreate>
 8003f90:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d10a      	bne.n	8003fae <xTimerCreateTimerTask+0x4a>
        __asm volatile
 8003f98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f9c:	f383 8811 	msr	BASEPRI, r3
 8003fa0:	f3bf 8f6f 	isb	sy
 8003fa4:	f3bf 8f4f 	dsb	sy
 8003fa8:	603b      	str	r3, [r7, #0]
    }
 8003faa:	bf00      	nop
 8003fac:	e7fe      	b.n	8003fac <xTimerCreateTimerTask+0x48>
        return xReturn;
 8003fae:	687b      	ldr	r3, [r7, #4]
    }
 8003fb0:	4618      	mov	r0, r3
 8003fb2:	3708      	adds	r7, #8
 8003fb4:	46bd      	mov	sp, r7
 8003fb6:	bd80      	pop	{r7, pc}
 8003fb8:	20000284 	.word	0x20000284
 8003fbc:	20000288 	.word	0x20000288
 8003fc0:	08007858 	.word	0x08007858
 8003fc4:	0800406d 	.word	0x0800406d

08003fc8 <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 8003fc8:	b580      	push	{r7, lr}
 8003fca:	b084      	sub	sp, #16
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	60f8      	str	r0, [r7, #12]
 8003fd0:	60b9      	str	r1, [r7, #8]
 8003fd2:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8003fd4:	e008      	b.n	8003fe8 <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	699b      	ldr	r3, [r3, #24]
 8003fda:	68ba      	ldr	r2, [r7, #8]
 8003fdc:	4413      	add	r3, r2
 8003fde:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	6a1b      	ldr	r3, [r3, #32]
 8003fe4:	68f8      	ldr	r0, [r7, #12]
 8003fe6:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	699a      	ldr	r2, [r3, #24]
 8003fec:	68bb      	ldr	r3, [r7, #8]
 8003fee:	18d1      	adds	r1, r2, r3
 8003ff0:	68bb      	ldr	r3, [r7, #8]
 8003ff2:	687a      	ldr	r2, [r7, #4]
 8003ff4:	68f8      	ldr	r0, [r7, #12]
 8003ff6:	f000 f8dd 	bl	80041b4 <prvInsertTimerInActiveList>
 8003ffa:	4603      	mov	r3, r0
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d1ea      	bne.n	8003fd6 <prvReloadTimer+0xe>
        }
    }
 8004000:	bf00      	nop
 8004002:	bf00      	nop
 8004004:	3710      	adds	r7, #16
 8004006:	46bd      	mov	sp, r7
 8004008:	bd80      	pop	{r7, pc}
	...

0800400c <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 800400c:	b580      	push	{r7, lr}
 800400e:	b084      	sub	sp, #16
 8004010:	af00      	add	r7, sp, #0
 8004012:	6078      	str	r0, [r7, #4]
 8004014:	6039      	str	r1, [r7, #0]
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004016:	4b14      	ldr	r3, [pc, #80]	; (8004068 <prvProcessExpiredTimer+0x5c>)
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	68db      	ldr	r3, [r3, #12]
 800401c:	68db      	ldr	r3, [r3, #12]
 800401e:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	3304      	adds	r3, #4
 8004024:	4618      	mov	r0, r3
 8004026:	f7fe fc89 	bl	800293c <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004030:	f003 0304 	and.w	r3, r3, #4
 8004034:	2b00      	cmp	r3, #0
 8004036:	d005      	beq.n	8004044 <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 8004038:	683a      	ldr	r2, [r7, #0]
 800403a:	6879      	ldr	r1, [r7, #4]
 800403c:	68f8      	ldr	r0, [r7, #12]
 800403e:	f7ff ffc3 	bl	8003fc8 <prvReloadTimer>
 8004042:	e008      	b.n	8004056 <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800404a:	f023 0301 	bic.w	r3, r3, #1
 800404e:	b2da      	uxtb	r2, r3
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	6a1b      	ldr	r3, [r3, #32]
 800405a:	68f8      	ldr	r0, [r7, #12]
 800405c:	4798      	blx	r3
    }
 800405e:	bf00      	nop
 8004060:	3710      	adds	r7, #16
 8004062:	46bd      	mov	sp, r7
 8004064:	bd80      	pop	{r7, pc}
 8004066:	bf00      	nop
 8004068:	2000027c 	.word	0x2000027c

0800406c <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 800406c:	b580      	push	{r7, lr}
 800406e:	b084      	sub	sp, #16
 8004070:	af00      	add	r7, sp, #0
 8004072:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004074:	f107 0308 	add.w	r3, r7, #8
 8004078:	4618      	mov	r0, r3
 800407a:	f000 f857 	bl	800412c <prvGetNextExpireTime>
 800407e:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004080:	68bb      	ldr	r3, [r7, #8]
 8004082:	4619      	mov	r1, r3
 8004084:	68f8      	ldr	r0, [r7, #12]
 8004086:	f000 f803 	bl	8004090 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 800408a:	f000 f8d5 	bl	8004238 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800408e:	e7f1      	b.n	8004074 <prvTimerTask+0x8>

08004090 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8004090:	b580      	push	{r7, lr}
 8004092:	b084      	sub	sp, #16
 8004094:	af00      	add	r7, sp, #0
 8004096:	6078      	str	r0, [r7, #4]
 8004098:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 800409a:	f7ff f993 	bl	80033c4 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800409e:	f107 0308 	add.w	r3, r7, #8
 80040a2:	4618      	mov	r0, r3
 80040a4:	f000 f866 	bl	8004174 <prvSampleTimeNow>
 80040a8:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 80040aa:	68bb      	ldr	r3, [r7, #8]
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d130      	bne.n	8004112 <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80040b0:	683b      	ldr	r3, [r7, #0]
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d10a      	bne.n	80040cc <prvProcessTimerOrBlockTask+0x3c>
 80040b6:	687a      	ldr	r2, [r7, #4]
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	429a      	cmp	r2, r3
 80040bc:	d806      	bhi.n	80040cc <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 80040be:	f7ff f98f 	bl	80033e0 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80040c2:	68f9      	ldr	r1, [r7, #12]
 80040c4:	6878      	ldr	r0, [r7, #4]
 80040c6:	f7ff ffa1 	bl	800400c <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 80040ca:	e024      	b.n	8004116 <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 80040cc:	683b      	ldr	r3, [r7, #0]
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d008      	beq.n	80040e4 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80040d2:	4b13      	ldr	r3, [pc, #76]	; (8004120 <prvProcessTimerOrBlockTask+0x90>)
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d101      	bne.n	80040e0 <prvProcessTimerOrBlockTask+0x50>
 80040dc:	2301      	movs	r3, #1
 80040de:	e000      	b.n	80040e2 <prvProcessTimerOrBlockTask+0x52>
 80040e0:	2300      	movs	r3, #0
 80040e2:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80040e4:	4b0f      	ldr	r3, [pc, #60]	; (8004124 <prvProcessTimerOrBlockTask+0x94>)
 80040e6:	6818      	ldr	r0, [r3, #0]
 80040e8:	687a      	ldr	r2, [r7, #4]
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	1ad3      	subs	r3, r2, r3
 80040ee:	683a      	ldr	r2, [r7, #0]
 80040f0:	4619      	mov	r1, r3
 80040f2:	f7fe ff49 	bl	8002f88 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 80040f6:	f7ff f973 	bl	80033e0 <xTaskResumeAll>
 80040fa:	4603      	mov	r3, r0
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d10a      	bne.n	8004116 <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8004100:	4b09      	ldr	r3, [pc, #36]	; (8004128 <prvProcessTimerOrBlockTask+0x98>)
 8004102:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004106:	601a      	str	r2, [r3, #0]
 8004108:	f3bf 8f4f 	dsb	sy
 800410c:	f3bf 8f6f 	isb	sy
    }
 8004110:	e001      	b.n	8004116 <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8004112:	f7ff f965 	bl	80033e0 <xTaskResumeAll>
    }
 8004116:	bf00      	nop
 8004118:	3710      	adds	r7, #16
 800411a:	46bd      	mov	sp, r7
 800411c:	bd80      	pop	{r7, pc}
 800411e:	bf00      	nop
 8004120:	20000280 	.word	0x20000280
 8004124:	20000284 	.word	0x20000284
 8004128:	e000ed04 	.word	0xe000ed04

0800412c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 800412c:	b480      	push	{r7}
 800412e:	b085      	sub	sp, #20
 8004130:	af00      	add	r7, sp, #0
 8004132:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004134:	4b0e      	ldr	r3, [pc, #56]	; (8004170 <prvGetNextExpireTime+0x44>)
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	2b00      	cmp	r3, #0
 800413c:	d101      	bne.n	8004142 <prvGetNextExpireTime+0x16>
 800413e:	2201      	movs	r2, #1
 8004140:	e000      	b.n	8004144 <prvGetNextExpireTime+0x18>
 8004142:	2200      	movs	r2, #0
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	2b00      	cmp	r3, #0
 800414e:	d105      	bne.n	800415c <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004150:	4b07      	ldr	r3, [pc, #28]	; (8004170 <prvGetNextExpireTime+0x44>)
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	68db      	ldr	r3, [r3, #12]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	60fb      	str	r3, [r7, #12]
 800415a:	e001      	b.n	8004160 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 800415c:	2300      	movs	r3, #0
 800415e:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8004160:	68fb      	ldr	r3, [r7, #12]
    }
 8004162:	4618      	mov	r0, r3
 8004164:	3714      	adds	r7, #20
 8004166:	46bd      	mov	sp, r7
 8004168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800416c:	4770      	bx	lr
 800416e:	bf00      	nop
 8004170:	2000027c 	.word	0x2000027c

08004174 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8004174:	b580      	push	{r7, lr}
 8004176:	b084      	sub	sp, #16
 8004178:	af00      	add	r7, sp, #0
 800417a:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 800417c:	f7ff fa30 	bl	80035e0 <xTaskGetTickCount>
 8004180:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8004182:	4b0b      	ldr	r3, [pc, #44]	; (80041b0 <prvSampleTimeNow+0x3c>)
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	68fa      	ldr	r2, [r7, #12]
 8004188:	429a      	cmp	r2, r3
 800418a:	d205      	bcs.n	8004198 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 800418c:	f000 f912 	bl	80043b4 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	2201      	movs	r2, #1
 8004194:	601a      	str	r2, [r3, #0]
 8004196:	e002      	b.n	800419e <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	2200      	movs	r2, #0
 800419c:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 800419e:	4a04      	ldr	r2, [pc, #16]	; (80041b0 <prvSampleTimeNow+0x3c>)
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 80041a4:	68fb      	ldr	r3, [r7, #12]
    }
 80041a6:	4618      	mov	r0, r3
 80041a8:	3710      	adds	r7, #16
 80041aa:	46bd      	mov	sp, r7
 80041ac:	bd80      	pop	{r7, pc}
 80041ae:	bf00      	nop
 80041b0:	2000028c 	.word	0x2000028c

080041b4 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 80041b4:	b580      	push	{r7, lr}
 80041b6:	b086      	sub	sp, #24
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	60f8      	str	r0, [r7, #12]
 80041bc:	60b9      	str	r1, [r7, #8]
 80041be:	607a      	str	r2, [r7, #4]
 80041c0:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 80041c2:	2300      	movs	r3, #0
 80041c4:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	68ba      	ldr	r2, [r7, #8]
 80041ca:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	68fa      	ldr	r2, [r7, #12]
 80041d0:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 80041d2:	68ba      	ldr	r2, [r7, #8]
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	429a      	cmp	r2, r3
 80041d8:	d812      	bhi.n	8004200 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80041da:	687a      	ldr	r2, [r7, #4]
 80041dc:	683b      	ldr	r3, [r7, #0]
 80041de:	1ad2      	subs	r2, r2, r3
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	699b      	ldr	r3, [r3, #24]
 80041e4:	429a      	cmp	r2, r3
 80041e6:	d302      	bcc.n	80041ee <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 80041e8:	2301      	movs	r3, #1
 80041ea:	617b      	str	r3, [r7, #20]
 80041ec:	e01b      	b.n	8004226 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80041ee:	4b10      	ldr	r3, [pc, #64]	; (8004230 <prvInsertTimerInActiveList+0x7c>)
 80041f0:	681a      	ldr	r2, [r3, #0]
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	3304      	adds	r3, #4
 80041f6:	4619      	mov	r1, r3
 80041f8:	4610      	mov	r0, r2
 80041fa:	f7fe fb66 	bl	80028ca <vListInsert>
 80041fe:	e012      	b.n	8004226 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004200:	687a      	ldr	r2, [r7, #4]
 8004202:	683b      	ldr	r3, [r7, #0]
 8004204:	429a      	cmp	r2, r3
 8004206:	d206      	bcs.n	8004216 <prvInsertTimerInActiveList+0x62>
 8004208:	68ba      	ldr	r2, [r7, #8]
 800420a:	683b      	ldr	r3, [r7, #0]
 800420c:	429a      	cmp	r2, r3
 800420e:	d302      	bcc.n	8004216 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8004210:	2301      	movs	r3, #1
 8004212:	617b      	str	r3, [r7, #20]
 8004214:	e007      	b.n	8004226 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004216:	4b07      	ldr	r3, [pc, #28]	; (8004234 <prvInsertTimerInActiveList+0x80>)
 8004218:	681a      	ldr	r2, [r3, #0]
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	3304      	adds	r3, #4
 800421e:	4619      	mov	r1, r3
 8004220:	4610      	mov	r0, r2
 8004222:	f7fe fb52 	bl	80028ca <vListInsert>
            }
        }

        return xProcessTimerNow;
 8004226:	697b      	ldr	r3, [r7, #20]
    }
 8004228:	4618      	mov	r0, r3
 800422a:	3718      	adds	r7, #24
 800422c:	46bd      	mov	sp, r7
 800422e:	bd80      	pop	{r7, pc}
 8004230:	20000280 	.word	0x20000280
 8004234:	2000027c 	.word	0x2000027c

08004238 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8004238:	b580      	push	{r7, lr}
 800423a:	b088      	sub	sp, #32
 800423c:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800423e:	e0a6      	b.n	800438e <prvProcessReceivedCommands+0x156>
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004240:	68bb      	ldr	r3, [r7, #8]
 8004242:	2b00      	cmp	r3, #0
 8004244:	f2c0 80a3 	blt.w	800438e <prvProcessReceivedCommands+0x156>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004248:	693b      	ldr	r3, [r7, #16]
 800424a:	61fb      	str	r3, [r7, #28]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800424c:	69fb      	ldr	r3, [r7, #28]
 800424e:	695b      	ldr	r3, [r3, #20]
 8004250:	2b00      	cmp	r3, #0
 8004252:	d004      	beq.n	800425e <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004254:	69fb      	ldr	r3, [r7, #28]
 8004256:	3304      	adds	r3, #4
 8004258:	4618      	mov	r0, r3
 800425a:	f7fe fb6f 	bl	800293c <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800425e:	1d3b      	adds	r3, r7, #4
 8004260:	4618      	mov	r0, r3
 8004262:	f7ff ff87 	bl	8004174 <prvSampleTimeNow>
 8004266:	61b8      	str	r0, [r7, #24]

                switch( xMessage.xMessageID )
 8004268:	68bb      	ldr	r3, [r7, #8]
 800426a:	3b01      	subs	r3, #1
 800426c:	2b08      	cmp	r3, #8
 800426e:	f200 808d 	bhi.w	800438c <prvProcessReceivedCommands+0x154>
 8004272:	a201      	add	r2, pc, #4	; (adr r2, 8004278 <prvProcessReceivedCommands+0x40>)
 8004274:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004278:	0800429d 	.word	0x0800429d
 800427c:	0800429d 	.word	0x0800429d
 8004280:	08004305 	.word	0x08004305
 8004284:	08004319 	.word	0x08004319
 8004288:	08004363 	.word	0x08004363
 800428c:	0800429d 	.word	0x0800429d
 8004290:	0800429d 	.word	0x0800429d
 8004294:	08004305 	.word	0x08004305
 8004298:	08004319 	.word	0x08004319
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800429c:	69fb      	ldr	r3, [r7, #28]
 800429e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80042a2:	f043 0301 	orr.w	r3, r3, #1
 80042a6:	b2da      	uxtb	r2, r3
 80042a8:	69fb      	ldr	r3, [r7, #28]
 80042aa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80042ae:	68fa      	ldr	r2, [r7, #12]
 80042b0:	69fb      	ldr	r3, [r7, #28]
 80042b2:	699b      	ldr	r3, [r3, #24]
 80042b4:	18d1      	adds	r1, r2, r3
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	69ba      	ldr	r2, [r7, #24]
 80042ba:	69f8      	ldr	r0, [r7, #28]
 80042bc:	f7ff ff7a 	bl	80041b4 <prvInsertTimerInActiveList>
 80042c0:	4603      	mov	r3, r0
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d063      	beq.n	800438e <prvProcessReceivedCommands+0x156>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80042c6:	69fb      	ldr	r3, [r7, #28]
 80042c8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80042cc:	f003 0304 	and.w	r3, r3, #4
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d009      	beq.n	80042e8 <prvProcessReceivedCommands+0xb0>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 80042d4:	68fa      	ldr	r2, [r7, #12]
 80042d6:	69fb      	ldr	r3, [r7, #28]
 80042d8:	699b      	ldr	r3, [r3, #24]
 80042da:	4413      	add	r3, r2
 80042dc:	69ba      	ldr	r2, [r7, #24]
 80042de:	4619      	mov	r1, r3
 80042e0:	69f8      	ldr	r0, [r7, #28]
 80042e2:	f7ff fe71 	bl	8003fc8 <prvReloadTimer>
 80042e6:	e008      	b.n	80042fa <prvProcessReceivedCommands+0xc2>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 80042e8:	69fb      	ldr	r3, [r7, #28]
 80042ea:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80042ee:	f023 0301 	bic.w	r3, r3, #1
 80042f2:	b2da      	uxtb	r2, r3
 80042f4:	69fb      	ldr	r3, [r7, #28]
 80042f6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80042fa:	69fb      	ldr	r3, [r7, #28]
 80042fc:	6a1b      	ldr	r3, [r3, #32]
 80042fe:	69f8      	ldr	r0, [r7, #28]
 8004300:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 8004302:	e044      	b.n	800438e <prvProcessReceivedCommands+0x156>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8004304:	69fb      	ldr	r3, [r7, #28]
 8004306:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800430a:	f023 0301 	bic.w	r3, r3, #1
 800430e:	b2da      	uxtb	r2, r3
 8004310:	69fb      	ldr	r3, [r7, #28]
 8004312:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 8004316:	e03a      	b.n	800438e <prvProcessReceivedCommands+0x156>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004318:	69fb      	ldr	r3, [r7, #28]
 800431a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800431e:	f043 0301 	orr.w	r3, r3, #1
 8004322:	b2da      	uxtb	r2, r3
 8004324:	69fb      	ldr	r3, [r7, #28]
 8004326:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800432a:	68fa      	ldr	r2, [r7, #12]
 800432c:	69fb      	ldr	r3, [r7, #28]
 800432e:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004330:	69fb      	ldr	r3, [r7, #28]
 8004332:	699b      	ldr	r3, [r3, #24]
 8004334:	2b00      	cmp	r3, #0
 8004336:	d10a      	bne.n	800434e <prvProcessReceivedCommands+0x116>
        __asm volatile
 8004338:	f04f 0350 	mov.w	r3, #80	; 0x50
 800433c:	f383 8811 	msr	BASEPRI, r3
 8004340:	f3bf 8f6f 	isb	sy
 8004344:	f3bf 8f4f 	dsb	sy
 8004348:	617b      	str	r3, [r7, #20]
    }
 800434a:	bf00      	nop
 800434c:	e7fe      	b.n	800434c <prvProcessReceivedCommands+0x114>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800434e:	69fb      	ldr	r3, [r7, #28]
 8004350:	699a      	ldr	r2, [r3, #24]
 8004352:	69bb      	ldr	r3, [r7, #24]
 8004354:	18d1      	adds	r1, r2, r3
 8004356:	69bb      	ldr	r3, [r7, #24]
 8004358:	69ba      	ldr	r2, [r7, #24]
 800435a:	69f8      	ldr	r0, [r7, #28]
 800435c:	f7ff ff2a 	bl	80041b4 <prvInsertTimerInActiveList>
                        break;
 8004360:	e015      	b.n	800438e <prvProcessReceivedCommands+0x156>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                        {
                            /* The timer has already been removed from the active list,
                             * just free up the memory if the memory was dynamically
                             * allocated. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8004362:	69fb      	ldr	r3, [r7, #28]
 8004364:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004368:	f003 0302 	and.w	r3, r3, #2
 800436c:	2b00      	cmp	r3, #0
 800436e:	d103      	bne.n	8004378 <prvProcessReceivedCommands+0x140>
                            {
                                vPortFree( pxTimer );
 8004370:	69f8      	ldr	r0, [r7, #28]
 8004372:	f000 fc0d 	bl	8004b90 <vPortFree>
 8004376:	e00a      	b.n	800438e <prvProcessReceivedCommands+0x156>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8004378:	69fb      	ldr	r3, [r7, #28]
 800437a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800437e:	f023 0301 	bic.w	r3, r3, #1
 8004382:	b2da      	uxtb	r2, r3
 8004384:	69fb      	ldr	r3, [r7, #28]
 8004386:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                             * no need to free the memory - just mark the timer as
                             * "not active". */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                        }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 800438a:	e000      	b.n	800438e <prvProcessReceivedCommands+0x156>

                    default:
                        /* Don't expect to get here. */
                        break;
 800438c:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800438e:	4b08      	ldr	r3, [pc, #32]	; (80043b0 <prvProcessReceivedCommands+0x178>)
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f107 0108 	add.w	r1, r7, #8
 8004396:	2200      	movs	r2, #0
 8004398:	4618      	mov	r0, r3
 800439a:	f7fe fc01 	bl	8002ba0 <xQueueReceive>
 800439e:	4603      	mov	r3, r0
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	f47f af4d 	bne.w	8004240 <prvProcessReceivedCommands+0x8>
                }
            }
        }
    }
 80043a6:	bf00      	nop
 80043a8:	bf00      	nop
 80043aa:	3720      	adds	r7, #32
 80043ac:	46bd      	mov	sp, r7
 80043ae:	bd80      	pop	{r7, pc}
 80043b0:	20000284 	.word	0x20000284

080043b4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 80043b4:	b580      	push	{r7, lr}
 80043b6:	b082      	sub	sp, #8
 80043b8:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80043ba:	e009      	b.n	80043d0 <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80043bc:	4b0e      	ldr	r3, [pc, #56]	; (80043f8 <prvSwitchTimerLists+0x44>)
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	68db      	ldr	r3, [r3, #12]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 80043c6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80043ca:	6838      	ldr	r0, [r7, #0]
 80043cc:	f7ff fe1e 	bl	800400c <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80043d0:	4b09      	ldr	r3, [pc, #36]	; (80043f8 <prvSwitchTimerLists+0x44>)
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d1f0      	bne.n	80043bc <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 80043da:	4b07      	ldr	r3, [pc, #28]	; (80043f8 <prvSwitchTimerLists+0x44>)
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 80043e0:	4b06      	ldr	r3, [pc, #24]	; (80043fc <prvSwitchTimerLists+0x48>)
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	4a04      	ldr	r2, [pc, #16]	; (80043f8 <prvSwitchTimerLists+0x44>)
 80043e6:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 80043e8:	4a04      	ldr	r2, [pc, #16]	; (80043fc <prvSwitchTimerLists+0x48>)
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	6013      	str	r3, [r2, #0]
    }
 80043ee:	bf00      	nop
 80043f0:	3708      	adds	r7, #8
 80043f2:	46bd      	mov	sp, r7
 80043f4:	bd80      	pop	{r7, pc}
 80043f6:	bf00      	nop
 80043f8:	2000027c 	.word	0x2000027c
 80043fc:	20000280 	.word	0x20000280

08004400 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8004400:	b580      	push	{r7, lr}
 8004402:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8004404:	f000 f9de 	bl	80047c4 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8004408:	4b12      	ldr	r3, [pc, #72]	; (8004454 <prvCheckForValidListAndQueue+0x54>)
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	2b00      	cmp	r3, #0
 800440e:	d11d      	bne.n	800444c <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8004410:	4811      	ldr	r0, [pc, #68]	; (8004458 <prvCheckForValidListAndQueue+0x58>)
 8004412:	f7fe fa2d 	bl	8002870 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8004416:	4811      	ldr	r0, [pc, #68]	; (800445c <prvCheckForValidListAndQueue+0x5c>)
 8004418:	f7fe fa2a 	bl	8002870 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 800441c:	4b10      	ldr	r3, [pc, #64]	; (8004460 <prvCheckForValidListAndQueue+0x60>)
 800441e:	4a0e      	ldr	r2, [pc, #56]	; (8004458 <prvCheckForValidListAndQueue+0x58>)
 8004420:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8004422:	4b10      	ldr	r3, [pc, #64]	; (8004464 <prvCheckForValidListAndQueue+0x64>)
 8004424:	4a0d      	ldr	r2, [pc, #52]	; (800445c <prvCheckForValidListAndQueue+0x5c>)
 8004426:	601a      	str	r2, [r3, #0]

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                }
                #else
                {
                    xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8004428:	2200      	movs	r2, #0
 800442a:	210c      	movs	r1, #12
 800442c:	200a      	movs	r0, #10
 800442e:	f7fe fb3f 	bl	8002ab0 <xQueueGenericCreate>
 8004432:	4603      	mov	r3, r0
 8004434:	4a07      	ldr	r2, [pc, #28]	; (8004454 <prvCheckForValidListAndQueue+0x54>)
 8004436:	6013      	str	r3, [r2, #0]
                }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                {
                    if( xTimerQueue != NULL )
 8004438:	4b06      	ldr	r3, [pc, #24]	; (8004454 <prvCheckForValidListAndQueue+0x54>)
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	2b00      	cmp	r3, #0
 800443e:	d005      	beq.n	800444c <prvCheckForValidListAndQueue+0x4c>
                    {
                        vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004440:	4b04      	ldr	r3, [pc, #16]	; (8004454 <prvCheckForValidListAndQueue+0x54>)
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	4908      	ldr	r1, [pc, #32]	; (8004468 <prvCheckForValidListAndQueue+0x68>)
 8004446:	4618      	mov	r0, r3
 8004448:	f7fe fd48 	bl	8002edc <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 800444c:	f000 f9ea 	bl	8004824 <vPortExitCritical>
    }
 8004450:	bf00      	nop
 8004452:	bd80      	pop	{r7, pc}
 8004454:	20000284 	.word	0x20000284
 8004458:	20000254 	.word	0x20000254
 800445c:	20000268 	.word	0x20000268
 8004460:	2000027c 	.word	0x2000027c
 8004464:	20000280 	.word	0x20000280
 8004468:	08007860 	.word	0x08007860

0800446c <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 800446c:	b480      	push	{r7}
 800446e:	b085      	sub	sp, #20
 8004470:	af00      	add	r7, sp, #0
 8004472:	60f8      	str	r0, [r7, #12]
 8004474:	60b9      	str	r1, [r7, #8]
 8004476:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	3b04      	subs	r3, #4
 800447c:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004484:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	3b04      	subs	r3, #4
 800448a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 800448c:	68bb      	ldr	r3, [r7, #8]
 800448e:	f023 0201 	bic.w	r2, r3, #1
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	3b04      	subs	r3, #4
 800449a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 800449c:	4a0c      	ldr	r2, [pc, #48]	; (80044d0 <pxPortInitialiseStack+0x64>)
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	3b14      	subs	r3, #20
 80044a6:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 80044a8:	687a      	ldr	r2, [r7, #4]
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	3b04      	subs	r3, #4
 80044b2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	f06f 0202 	mvn.w	r2, #2
 80044ba:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	3b20      	subs	r3, #32
 80044c0:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 80044c2:	68fb      	ldr	r3, [r7, #12]
}
 80044c4:	4618      	mov	r0, r3
 80044c6:	3714      	adds	r7, #20
 80044c8:	46bd      	mov	sp, r7
 80044ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ce:	4770      	bx	lr
 80044d0:	080044d5 	.word	0x080044d5

080044d4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80044d4:	b480      	push	{r7}
 80044d6:	b085      	sub	sp, #20
 80044d8:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 80044da:	2300      	movs	r3, #0
 80044dc:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 80044de:	4b12      	ldr	r3, [pc, #72]	; (8004528 <prvTaskExitError+0x54>)
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80044e6:	d00a      	beq.n	80044fe <prvTaskExitError+0x2a>
        __asm volatile
 80044e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044ec:	f383 8811 	msr	BASEPRI, r3
 80044f0:	f3bf 8f6f 	isb	sy
 80044f4:	f3bf 8f4f 	dsb	sy
 80044f8:	60fb      	str	r3, [r7, #12]
    }
 80044fa:	bf00      	nop
 80044fc:	e7fe      	b.n	80044fc <prvTaskExitError+0x28>
        __asm volatile
 80044fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004502:	f383 8811 	msr	BASEPRI, r3
 8004506:	f3bf 8f6f 	isb	sy
 800450a:	f3bf 8f4f 	dsb	sy
 800450e:	60bb      	str	r3, [r7, #8]
    }
 8004510:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8004512:	bf00      	nop
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	2b00      	cmp	r3, #0
 8004518:	d0fc      	beq.n	8004514 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 800451a:	bf00      	nop
 800451c:	bf00      	nop
 800451e:	3714      	adds	r7, #20
 8004520:	46bd      	mov	sp, r7
 8004522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004526:	4770      	bx	lr
 8004528:	20000010 	.word	0x20000010
 800452c:	00000000 	.word	0x00000000

08004530 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8004530:	4b07      	ldr	r3, [pc, #28]	; (8004550 <pxCurrentTCBConst2>)
 8004532:	6819      	ldr	r1, [r3, #0]
 8004534:	6808      	ldr	r0, [r1, #0]
 8004536:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800453a:	f380 8809 	msr	PSP, r0
 800453e:	f3bf 8f6f 	isb	sy
 8004542:	f04f 0000 	mov.w	r0, #0
 8004546:	f380 8811 	msr	BASEPRI, r0
 800454a:	4770      	bx	lr
 800454c:	f3af 8000 	nop.w

08004550 <pxCurrentTCBConst2>:
 8004550:	20000114 	.word	0x20000114
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8004554:	bf00      	nop
 8004556:	bf00      	nop

08004558 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8004558:	4808      	ldr	r0, [pc, #32]	; (800457c <prvPortStartFirstTask+0x24>)
 800455a:	6800      	ldr	r0, [r0, #0]
 800455c:	6800      	ldr	r0, [r0, #0]
 800455e:	f380 8808 	msr	MSP, r0
 8004562:	f04f 0000 	mov.w	r0, #0
 8004566:	f380 8814 	msr	CONTROL, r0
 800456a:	b662      	cpsie	i
 800456c:	b661      	cpsie	f
 800456e:	f3bf 8f4f 	dsb	sy
 8004572:	f3bf 8f6f 	isb	sy
 8004576:	df00      	svc	0
 8004578:	bf00      	nop
 800457a:	0000      	.short	0x0000
 800457c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8004580:	bf00      	nop
 8004582:	bf00      	nop

08004584 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004584:	b580      	push	{r7, lr}
 8004586:	b086      	sub	sp, #24
 8004588:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800458a:	4b46      	ldr	r3, [pc, #280]	; (80046a4 <xPortStartScheduler+0x120>)
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	4a46      	ldr	r2, [pc, #280]	; (80046a8 <xPortStartScheduler+0x124>)
 8004590:	4293      	cmp	r3, r2
 8004592:	d10a      	bne.n	80045aa <xPortStartScheduler+0x26>
        __asm volatile
 8004594:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004598:	f383 8811 	msr	BASEPRI, r3
 800459c:	f3bf 8f6f 	isb	sy
 80045a0:	f3bf 8f4f 	dsb	sy
 80045a4:	613b      	str	r3, [r7, #16]
    }
 80045a6:	bf00      	nop
 80045a8:	e7fe      	b.n	80045a8 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80045aa:	4b3e      	ldr	r3, [pc, #248]	; (80046a4 <xPortStartScheduler+0x120>)
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	4a3f      	ldr	r2, [pc, #252]	; (80046ac <xPortStartScheduler+0x128>)
 80045b0:	4293      	cmp	r3, r2
 80045b2:	d10a      	bne.n	80045ca <xPortStartScheduler+0x46>
        __asm volatile
 80045b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045b8:	f383 8811 	msr	BASEPRI, r3
 80045bc:	f3bf 8f6f 	isb	sy
 80045c0:	f3bf 8f4f 	dsb	sy
 80045c4:	60fb      	str	r3, [r7, #12]
    }
 80045c6:	bf00      	nop
 80045c8:	e7fe      	b.n	80045c8 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint32_t ulOriginalPriority;
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80045ca:	4b39      	ldr	r3, [pc, #228]	; (80046b0 <xPortStartScheduler+0x12c>)
 80045cc:	617b      	str	r3, [r7, #20]
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ulOriginalPriority = *pucFirstUserPriorityRegister;
 80045ce:	697b      	ldr	r3, [r7, #20]
 80045d0:	781b      	ldrb	r3, [r3, #0]
 80045d2:	b2db      	uxtb	r3, r3
 80045d4:	607b      	str	r3, [r7, #4]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80045d6:	697b      	ldr	r3, [r7, #20]
 80045d8:	22ff      	movs	r2, #255	; 0xff
 80045da:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80045dc:	697b      	ldr	r3, [r7, #20]
 80045de:	781b      	ldrb	r3, [r3, #0]
 80045e0:	b2db      	uxtb	r3, r3
 80045e2:	70fb      	strb	r3, [r7, #3]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80045e4:	78fb      	ldrb	r3, [r7, #3]
 80045e6:	b2db      	uxtb	r3, r3
 80045e8:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80045ec:	b2da      	uxtb	r2, r3
 80045ee:	4b31      	ldr	r3, [pc, #196]	; (80046b4 <xPortStartScheduler+0x130>)
 80045f0:	701a      	strb	r2, [r3, #0]

        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */
        ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80045f2:	4b31      	ldr	r3, [pc, #196]	; (80046b8 <xPortStartScheduler+0x134>)
 80045f4:	2207      	movs	r2, #7
 80045f6:	601a      	str	r2, [r3, #0]

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80045f8:	e009      	b.n	800460e <xPortStartScheduler+0x8a>
        {
            ulMaxPRIGROUPValue--;
 80045fa:	4b2f      	ldr	r3, [pc, #188]	; (80046b8 <xPortStartScheduler+0x134>)
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	3b01      	subs	r3, #1
 8004600:	4a2d      	ldr	r2, [pc, #180]	; (80046b8 <xPortStartScheduler+0x134>)
 8004602:	6013      	str	r3, [r2, #0]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004604:	78fb      	ldrb	r3, [r7, #3]
 8004606:	b2db      	uxtb	r3, r3
 8004608:	005b      	lsls	r3, r3, #1
 800460a:	b2db      	uxtb	r3, r3
 800460c:	70fb      	strb	r3, [r7, #3]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800460e:	78fb      	ldrb	r3, [r7, #3]
 8004610:	b2db      	uxtb	r3, r3
 8004612:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004616:	2b80      	cmp	r3, #128	; 0x80
 8004618:	d0ef      	beq.n	80045fa <xPortStartScheduler+0x76>
        #ifdef configPRIO_BITS
        {
            /* Check the FreeRTOS configuration that defines the number of
             * priority bits matches the number of priority bits actually queried
             * from the hardware. */
            configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800461a:	4b27      	ldr	r3, [pc, #156]	; (80046b8 <xPortStartScheduler+0x134>)
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	f1c3 0307 	rsb	r3, r3, #7
 8004622:	2b04      	cmp	r3, #4
 8004624:	d00a      	beq.n	800463c <xPortStartScheduler+0xb8>
        __asm volatile
 8004626:	f04f 0350 	mov.w	r3, #80	; 0x50
 800462a:	f383 8811 	msr	BASEPRI, r3
 800462e:	f3bf 8f6f 	isb	sy
 8004632:	f3bf 8f4f 	dsb	sy
 8004636:	60bb      	str	r3, [r7, #8]
    }
 8004638:	bf00      	nop
 800463a:	e7fe      	b.n	800463a <xPortStartScheduler+0xb6>
        }
        #endif

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800463c:	4b1e      	ldr	r3, [pc, #120]	; (80046b8 <xPortStartScheduler+0x134>)
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	021b      	lsls	r3, r3, #8
 8004642:	4a1d      	ldr	r2, [pc, #116]	; (80046b8 <xPortStartScheduler+0x134>)
 8004644:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004646:	4b1c      	ldr	r3, [pc, #112]	; (80046b8 <xPortStartScheduler+0x134>)
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800464e:	4a1a      	ldr	r2, [pc, #104]	; (80046b8 <xPortStartScheduler+0x134>)
 8004650:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ulOriginalPriority;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	b2da      	uxtb	r2, r3
 8004656:	697b      	ldr	r3, [r7, #20]
 8004658:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 800465a:	4b18      	ldr	r3, [pc, #96]	; (80046bc <xPortStartScheduler+0x138>)
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	4a17      	ldr	r2, [pc, #92]	; (80046bc <xPortStartScheduler+0x138>)
 8004660:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004664:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8004666:	4b15      	ldr	r3, [pc, #84]	; (80046bc <xPortStartScheduler+0x138>)
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	4a14      	ldr	r2, [pc, #80]	; (80046bc <xPortStartScheduler+0x138>)
 800466c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004670:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8004672:	f000 f963 	bl	800493c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8004676:	4b12      	ldr	r3, [pc, #72]	; (80046c0 <xPortStartScheduler+0x13c>)
 8004678:	2200      	movs	r2, #0
 800467a:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 800467c:	f000 f982 	bl	8004984 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004680:	4b10      	ldr	r3, [pc, #64]	; (80046c4 <xPortStartScheduler+0x140>)
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	4a0f      	ldr	r2, [pc, #60]	; (80046c4 <xPortStartScheduler+0x140>)
 8004686:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800468a:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 800468c:	f7ff ff64 	bl	8004558 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8004690:	f7ff f8e2 	bl	8003858 <vTaskSwitchContext>
    prvTaskExitError();
 8004694:	f7ff ff1e 	bl	80044d4 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8004698:	2300      	movs	r3, #0
}
 800469a:	4618      	mov	r0, r3
 800469c:	3718      	adds	r7, #24
 800469e:	46bd      	mov	sp, r7
 80046a0:	bd80      	pop	{r7, pc}
 80046a2:	bf00      	nop
 80046a4:	e000ed00 	.word	0xe000ed00
 80046a8:	410fc271 	.word	0x410fc271
 80046ac:	410fc270 	.word	0x410fc270
 80046b0:	e000e400 	.word	0xe000e400
 80046b4:	20000290 	.word	0x20000290
 80046b8:	20000294 	.word	0x20000294
 80046bc:	e000ed20 	.word	0xe000ed20
 80046c0:	20000010 	.word	0x20000010
 80046c4:	e000ef34 	.word	0xe000ef34

080046c8 <vInitPrioGroupValue>:
/*-----------------------------------------------------------*/


void vInitPrioGroupValue(void)
{
 80046c8:	b480      	push	{r7}
 80046ca:	b087      	sub	sp, #28
 80046cc:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80046ce:	4b37      	ldr	r3, [pc, #220]	; (80047ac <vInitPrioGroupValue+0xe4>)
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	4a37      	ldr	r2, [pc, #220]	; (80047b0 <vInitPrioGroupValue+0xe8>)
 80046d4:	4293      	cmp	r3, r2
 80046d6:	d10a      	bne.n	80046ee <vInitPrioGroupValue+0x26>
        __asm volatile
 80046d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046dc:	f383 8811 	msr	BASEPRI, r3
 80046e0:	f3bf 8f6f 	isb	sy
 80046e4:	f3bf 8f4f 	dsb	sy
 80046e8:	613b      	str	r3, [r7, #16]
    }
 80046ea:	bf00      	nop
 80046ec:	e7fe      	b.n	80046ec <vInitPrioGroupValue+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80046ee:	4b2f      	ldr	r3, [pc, #188]	; (80047ac <vInitPrioGroupValue+0xe4>)
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	4a30      	ldr	r2, [pc, #192]	; (80047b4 <vInitPrioGroupValue+0xec>)
 80046f4:	4293      	cmp	r3, r2
 80046f6:	d10a      	bne.n	800470e <vInitPrioGroupValue+0x46>
        __asm volatile
 80046f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046fc:	f383 8811 	msr	BASEPRI, r3
 8004700:	f3bf 8f6f 	isb	sy
 8004704:	f3bf 8f4f 	dsb	sy
 8004708:	60fb      	str	r3, [r7, #12]
    }
 800470a:	bf00      	nop
 800470c:	e7fe      	b.n	800470c <vInitPrioGroupValue+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800470e:	4b2a      	ldr	r3, [pc, #168]	; (80047b8 <vInitPrioGroupValue+0xf0>)
 8004710:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004712:	697b      	ldr	r3, [r7, #20]
 8004714:	781b      	ldrb	r3, [r3, #0]
 8004716:	b2db      	uxtb	r3, r3
 8004718:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800471a:	697b      	ldr	r3, [r7, #20]
 800471c:	22ff      	movs	r2, #255	; 0xff
 800471e:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004720:	697b      	ldr	r3, [r7, #20]
 8004722:	781b      	ldrb	r3, [r3, #0]
 8004724:	b2db      	uxtb	r3, r3
 8004726:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004728:	78fb      	ldrb	r3, [r7, #3]
 800472a:	b2db      	uxtb	r3, r3
 800472c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004730:	b2da      	uxtb	r2, r3
 8004732:	4b22      	ldr	r3, [pc, #136]	; (80047bc <vInitPrioGroupValue+0xf4>)
 8004734:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004736:	4b22      	ldr	r3, [pc, #136]	; (80047c0 <vInitPrioGroupValue+0xf8>)
 8004738:	2207      	movs	r2, #7
 800473a:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800473c:	e009      	b.n	8004752 <vInitPrioGroupValue+0x8a>
            {
                ulMaxPRIGROUPValue--;
 800473e:	4b20      	ldr	r3, [pc, #128]	; (80047c0 <vInitPrioGroupValue+0xf8>)
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	3b01      	subs	r3, #1
 8004744:	4a1e      	ldr	r2, [pc, #120]	; (80047c0 <vInitPrioGroupValue+0xf8>)
 8004746:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004748:	78fb      	ldrb	r3, [r7, #3]
 800474a:	b2db      	uxtb	r3, r3
 800474c:	005b      	lsls	r3, r3, #1
 800474e:	b2db      	uxtb	r3, r3
 8004750:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004752:	78fb      	ldrb	r3, [r7, #3]
 8004754:	b2db      	uxtb	r3, r3
 8004756:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800475a:	2b80      	cmp	r3, #128	; 0x80
 800475c:	d0ef      	beq.n	800473e <vInitPrioGroupValue+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800475e:	4b18      	ldr	r3, [pc, #96]	; (80047c0 <vInitPrioGroupValue+0xf8>)
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f1c3 0307 	rsb	r3, r3, #7
 8004766:	2b04      	cmp	r3, #4
 8004768:	d00a      	beq.n	8004780 <vInitPrioGroupValue+0xb8>
        __asm volatile
 800476a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800476e:	f383 8811 	msr	BASEPRI, r3
 8004772:	f3bf 8f6f 	isb	sy
 8004776:	f3bf 8f4f 	dsb	sy
 800477a:	60bb      	str	r3, [r7, #8]
    }
 800477c:	bf00      	nop
 800477e:	e7fe      	b.n	800477e <vInitPrioGroupValue+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004780:	4b0f      	ldr	r3, [pc, #60]	; (80047c0 <vInitPrioGroupValue+0xf8>)
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	021b      	lsls	r3, r3, #8
 8004786:	4a0e      	ldr	r2, [pc, #56]	; (80047c0 <vInitPrioGroupValue+0xf8>)
 8004788:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800478a:	4b0d      	ldr	r3, [pc, #52]	; (80047c0 <vInitPrioGroupValue+0xf8>)
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004792:	4a0b      	ldr	r2, [pc, #44]	; (80047c0 <vInitPrioGroupValue+0xf8>)
 8004794:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	b2da      	uxtb	r2, r3
 800479a:	697b      	ldr	r3, [r7, #20]
 800479c:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */
}
 800479e:	bf00      	nop
 80047a0:	371c      	adds	r7, #28
 80047a2:	46bd      	mov	sp, r7
 80047a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a8:	4770      	bx	lr
 80047aa:	bf00      	nop
 80047ac:	e000ed00 	.word	0xe000ed00
 80047b0:	410fc271 	.word	0x410fc271
 80047b4:	410fc270 	.word	0x410fc270
 80047b8:	e000e400 	.word	0xe000e400
 80047bc:	20000290 	.word	0x20000290
 80047c0:	20000294 	.word	0x20000294

080047c4 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80047c4:	b480      	push	{r7}
 80047c6:	b083      	sub	sp, #12
 80047c8:	af00      	add	r7, sp, #0
        __asm volatile
 80047ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047ce:	f383 8811 	msr	BASEPRI, r3
 80047d2:	f3bf 8f6f 	isb	sy
 80047d6:	f3bf 8f4f 	dsb	sy
 80047da:	607b      	str	r3, [r7, #4]
    }
 80047dc:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 80047de:	4b0f      	ldr	r3, [pc, #60]	; (800481c <vPortEnterCritical+0x58>)
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	3301      	adds	r3, #1
 80047e4:	4a0d      	ldr	r2, [pc, #52]	; (800481c <vPortEnterCritical+0x58>)
 80047e6:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 80047e8:	4b0c      	ldr	r3, [pc, #48]	; (800481c <vPortEnterCritical+0x58>)
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	2b01      	cmp	r3, #1
 80047ee:	d10f      	bne.n	8004810 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80047f0:	4b0b      	ldr	r3, [pc, #44]	; (8004820 <vPortEnterCritical+0x5c>)
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	b2db      	uxtb	r3, r3
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d00a      	beq.n	8004810 <vPortEnterCritical+0x4c>
        __asm volatile
 80047fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047fe:	f383 8811 	msr	BASEPRI, r3
 8004802:	f3bf 8f6f 	isb	sy
 8004806:	f3bf 8f4f 	dsb	sy
 800480a:	603b      	str	r3, [r7, #0]
    }
 800480c:	bf00      	nop
 800480e:	e7fe      	b.n	800480e <vPortEnterCritical+0x4a>
    }
}
 8004810:	bf00      	nop
 8004812:	370c      	adds	r7, #12
 8004814:	46bd      	mov	sp, r7
 8004816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800481a:	4770      	bx	lr
 800481c:	20000010 	.word	0x20000010
 8004820:	e000ed04 	.word	0xe000ed04

08004824 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004824:	b480      	push	{r7}
 8004826:	b083      	sub	sp, #12
 8004828:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 800482a:	4b12      	ldr	r3, [pc, #72]	; (8004874 <vPortExitCritical+0x50>)
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	2b00      	cmp	r3, #0
 8004830:	d10a      	bne.n	8004848 <vPortExitCritical+0x24>
        __asm volatile
 8004832:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004836:	f383 8811 	msr	BASEPRI, r3
 800483a:	f3bf 8f6f 	isb	sy
 800483e:	f3bf 8f4f 	dsb	sy
 8004842:	607b      	str	r3, [r7, #4]
    }
 8004844:	bf00      	nop
 8004846:	e7fe      	b.n	8004846 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8004848:	4b0a      	ldr	r3, [pc, #40]	; (8004874 <vPortExitCritical+0x50>)
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	3b01      	subs	r3, #1
 800484e:	4a09      	ldr	r2, [pc, #36]	; (8004874 <vPortExitCritical+0x50>)
 8004850:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8004852:	4b08      	ldr	r3, [pc, #32]	; (8004874 <vPortExitCritical+0x50>)
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	2b00      	cmp	r3, #0
 8004858:	d105      	bne.n	8004866 <vPortExitCritical+0x42>
 800485a:	2300      	movs	r3, #0
 800485c:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 800485e:	683b      	ldr	r3, [r7, #0]
 8004860:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8004864:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8004866:	bf00      	nop
 8004868:	370c      	adds	r7, #12
 800486a:	46bd      	mov	sp, r7
 800486c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004870:	4770      	bx	lr
 8004872:	bf00      	nop
 8004874:	20000010 	.word	0x20000010
	...

08004880 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8004880:	f3ef 8009 	mrs	r0, PSP
 8004884:	f3bf 8f6f 	isb	sy
 8004888:	4b15      	ldr	r3, [pc, #84]	; (80048e0 <pxCurrentTCBConst>)
 800488a:	681a      	ldr	r2, [r3, #0]
 800488c:	f01e 0f10 	tst.w	lr, #16
 8004890:	bf08      	it	eq
 8004892:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004896:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800489a:	6010      	str	r0, [r2, #0]
 800489c:	e92d 0009 	stmdb	sp!, {r0, r3}
 80048a0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80048a4:	f380 8811 	msr	BASEPRI, r0
 80048a8:	f3bf 8f4f 	dsb	sy
 80048ac:	f3bf 8f6f 	isb	sy
 80048b0:	f7fe ffd2 	bl	8003858 <vTaskSwitchContext>
 80048b4:	f04f 0000 	mov.w	r0, #0
 80048b8:	f380 8811 	msr	BASEPRI, r0
 80048bc:	bc09      	pop	{r0, r3}
 80048be:	6819      	ldr	r1, [r3, #0]
 80048c0:	6808      	ldr	r0, [r1, #0]
 80048c2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80048c6:	f01e 0f10 	tst.w	lr, #16
 80048ca:	bf08      	it	eq
 80048cc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80048d0:	f380 8809 	msr	PSP, r0
 80048d4:	f3bf 8f6f 	isb	sy
 80048d8:	4770      	bx	lr
 80048da:	bf00      	nop
 80048dc:	f3af 8000 	nop.w

080048e0 <pxCurrentTCBConst>:
 80048e0:	20000114 	.word	0x20000114
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 80048e4:	bf00      	nop
 80048e6:	bf00      	nop

080048e8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80048e8:	b580      	push	{r7, lr}
 80048ea:	b082      	sub	sp, #8
 80048ec:	af00      	add	r7, sp, #0
        __asm volatile
 80048ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048f2:	f383 8811 	msr	BASEPRI, r3
 80048f6:	f3bf 8f6f 	isb	sy
 80048fa:	f3bf 8f4f 	dsb	sy
 80048fe:	607b      	str	r3, [r7, #4]
    }
 8004900:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 8004902:	f001 fff7 	bl	80068f4 <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8004906:	f7fe fe8d 	bl	8003624 <xTaskIncrementTick>
 800490a:	4603      	mov	r3, r0
 800490c:	2b00      	cmp	r3, #0
 800490e:	d006      	beq.n	800491e <SysTick_Handler+0x36>
        {
			traceISR_EXIT_TO_SCHEDULER();
 8004910:	f002 f84e 	bl	80069b0 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004914:	4b08      	ldr	r3, [pc, #32]	; (8004938 <SysTick_Handler+0x50>)
 8004916:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800491a:	601a      	str	r2, [r3, #0]
 800491c:	e001      	b.n	8004922 <SysTick_Handler+0x3a>
        }
		else
		{
			traceISR_EXIT();
 800491e:	f002 f82b 	bl	8006978 <SEGGER_SYSVIEW_RecordExitISR>
 8004922:	2300      	movs	r3, #0
 8004924:	603b      	str	r3, [r7, #0]
        __asm volatile
 8004926:	683b      	ldr	r3, [r7, #0]
 8004928:	f383 8811 	msr	BASEPRI, r3
    }
 800492c:	bf00      	nop
		}
    }
    portENABLE_INTERRUPTS();
}
 800492e:	bf00      	nop
 8004930:	3708      	adds	r7, #8
 8004932:	46bd      	mov	sp, r7
 8004934:	bd80      	pop	{r7, pc}
 8004936:	bf00      	nop
 8004938:	e000ed04 	.word	0xe000ed04

0800493c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 800493c:	b480      	push	{r7}
 800493e:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004940:	4b0b      	ldr	r3, [pc, #44]	; (8004970 <vPortSetupTimerInterrupt+0x34>)
 8004942:	2200      	movs	r2, #0
 8004944:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004946:	4b0b      	ldr	r3, [pc, #44]	; (8004974 <vPortSetupTimerInterrupt+0x38>)
 8004948:	2200      	movs	r2, #0
 800494a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800494c:	4b0a      	ldr	r3, [pc, #40]	; (8004978 <vPortSetupTimerInterrupt+0x3c>)
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	4a0a      	ldr	r2, [pc, #40]	; (800497c <vPortSetupTimerInterrupt+0x40>)
 8004952:	fba2 2303 	umull	r2, r3, r2, r3
 8004956:	099b      	lsrs	r3, r3, #6
 8004958:	4a09      	ldr	r2, [pc, #36]	; (8004980 <vPortSetupTimerInterrupt+0x44>)
 800495a:	3b01      	subs	r3, #1
 800495c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800495e:	4b04      	ldr	r3, [pc, #16]	; (8004970 <vPortSetupTimerInterrupt+0x34>)
 8004960:	2207      	movs	r2, #7
 8004962:	601a      	str	r2, [r3, #0]
}
 8004964:	bf00      	nop
 8004966:	46bd      	mov	sp, r7
 8004968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800496c:	4770      	bx	lr
 800496e:	bf00      	nop
 8004970:	e000e010 	.word	0xe000e010
 8004974:	e000e018 	.word	0xe000e018
 8004978:	20000000 	.word	0x20000000
 800497c:	10624dd3 	.word	0x10624dd3
 8004980:	e000e014 	.word	0xe000e014

08004984 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8004984:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004994 <vPortEnableVFP+0x10>
 8004988:	6801      	ldr	r1, [r0, #0]
 800498a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800498e:	6001      	str	r1, [r0, #0]
 8004990:	4770      	bx	lr
 8004992:	0000      	.short	0x0000
 8004994:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8004998:	bf00      	nop
 800499a:	bf00      	nop

0800499c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 800499c:	b480      	push	{r7}
 800499e:	b085      	sub	sp, #20
 80049a0:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 80049a2:	f3ef 8305 	mrs	r3, IPSR
 80049a6:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	2b0f      	cmp	r3, #15
 80049ac:	d914      	bls.n	80049d8 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80049ae:	4a17      	ldr	r2, [pc, #92]	; (8004a0c <vPortValidateInterruptPriority+0x70>)
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	4413      	add	r3, r2
 80049b4:	781b      	ldrb	r3, [r3, #0]
 80049b6:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80049b8:	4b15      	ldr	r3, [pc, #84]	; (8004a10 <vPortValidateInterruptPriority+0x74>)
 80049ba:	781b      	ldrb	r3, [r3, #0]
 80049bc:	7afa      	ldrb	r2, [r7, #11]
 80049be:	429a      	cmp	r2, r3
 80049c0:	d20a      	bcs.n	80049d8 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 80049c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049c6:	f383 8811 	msr	BASEPRI, r3
 80049ca:	f3bf 8f6f 	isb	sy
 80049ce:	f3bf 8f4f 	dsb	sy
 80049d2:	607b      	str	r3, [r7, #4]
    }
 80049d4:	bf00      	nop
 80049d6:	e7fe      	b.n	80049d6 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80049d8:	4b0e      	ldr	r3, [pc, #56]	; (8004a14 <vPortValidateInterruptPriority+0x78>)
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80049e0:	4b0d      	ldr	r3, [pc, #52]	; (8004a18 <vPortValidateInterruptPriority+0x7c>)
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	429a      	cmp	r2, r3
 80049e6:	d90a      	bls.n	80049fe <vPortValidateInterruptPriority+0x62>
        __asm volatile
 80049e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049ec:	f383 8811 	msr	BASEPRI, r3
 80049f0:	f3bf 8f6f 	isb	sy
 80049f4:	f3bf 8f4f 	dsb	sy
 80049f8:	603b      	str	r3, [r7, #0]
    }
 80049fa:	bf00      	nop
 80049fc:	e7fe      	b.n	80049fc <vPortValidateInterruptPriority+0x60>
    }
 80049fe:	bf00      	nop
 8004a00:	3714      	adds	r7, #20
 8004a02:	46bd      	mov	sp, r7
 8004a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a08:	4770      	bx	lr
 8004a0a:	bf00      	nop
 8004a0c:	e000e3f0 	.word	0xe000e3f0
 8004a10:	20000290 	.word	0x20000290
 8004a14:	e000ed0c 	.word	0xe000ed0c
 8004a18:	20000294 	.word	0x20000294

08004a1c <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8004a1c:	b580      	push	{r7, lr}
 8004a1e:	b08a      	sub	sp, #40	; 0x28
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 8004a24:	2300      	movs	r3, #0
 8004a26:	61fb      	str	r3, [r7, #28]
    size_t xAdditionalRequiredSize;

    vTaskSuspendAll();
 8004a28:	f7fe fccc 	bl	80033c4 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8004a2c:	4b53      	ldr	r3, [pc, #332]	; (8004b7c <pvPortMalloc+0x160>)
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d101      	bne.n	8004a38 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8004a34:	f000 f908 	bl	8004c48 <prvHeapInit>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xWantedSize > 0 )
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d012      	beq.n	8004a64 <pvPortMalloc+0x48>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. Some
             * additional increment may also be needed for alignment. */
            xAdditionalRequiredSize = xHeapStructSize + portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 8004a3e:	2208      	movs	r2, #8
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	f003 0307 	and.w	r3, r3, #7
 8004a46:	1ad3      	subs	r3, r2, r3
 8004a48:	3308      	adds	r3, #8
 8004a4a:	61bb      	str	r3, [r7, #24]

            if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 8004a4c:	69bb      	ldr	r3, [r7, #24]
 8004a4e:	43db      	mvns	r3, r3
 8004a50:	687a      	ldr	r2, [r7, #4]
 8004a52:	429a      	cmp	r2, r3
 8004a54:	d804      	bhi.n	8004a60 <pvPortMalloc+0x44>
            {
                xWantedSize += xAdditionalRequiredSize;
 8004a56:	687a      	ldr	r2, [r7, #4]
 8004a58:	69bb      	ldr	r3, [r7, #24]
 8004a5a:	4413      	add	r3, r2
 8004a5c:	607b      	str	r3, [r7, #4]
 8004a5e:	e001      	b.n	8004a64 <pvPortMalloc+0x48>
            }
            else
            {
                xWantedSize = 0;
 8004a60:	2300      	movs	r3, #0
 8004a62:	607b      	str	r3, [r7, #4]

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	db70      	blt.n	8004b4c <pvPortMalloc+0x130>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d06d      	beq.n	8004b4c <pvPortMalloc+0x130>
 8004a70:	4b43      	ldr	r3, [pc, #268]	; (8004b80 <pvPortMalloc+0x164>)
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	687a      	ldr	r2, [r7, #4]
 8004a76:	429a      	cmp	r2, r3
 8004a78:	d868      	bhi.n	8004b4c <pvPortMalloc+0x130>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8004a7a:	4b42      	ldr	r3, [pc, #264]	; (8004b84 <pvPortMalloc+0x168>)
 8004a7c:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8004a7e:	4b41      	ldr	r3, [pc, #260]	; (8004b84 <pvPortMalloc+0x168>)
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004a84:	e004      	b.n	8004a90 <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
 8004a86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a88:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8004a8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004a90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a92:	685b      	ldr	r3, [r3, #4]
 8004a94:	687a      	ldr	r2, [r7, #4]
 8004a96:	429a      	cmp	r2, r3
 8004a98:	d903      	bls.n	8004aa2 <pvPortMalloc+0x86>
 8004a9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d1f1      	bne.n	8004a86 <pvPortMalloc+0x6a>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8004aa2:	4b36      	ldr	r3, [pc, #216]	; (8004b7c <pvPortMalloc+0x160>)
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004aa8:	429a      	cmp	r2, r3
 8004aaa:	d04f      	beq.n	8004b4c <pvPortMalloc+0x130>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004aac:	6a3b      	ldr	r3, [r7, #32]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	2208      	movs	r2, #8
 8004ab2:	4413      	add	r3, r2
 8004ab4:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004ab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ab8:	681a      	ldr	r2, [r3, #0]
 8004aba:	6a3b      	ldr	r3, [r7, #32]
 8004abc:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004abe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ac0:	685a      	ldr	r2, [r3, #4]
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	1ad2      	subs	r2, r2, r3
 8004ac6:	2308      	movs	r3, #8
 8004ac8:	005b      	lsls	r3, r3, #1
 8004aca:	429a      	cmp	r2, r3
 8004acc:	d91f      	bls.n	8004b0e <pvPortMalloc+0xf2>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004ace:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	4413      	add	r3, r2
 8004ad4:	617b      	str	r3, [r7, #20]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004ad6:	697b      	ldr	r3, [r7, #20]
 8004ad8:	f003 0307 	and.w	r3, r3, #7
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d00a      	beq.n	8004af6 <pvPortMalloc+0xda>
        __asm volatile
 8004ae0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ae4:	f383 8811 	msr	BASEPRI, r3
 8004ae8:	f3bf 8f6f 	isb	sy
 8004aec:	f3bf 8f4f 	dsb	sy
 8004af0:	613b      	str	r3, [r7, #16]
    }
 8004af2:	bf00      	nop
 8004af4:	e7fe      	b.n	8004af4 <pvPortMalloc+0xd8>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004af6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004af8:	685a      	ldr	r2, [r3, #4]
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	1ad2      	subs	r2, r2, r3
 8004afe:	697b      	ldr	r3, [r7, #20]
 8004b00:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8004b02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b04:	687a      	ldr	r2, [r7, #4]
 8004b06:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004b08:	6978      	ldr	r0, [r7, #20]
 8004b0a:	f000 f8f9 	bl	8004d00 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004b0e:	4b1c      	ldr	r3, [pc, #112]	; (8004b80 <pvPortMalloc+0x164>)
 8004b10:	681a      	ldr	r2, [r3, #0]
 8004b12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b14:	685b      	ldr	r3, [r3, #4]
 8004b16:	1ad3      	subs	r3, r2, r3
 8004b18:	4a19      	ldr	r2, [pc, #100]	; (8004b80 <pvPortMalloc+0x164>)
 8004b1a:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004b1c:	4b18      	ldr	r3, [pc, #96]	; (8004b80 <pvPortMalloc+0x164>)
 8004b1e:	681a      	ldr	r2, [r3, #0]
 8004b20:	4b19      	ldr	r3, [pc, #100]	; (8004b88 <pvPortMalloc+0x16c>)
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	429a      	cmp	r2, r3
 8004b26:	d203      	bcs.n	8004b30 <pvPortMalloc+0x114>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004b28:	4b15      	ldr	r3, [pc, #84]	; (8004b80 <pvPortMalloc+0x164>)
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	4a16      	ldr	r2, [pc, #88]	; (8004b88 <pvPortMalloc+0x16c>)
 8004b2e:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 8004b30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b32:	685b      	ldr	r3, [r3, #4]
 8004b34:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004b38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b3a:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8004b3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b3e:	2200      	movs	r2, #0
 8004b40:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8004b42:	4b12      	ldr	r3, [pc, #72]	; (8004b8c <pvPortMalloc+0x170>)
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	3301      	adds	r3, #1
 8004b48:	4a10      	ldr	r2, [pc, #64]	; (8004b8c <pvPortMalloc+0x170>)
 8004b4a:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8004b4c:	f7fe fc48 	bl	80033e0 <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004b50:	69fb      	ldr	r3, [r7, #28]
 8004b52:	f003 0307 	and.w	r3, r3, #7
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d00a      	beq.n	8004b70 <pvPortMalloc+0x154>
        __asm volatile
 8004b5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b5e:	f383 8811 	msr	BASEPRI, r3
 8004b62:	f3bf 8f6f 	isb	sy
 8004b66:	f3bf 8f4f 	dsb	sy
 8004b6a:	60fb      	str	r3, [r7, #12]
    }
 8004b6c:	bf00      	nop
 8004b6e:	e7fe      	b.n	8004b6e <pvPortMalloc+0x152>
    return pvReturn;
 8004b70:	69fb      	ldr	r3, [r7, #28]
}
 8004b72:	4618      	mov	r0, r3
 8004b74:	3728      	adds	r7, #40	; 0x28
 8004b76:	46bd      	mov	sp, r7
 8004b78:	bd80      	pop	{r7, pc}
 8004b7a:	bf00      	nop
 8004b7c:	20003ea0 	.word	0x20003ea0
 8004b80:	20003ea4 	.word	0x20003ea4
 8004b84:	20003e98 	.word	0x20003e98
 8004b88:	20003ea8 	.word	0x20003ea8
 8004b8c:	20003eac 	.word	0x20003eac

08004b90 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8004b90:	b580      	push	{r7, lr}
 8004b92:	b086      	sub	sp, #24
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d049      	beq.n	8004c36 <vPortFree+0xa6>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8004ba2:	2308      	movs	r3, #8
 8004ba4:	425b      	negs	r3, r3
 8004ba6:	697a      	ldr	r2, [r7, #20]
 8004ba8:	4413      	add	r3, r2
 8004baa:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8004bac:	697b      	ldr	r3, [r7, #20]
 8004bae:	613b      	str	r3, [r7, #16]

        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 8004bb0:	693b      	ldr	r3, [r7, #16]
 8004bb2:	685b      	ldr	r3, [r3, #4]
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	db0a      	blt.n	8004bce <vPortFree+0x3e>
        __asm volatile
 8004bb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bbc:	f383 8811 	msr	BASEPRI, r3
 8004bc0:	f3bf 8f6f 	isb	sy
 8004bc4:	f3bf 8f4f 	dsb	sy
 8004bc8:	60fb      	str	r3, [r7, #12]
    }
 8004bca:	bf00      	nop
 8004bcc:	e7fe      	b.n	8004bcc <vPortFree+0x3c>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004bce:	693b      	ldr	r3, [r7, #16]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d00a      	beq.n	8004bec <vPortFree+0x5c>
        __asm volatile
 8004bd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bda:	f383 8811 	msr	BASEPRI, r3
 8004bde:	f3bf 8f6f 	isb	sy
 8004be2:	f3bf 8f4f 	dsb	sy
 8004be6:	60bb      	str	r3, [r7, #8]
    }
 8004be8:	bf00      	nop
 8004bea:	e7fe      	b.n	8004bea <vPortFree+0x5a>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 8004bec:	693b      	ldr	r3, [r7, #16]
 8004bee:	685b      	ldr	r3, [r3, #4]
 8004bf0:	0fdb      	lsrs	r3, r3, #31
 8004bf2:	f003 0301 	and.w	r3, r3, #1
 8004bf6:	b2db      	uxtb	r3, r3
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d01c      	beq.n	8004c36 <vPortFree+0xa6>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8004bfc:	693b      	ldr	r3, [r7, #16]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d118      	bne.n	8004c36 <vPortFree+0xa6>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 8004c04:	693b      	ldr	r3, [r7, #16]
 8004c06:	685b      	ldr	r3, [r3, #4]
 8004c08:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004c0c:	693b      	ldr	r3, [r7, #16]
 8004c0e:	605a      	str	r2, [r3, #4]
                {
                    ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                }
                #endif

                vTaskSuspendAll();
 8004c10:	f7fe fbd8 	bl	80033c4 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8004c14:	693b      	ldr	r3, [r7, #16]
 8004c16:	685a      	ldr	r2, [r3, #4]
 8004c18:	4b09      	ldr	r3, [pc, #36]	; (8004c40 <vPortFree+0xb0>)
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	4413      	add	r3, r2
 8004c1e:	4a08      	ldr	r2, [pc, #32]	; (8004c40 <vPortFree+0xb0>)
 8004c20:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004c22:	6938      	ldr	r0, [r7, #16]
 8004c24:	f000 f86c 	bl	8004d00 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8004c28:	4b06      	ldr	r3, [pc, #24]	; (8004c44 <vPortFree+0xb4>)
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	3301      	adds	r3, #1
 8004c2e:	4a05      	ldr	r2, [pc, #20]	; (8004c44 <vPortFree+0xb4>)
 8004c30:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8004c32:	f7fe fbd5 	bl	80033e0 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8004c36:	bf00      	nop
 8004c38:	3718      	adds	r7, #24
 8004c3a:	46bd      	mov	sp, r7
 8004c3c:	bd80      	pop	{r7, pc}
 8004c3e:	bf00      	nop
 8004c40:	20003ea4 	.word	0x20003ea4
 8004c44:	20003eb0 	.word	0x20003eb0

08004c48 <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8004c48:	b480      	push	{r7}
 8004c4a:	b085      	sub	sp, #20
 8004c4c:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    portPOINTER_SIZE_TYPE uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004c4e:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8004c52:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 8004c54:	4b25      	ldr	r3, [pc, #148]	; (8004cec <prvHeapInit+0xa4>)
 8004c56:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	f003 0307 	and.w	r3, r3, #7
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d00c      	beq.n	8004c7c <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	3307      	adds	r3, #7
 8004c66:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	f023 0307 	bic.w	r3, r3, #7
 8004c6e:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( portPOINTER_SIZE_TYPE ) ucHeap;
 8004c70:	68ba      	ldr	r2, [r7, #8]
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	1ad3      	subs	r3, r2, r3
 8004c76:	4a1d      	ldr	r2, [pc, #116]	; (8004cec <prvHeapInit+0xa4>)
 8004c78:	4413      	add	r3, r2
 8004c7a:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004c80:	4a1b      	ldr	r2, [pc, #108]	; (8004cf0 <prvHeapInit+0xa8>)
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8004c86:	4b1a      	ldr	r3, [pc, #104]	; (8004cf0 <prvHeapInit+0xa8>)
 8004c88:	2200      	movs	r2, #0
 8004c8a:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( portPOINTER_SIZE_TYPE ) pucAlignedHeap ) + xTotalHeapSize;
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	68ba      	ldr	r2, [r7, #8]
 8004c90:	4413      	add	r3, r2
 8004c92:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8004c94:	2208      	movs	r2, #8
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	1a9b      	subs	r3, r3, r2
 8004c9a:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	f023 0307 	bic.w	r3, r3, #7
 8004ca2:	60fb      	str	r3, [r7, #12]
    pxEnd = ( BlockLink_t * ) uxAddress;
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	4a13      	ldr	r2, [pc, #76]	; (8004cf4 <prvHeapInit+0xac>)
 8004ca8:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8004caa:	4b12      	ldr	r3, [pc, #72]	; (8004cf4 <prvHeapInit+0xac>)
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	2200      	movs	r2, #0
 8004cb0:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8004cb2:	4b10      	ldr	r3, [pc, #64]	; (8004cf4 <prvHeapInit+0xac>)
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	2200      	movs	r2, #0
 8004cb8:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) pucAlignedHeap;
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 8004cbe:	683b      	ldr	r3, [r7, #0]
 8004cc0:	68fa      	ldr	r2, [r7, #12]
 8004cc2:	1ad2      	subs	r2, r2, r3
 8004cc4:	683b      	ldr	r3, [r7, #0]
 8004cc6:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004cc8:	4b0a      	ldr	r3, [pc, #40]	; (8004cf4 <prvHeapInit+0xac>)
 8004cca:	681a      	ldr	r2, [r3, #0]
 8004ccc:	683b      	ldr	r3, [r7, #0]
 8004cce:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004cd0:	683b      	ldr	r3, [r7, #0]
 8004cd2:	685b      	ldr	r3, [r3, #4]
 8004cd4:	4a08      	ldr	r2, [pc, #32]	; (8004cf8 <prvHeapInit+0xb0>)
 8004cd6:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004cd8:	683b      	ldr	r3, [r7, #0]
 8004cda:	685b      	ldr	r3, [r3, #4]
 8004cdc:	4a07      	ldr	r2, [pc, #28]	; (8004cfc <prvHeapInit+0xb4>)
 8004cde:	6013      	str	r3, [r2, #0]
}
 8004ce0:	bf00      	nop
 8004ce2:	3714      	adds	r7, #20
 8004ce4:	46bd      	mov	sp, r7
 8004ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cea:	4770      	bx	lr
 8004cec:	20000298 	.word	0x20000298
 8004cf0:	20003e98 	.word	0x20003e98
 8004cf4:	20003ea0 	.word	0x20003ea0
 8004cf8:	20003ea8 	.word	0x20003ea8
 8004cfc:	20003ea4 	.word	0x20003ea4

08004d00 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8004d00:	b480      	push	{r7}
 8004d02:	b085      	sub	sp, #20
 8004d04:	af00      	add	r7, sp, #0
 8004d06:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004d08:	4b28      	ldr	r3, [pc, #160]	; (8004dac <prvInsertBlockIntoFreeList+0xac>)
 8004d0a:	60fb      	str	r3, [r7, #12]
 8004d0c:	e002      	b.n	8004d14 <prvInsertBlockIntoFreeList+0x14>
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	60fb      	str	r3, [r7, #12]
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	687a      	ldr	r2, [r7, #4]
 8004d1a:	429a      	cmp	r2, r3
 8004d1c:	d8f7      	bhi.n	8004d0e <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	685b      	ldr	r3, [r3, #4]
 8004d26:	68ba      	ldr	r2, [r7, #8]
 8004d28:	4413      	add	r3, r2
 8004d2a:	687a      	ldr	r2, [r7, #4]
 8004d2c:	429a      	cmp	r2, r3
 8004d2e:	d108      	bne.n	8004d42 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	685a      	ldr	r2, [r3, #4]
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	685b      	ldr	r3, [r3, #4]
 8004d38:	441a      	add	r2, r3
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	685b      	ldr	r3, [r3, #4]
 8004d4a:	68ba      	ldr	r2, [r7, #8]
 8004d4c:	441a      	add	r2, r3
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	429a      	cmp	r2, r3
 8004d54:	d118      	bne.n	8004d88 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	681a      	ldr	r2, [r3, #0]
 8004d5a:	4b15      	ldr	r3, [pc, #84]	; (8004db0 <prvInsertBlockIntoFreeList+0xb0>)
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	429a      	cmp	r2, r3
 8004d60:	d00d      	beq.n	8004d7e <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	685a      	ldr	r2, [r3, #4]
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	685b      	ldr	r3, [r3, #4]
 8004d6c:	441a      	add	r2, r3
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	681a      	ldr	r2, [r3, #0]
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	601a      	str	r2, [r3, #0]
 8004d7c:	e008      	b.n	8004d90 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004d7e:	4b0c      	ldr	r3, [pc, #48]	; (8004db0 <prvInsertBlockIntoFreeList+0xb0>)
 8004d80:	681a      	ldr	r2, [r3, #0]
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	601a      	str	r2, [r3, #0]
 8004d86:	e003      	b.n	8004d90 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	681a      	ldr	r2, [r3, #0]
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8004d90:	68fa      	ldr	r2, [r7, #12]
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	429a      	cmp	r2, r3
 8004d96:	d002      	beq.n	8004d9e <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	687a      	ldr	r2, [r7, #4]
 8004d9c:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8004d9e:	bf00      	nop
 8004da0:	3714      	adds	r7, #20
 8004da2:	46bd      	mov	sp, r7
 8004da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da8:	4770      	bx	lr
 8004daa:	bf00      	nop
 8004dac:	20003e98 	.word	0x20003e98
 8004db0:	20003ea0 	.word	0x20003ea0

08004db4 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8004db4:	b580      	push	{r7, lr}
 8004db6:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 8004db8:	4803      	ldr	r0, [pc, #12]	; (8004dc8 <_cbSendSystemDesc+0x14>)
 8004dba:	f001 fd45 	bl	8006848 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 8004dbe:	4803      	ldr	r0, [pc, #12]	; (8004dcc <_cbSendSystemDesc+0x18>)
 8004dc0:	f001 fd42 	bl	8006848 <SEGGER_SYSVIEW_SendSysDesc>
}
 8004dc4:	bf00      	nop
 8004dc6:	bd80      	pop	{r7, pc}
 8004dc8:	08007868 	.word	0x08007868
 8004dcc:	080078a4 	.word	0x080078a4

08004dd0 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8004dd0:	b580      	push	{r7, lr}
 8004dd2:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8004dd4:	4b06      	ldr	r3, [pc, #24]	; (8004df0 <SEGGER_SYSVIEW_Conf+0x20>)
 8004dd6:	6818      	ldr	r0, [r3, #0]
 8004dd8:	4b05      	ldr	r3, [pc, #20]	; (8004df0 <SEGGER_SYSVIEW_Conf+0x20>)
 8004dda:	6819      	ldr	r1, [r3, #0]
 8004ddc:	4b05      	ldr	r3, [pc, #20]	; (8004df4 <SEGGER_SYSVIEW_Conf+0x24>)
 8004dde:	4a06      	ldr	r2, [pc, #24]	; (8004df8 <SEGGER_SYSVIEW_Conf+0x28>)
 8004de0:	f001 f8b0 	bl	8005f44 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8004de4:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8004de8:	f001 f8f0 	bl	8005fcc <SEGGER_SYSVIEW_SetRAMBase>
}
 8004dec:	bf00      	nop
 8004dee:	bd80      	pop	{r7, pc}
 8004df0:	20000000 	.word	0x20000000
 8004df4:	08004db5 	.word	0x08004db5
 8004df8:	08007964 	.word	0x08007964

08004dfc <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 8004dfc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004dfe:	b085      	sub	sp, #20
 8004e00:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 8004e02:	2300      	movs	r3, #0
 8004e04:	607b      	str	r3, [r7, #4]
 8004e06:	e033      	b.n	8004e70 <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 8004e08:	491e      	ldr	r1, [pc, #120]	; (8004e84 <_cbSendTaskList+0x88>)
 8004e0a:	687a      	ldr	r2, [r7, #4]
 8004e0c:	4613      	mov	r3, r2
 8004e0e:	009b      	lsls	r3, r3, #2
 8004e10:	4413      	add	r3, r2
 8004e12:	009b      	lsls	r3, r3, #2
 8004e14:	440b      	add	r3, r1
 8004e16:	6818      	ldr	r0, [r3, #0]
 8004e18:	491a      	ldr	r1, [pc, #104]	; (8004e84 <_cbSendTaskList+0x88>)
 8004e1a:	687a      	ldr	r2, [r7, #4]
 8004e1c:	4613      	mov	r3, r2
 8004e1e:	009b      	lsls	r3, r3, #2
 8004e20:	4413      	add	r3, r2
 8004e22:	009b      	lsls	r3, r3, #2
 8004e24:	440b      	add	r3, r1
 8004e26:	3304      	adds	r3, #4
 8004e28:	6819      	ldr	r1, [r3, #0]
 8004e2a:	4c16      	ldr	r4, [pc, #88]	; (8004e84 <_cbSendTaskList+0x88>)
 8004e2c:	687a      	ldr	r2, [r7, #4]
 8004e2e:	4613      	mov	r3, r2
 8004e30:	009b      	lsls	r3, r3, #2
 8004e32:	4413      	add	r3, r2
 8004e34:	009b      	lsls	r3, r3, #2
 8004e36:	4423      	add	r3, r4
 8004e38:	3308      	adds	r3, #8
 8004e3a:	681c      	ldr	r4, [r3, #0]
 8004e3c:	4d11      	ldr	r5, [pc, #68]	; (8004e84 <_cbSendTaskList+0x88>)
 8004e3e:	687a      	ldr	r2, [r7, #4]
 8004e40:	4613      	mov	r3, r2
 8004e42:	009b      	lsls	r3, r3, #2
 8004e44:	4413      	add	r3, r2
 8004e46:	009b      	lsls	r3, r3, #2
 8004e48:	442b      	add	r3, r5
 8004e4a:	330c      	adds	r3, #12
 8004e4c:	681d      	ldr	r5, [r3, #0]
 8004e4e:	4e0d      	ldr	r6, [pc, #52]	; (8004e84 <_cbSendTaskList+0x88>)
 8004e50:	687a      	ldr	r2, [r7, #4]
 8004e52:	4613      	mov	r3, r2
 8004e54:	009b      	lsls	r3, r3, #2
 8004e56:	4413      	add	r3, r2
 8004e58:	009b      	lsls	r3, r3, #2
 8004e5a:	4433      	add	r3, r6
 8004e5c:	3310      	adds	r3, #16
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	9300      	str	r3, [sp, #0]
 8004e62:	462b      	mov	r3, r5
 8004e64:	4622      	mov	r2, r4
 8004e66:	f000 f8bd 	bl	8004fe4 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	3301      	adds	r3, #1
 8004e6e:	607b      	str	r3, [r7, #4]
 8004e70:	4b05      	ldr	r3, [pc, #20]	; (8004e88 <_cbSendTaskList+0x8c>)
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	687a      	ldr	r2, [r7, #4]
 8004e76:	429a      	cmp	r2, r3
 8004e78:	d3c6      	bcc.n	8004e08 <_cbSendTaskList+0xc>
  }
}
 8004e7a:	bf00      	nop
 8004e7c:	bf00      	nop
 8004e7e:	370c      	adds	r7, #12
 8004e80:	46bd      	mov	sp, r7
 8004e82:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004e84:	20003eb4 	.word	0x20003eb4
 8004e88:	20003f54 	.word	0x20003f54

08004e8c <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8004e8c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004e90:	b082      	sub	sp, #8
 8004e92:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8004e94:	f7fe fbb4 	bl	8003600 <xTaskGetTickCountFromISR>
 8004e98:	4603      	mov	r3, r0
 8004e9a:	2200      	movs	r2, #0
 8004e9c:	469a      	mov	sl, r3
 8004e9e:	4693      	mov	fp, r2
 8004ea0:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8004ea4:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004ea8:	4602      	mov	r2, r0
 8004eaa:	460b      	mov	r3, r1
 8004eac:	f04f 0a00 	mov.w	sl, #0
 8004eb0:	f04f 0b00 	mov.w	fp, #0
 8004eb4:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 8004eb8:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 8004ebc:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 8004ec0:	4652      	mov	r2, sl
 8004ec2:	465b      	mov	r3, fp
 8004ec4:	1a14      	subs	r4, r2, r0
 8004ec6:	eb63 0501 	sbc.w	r5, r3, r1
 8004eca:	f04f 0200 	mov.w	r2, #0
 8004ece:	f04f 0300 	mov.w	r3, #0
 8004ed2:	00ab      	lsls	r3, r5, #2
 8004ed4:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 8004ed8:	00a2      	lsls	r2, r4, #2
 8004eda:	4614      	mov	r4, r2
 8004edc:	461d      	mov	r5, r3
 8004ede:	eb14 0800 	adds.w	r8, r4, r0
 8004ee2:	eb45 0901 	adc.w	r9, r5, r1
 8004ee6:	f04f 0200 	mov.w	r2, #0
 8004eea:	f04f 0300 	mov.w	r3, #0
 8004eee:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004ef2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004ef6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004efa:	4690      	mov	r8, r2
 8004efc:	4699      	mov	r9, r3
 8004efe:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 8004f02:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 8004f06:	4610      	mov	r0, r2
 8004f08:	4619      	mov	r1, r3
 8004f0a:	3708      	adds	r7, #8
 8004f0c:	46bd      	mov	sp, r7
 8004f0e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08004f14 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8004f14:	b580      	push	{r7, lr}
 8004f16:	b086      	sub	sp, #24
 8004f18:	af02      	add	r7, sp, #8
 8004f1a:	60f8      	str	r0, [r7, #12]
 8004f1c:	60b9      	str	r1, [r7, #8]
 8004f1e:	607a      	str	r2, [r7, #4]
 8004f20:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8004f22:	2205      	movs	r2, #5
 8004f24:	492b      	ldr	r1, [pc, #172]	; (8004fd4 <SYSVIEW_AddTask+0xc0>)
 8004f26:	68b8      	ldr	r0, [r7, #8]
 8004f28:	f001 ffd0 	bl	8006ecc <memcmp>
 8004f2c:	4603      	mov	r3, r0
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d04b      	beq.n	8004fca <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8004f32:	4b29      	ldr	r3, [pc, #164]	; (8004fd8 <SYSVIEW_AddTask+0xc4>)
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	2b07      	cmp	r3, #7
 8004f38:	d903      	bls.n	8004f42 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 8004f3a:	4828      	ldr	r0, [pc, #160]	; (8004fdc <SYSVIEW_AddTask+0xc8>)
 8004f3c:	f001 ff36 	bl	8006dac <SEGGER_SYSVIEW_Warn>
    return;
 8004f40:	e044      	b.n	8004fcc <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8004f42:	4b25      	ldr	r3, [pc, #148]	; (8004fd8 <SYSVIEW_AddTask+0xc4>)
 8004f44:	681a      	ldr	r2, [r3, #0]
 8004f46:	4926      	ldr	r1, [pc, #152]	; (8004fe0 <SYSVIEW_AddTask+0xcc>)
 8004f48:	4613      	mov	r3, r2
 8004f4a:	009b      	lsls	r3, r3, #2
 8004f4c:	4413      	add	r3, r2
 8004f4e:	009b      	lsls	r3, r3, #2
 8004f50:	440b      	add	r3, r1
 8004f52:	68fa      	ldr	r2, [r7, #12]
 8004f54:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 8004f56:	4b20      	ldr	r3, [pc, #128]	; (8004fd8 <SYSVIEW_AddTask+0xc4>)
 8004f58:	681a      	ldr	r2, [r3, #0]
 8004f5a:	4921      	ldr	r1, [pc, #132]	; (8004fe0 <SYSVIEW_AddTask+0xcc>)
 8004f5c:	4613      	mov	r3, r2
 8004f5e:	009b      	lsls	r3, r3, #2
 8004f60:	4413      	add	r3, r2
 8004f62:	009b      	lsls	r3, r3, #2
 8004f64:	440b      	add	r3, r1
 8004f66:	3304      	adds	r3, #4
 8004f68:	68ba      	ldr	r2, [r7, #8]
 8004f6a:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8004f6c:	4b1a      	ldr	r3, [pc, #104]	; (8004fd8 <SYSVIEW_AddTask+0xc4>)
 8004f6e:	681a      	ldr	r2, [r3, #0]
 8004f70:	491b      	ldr	r1, [pc, #108]	; (8004fe0 <SYSVIEW_AddTask+0xcc>)
 8004f72:	4613      	mov	r3, r2
 8004f74:	009b      	lsls	r3, r3, #2
 8004f76:	4413      	add	r3, r2
 8004f78:	009b      	lsls	r3, r3, #2
 8004f7a:	440b      	add	r3, r1
 8004f7c:	3308      	adds	r3, #8
 8004f7e:	687a      	ldr	r2, [r7, #4]
 8004f80:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8004f82:	4b15      	ldr	r3, [pc, #84]	; (8004fd8 <SYSVIEW_AddTask+0xc4>)
 8004f84:	681a      	ldr	r2, [r3, #0]
 8004f86:	4916      	ldr	r1, [pc, #88]	; (8004fe0 <SYSVIEW_AddTask+0xcc>)
 8004f88:	4613      	mov	r3, r2
 8004f8a:	009b      	lsls	r3, r3, #2
 8004f8c:	4413      	add	r3, r2
 8004f8e:	009b      	lsls	r3, r3, #2
 8004f90:	440b      	add	r3, r1
 8004f92:	330c      	adds	r3, #12
 8004f94:	683a      	ldr	r2, [r7, #0]
 8004f96:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 8004f98:	4b0f      	ldr	r3, [pc, #60]	; (8004fd8 <SYSVIEW_AddTask+0xc4>)
 8004f9a:	681a      	ldr	r2, [r3, #0]
 8004f9c:	4910      	ldr	r1, [pc, #64]	; (8004fe0 <SYSVIEW_AddTask+0xcc>)
 8004f9e:	4613      	mov	r3, r2
 8004fa0:	009b      	lsls	r3, r3, #2
 8004fa2:	4413      	add	r3, r2
 8004fa4:	009b      	lsls	r3, r3, #2
 8004fa6:	440b      	add	r3, r1
 8004fa8:	3310      	adds	r3, #16
 8004faa:	69ba      	ldr	r2, [r7, #24]
 8004fac:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 8004fae:	4b0a      	ldr	r3, [pc, #40]	; (8004fd8 <SYSVIEW_AddTask+0xc4>)
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	3301      	adds	r3, #1
 8004fb4:	4a08      	ldr	r2, [pc, #32]	; (8004fd8 <SYSVIEW_AddTask+0xc4>)
 8004fb6:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 8004fb8:	69bb      	ldr	r3, [r7, #24]
 8004fba:	9300      	str	r3, [sp, #0]
 8004fbc:	683b      	ldr	r3, [r7, #0]
 8004fbe:	687a      	ldr	r2, [r7, #4]
 8004fc0:	68b9      	ldr	r1, [r7, #8]
 8004fc2:	68f8      	ldr	r0, [r7, #12]
 8004fc4:	f000 f80e 	bl	8004fe4 <SYSVIEW_SendTaskInfo>
 8004fc8:	e000      	b.n	8004fcc <SYSVIEW_AddTask+0xb8>
    return;
 8004fca:	bf00      	nop

}
 8004fcc:	3710      	adds	r7, #16
 8004fce:	46bd      	mov	sp, r7
 8004fd0:	bd80      	pop	{r7, pc}
 8004fd2:	bf00      	nop
 8004fd4:	080078b4 	.word	0x080078b4
 8004fd8:	20003f54 	.word	0x20003f54
 8004fdc:	080078bc 	.word	0x080078bc
 8004fe0:	20003eb4 	.word	0x20003eb4

08004fe4 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8004fe4:	b580      	push	{r7, lr}
 8004fe6:	b08a      	sub	sp, #40	; 0x28
 8004fe8:	af00      	add	r7, sp, #0
 8004fea:	60f8      	str	r0, [r7, #12]
 8004fec:	60b9      	str	r1, [r7, #8]
 8004fee:	607a      	str	r2, [r7, #4]
 8004ff0:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8004ff2:	f107 0314 	add.w	r3, r7, #20
 8004ff6:	2214      	movs	r2, #20
 8004ff8:	2100      	movs	r1, #0
 8004ffa:	4618      	mov	r0, r3
 8004ffc:	f001 ff76 	bl	8006eec <memset>
  TaskInfo.TaskID     = TaskID;
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 8005004:	68bb      	ldr	r3, [r7, #8]
 8005006:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 800500c:	683b      	ldr	r3, [r7, #0]
 800500e:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8005010:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005012:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8005014:	f107 0314 	add.w	r3, r7, #20
 8005018:	4618      	mov	r0, r3
 800501a:	f001 fb1d 	bl	8006658 <SEGGER_SYSVIEW_SendTaskInfo>
}
 800501e:	bf00      	nop
 8005020:	3728      	adds	r7, #40	; 0x28
 8005022:	46bd      	mov	sp, r7
 8005024:	bd80      	pop	{r7, pc}
	...

08005028 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 8005028:	b480      	push	{r7}
 800502a:	b083      	sub	sp, #12
 800502c:	af00      	add	r7, sp, #0
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 800502e:	4b24      	ldr	r3, [pc, #144]	; (80050c0 <_DoInit+0x98>)
 8005030:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	2203      	movs	r2, #3
 8005036:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	2203      	movs	r2, #3
 800503c:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	4a20      	ldr	r2, [pc, #128]	; (80050c4 <_DoInit+0x9c>)
 8005042:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	4a20      	ldr	r2, [pc, #128]	; (80050c8 <_DoInit+0xa0>)
 8005048:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005050:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	2200      	movs	r2, #0
 8005056:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	2200      	movs	r2, #0
 800505c:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	2200      	movs	r2, #0
 8005062:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	4a17      	ldr	r2, [pc, #92]	; (80050c4 <_DoInit+0x9c>)
 8005068:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	4a17      	ldr	r2, [pc, #92]	; (80050cc <_DoInit+0xa4>)
 800506e:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	2210      	movs	r2, #16
 8005074:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	2200      	movs	r2, #0
 800507a:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	2200      	movs	r2, #0
 8005080:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	2200      	movs	r2, #0
 8005086:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	3307      	adds	r3, #7
 800508c:	4a10      	ldr	r2, [pc, #64]	; (80050d0 <_DoInit+0xa8>)
 800508e:	6810      	ldr	r0, [r2, #0]
 8005090:	6018      	str	r0, [r3, #0]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8005092:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	4a0e      	ldr	r2, [pc, #56]	; (80050d4 <_DoInit+0xac>)
 800509a:	6810      	ldr	r0, [r2, #0]
 800509c:	6018      	str	r0, [r3, #0]
 800509e:	8891      	ldrh	r1, [r2, #4]
 80050a0:	7992      	ldrb	r2, [r2, #6]
 80050a2:	8099      	strh	r1, [r3, #4]
 80050a4:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 80050a6:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	2220      	movs	r2, #32
 80050ae:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 80050b0:	f3bf 8f5f 	dmb	sy
}
 80050b4:	bf00      	nop
 80050b6:	370c      	adds	r7, #12
 80050b8:	46bd      	mov	sp, r7
 80050ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050be:	4770      	bx	lr
 80050c0:	20003f58 	.word	0x20003f58
 80050c4:	0800790c 	.word	0x0800790c
 80050c8:	20004000 	.word	0x20004000
 80050cc:	20004400 	.word	0x20004400
 80050d0:	08007918 	.word	0x08007918
 80050d4:	0800791c 	.word	0x0800791c

080050d8 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 80050d8:	b580      	push	{r7, lr}
 80050da:	b08c      	sub	sp, #48	; 0x30
 80050dc:	af00      	add	r7, sp, #0
 80050de:	60f8      	str	r0, [r7, #12]
 80050e0:	60b9      	str	r1, [r7, #8]
 80050e2:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 80050e4:	4b3e      	ldr	r3, [pc, #248]	; (80051e0 <SEGGER_RTT_ReadNoLock+0x108>)
 80050e6:	623b      	str	r3, [r7, #32]
 80050e8:	6a3b      	ldr	r3, [r7, #32]
 80050ea:	781b      	ldrb	r3, [r3, #0]
 80050ec:	b2db      	uxtb	r3, r3
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d101      	bne.n	80050f6 <SEGGER_RTT_ReadNoLock+0x1e>
 80050f2:	f7ff ff99 	bl	8005028 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80050f6:	68fa      	ldr	r2, [r7, #12]
 80050f8:	4613      	mov	r3, r2
 80050fa:	005b      	lsls	r3, r3, #1
 80050fc:	4413      	add	r3, r2
 80050fe:	00db      	lsls	r3, r3, #3
 8005100:	3360      	adds	r3, #96	; 0x60
 8005102:	4a37      	ldr	r2, [pc, #220]	; (80051e0 <SEGGER_RTT_ReadNoLock+0x108>)
 8005104:	4413      	add	r3, r2
 8005106:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8005108:	68bb      	ldr	r3, [r7, #8]
 800510a:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 800510c:	69fb      	ldr	r3, [r7, #28]
 800510e:	691b      	ldr	r3, [r3, #16]
 8005110:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 8005112:	69fb      	ldr	r3, [r7, #28]
 8005114:	68db      	ldr	r3, [r3, #12]
 8005116:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8005118:	2300      	movs	r3, #0
 800511a:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 800511c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800511e:	69bb      	ldr	r3, [r7, #24]
 8005120:	429a      	cmp	r2, r3
 8005122:	d92b      	bls.n	800517c <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8005124:	69fb      	ldr	r3, [r7, #28]
 8005126:	689a      	ldr	r2, [r3, #8]
 8005128:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800512a:	1ad3      	subs	r3, r2, r3
 800512c:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 800512e:	697a      	ldr	r2, [r7, #20]
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	4293      	cmp	r3, r2
 8005134:	bf28      	it	cs
 8005136:	4613      	movcs	r3, r2
 8005138:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800513a:	69fb      	ldr	r3, [r7, #28]
 800513c:	685a      	ldr	r2, [r3, #4]
 800513e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005140:	4413      	add	r3, r2
 8005142:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8005144:	697a      	ldr	r2, [r7, #20]
 8005146:	6939      	ldr	r1, [r7, #16]
 8005148:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800514a:	f001 ff03 	bl	8006f54 <memcpy>
    NumBytesRead += NumBytesRem;
 800514e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005150:	697b      	ldr	r3, [r7, #20]
 8005152:	4413      	add	r3, r2
 8005154:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8005156:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005158:	697b      	ldr	r3, [r7, #20]
 800515a:	4413      	add	r3, r2
 800515c:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 800515e:	687a      	ldr	r2, [r7, #4]
 8005160:	697b      	ldr	r3, [r7, #20]
 8005162:	1ad3      	subs	r3, r2, r3
 8005164:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8005166:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005168:	697b      	ldr	r3, [r7, #20]
 800516a:	4413      	add	r3, r2
 800516c:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 800516e:	69fb      	ldr	r3, [r7, #28]
 8005170:	689b      	ldr	r3, [r3, #8]
 8005172:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005174:	429a      	cmp	r2, r3
 8005176:	d101      	bne.n	800517c <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 8005178:	2300      	movs	r3, #0
 800517a:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 800517c:	69ba      	ldr	r2, [r7, #24]
 800517e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005180:	1ad3      	subs	r3, r2, r3
 8005182:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8005184:	697a      	ldr	r2, [r7, #20]
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	4293      	cmp	r3, r2
 800518a:	bf28      	it	cs
 800518c:	4613      	movcs	r3, r2
 800518e:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8005190:	697b      	ldr	r3, [r7, #20]
 8005192:	2b00      	cmp	r3, #0
 8005194:	d019      	beq.n	80051ca <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8005196:	69fb      	ldr	r3, [r7, #28]
 8005198:	685a      	ldr	r2, [r3, #4]
 800519a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800519c:	4413      	add	r3, r2
 800519e:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 80051a0:	697a      	ldr	r2, [r7, #20]
 80051a2:	6939      	ldr	r1, [r7, #16]
 80051a4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80051a6:	f001 fed5 	bl	8006f54 <memcpy>
    NumBytesRead += NumBytesRem;
 80051aa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80051ac:	697b      	ldr	r3, [r7, #20]
 80051ae:	4413      	add	r3, r2
 80051b0:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 80051b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80051b4:	697b      	ldr	r3, [r7, #20]
 80051b6:	4413      	add	r3, r2
 80051b8:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 80051ba:	687a      	ldr	r2, [r7, #4]
 80051bc:	697b      	ldr	r3, [r7, #20]
 80051be:	1ad3      	subs	r3, r2, r3
 80051c0:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 80051c2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80051c4:	697b      	ldr	r3, [r7, #20]
 80051c6:	4413      	add	r3, r2
 80051c8:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 80051ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d002      	beq.n	80051d6 <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 80051d0:	69fb      	ldr	r3, [r7, #28]
 80051d2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80051d4:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 80051d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80051d8:	4618      	mov	r0, r3
 80051da:	3730      	adds	r7, #48	; 0x30
 80051dc:	46bd      	mov	sp, r7
 80051de:	bd80      	pop	{r7, pc}
 80051e0:	20003f58 	.word	0x20003f58

080051e4 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 80051e4:	b580      	push	{r7, lr}
 80051e6:	b088      	sub	sp, #32
 80051e8:	af00      	add	r7, sp, #0
 80051ea:	60f8      	str	r0, [r7, #12]
 80051ec:	60b9      	str	r1, [r7, #8]
 80051ee:	607a      	str	r2, [r7, #4]
 80051f0:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 80051f2:	4b3d      	ldr	r3, [pc, #244]	; (80052e8 <SEGGER_RTT_AllocUpBuffer+0x104>)
 80051f4:	61bb      	str	r3, [r7, #24]
 80051f6:	69bb      	ldr	r3, [r7, #24]
 80051f8:	781b      	ldrb	r3, [r3, #0]
 80051fa:	b2db      	uxtb	r3, r3
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d101      	bne.n	8005204 <SEGGER_RTT_AllocUpBuffer+0x20>
 8005200:	f7ff ff12 	bl	8005028 <_DoInit>
  SEGGER_RTT_LOCK();
 8005204:	f3ef 8311 	mrs	r3, BASEPRI
 8005208:	f04f 0120 	mov.w	r1, #32
 800520c:	f381 8811 	msr	BASEPRI, r1
 8005210:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8005212:	4b35      	ldr	r3, [pc, #212]	; (80052e8 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8005214:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 8005216:	2300      	movs	r3, #0
 8005218:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 800521a:	6939      	ldr	r1, [r7, #16]
 800521c:	69fb      	ldr	r3, [r7, #28]
 800521e:	1c5a      	adds	r2, r3, #1
 8005220:	4613      	mov	r3, r2
 8005222:	005b      	lsls	r3, r3, #1
 8005224:	4413      	add	r3, r2
 8005226:	00db      	lsls	r3, r3, #3
 8005228:	440b      	add	r3, r1
 800522a:	3304      	adds	r3, #4
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	2b00      	cmp	r3, #0
 8005230:	d008      	beq.n	8005244 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 8005232:	69fb      	ldr	r3, [r7, #28]
 8005234:	3301      	adds	r3, #1
 8005236:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 8005238:	693b      	ldr	r3, [r7, #16]
 800523a:	691b      	ldr	r3, [r3, #16]
 800523c:	69fa      	ldr	r2, [r7, #28]
 800523e:	429a      	cmp	r2, r3
 8005240:	dbeb      	blt.n	800521a <SEGGER_RTT_AllocUpBuffer+0x36>
 8005242:	e000      	b.n	8005246 <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 8005244:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 8005246:	693b      	ldr	r3, [r7, #16]
 8005248:	691b      	ldr	r3, [r3, #16]
 800524a:	69fa      	ldr	r2, [r7, #28]
 800524c:	429a      	cmp	r2, r3
 800524e:	da3f      	bge.n	80052d0 <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 8005250:	6939      	ldr	r1, [r7, #16]
 8005252:	69fb      	ldr	r3, [r7, #28]
 8005254:	1c5a      	adds	r2, r3, #1
 8005256:	4613      	mov	r3, r2
 8005258:	005b      	lsls	r3, r3, #1
 800525a:	4413      	add	r3, r2
 800525c:	00db      	lsls	r3, r3, #3
 800525e:	440b      	add	r3, r1
 8005260:	68fa      	ldr	r2, [r7, #12]
 8005262:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8005264:	6939      	ldr	r1, [r7, #16]
 8005266:	69fb      	ldr	r3, [r7, #28]
 8005268:	1c5a      	adds	r2, r3, #1
 800526a:	4613      	mov	r3, r2
 800526c:	005b      	lsls	r3, r3, #1
 800526e:	4413      	add	r3, r2
 8005270:	00db      	lsls	r3, r3, #3
 8005272:	440b      	add	r3, r1
 8005274:	3304      	adds	r3, #4
 8005276:	68ba      	ldr	r2, [r7, #8]
 8005278:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 800527a:	6939      	ldr	r1, [r7, #16]
 800527c:	69fa      	ldr	r2, [r7, #28]
 800527e:	4613      	mov	r3, r2
 8005280:	005b      	lsls	r3, r3, #1
 8005282:	4413      	add	r3, r2
 8005284:	00db      	lsls	r3, r3, #3
 8005286:	440b      	add	r3, r1
 8005288:	3320      	adds	r3, #32
 800528a:	687a      	ldr	r2, [r7, #4]
 800528c:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 800528e:	6939      	ldr	r1, [r7, #16]
 8005290:	69fa      	ldr	r2, [r7, #28]
 8005292:	4613      	mov	r3, r2
 8005294:	005b      	lsls	r3, r3, #1
 8005296:	4413      	add	r3, r2
 8005298:	00db      	lsls	r3, r3, #3
 800529a:	440b      	add	r3, r1
 800529c:	3328      	adds	r3, #40	; 0x28
 800529e:	2200      	movs	r2, #0
 80052a0:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 80052a2:	6939      	ldr	r1, [r7, #16]
 80052a4:	69fa      	ldr	r2, [r7, #28]
 80052a6:	4613      	mov	r3, r2
 80052a8:	005b      	lsls	r3, r3, #1
 80052aa:	4413      	add	r3, r2
 80052ac:	00db      	lsls	r3, r3, #3
 80052ae:	440b      	add	r3, r1
 80052b0:	3324      	adds	r3, #36	; 0x24
 80052b2:	2200      	movs	r2, #0
 80052b4:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 80052b6:	6939      	ldr	r1, [r7, #16]
 80052b8:	69fa      	ldr	r2, [r7, #28]
 80052ba:	4613      	mov	r3, r2
 80052bc:	005b      	lsls	r3, r3, #1
 80052be:	4413      	add	r3, r2
 80052c0:	00db      	lsls	r3, r3, #3
 80052c2:	440b      	add	r3, r1
 80052c4:	332c      	adds	r3, #44	; 0x2c
 80052c6:	683a      	ldr	r2, [r7, #0]
 80052c8:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80052ca:	f3bf 8f5f 	dmb	sy
 80052ce:	e002      	b.n	80052d6 <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 80052d0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80052d4:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 80052d6:	697b      	ldr	r3, [r7, #20]
 80052d8:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 80052dc:	69fb      	ldr	r3, [r7, #28]
}
 80052de:	4618      	mov	r0, r3
 80052e0:	3720      	adds	r7, #32
 80052e2:	46bd      	mov	sp, r7
 80052e4:	bd80      	pop	{r7, pc}
 80052e6:	bf00      	nop
 80052e8:	20003f58 	.word	0x20003f58

080052ec <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 80052ec:	b580      	push	{r7, lr}
 80052ee:	b088      	sub	sp, #32
 80052f0:	af00      	add	r7, sp, #0
 80052f2:	60f8      	str	r0, [r7, #12]
 80052f4:	60b9      	str	r1, [r7, #8]
 80052f6:	607a      	str	r2, [r7, #4]
 80052f8:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 80052fa:	4b33      	ldr	r3, [pc, #204]	; (80053c8 <SEGGER_RTT_ConfigDownBuffer+0xdc>)
 80052fc:	61bb      	str	r3, [r7, #24]
 80052fe:	69bb      	ldr	r3, [r7, #24]
 8005300:	781b      	ldrb	r3, [r3, #0]
 8005302:	b2db      	uxtb	r3, r3
 8005304:	2b00      	cmp	r3, #0
 8005306:	d101      	bne.n	800530c <SEGGER_RTT_ConfigDownBuffer+0x20>
 8005308:	f7ff fe8e 	bl	8005028 <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800530c:	4b2e      	ldr	r3, [pc, #184]	; (80053c8 <SEGGER_RTT_ConfigDownBuffer+0xdc>)
 800530e:	617b      	str	r3, [r7, #20]
  if (BufferIndex < (unsigned)pRTTCB->MaxNumDownBuffers) {
 8005310:	697b      	ldr	r3, [r7, #20]
 8005312:	695b      	ldr	r3, [r3, #20]
 8005314:	461a      	mov	r2, r3
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	4293      	cmp	r3, r2
 800531a:	d24d      	bcs.n	80053b8 <SEGGER_RTT_ConfigDownBuffer+0xcc>
    SEGGER_RTT_LOCK();
 800531c:	f3ef 8311 	mrs	r3, BASEPRI
 8005320:	f04f 0120 	mov.w	r1, #32
 8005324:	f381 8811 	msr	BASEPRI, r1
 8005328:	613b      	str	r3, [r7, #16]
    if (BufferIndex > 0u) {
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	2b00      	cmp	r3, #0
 800532e:	d031      	beq.n	8005394 <SEGGER_RTT_ConfigDownBuffer+0xa8>
      pRTTCB->aDown[BufferIndex].sName        = sName;
 8005330:	6979      	ldr	r1, [r7, #20]
 8005332:	68fa      	ldr	r2, [r7, #12]
 8005334:	4613      	mov	r3, r2
 8005336:	005b      	lsls	r3, r3, #1
 8005338:	4413      	add	r3, r2
 800533a:	00db      	lsls	r3, r3, #3
 800533c:	440b      	add	r3, r1
 800533e:	3360      	adds	r3, #96	; 0x60
 8005340:	68ba      	ldr	r2, [r7, #8]
 8005342:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].pBuffer      = (char*)pBuffer;
 8005344:	6979      	ldr	r1, [r7, #20]
 8005346:	68fa      	ldr	r2, [r7, #12]
 8005348:	4613      	mov	r3, r2
 800534a:	005b      	lsls	r3, r3, #1
 800534c:	4413      	add	r3, r2
 800534e:	00db      	lsls	r3, r3, #3
 8005350:	440b      	add	r3, r1
 8005352:	3364      	adds	r3, #100	; 0x64
 8005354:	687a      	ldr	r2, [r7, #4]
 8005356:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].SizeOfBuffer = BufferSize;
 8005358:	6979      	ldr	r1, [r7, #20]
 800535a:	68fa      	ldr	r2, [r7, #12]
 800535c:	4613      	mov	r3, r2
 800535e:	005b      	lsls	r3, r3, #1
 8005360:	4413      	add	r3, r2
 8005362:	00db      	lsls	r3, r3, #3
 8005364:	440b      	add	r3, r1
 8005366:	3368      	adds	r3, #104	; 0x68
 8005368:	683a      	ldr	r2, [r7, #0]
 800536a:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].RdOff        = 0u;
 800536c:	6979      	ldr	r1, [r7, #20]
 800536e:	68fa      	ldr	r2, [r7, #12]
 8005370:	4613      	mov	r3, r2
 8005372:	005b      	lsls	r3, r3, #1
 8005374:	4413      	add	r3, r2
 8005376:	00db      	lsls	r3, r3, #3
 8005378:	440b      	add	r3, r1
 800537a:	3370      	adds	r3, #112	; 0x70
 800537c:	2200      	movs	r2, #0
 800537e:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].WrOff        = 0u;
 8005380:	6979      	ldr	r1, [r7, #20]
 8005382:	68fa      	ldr	r2, [r7, #12]
 8005384:	4613      	mov	r3, r2
 8005386:	005b      	lsls	r3, r3, #1
 8005388:	4413      	add	r3, r2
 800538a:	00db      	lsls	r3, r3, #3
 800538c:	440b      	add	r3, r1
 800538e:	336c      	adds	r3, #108	; 0x6c
 8005390:	2200      	movs	r2, #0
 8005392:	601a      	str	r2, [r3, #0]
    }
    pRTTCB->aDown[BufferIndex].Flags          = Flags;
 8005394:	6979      	ldr	r1, [r7, #20]
 8005396:	68fa      	ldr	r2, [r7, #12]
 8005398:	4613      	mov	r3, r2
 800539a:	005b      	lsls	r3, r3, #1
 800539c:	4413      	add	r3, r2
 800539e:	00db      	lsls	r3, r3, #3
 80053a0:	440b      	add	r3, r1
 80053a2:	3374      	adds	r3, #116	; 0x74
 80053a4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80053a6:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80053a8:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 80053ac:	693b      	ldr	r3, [r7, #16]
 80053ae:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 80053b2:	2300      	movs	r3, #0
 80053b4:	61fb      	str	r3, [r7, #28]
 80053b6:	e002      	b.n	80053be <SEGGER_RTT_ConfigDownBuffer+0xd2>
  } else {
    r = -1;
 80053b8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80053bc:	61fb      	str	r3, [r7, #28]
  }
  return r;
 80053be:	69fb      	ldr	r3, [r7, #28]
}
 80053c0:	4618      	mov	r0, r3
 80053c2:	3720      	adds	r7, #32
 80053c4:	46bd      	mov	sp, r7
 80053c6:	bd80      	pop	{r7, pc}
 80053c8:	20003f58 	.word	0x20003f58

080053cc <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 80053cc:	b480      	push	{r7}
 80053ce:	b087      	sub	sp, #28
 80053d0:	af00      	add	r7, sp, #0
 80053d2:	60f8      	str	r0, [r7, #12]
 80053d4:	60b9      	str	r1, [r7, #8]
 80053d6:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 80053d8:	2300      	movs	r3, #0
 80053da:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 80053dc:	e002      	b.n	80053e4 <_EncodeStr+0x18>
    Len++;
 80053de:	693b      	ldr	r3, [r7, #16]
 80053e0:	3301      	adds	r3, #1
 80053e2:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 80053e4:	68ba      	ldr	r2, [r7, #8]
 80053e6:	693b      	ldr	r3, [r7, #16]
 80053e8:	4413      	add	r3, r2
 80053ea:	781b      	ldrb	r3, [r3, #0]
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d1f6      	bne.n	80053de <_EncodeStr+0x12>
  }
  if (Len > Limit) {
 80053f0:	693a      	ldr	r2, [r7, #16]
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	429a      	cmp	r2, r3
 80053f6:	d901      	bls.n	80053fc <_EncodeStr+0x30>
    Len = Limit;
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	613b      	str	r3, [r7, #16]
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 80053fc:	693b      	ldr	r3, [r7, #16]
 80053fe:	2bfe      	cmp	r3, #254	; 0xfe
 8005400:	d806      	bhi.n	8005410 <_EncodeStr+0x44>
    *pPayload++ = Len; 
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	1c5a      	adds	r2, r3, #1
 8005406:	60fa      	str	r2, [r7, #12]
 8005408:	693a      	ldr	r2, [r7, #16]
 800540a:	b2d2      	uxtb	r2, r2
 800540c:	701a      	strb	r2, [r3, #0]
 800540e:	e011      	b.n	8005434 <_EncodeStr+0x68>
  } else {
    *pPayload++ = 255;
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	1c5a      	adds	r2, r3, #1
 8005414:	60fa      	str	r2, [r7, #12]
 8005416:	22ff      	movs	r2, #255	; 0xff
 8005418:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	1c5a      	adds	r2, r3, #1
 800541e:	60fa      	str	r2, [r7, #12]
 8005420:	693a      	ldr	r2, [r7, #16]
 8005422:	b2d2      	uxtb	r2, r2
 8005424:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 8005426:	693b      	ldr	r3, [r7, #16]
 8005428:	0a19      	lsrs	r1, r3, #8
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	1c5a      	adds	r2, r3, #1
 800542e:	60fa      	str	r2, [r7, #12]
 8005430:	b2ca      	uxtb	r2, r1
 8005432:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 8005434:	2300      	movs	r3, #0
 8005436:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8005438:	e00a      	b.n	8005450 <_EncodeStr+0x84>
    *pPayload++ = *pText++;
 800543a:	68ba      	ldr	r2, [r7, #8]
 800543c:	1c53      	adds	r3, r2, #1
 800543e:	60bb      	str	r3, [r7, #8]
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	1c59      	adds	r1, r3, #1
 8005444:	60f9      	str	r1, [r7, #12]
 8005446:	7812      	ldrb	r2, [r2, #0]
 8005448:	701a      	strb	r2, [r3, #0]
    n++;
 800544a:	697b      	ldr	r3, [r7, #20]
 800544c:	3301      	adds	r3, #1
 800544e:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8005450:	697a      	ldr	r2, [r7, #20]
 8005452:	693b      	ldr	r3, [r7, #16]
 8005454:	429a      	cmp	r2, r3
 8005456:	d3f0      	bcc.n	800543a <_EncodeStr+0x6e>
  }
  return pPayload;
 8005458:	68fb      	ldr	r3, [r7, #12]
}
 800545a:	4618      	mov	r0, r3
 800545c:	371c      	adds	r7, #28
 800545e:	46bd      	mov	sp, r7
 8005460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005464:	4770      	bx	lr

08005466 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8005466:	b480      	push	{r7}
 8005468:	b083      	sub	sp, #12
 800546a:	af00      	add	r7, sp, #0
 800546c:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	3304      	adds	r3, #4
}
 8005472:	4618      	mov	r0, r3
 8005474:	370c      	adds	r7, #12
 8005476:	46bd      	mov	sp, r7
 8005478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800547c:	4770      	bx	lr
	...

08005480 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8005480:	b580      	push	{r7, lr}
 8005482:	b082      	sub	sp, #8
 8005484:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8005486:	4b35      	ldr	r3, [pc, #212]	; (800555c <_HandleIncomingPacket+0xdc>)
 8005488:	7e1b      	ldrb	r3, [r3, #24]
 800548a:	4618      	mov	r0, r3
 800548c:	1cfb      	adds	r3, r7, #3
 800548e:	2201      	movs	r2, #1
 8005490:	4619      	mov	r1, r3
 8005492:	f7ff fe21 	bl	80050d8 <SEGGER_RTT_ReadNoLock>
 8005496:	4603      	mov	r3, r0
 8005498:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	2b00      	cmp	r3, #0
 800549e:	dd59      	ble.n	8005554 <_HandleIncomingPacket+0xd4>
    switch (Cmd) {
 80054a0:	78fb      	ldrb	r3, [r7, #3]
 80054a2:	2b80      	cmp	r3, #128	; 0x80
 80054a4:	d032      	beq.n	800550c <_HandleIncomingPacket+0x8c>
 80054a6:	2b80      	cmp	r3, #128	; 0x80
 80054a8:	dc42      	bgt.n	8005530 <_HandleIncomingPacket+0xb0>
 80054aa:	2b07      	cmp	r3, #7
 80054ac:	dc16      	bgt.n	80054dc <_HandleIncomingPacket+0x5c>
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	dd3e      	ble.n	8005530 <_HandleIncomingPacket+0xb0>
 80054b2:	3b01      	subs	r3, #1
 80054b4:	2b06      	cmp	r3, #6
 80054b6:	d83b      	bhi.n	8005530 <_HandleIncomingPacket+0xb0>
 80054b8:	a201      	add	r2, pc, #4	; (adr r2, 80054c0 <_HandleIncomingPacket+0x40>)
 80054ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054be:	bf00      	nop
 80054c0:	080054e3 	.word	0x080054e3
 80054c4:	080054e9 	.word	0x080054e9
 80054c8:	080054ef 	.word	0x080054ef
 80054cc:	080054f5 	.word	0x080054f5
 80054d0:	080054fb 	.word	0x080054fb
 80054d4:	08005501 	.word	0x08005501
 80054d8:	08005507 	.word	0x08005507
 80054dc:	2b7f      	cmp	r3, #127	; 0x7f
 80054de:	d034      	beq.n	800554a <_HandleIncomingPacket+0xca>
 80054e0:	e026      	b.n	8005530 <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 80054e2:	f000 ff3f 	bl	8006364 <SEGGER_SYSVIEW_Start>
      break;
 80054e6:	e035      	b.n	8005554 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 80054e8:	f000 fff6 	bl	80064d8 <SEGGER_SYSVIEW_Stop>
      break;
 80054ec:	e032      	b.n	8005554 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 80054ee:	f001 f9cf 	bl	8006890 <SEGGER_SYSVIEW_RecordSystime>
      break;
 80054f2:	e02f      	b.n	8005554 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 80054f4:	f001 f994 	bl	8006820 <SEGGER_SYSVIEW_SendTaskList>
      break;
 80054f8:	e02c      	b.n	8005554 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 80054fa:	f001 f813 	bl	8006524 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 80054fe:	e029      	b.n	8005554 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8005500:	f001 fc02 	bl	8006d08 <SEGGER_SYSVIEW_SendNumModules>
      break;
 8005504:	e026      	b.n	8005554 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 8005506:	f001 fbe1 	bl	8006ccc <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 800550a:	e023      	b.n	8005554 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800550c:	4b13      	ldr	r3, [pc, #76]	; (800555c <_HandleIncomingPacket+0xdc>)
 800550e:	7e1b      	ldrb	r3, [r3, #24]
 8005510:	4618      	mov	r0, r3
 8005512:	1cfb      	adds	r3, r7, #3
 8005514:	2201      	movs	r2, #1
 8005516:	4619      	mov	r1, r3
 8005518:	f7ff fdde 	bl	80050d8 <SEGGER_RTT_ReadNoLock>
 800551c:	4603      	mov	r3, r0
 800551e:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	2b00      	cmp	r3, #0
 8005524:	dd13      	ble.n	800554e <_HandleIncomingPacket+0xce>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8005526:	78fb      	ldrb	r3, [r7, #3]
 8005528:	4618      	mov	r0, r3
 800552a:	f001 fb4f 	bl	8006bcc <SEGGER_SYSVIEW_SendModule>
      }
      break;
 800552e:	e00e      	b.n	800554e <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 8005530:	78fb      	ldrb	r3, [r7, #3]
 8005532:	b25b      	sxtb	r3, r3
 8005534:	2b00      	cmp	r3, #0
 8005536:	da0c      	bge.n	8005552 <_HandleIncomingPacket+0xd2>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8005538:	4b08      	ldr	r3, [pc, #32]	; (800555c <_HandleIncomingPacket+0xdc>)
 800553a:	7e1b      	ldrb	r3, [r3, #24]
 800553c:	4618      	mov	r0, r3
 800553e:	1cfb      	adds	r3, r7, #3
 8005540:	2201      	movs	r2, #1
 8005542:	4619      	mov	r1, r3
 8005544:	f7ff fdc8 	bl	80050d8 <SEGGER_RTT_ReadNoLock>
      }
      break;
 8005548:	e003      	b.n	8005552 <_HandleIncomingPacket+0xd2>
      break;
 800554a:	bf00      	nop
 800554c:	e002      	b.n	8005554 <_HandleIncomingPacket+0xd4>
      break;
 800554e:	bf00      	nop
 8005550:	e000      	b.n	8005554 <_HandleIncomingPacket+0xd4>
      break;
 8005552:	bf00      	nop
    }
  }
}
 8005554:	bf00      	nop
 8005556:	3708      	adds	r7, #8
 8005558:	46bd      	mov	sp, r7
 800555a:	bd80      	pop	{r7, pc}
 800555c:	20005418 	.word	0x20005418

08005560 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8005560:	b580      	push	{r7, lr}
 8005562:	b08c      	sub	sp, #48	; 0x30
 8005564:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 8005566:	2301      	movs	r3, #1
 8005568:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 800556a:	1d3b      	adds	r3, r7, #4
 800556c:	3301      	adds	r3, #1
 800556e:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8005570:	69fb      	ldr	r3, [r7, #28]
 8005572:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005574:	4b31      	ldr	r3, [pc, #196]	; (800563c <_TrySendOverflowPacket+0xdc>)
 8005576:	695b      	ldr	r3, [r3, #20]
 8005578:	62bb      	str	r3, [r7, #40]	; 0x28
 800557a:	e00b      	b.n	8005594 <_TrySendOverflowPacket+0x34>
 800557c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800557e:	b2da      	uxtb	r2, r3
 8005580:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005582:	1c59      	adds	r1, r3, #1
 8005584:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005586:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800558a:	b2d2      	uxtb	r2, r2
 800558c:	701a      	strb	r2, [r3, #0]
 800558e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005590:	09db      	lsrs	r3, r3, #7
 8005592:	62bb      	str	r3, [r7, #40]	; 0x28
 8005594:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005596:	2b7f      	cmp	r3, #127	; 0x7f
 8005598:	d8f0      	bhi.n	800557c <_TrySendOverflowPacket+0x1c>
 800559a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800559c:	1c5a      	adds	r2, r3, #1
 800559e:	62fa      	str	r2, [r7, #44]	; 0x2c
 80055a0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80055a2:	b2d2      	uxtb	r2, r2
 80055a4:	701a      	strb	r2, [r3, #0]
 80055a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055a8:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80055aa:	4b25      	ldr	r3, [pc, #148]	; (8005640 <_TrySendOverflowPacket+0xe0>)
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 80055b0:	4b22      	ldr	r3, [pc, #136]	; (800563c <_TrySendOverflowPacket+0xdc>)
 80055b2:	68db      	ldr	r3, [r3, #12]
 80055b4:	69ba      	ldr	r2, [r7, #24]
 80055b6:	1ad3      	subs	r3, r2, r3
 80055b8:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 80055ba:	69fb      	ldr	r3, [r7, #28]
 80055bc:	627b      	str	r3, [r7, #36]	; 0x24
 80055be:	697b      	ldr	r3, [r7, #20]
 80055c0:	623b      	str	r3, [r7, #32]
 80055c2:	e00b      	b.n	80055dc <_TrySendOverflowPacket+0x7c>
 80055c4:	6a3b      	ldr	r3, [r7, #32]
 80055c6:	b2da      	uxtb	r2, r3
 80055c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055ca:	1c59      	adds	r1, r3, #1
 80055cc:	6279      	str	r1, [r7, #36]	; 0x24
 80055ce:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80055d2:	b2d2      	uxtb	r2, r2
 80055d4:	701a      	strb	r2, [r3, #0]
 80055d6:	6a3b      	ldr	r3, [r7, #32]
 80055d8:	09db      	lsrs	r3, r3, #7
 80055da:	623b      	str	r3, [r7, #32]
 80055dc:	6a3b      	ldr	r3, [r7, #32]
 80055de:	2b7f      	cmp	r3, #127	; 0x7f
 80055e0:	d8f0      	bhi.n	80055c4 <_TrySendOverflowPacket+0x64>
 80055e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055e4:	1c5a      	adds	r2, r3, #1
 80055e6:	627a      	str	r2, [r7, #36]	; 0x24
 80055e8:	6a3a      	ldr	r2, [r7, #32]
 80055ea:	b2d2      	uxtb	r2, r2
 80055ec:	701a      	strb	r2, [r3, #0]
 80055ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055f0:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 80055f2:	4b12      	ldr	r3, [pc, #72]	; (800563c <_TrySendOverflowPacket+0xdc>)
 80055f4:	785b      	ldrb	r3, [r3, #1]
 80055f6:	4618      	mov	r0, r3
 80055f8:	1d3b      	adds	r3, r7, #4
 80055fa:	69fa      	ldr	r2, [r7, #28]
 80055fc:	1ad3      	subs	r3, r2, r3
 80055fe:	461a      	mov	r2, r3
 8005600:	1d3b      	adds	r3, r7, #4
 8005602:	4619      	mov	r1, r3
 8005604:	f7fa fde4 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8005608:	4603      	mov	r3, r0
 800560a:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
  if (Status) {
 800560c:	693b      	ldr	r3, [r7, #16]
 800560e:	2b00      	cmp	r3, #0
 8005610:	d009      	beq.n	8005626 <_TrySendOverflowPacket+0xc6>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8005612:	4a0a      	ldr	r2, [pc, #40]	; (800563c <_TrySendOverflowPacket+0xdc>)
 8005614:	69bb      	ldr	r3, [r7, #24]
 8005616:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8005618:	4b08      	ldr	r3, [pc, #32]	; (800563c <_TrySendOverflowPacket+0xdc>)
 800561a:	781b      	ldrb	r3, [r3, #0]
 800561c:	3b01      	subs	r3, #1
 800561e:	b2da      	uxtb	r2, r3
 8005620:	4b06      	ldr	r3, [pc, #24]	; (800563c <_TrySendOverflowPacket+0xdc>)
 8005622:	701a      	strb	r2, [r3, #0]
 8005624:	e004      	b.n	8005630 <_TrySendOverflowPacket+0xd0>
  } else {
    _SYSVIEW_Globals.DropCount++;
 8005626:	4b05      	ldr	r3, [pc, #20]	; (800563c <_TrySendOverflowPacket+0xdc>)
 8005628:	695b      	ldr	r3, [r3, #20]
 800562a:	3301      	adds	r3, #1
 800562c:	4a03      	ldr	r2, [pc, #12]	; (800563c <_TrySendOverflowPacket+0xdc>)
 800562e:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8005630:	693b      	ldr	r3, [r7, #16]
}
 8005632:	4618      	mov	r0, r3
 8005634:	3730      	adds	r7, #48	; 0x30
 8005636:	46bd      	mov	sp, r7
 8005638:	bd80      	pop	{r7, pc}
 800563a:	bf00      	nop
 800563c:	20005418 	.word	0x20005418
 8005640:	e0001004 	.word	0xe0001004

08005644 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8005644:	b580      	push	{r7, lr}
 8005646:	b08a      	sub	sp, #40	; 0x28
 8005648:	af00      	add	r7, sp, #0
 800564a:	60f8      	str	r0, [r7, #12]
 800564c:	60b9      	str	r1, [r7, #8]
 800564e:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8005650:	4b6c      	ldr	r3, [pc, #432]	; (8005804 <_SendPacket+0x1c0>)
 8005652:	781b      	ldrb	r3, [r3, #0]
 8005654:	2b01      	cmp	r3, #1
 8005656:	d010      	beq.n	800567a <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8005658:	4b6a      	ldr	r3, [pc, #424]	; (8005804 <_SendPacket+0x1c0>)
 800565a:	781b      	ldrb	r3, [r3, #0]
 800565c:	2b00      	cmp	r3, #0
 800565e:	f000 80a3 	beq.w	80057a8 <_SendPacket+0x164>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 8005662:	4b68      	ldr	r3, [pc, #416]	; (8005804 <_SendPacket+0x1c0>)
 8005664:	781b      	ldrb	r3, [r3, #0]
 8005666:	2b02      	cmp	r3, #2
 8005668:	d109      	bne.n	800567e <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 800566a:	f7ff ff79 	bl	8005560 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 800566e:	4b65      	ldr	r3, [pc, #404]	; (8005804 <_SendPacket+0x1c0>)
 8005670:	781b      	ldrb	r3, [r3, #0]
 8005672:	2b01      	cmp	r3, #1
 8005674:	f040 809a 	bne.w	80057ac <_SendPacket+0x168>
      goto SendDone;
    }
  }
Send:
 8005678:	e001      	b.n	800567e <_SendPacket+0x3a>
    goto Send;
 800567a:	bf00      	nop
 800567c:	e000      	b.n	8005680 <_SendPacket+0x3c>
Send:
 800567e:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	2b1f      	cmp	r3, #31
 8005684:	d809      	bhi.n	800569a <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 8005686:	4b5f      	ldr	r3, [pc, #380]	; (8005804 <_SendPacket+0x1c0>)
 8005688:	69da      	ldr	r2, [r3, #28]
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	fa22 f303 	lsr.w	r3, r2, r3
 8005690:	f003 0301 	and.w	r3, r3, #1
 8005694:	2b00      	cmp	r3, #0
 8005696:	f040 808b 	bne.w	80057b0 <_SendPacket+0x16c>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	2b17      	cmp	r3, #23
 800569e:	d807      	bhi.n	80056b0 <_SendPacket+0x6c>
    *--pStartPacket = EventId;
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	3b01      	subs	r3, #1
 80056a4:	60fb      	str	r3, [r7, #12]
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	b2da      	uxtb	r2, r3
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	701a      	strb	r2, [r3, #0]
 80056ae:	e03d      	b.n	800572c <_SendPacket+0xe8>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 80056b0:	68ba      	ldr	r2, [r7, #8]
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	1ad3      	subs	r3, r2, r3
 80056b6:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 80056b8:	69fb      	ldr	r3, [r7, #28]
 80056ba:	2b7f      	cmp	r3, #127	; 0x7f
 80056bc:	d912      	bls.n	80056e4 <_SendPacket+0xa0>
      *--pStartPacket = (NumBytes >> 7);
 80056be:	69fb      	ldr	r3, [r7, #28]
 80056c0:	09da      	lsrs	r2, r3, #7
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	3b01      	subs	r3, #1
 80056c6:	60fb      	str	r3, [r7, #12]
 80056c8:	b2d2      	uxtb	r2, r2
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 80056ce:	69fb      	ldr	r3, [r7, #28]
 80056d0:	b2db      	uxtb	r3, r3
 80056d2:	68fa      	ldr	r2, [r7, #12]
 80056d4:	3a01      	subs	r2, #1
 80056d6:	60fa      	str	r2, [r7, #12]
 80056d8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80056dc:	b2da      	uxtb	r2, r3
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	701a      	strb	r2, [r3, #0]
 80056e2:	e006      	b.n	80056f2 <_SendPacket+0xae>
    } else {
      *--pStartPacket = NumBytes;
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	3b01      	subs	r3, #1
 80056e8:	60fb      	str	r3, [r7, #12]
 80056ea:	69fb      	ldr	r3, [r7, #28]
 80056ec:	b2da      	uxtb	r2, r3
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	2b7f      	cmp	r3, #127	; 0x7f
 80056f6:	d912      	bls.n	800571e <_SendPacket+0xda>
      *--pStartPacket = (EventId >> 7);
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	09da      	lsrs	r2, r3, #7
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	3b01      	subs	r3, #1
 8005700:	60fb      	str	r3, [r7, #12]
 8005702:	b2d2      	uxtb	r2, r2
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	b2db      	uxtb	r3, r3
 800570c:	68fa      	ldr	r2, [r7, #12]
 800570e:	3a01      	subs	r2, #1
 8005710:	60fa      	str	r2, [r7, #12]
 8005712:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005716:	b2da      	uxtb	r2, r3
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	701a      	strb	r2, [r3, #0]
 800571c:	e006      	b.n	800572c <_SendPacket+0xe8>
    } else {
      *--pStartPacket = EventId;
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	3b01      	subs	r3, #1
 8005722:	60fb      	str	r3, [r7, #12]
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	b2da      	uxtb	r2, r3
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800572c:	4b36      	ldr	r3, [pc, #216]	; (8005808 <_SendPacket+0x1c4>)
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8005732:	4b34      	ldr	r3, [pc, #208]	; (8005804 <_SendPacket+0x1c0>)
 8005734:	68db      	ldr	r3, [r3, #12]
 8005736:	69ba      	ldr	r2, [r7, #24]
 8005738:	1ad3      	subs	r3, r2, r3
 800573a:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 800573c:	68bb      	ldr	r3, [r7, #8]
 800573e:	627b      	str	r3, [r7, #36]	; 0x24
 8005740:	697b      	ldr	r3, [r7, #20]
 8005742:	623b      	str	r3, [r7, #32]
 8005744:	e00b      	b.n	800575e <_SendPacket+0x11a>
 8005746:	6a3b      	ldr	r3, [r7, #32]
 8005748:	b2da      	uxtb	r2, r3
 800574a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800574c:	1c59      	adds	r1, r3, #1
 800574e:	6279      	str	r1, [r7, #36]	; 0x24
 8005750:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005754:	b2d2      	uxtb	r2, r2
 8005756:	701a      	strb	r2, [r3, #0]
 8005758:	6a3b      	ldr	r3, [r7, #32]
 800575a:	09db      	lsrs	r3, r3, #7
 800575c:	623b      	str	r3, [r7, #32]
 800575e:	6a3b      	ldr	r3, [r7, #32]
 8005760:	2b7f      	cmp	r3, #127	; 0x7f
 8005762:	d8f0      	bhi.n	8005746 <_SendPacket+0x102>
 8005764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005766:	1c5a      	adds	r2, r3, #1
 8005768:	627a      	str	r2, [r7, #36]	; 0x24
 800576a:	6a3a      	ldr	r2, [r7, #32]
 800576c:	b2d2      	uxtb	r2, r2
 800576e:	701a      	strb	r2, [r3, #0]
 8005770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005772:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 8005774:	4b23      	ldr	r3, [pc, #140]	; (8005804 <_SendPacket+0x1c0>)
 8005776:	785b      	ldrb	r3, [r3, #1]
 8005778:	4618      	mov	r0, r3
 800577a:	68ba      	ldr	r2, [r7, #8]
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	1ad3      	subs	r3, r2, r3
 8005780:	461a      	mov	r2, r3
 8005782:	68f9      	ldr	r1, [r7, #12]
 8005784:	f7fa fd24 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8005788:	4603      	mov	r3, r0
 800578a:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
  if (Status) {
 800578c:	693b      	ldr	r3, [r7, #16]
 800578e:	2b00      	cmp	r3, #0
 8005790:	d003      	beq.n	800579a <_SendPacket+0x156>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8005792:	4a1c      	ldr	r2, [pc, #112]	; (8005804 <_SendPacket+0x1c0>)
 8005794:	69bb      	ldr	r3, [r7, #24]
 8005796:	60d3      	str	r3, [r2, #12]
 8005798:	e00b      	b.n	80057b2 <_SendPacket+0x16e>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 800579a:	4b1a      	ldr	r3, [pc, #104]	; (8005804 <_SendPacket+0x1c0>)
 800579c:	781b      	ldrb	r3, [r3, #0]
 800579e:	3301      	adds	r3, #1
 80057a0:	b2da      	uxtb	r2, r3
 80057a2:	4b18      	ldr	r3, [pc, #96]	; (8005804 <_SendPacket+0x1c0>)
 80057a4:	701a      	strb	r2, [r3, #0]
 80057a6:	e004      	b.n	80057b2 <_SendPacket+0x16e>
    goto SendDone;
 80057a8:	bf00      	nop
 80057aa:	e002      	b.n	80057b2 <_SendPacket+0x16e>
      goto SendDone;
 80057ac:	bf00      	nop
 80057ae:	e000      	b.n	80057b2 <_SendPacket+0x16e>
      goto SendDone;
 80057b0:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 80057b2:	4b14      	ldr	r3, [pc, #80]	; (8005804 <_SendPacket+0x1c0>)
 80057b4:	7e1b      	ldrb	r3, [r3, #24]
 80057b6:	4619      	mov	r1, r3
 80057b8:	4a14      	ldr	r2, [pc, #80]	; (800580c <_SendPacket+0x1c8>)
 80057ba:	460b      	mov	r3, r1
 80057bc:	005b      	lsls	r3, r3, #1
 80057be:	440b      	add	r3, r1
 80057c0:	00db      	lsls	r3, r3, #3
 80057c2:	4413      	add	r3, r2
 80057c4:	336c      	adds	r3, #108	; 0x6c
 80057c6:	681a      	ldr	r2, [r3, #0]
 80057c8:	4b0e      	ldr	r3, [pc, #56]	; (8005804 <_SendPacket+0x1c0>)
 80057ca:	7e1b      	ldrb	r3, [r3, #24]
 80057cc:	4618      	mov	r0, r3
 80057ce:	490f      	ldr	r1, [pc, #60]	; (800580c <_SendPacket+0x1c8>)
 80057d0:	4603      	mov	r3, r0
 80057d2:	005b      	lsls	r3, r3, #1
 80057d4:	4403      	add	r3, r0
 80057d6:	00db      	lsls	r3, r3, #3
 80057d8:	440b      	add	r3, r1
 80057da:	3370      	adds	r3, #112	; 0x70
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	429a      	cmp	r2, r3
 80057e0:	d00b      	beq.n	80057fa <_SendPacket+0x1b6>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 80057e2:	4b08      	ldr	r3, [pc, #32]	; (8005804 <_SendPacket+0x1c0>)
 80057e4:	789b      	ldrb	r3, [r3, #2]
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d107      	bne.n	80057fa <_SendPacket+0x1b6>
      _SYSVIEW_Globals.RecursionCnt = 1;
 80057ea:	4b06      	ldr	r3, [pc, #24]	; (8005804 <_SendPacket+0x1c0>)
 80057ec:	2201      	movs	r2, #1
 80057ee:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 80057f0:	f7ff fe46 	bl	8005480 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 80057f4:	4b03      	ldr	r3, [pc, #12]	; (8005804 <_SendPacket+0x1c0>)
 80057f6:	2200      	movs	r2, #0
 80057f8:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 80057fa:	bf00      	nop
 80057fc:	3728      	adds	r7, #40	; 0x28
 80057fe:	46bd      	mov	sp, r7
 8005800:	bd80      	pop	{r7, pc}
 8005802:	bf00      	nop
 8005804:	20005418 	.word	0x20005418
 8005808:	e0001004 	.word	0xe0001004
 800580c:	20003f58 	.word	0x20003f58

08005810 <_StoreChar>:
*
*  Parameters
*    p            Pointer to the buffer description.
*    c            Character to be printed.
*/
static void _StoreChar(SEGGER_SYSVIEW_PRINTF_DESC * p, char c) {
 8005810:	b580      	push	{r7, lr}
 8005812:	b08a      	sub	sp, #40	; 0x28
 8005814:	af00      	add	r7, sp, #0
 8005816:	6078      	str	r0, [r7, #4]
 8005818:	460b      	mov	r3, r1
 800581a:	70fb      	strb	r3, [r7, #3]
  unsigned int  Cnt;
  U8*           pPayload;
  U32           Options;

  Cnt = p->Cnt;
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	691b      	ldr	r3, [r3, #16]
 8005820:	617b      	str	r3, [r7, #20]
  if ((Cnt + 1u) <= SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8005822:	697b      	ldr	r3, [r7, #20]
 8005824:	3301      	adds	r3, #1
 8005826:	2b80      	cmp	r3, #128	; 0x80
 8005828:	d80a      	bhi.n	8005840 <_StoreChar+0x30>
    *(p->pPayload++) = c;
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	685b      	ldr	r3, [r3, #4]
 800582e:	1c59      	adds	r1, r3, #1
 8005830:	687a      	ldr	r2, [r7, #4]
 8005832:	6051      	str	r1, [r2, #4]
 8005834:	78fa      	ldrb	r2, [r7, #3]
 8005836:	701a      	strb	r2, [r3, #0]
    p->Cnt = Cnt + 1u;
 8005838:	697b      	ldr	r3, [r7, #20]
 800583a:	1c5a      	adds	r2, r3, #1
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	611a      	str	r2, [r3, #16]
  }
  //
  // Write part of string, when the buffer is full
  //
  if (p->Cnt == SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	691b      	ldr	r3, [r3, #16]
 8005844:	2b80      	cmp	r3, #128	; 0x80
 8005846:	d15a      	bne.n	80058fe <_StoreChar+0xee>
    *(p->pPayloadStart) = p->Cnt;
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	691a      	ldr	r2, [r3, #16]
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	689b      	ldr	r3, [r3, #8]
 8005850:	b2d2      	uxtb	r2, r2
 8005852:	701a      	strb	r2, [r3, #0]
    pPayload = p->pPayload;
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	685b      	ldr	r3, [r3, #4]
 8005858:	613b      	str	r3, [r7, #16]
    Options = p->Options;
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	68db      	ldr	r3, [r3, #12]
 800585e:	60fb      	str	r3, [r7, #12]
    ENCODE_U32(pPayload, Options);
 8005860:	693b      	ldr	r3, [r7, #16]
 8005862:	627b      	str	r3, [r7, #36]	; 0x24
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	623b      	str	r3, [r7, #32]
 8005868:	e00b      	b.n	8005882 <_StoreChar+0x72>
 800586a:	6a3b      	ldr	r3, [r7, #32]
 800586c:	b2da      	uxtb	r2, r3
 800586e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005870:	1c59      	adds	r1, r3, #1
 8005872:	6279      	str	r1, [r7, #36]	; 0x24
 8005874:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005878:	b2d2      	uxtb	r2, r2
 800587a:	701a      	strb	r2, [r3, #0]
 800587c:	6a3b      	ldr	r3, [r7, #32]
 800587e:	09db      	lsrs	r3, r3, #7
 8005880:	623b      	str	r3, [r7, #32]
 8005882:	6a3b      	ldr	r3, [r7, #32]
 8005884:	2b7f      	cmp	r3, #127	; 0x7f
 8005886:	d8f0      	bhi.n	800586a <_StoreChar+0x5a>
 8005888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800588a:	1c5a      	adds	r2, r3, #1
 800588c:	627a      	str	r2, [r7, #36]	; 0x24
 800588e:	6a3a      	ldr	r2, [r7, #32]
 8005890:	b2d2      	uxtb	r2, r2
 8005892:	701a      	strb	r2, [r3, #0]
 8005894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005896:	613b      	str	r3, [r7, #16]
    ENCODE_U32(pPayload, 0);
 8005898:	693b      	ldr	r3, [r7, #16]
 800589a:	61fb      	str	r3, [r7, #28]
 800589c:	2300      	movs	r3, #0
 800589e:	61bb      	str	r3, [r7, #24]
 80058a0:	e00b      	b.n	80058ba <_StoreChar+0xaa>
 80058a2:	69bb      	ldr	r3, [r7, #24]
 80058a4:	b2da      	uxtb	r2, r3
 80058a6:	69fb      	ldr	r3, [r7, #28]
 80058a8:	1c59      	adds	r1, r3, #1
 80058aa:	61f9      	str	r1, [r7, #28]
 80058ac:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80058b0:	b2d2      	uxtb	r2, r2
 80058b2:	701a      	strb	r2, [r3, #0]
 80058b4:	69bb      	ldr	r3, [r7, #24]
 80058b6:	09db      	lsrs	r3, r3, #7
 80058b8:	61bb      	str	r3, [r7, #24]
 80058ba:	69bb      	ldr	r3, [r7, #24]
 80058bc:	2b7f      	cmp	r3, #127	; 0x7f
 80058be:	d8f0      	bhi.n	80058a2 <_StoreChar+0x92>
 80058c0:	69fb      	ldr	r3, [r7, #28]
 80058c2:	1c5a      	adds	r2, r3, #1
 80058c4:	61fa      	str	r2, [r7, #28]
 80058c6:	69ba      	ldr	r2, [r7, #24]
 80058c8:	b2d2      	uxtb	r2, r2
 80058ca:	701a      	strb	r2, [r3, #0]
 80058cc:	69fb      	ldr	r3, [r7, #28]
 80058ce:	613b      	str	r3, [r7, #16]
    _SendPacket(p->pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	689b      	ldr	r3, [r3, #8]
 80058d4:	221a      	movs	r2, #26
 80058d6:	6939      	ldr	r1, [r7, #16]
 80058d8:	4618      	mov	r0, r3
 80058da:	f7ff feb3 	bl	8005644 <_SendPacket>
    p->pPayloadStart = _PreparePacket(p->pBuffer);
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	4618      	mov	r0, r3
 80058e4:	f7ff fdbf 	bl	8005466 <_PreparePacket>
 80058e8:	4602      	mov	r2, r0
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	609a      	str	r2, [r3, #8]
    p->pPayload = p->pPayloadStart + 1u;
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	689b      	ldr	r3, [r3, #8]
 80058f2:	1c5a      	adds	r2, r3, #1
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	605a      	str	r2, [r3, #4]
    p->Cnt = 0u;
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	2200      	movs	r2, #0
 80058fc:	611a      	str	r2, [r3, #16]
  }
}
 80058fe:	bf00      	nop
 8005900:	3728      	adds	r7, #40	; 0x28
 8005902:	46bd      	mov	sp, r7
 8005904:	bd80      	pop	{r7, pc}
	...

08005908 <_PrintUnsigned>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintUnsigned(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, unsigned int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 8005908:	b580      	push	{r7, lr}
 800590a:	b08a      	sub	sp, #40	; 0x28
 800590c:	af00      	add	r7, sp, #0
 800590e:	60f8      	str	r0, [r7, #12]
 8005910:	60b9      	str	r1, [r7, #8]
 8005912:	607a      	str	r2, [r7, #4]
 8005914:	603b      	str	r3, [r7, #0]
  unsigned int      Digit;
  unsigned int      Number;
  unsigned int      Width;
  char              c;

  Number = v;
 8005916:	68bb      	ldr	r3, [r7, #8]
 8005918:	623b      	str	r3, [r7, #32]
  Digit = 1u;
 800591a:	2301      	movs	r3, #1
 800591c:	627b      	str	r3, [r7, #36]	; 0x24
  //
  // Get actual field width
  //
  Width = 1u;
 800591e:	2301      	movs	r3, #1
 8005920:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 8005922:	e007      	b.n	8005934 <_PrintUnsigned+0x2c>
    Number = (Number / Base);
 8005924:	6a3a      	ldr	r2, [r7, #32]
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	fbb2 f3f3 	udiv	r3, r2, r3
 800592c:	623b      	str	r3, [r7, #32]
    Width++;
 800592e:	69fb      	ldr	r3, [r7, #28]
 8005930:	3301      	adds	r3, #1
 8005932:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 8005934:	6a3a      	ldr	r2, [r7, #32]
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	429a      	cmp	r2, r3
 800593a:	d2f3      	bcs.n	8005924 <_PrintUnsigned+0x1c>
  }
  if (NumDigits > Width) {
 800593c:	683a      	ldr	r2, [r7, #0]
 800593e:	69fb      	ldr	r3, [r7, #28]
 8005940:	429a      	cmp	r2, r3
 8005942:	d901      	bls.n	8005948 <_PrintUnsigned+0x40>
    Width = NumDigits;
 8005944:	683b      	ldr	r3, [r7, #0]
 8005946:	61fb      	str	r3, [r7, #28]
  }
  //
  // Print leading chars if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) {
 8005948:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800594a:	f003 0301 	and.w	r3, r3, #1
 800594e:	2b00      	cmp	r3, #0
 8005950:	d11f      	bne.n	8005992 <_PrintUnsigned+0x8a>
    if (FieldWidth != 0u) {
 8005952:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005954:	2b00      	cmp	r3, #0
 8005956:	d01c      	beq.n	8005992 <_PrintUnsigned+0x8a>
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && (NumDigits == 0u)) {
 8005958:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800595a:	f003 0302 	and.w	r3, r3, #2
 800595e:	2b00      	cmp	r3, #0
 8005960:	d005      	beq.n	800596e <_PrintUnsigned+0x66>
 8005962:	683b      	ldr	r3, [r7, #0]
 8005964:	2b00      	cmp	r3, #0
 8005966:	d102      	bne.n	800596e <_PrintUnsigned+0x66>
        c = '0';
 8005968:	2330      	movs	r3, #48	; 0x30
 800596a:	76fb      	strb	r3, [r7, #27]
 800596c:	e001      	b.n	8005972 <_PrintUnsigned+0x6a>
      } else {
        c = ' ';
 800596e:	2320      	movs	r3, #32
 8005970:	76fb      	strb	r3, [r7, #27]
      }
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005972:	e007      	b.n	8005984 <_PrintUnsigned+0x7c>
        FieldWidth--;
 8005974:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005976:	3b01      	subs	r3, #1
 8005978:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, c);
 800597a:	7efb      	ldrb	r3, [r7, #27]
 800597c:	4619      	mov	r1, r3
 800597e:	68f8      	ldr	r0, [r7, #12]
 8005980:	f7ff ff46 	bl	8005810 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005984:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005986:	2b00      	cmp	r3, #0
 8005988:	d003      	beq.n	8005992 <_PrintUnsigned+0x8a>
 800598a:	69fa      	ldr	r2, [r7, #28]
 800598c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800598e:	429a      	cmp	r2, r3
 8005990:	d3f0      	bcc.n	8005974 <_PrintUnsigned+0x6c>
  // Compute Digit.
  // Loop until Digit has the value of the highest digit required.
  // Example: If the output is 345 (Base 10), loop 2 times until Digit is 100.
  //
  while (1) {
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 8005992:	683b      	ldr	r3, [r7, #0]
 8005994:	2b01      	cmp	r3, #1
 8005996:	d903      	bls.n	80059a0 <_PrintUnsigned+0x98>
      NumDigits--;
 8005998:	683b      	ldr	r3, [r7, #0]
 800599a:	3b01      	subs	r3, #1
 800599c:	603b      	str	r3, [r7, #0]
 800599e:	e009      	b.n	80059b4 <_PrintUnsigned+0xac>
    } else {
      Div = v / Digit;
 80059a0:	68ba      	ldr	r2, [r7, #8]
 80059a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80059a8:	617b      	str	r3, [r7, #20]
      if (Div < Base) {        // Is our divider big enough to extract the highest digit from value? => Done
 80059aa:	697a      	ldr	r2, [r7, #20]
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	429a      	cmp	r2, r3
 80059b0:	d200      	bcs.n	80059b4 <_PrintUnsigned+0xac>
        break;
 80059b2:	e005      	b.n	80059c0 <_PrintUnsigned+0xb8>
      }
    }
    Digit *= Base;
 80059b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059b6:	687a      	ldr	r2, [r7, #4]
 80059b8:	fb02 f303 	mul.w	r3, r2, r3
 80059bc:	627b      	str	r3, [r7, #36]	; 0x24
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 80059be:	e7e8      	b.n	8005992 <_PrintUnsigned+0x8a>
  }
  //
  // Output digits
  //
  do {
    Div = v / Digit;
 80059c0:	68ba      	ldr	r2, [r7, #8]
 80059c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80059c8:	617b      	str	r3, [r7, #20]
    v -= Div * Digit;
 80059ca:	697b      	ldr	r3, [r7, #20]
 80059cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80059ce:	fb02 f303 	mul.w	r3, r2, r3
 80059d2:	68ba      	ldr	r2, [r7, #8]
 80059d4:	1ad3      	subs	r3, r2, r3
 80059d6:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, _aV2C[Div]);
 80059d8:	4a15      	ldr	r2, [pc, #84]	; (8005a30 <_PrintUnsigned+0x128>)
 80059da:	697b      	ldr	r3, [r7, #20]
 80059dc:	4413      	add	r3, r2
 80059de:	781b      	ldrb	r3, [r3, #0]
 80059e0:	4619      	mov	r1, r3
 80059e2:	68f8      	ldr	r0, [r7, #12]
 80059e4:	f7ff ff14 	bl	8005810 <_StoreChar>
    Digit /= Base;
 80059e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80059f0:	627b      	str	r3, [r7, #36]	; 0x24
  } while (Digit);
 80059f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d1e3      	bne.n	80059c0 <_PrintUnsigned+0xb8>
  //
  // Print trailing spaces if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == FORMAT_FLAG_LEFT_JUSTIFY) {
 80059f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059fa:	f003 0301 	and.w	r3, r3, #1
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d011      	beq.n	8005a26 <_PrintUnsigned+0x11e>
    if (FieldWidth != 0u) {
 8005a02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d00e      	beq.n	8005a26 <_PrintUnsigned+0x11e>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005a08:	e006      	b.n	8005a18 <_PrintUnsigned+0x110>
        FieldWidth--;
 8005a0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a0c:	3b01      	subs	r3, #1
 8005a0e:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, ' ');
 8005a10:	2120      	movs	r1, #32
 8005a12:	68f8      	ldr	r0, [r7, #12]
 8005a14:	f7ff fefc 	bl	8005810 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005a18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d003      	beq.n	8005a26 <_PrintUnsigned+0x11e>
 8005a1e:	69fa      	ldr	r2, [r7, #28]
 8005a20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a22:	429a      	cmp	r2, r3
 8005a24:	d3f1      	bcc.n	8005a0a <_PrintUnsigned+0x102>
      }
    }
  }
}
 8005a26:	bf00      	nop
 8005a28:	3728      	adds	r7, #40	; 0x28
 8005a2a:	46bd      	mov	sp, r7
 8005a2c:	bd80      	pop	{r7, pc}
 8005a2e:	bf00      	nop
 8005a30:	08007978 	.word	0x08007978

08005a34 <_PrintInt>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintInt(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 8005a34:	b580      	push	{r7, lr}
 8005a36:	b088      	sub	sp, #32
 8005a38:	af02      	add	r7, sp, #8
 8005a3a:	60f8      	str	r0, [r7, #12]
 8005a3c:	60b9      	str	r1, [r7, #8]
 8005a3e:	607a      	str	r2, [r7, #4]
 8005a40:	603b      	str	r3, [r7, #0]
  unsigned int  Width;
  int           Number;

  Number = (v < 0) ? -v : v;
 8005a42:	68bb      	ldr	r3, [r7, #8]
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	bfb8      	it	lt
 8005a48:	425b      	neglt	r3, r3
 8005a4a:	613b      	str	r3, [r7, #16]

  //
  // Get actual field width
  //
  Width = 1u;
 8005a4c:	2301      	movs	r3, #1
 8005a4e:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 8005a50:	e007      	b.n	8005a62 <_PrintInt+0x2e>
    Number = (Number / (int)Base);
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	693a      	ldr	r2, [r7, #16]
 8005a56:	fb92 f3f3 	sdiv	r3, r2, r3
 8005a5a:	613b      	str	r3, [r7, #16]
    Width++;
 8005a5c:	697b      	ldr	r3, [r7, #20]
 8005a5e:	3301      	adds	r3, #1
 8005a60:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	693a      	ldr	r2, [r7, #16]
 8005a66:	429a      	cmp	r2, r3
 8005a68:	daf3      	bge.n	8005a52 <_PrintInt+0x1e>
  }
  if (NumDigits > Width) {
 8005a6a:	683a      	ldr	r2, [r7, #0]
 8005a6c:	697b      	ldr	r3, [r7, #20]
 8005a6e:	429a      	cmp	r2, r3
 8005a70:	d901      	bls.n	8005a76 <_PrintInt+0x42>
    Width = NumDigits;
 8005a72:	683b      	ldr	r3, [r7, #0]
 8005a74:	617b      	str	r3, [r7, #20]
  }
  if ((FieldWidth > 0u) && ((v < 0) || ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN))) {
 8005a76:	6a3b      	ldr	r3, [r7, #32]
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d00a      	beq.n	8005a92 <_PrintInt+0x5e>
 8005a7c:	68bb      	ldr	r3, [r7, #8]
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	db04      	blt.n	8005a8c <_PrintInt+0x58>
 8005a82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a84:	f003 0304 	and.w	r3, r3, #4
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d002      	beq.n	8005a92 <_PrintInt+0x5e>
    FieldWidth--;
 8005a8c:	6a3b      	ldr	r3, [r7, #32]
 8005a8e:	3b01      	subs	r3, #1
 8005a90:	623b      	str	r3, [r7, #32]
  }

  //
  // Print leading spaces if necessary
  //
  if ((((FormatFlags & FORMAT_FLAG_PAD_ZERO) == 0u) || (NumDigits != 0u)) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u)) {
 8005a92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a94:	f003 0302 	and.w	r3, r3, #2
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d002      	beq.n	8005aa2 <_PrintInt+0x6e>
 8005a9c:	683b      	ldr	r3, [r7, #0]
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d016      	beq.n	8005ad0 <_PrintInt+0x9c>
 8005aa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aa4:	f003 0301 	and.w	r3, r3, #1
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d111      	bne.n	8005ad0 <_PrintInt+0x9c>
    if (FieldWidth != 0u) {
 8005aac:	6a3b      	ldr	r3, [r7, #32]
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d00e      	beq.n	8005ad0 <_PrintInt+0x9c>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005ab2:	e006      	b.n	8005ac2 <_PrintInt+0x8e>
        FieldWidth--;
 8005ab4:	6a3b      	ldr	r3, [r7, #32]
 8005ab6:	3b01      	subs	r3, #1
 8005ab8:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, ' ');
 8005aba:	2120      	movs	r1, #32
 8005abc:	68f8      	ldr	r0, [r7, #12]
 8005abe:	f7ff fea7 	bl	8005810 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005ac2:	6a3b      	ldr	r3, [r7, #32]
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d003      	beq.n	8005ad0 <_PrintInt+0x9c>
 8005ac8:	697a      	ldr	r2, [r7, #20]
 8005aca:	6a3b      	ldr	r3, [r7, #32]
 8005acc:	429a      	cmp	r2, r3
 8005ace:	d3f1      	bcc.n	8005ab4 <_PrintInt+0x80>
    }
  }
  //
  // Print sign if necessary
  //
  if (v < 0) {
 8005ad0:	68bb      	ldr	r3, [r7, #8]
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	da07      	bge.n	8005ae6 <_PrintInt+0xb2>
    v = -v;
 8005ad6:	68bb      	ldr	r3, [r7, #8]
 8005ad8:	425b      	negs	r3, r3
 8005ada:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, '-');
 8005adc:	212d      	movs	r1, #45	; 0x2d
 8005ade:	68f8      	ldr	r0, [r7, #12]
 8005ae0:	f7ff fe96 	bl	8005810 <_StoreChar>
 8005ae4:	e008      	b.n	8005af8 <_PrintInt+0xc4>
  } else if ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN) {
 8005ae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ae8:	f003 0304 	and.w	r3, r3, #4
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d003      	beq.n	8005af8 <_PrintInt+0xc4>
    _StoreChar(pBufferDesc, '+');
 8005af0:	212b      	movs	r1, #43	; 0x2b
 8005af2:	68f8      	ldr	r0, [r7, #12]
 8005af4:	f7ff fe8c 	bl	8005810 <_StoreChar>

  }
  //
  // Print leading zeros if necessary
  //
  if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) && (NumDigits == 0u)) {
 8005af8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005afa:	f003 0302 	and.w	r3, r3, #2
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d019      	beq.n	8005b36 <_PrintInt+0x102>
 8005b02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b04:	f003 0301 	and.w	r3, r3, #1
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d114      	bne.n	8005b36 <_PrintInt+0x102>
 8005b0c:	683b      	ldr	r3, [r7, #0]
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d111      	bne.n	8005b36 <_PrintInt+0x102>
    if (FieldWidth != 0u) {
 8005b12:	6a3b      	ldr	r3, [r7, #32]
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d00e      	beq.n	8005b36 <_PrintInt+0x102>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005b18:	e006      	b.n	8005b28 <_PrintInt+0xf4>
        FieldWidth--;
 8005b1a:	6a3b      	ldr	r3, [r7, #32]
 8005b1c:	3b01      	subs	r3, #1
 8005b1e:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, '0');
 8005b20:	2130      	movs	r1, #48	; 0x30
 8005b22:	68f8      	ldr	r0, [r7, #12]
 8005b24:	f7ff fe74 	bl	8005810 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005b28:	6a3b      	ldr	r3, [r7, #32]
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d003      	beq.n	8005b36 <_PrintInt+0x102>
 8005b2e:	697a      	ldr	r2, [r7, #20]
 8005b30:	6a3b      	ldr	r3, [r7, #32]
 8005b32:	429a      	cmp	r2, r3
 8005b34:	d3f1      	bcc.n	8005b1a <_PrintInt+0xe6>
    }
  }
  //
  // Print number without sign
  //
  _PrintUnsigned(pBufferDesc, (unsigned int)v, Base, NumDigits, FieldWidth, FormatFlags);
 8005b36:	68b9      	ldr	r1, [r7, #8]
 8005b38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b3a:	9301      	str	r3, [sp, #4]
 8005b3c:	6a3b      	ldr	r3, [r7, #32]
 8005b3e:	9300      	str	r3, [sp, #0]
 8005b40:	683b      	ldr	r3, [r7, #0]
 8005b42:	687a      	ldr	r2, [r7, #4]
 8005b44:	68f8      	ldr	r0, [r7, #12]
 8005b46:	f7ff fedf 	bl	8005908 <_PrintUnsigned>
}
 8005b4a:	bf00      	nop
 8005b4c:	3718      	adds	r7, #24
 8005b4e:	46bd      	mov	sp, r7
 8005b50:	bd80      	pop	{r7, pc}
	...

08005b54 <_VPrintTarget>:
*  Parameters
*    sFormat      Pointer to format string.
*    Options      Options to be sent to the host.
*    pParamList   Pointer to the list of arguments for the format string.
*/
static void _VPrintTarget(const char* sFormat, U32 Options, va_list* pParamList) {
 8005b54:	b580      	push	{r7, lr}
 8005b56:	b098      	sub	sp, #96	; 0x60
 8005b58:	af02      	add	r7, sp, #8
 8005b5a:	60f8      	str	r0, [r7, #12]
 8005b5c:	60b9      	str	r1, [r7, #8]
 8005b5e:	607a      	str	r2, [r7, #4]
  U8*           pPayloadStart;
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
  SEGGER_SYSVIEW_LOCK();
#else
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8005b60:	f3ef 8311 	mrs	r3, BASEPRI
 8005b64:	f04f 0120 	mov.w	r1, #32
 8005b68:	f381 8811 	msr	BASEPRI, r1
 8005b6c:	633b      	str	r3, [r7, #48]	; 0x30
 8005b6e:	48b7      	ldr	r0, [pc, #732]	; (8005e4c <_VPrintTarget+0x2f8>)
 8005b70:	f7ff fc79 	bl	8005466 <_PreparePacket>
 8005b74:	62f8      	str	r0, [r7, #44]	; 0x2c
#endif

#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  BufferDesc.pBuffer        = aPacket;
#else
  BufferDesc.pBuffer        = _aPacket;
 8005b76:	4bb5      	ldr	r3, [pc, #724]	; (8005e4c <_VPrintTarget+0x2f8>)
 8005b78:	617b      	str	r3, [r7, #20]
#endif
  BufferDesc.Cnt            = 0u;
 8005b7a:	2300      	movs	r3, #0
 8005b7c:	627b      	str	r3, [r7, #36]	; 0x24
  BufferDesc.pPayloadStart  = pPayloadStart;
 8005b7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b80:	61fb      	str	r3, [r7, #28]
  BufferDesc.pPayload       = BufferDesc.pPayloadStart + 1u;
 8005b82:	69fb      	ldr	r3, [r7, #28]
 8005b84:	3301      	adds	r3, #1
 8005b86:	61bb      	str	r3, [r7, #24]
  BufferDesc.Options        =  Options;
 8005b88:	68bb      	ldr	r3, [r7, #8]
 8005b8a:	623b      	str	r3, [r7, #32]

  do {
    c = *sFormat;
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	781b      	ldrb	r3, [r3, #0]
 8005b90:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    sFormat++;
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	3301      	adds	r3, #1
 8005b98:	60fb      	str	r3, [r7, #12]
    if (c == 0u) {
 8005b9a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	f000 8183 	beq.w	8005eaa <_VPrintTarget+0x356>
      break;
    }
    if (c == '%') {
 8005ba4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005ba8:	2b25      	cmp	r3, #37	; 0x25
 8005baa:	f040 8170 	bne.w	8005e8e <_VPrintTarget+0x33a>
      //
      // Filter out flags
      //
      FormatFlags = 0u;
 8005bae:	2300      	movs	r3, #0
 8005bb0:	64bb      	str	r3, [r7, #72]	; 0x48
      v = 1;
 8005bb2:	2301      	movs	r3, #1
 8005bb4:	653b      	str	r3, [r7, #80]	; 0x50
      do {
        c = *sFormat;
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	781b      	ldrb	r3, [r3, #0]
 8005bba:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        switch (c) {
 8005bbe:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005bc2:	3b23      	subs	r3, #35	; 0x23
 8005bc4:	2b0d      	cmp	r3, #13
 8005bc6:	d83f      	bhi.n	8005c48 <_VPrintTarget+0xf4>
 8005bc8:	a201      	add	r2, pc, #4	; (adr r2, 8005bd0 <_VPrintTarget+0x7c>)
 8005bca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bce:	bf00      	nop
 8005bd0:	08005c39 	.word	0x08005c39
 8005bd4:	08005c49 	.word	0x08005c49
 8005bd8:	08005c49 	.word	0x08005c49
 8005bdc:	08005c49 	.word	0x08005c49
 8005be0:	08005c49 	.word	0x08005c49
 8005be4:	08005c49 	.word	0x08005c49
 8005be8:	08005c49 	.word	0x08005c49
 8005bec:	08005c49 	.word	0x08005c49
 8005bf0:	08005c29 	.word	0x08005c29
 8005bf4:	08005c49 	.word	0x08005c49
 8005bf8:	08005c09 	.word	0x08005c09
 8005bfc:	08005c49 	.word	0x08005c49
 8005c00:	08005c49 	.word	0x08005c49
 8005c04:	08005c19 	.word	0x08005c19
        case '-': FormatFlags |= FORMAT_FLAG_LEFT_JUSTIFY; sFormat++; break;
 8005c08:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005c0a:	f043 0301 	orr.w	r3, r3, #1
 8005c0e:	64bb      	str	r3, [r7, #72]	; 0x48
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	3301      	adds	r3, #1
 8005c14:	60fb      	str	r3, [r7, #12]
 8005c16:	e01a      	b.n	8005c4e <_VPrintTarget+0xfa>
        case '0': FormatFlags |= FORMAT_FLAG_PAD_ZERO;     sFormat++; break;
 8005c18:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005c1a:	f043 0302 	orr.w	r3, r3, #2
 8005c1e:	64bb      	str	r3, [r7, #72]	; 0x48
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	3301      	adds	r3, #1
 8005c24:	60fb      	str	r3, [r7, #12]
 8005c26:	e012      	b.n	8005c4e <_VPrintTarget+0xfa>
        case '+': FormatFlags |= FORMAT_FLAG_PRINT_SIGN;   sFormat++; break;
 8005c28:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005c2a:	f043 0304 	orr.w	r3, r3, #4
 8005c2e:	64bb      	str	r3, [r7, #72]	; 0x48
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	3301      	adds	r3, #1
 8005c34:	60fb      	str	r3, [r7, #12]
 8005c36:	e00a      	b.n	8005c4e <_VPrintTarget+0xfa>
        case '#': FormatFlags |= FORMAT_FLAG_ALTERNATE;    sFormat++; break;
 8005c38:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005c3a:	f043 0308 	orr.w	r3, r3, #8
 8005c3e:	64bb      	str	r3, [r7, #72]	; 0x48
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	3301      	adds	r3, #1
 8005c44:	60fb      	str	r3, [r7, #12]
 8005c46:	e002      	b.n	8005c4e <_VPrintTarget+0xfa>
        default:  v = 0; break;
 8005c48:	2300      	movs	r3, #0
 8005c4a:	653b      	str	r3, [r7, #80]	; 0x50
 8005c4c:	bf00      	nop
        }
      } while (v);
 8005c4e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d1b0      	bne.n	8005bb6 <_VPrintTarget+0x62>
      //
      // filter out field with
      //
      FieldWidth = 0u;
 8005c54:	2300      	movs	r3, #0
 8005c56:	647b      	str	r3, [r7, #68]	; 0x44
      do {
        c = *sFormat;
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	781b      	ldrb	r3, [r3, #0]
 8005c5c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        if ((c < '0') || (c > '9')) {
 8005c60:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005c64:	2b2f      	cmp	r3, #47	; 0x2f
 8005c66:	d912      	bls.n	8005c8e <_VPrintTarget+0x13a>
 8005c68:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005c6c:	2b39      	cmp	r3, #57	; 0x39
 8005c6e:	d80e      	bhi.n	8005c8e <_VPrintTarget+0x13a>
          break;
        }
        sFormat++;
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	3301      	adds	r3, #1
 8005c74:	60fb      	str	r3, [r7, #12]
        FieldWidth = (FieldWidth * 10u) + ((unsigned int)c - '0');
 8005c76:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005c78:	4613      	mov	r3, r2
 8005c7a:	009b      	lsls	r3, r3, #2
 8005c7c:	4413      	add	r3, r2
 8005c7e:	005b      	lsls	r3, r3, #1
 8005c80:	461a      	mov	r2, r3
 8005c82:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005c86:	4413      	add	r3, r2
 8005c88:	3b30      	subs	r3, #48	; 0x30
 8005c8a:	647b      	str	r3, [r7, #68]	; 0x44
        c = *sFormat;
 8005c8c:	e7e4      	b.n	8005c58 <_VPrintTarget+0x104>
      } while (1);

      //
      // Filter out precision (number of digits to display)
      //
      NumDigits = 0u;
 8005c8e:	2300      	movs	r3, #0
 8005c90:	64fb      	str	r3, [r7, #76]	; 0x4c
      c = *sFormat;
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	781b      	ldrb	r3, [r3, #0]
 8005c96:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
      if (c == '.') {
 8005c9a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005c9e:	2b2e      	cmp	r3, #46	; 0x2e
 8005ca0:	d11d      	bne.n	8005cde <_VPrintTarget+0x18a>
        sFormat++;
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	3301      	adds	r3, #1
 8005ca6:	60fb      	str	r3, [r7, #12]
        do {
          c = *sFormat;
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	781b      	ldrb	r3, [r3, #0]
 8005cac:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          if ((c < '0') || (c > '9')) {
 8005cb0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005cb4:	2b2f      	cmp	r3, #47	; 0x2f
 8005cb6:	d912      	bls.n	8005cde <_VPrintTarget+0x18a>
 8005cb8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005cbc:	2b39      	cmp	r3, #57	; 0x39
 8005cbe:	d80e      	bhi.n	8005cde <_VPrintTarget+0x18a>
            break;
          }
          sFormat++;
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	3301      	adds	r3, #1
 8005cc4:	60fb      	str	r3, [r7, #12]
          NumDigits = NumDigits * 10u + ((unsigned int)c - '0');
 8005cc6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005cc8:	4613      	mov	r3, r2
 8005cca:	009b      	lsls	r3, r3, #2
 8005ccc:	4413      	add	r3, r2
 8005cce:	005b      	lsls	r3, r3, #1
 8005cd0:	461a      	mov	r2, r3
 8005cd2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005cd6:	4413      	add	r3, r2
 8005cd8:	3b30      	subs	r3, #48	; 0x30
 8005cda:	64fb      	str	r3, [r7, #76]	; 0x4c
          c = *sFormat;
 8005cdc:	e7e4      	b.n	8005ca8 <_VPrintTarget+0x154>
        } while (1);
      }
      //
      // Filter out length modifier
      //
      c = *sFormat;
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	781b      	ldrb	r3, [r3, #0]
 8005ce2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
      do {
        if ((c == 'l') || (c == 'h')) {
 8005ce6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005cea:	2b6c      	cmp	r3, #108	; 0x6c
 8005cec:	d003      	beq.n	8005cf6 <_VPrintTarget+0x1a2>
 8005cee:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005cf2:	2b68      	cmp	r3, #104	; 0x68
 8005cf4:	d107      	bne.n	8005d06 <_VPrintTarget+0x1b2>
          c = *sFormat;
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	781b      	ldrb	r3, [r3, #0]
 8005cfa:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          sFormat++;
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	3301      	adds	r3, #1
 8005d02:	60fb      	str	r3, [r7, #12]
        if ((c == 'l') || (c == 'h')) {
 8005d04:	e7ef      	b.n	8005ce6 <_VPrintTarget+0x192>
        }
      } while (1);
      //
      // Handle specifiers
      //
      switch (c) {
 8005d06:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005d0a:	2b25      	cmp	r3, #37	; 0x25
 8005d0c:	f000 80b3 	beq.w	8005e76 <_VPrintTarget+0x322>
 8005d10:	2b25      	cmp	r3, #37	; 0x25
 8005d12:	f2c0 80b7 	blt.w	8005e84 <_VPrintTarget+0x330>
 8005d16:	2b78      	cmp	r3, #120	; 0x78
 8005d18:	f300 80b4 	bgt.w	8005e84 <_VPrintTarget+0x330>
 8005d1c:	2b58      	cmp	r3, #88	; 0x58
 8005d1e:	f2c0 80b1 	blt.w	8005e84 <_VPrintTarget+0x330>
 8005d22:	3b58      	subs	r3, #88	; 0x58
 8005d24:	2b20      	cmp	r3, #32
 8005d26:	f200 80ad 	bhi.w	8005e84 <_VPrintTarget+0x330>
 8005d2a:	a201      	add	r2, pc, #4	; (adr r2, 8005d30 <_VPrintTarget+0x1dc>)
 8005d2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d30:	08005e27 	.word	0x08005e27
 8005d34:	08005e85 	.word	0x08005e85
 8005d38:	08005e85 	.word	0x08005e85
 8005d3c:	08005e85 	.word	0x08005e85
 8005d40:	08005e85 	.word	0x08005e85
 8005d44:	08005e85 	.word	0x08005e85
 8005d48:	08005e85 	.word	0x08005e85
 8005d4c:	08005e85 	.word	0x08005e85
 8005d50:	08005e85 	.word	0x08005e85
 8005d54:	08005e85 	.word	0x08005e85
 8005d58:	08005e85 	.word	0x08005e85
 8005d5c:	08005db5 	.word	0x08005db5
 8005d60:	08005ddb 	.word	0x08005ddb
 8005d64:	08005e85 	.word	0x08005e85
 8005d68:	08005e85 	.word	0x08005e85
 8005d6c:	08005e85 	.word	0x08005e85
 8005d70:	08005e85 	.word	0x08005e85
 8005d74:	08005e85 	.word	0x08005e85
 8005d78:	08005e85 	.word	0x08005e85
 8005d7c:	08005e85 	.word	0x08005e85
 8005d80:	08005e85 	.word	0x08005e85
 8005d84:	08005e85 	.word	0x08005e85
 8005d88:	08005e85 	.word	0x08005e85
 8005d8c:	08005e85 	.word	0x08005e85
 8005d90:	08005e51 	.word	0x08005e51
 8005d94:	08005e85 	.word	0x08005e85
 8005d98:	08005e85 	.word	0x08005e85
 8005d9c:	08005e85 	.word	0x08005e85
 8005da0:	08005e85 	.word	0x08005e85
 8005da4:	08005e01 	.word	0x08005e01
 8005da8:	08005e85 	.word	0x08005e85
 8005dac:	08005e85 	.word	0x08005e85
 8005db0:	08005e27 	.word	0x08005e27
      case 'c': {
        char c0;
        v = va_arg(*pParamList, int);
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	1d19      	adds	r1, r3, #4
 8005dba:	687a      	ldr	r2, [r7, #4]
 8005dbc:	6011      	str	r1, [r2, #0]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	653b      	str	r3, [r7, #80]	; 0x50
        c0 = (char)v;
 8005dc2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005dc4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        _StoreChar(&BufferDesc, c0);
 8005dc8:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8005dcc:	f107 0314 	add.w	r3, r7, #20
 8005dd0:	4611      	mov	r1, r2
 8005dd2:	4618      	mov	r0, r3
 8005dd4:	f7ff fd1c 	bl	8005810 <_StoreChar>
        break;
 8005dd8:	e055      	b.n	8005e86 <_VPrintTarget+0x332>
      }
      case 'd':
        v = va_arg(*pParamList, int);
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	1d19      	adds	r1, r3, #4
 8005de0:	687a      	ldr	r2, [r7, #4]
 8005de2:	6011      	str	r1, [r2, #0]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintInt(&BufferDesc, v, 10u, NumDigits, FieldWidth, FormatFlags);
 8005de8:	f107 0014 	add.w	r0, r7, #20
 8005dec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005dee:	9301      	str	r3, [sp, #4]
 8005df0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005df2:	9300      	str	r3, [sp, #0]
 8005df4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005df6:	220a      	movs	r2, #10
 8005df8:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005dfa:	f7ff fe1b 	bl	8005a34 <_PrintInt>
        break;
 8005dfe:	e042      	b.n	8005e86 <_VPrintTarget+0x332>
      case 'u':
        v = va_arg(*pParamList, int);
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	1d19      	adds	r1, r3, #4
 8005e06:	687a      	ldr	r2, [r7, #4]
 8005e08:	6011      	str	r1, [r2, #0]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 10u, NumDigits, FieldWidth, FormatFlags);
 8005e0e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005e10:	f107 0014 	add.w	r0, r7, #20
 8005e14:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005e16:	9301      	str	r3, [sp, #4]
 8005e18:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005e1a:	9300      	str	r3, [sp, #0]
 8005e1c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005e1e:	220a      	movs	r2, #10
 8005e20:	f7ff fd72 	bl	8005908 <_PrintUnsigned>
        break;
 8005e24:	e02f      	b.n	8005e86 <_VPrintTarget+0x332>
      case 'x':
      case 'X':
        v = va_arg(*pParamList, int);
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	1d19      	adds	r1, r3, #4
 8005e2c:	687a      	ldr	r2, [r7, #4]
 8005e2e:	6011      	str	r1, [r2, #0]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, NumDigits, FieldWidth, FormatFlags);
 8005e34:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005e36:	f107 0014 	add.w	r0, r7, #20
 8005e3a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005e3c:	9301      	str	r3, [sp, #4]
 8005e3e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005e40:	9300      	str	r3, [sp, #0]
 8005e42:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005e44:	2210      	movs	r2, #16
 8005e46:	f7ff fd5f 	bl	8005908 <_PrintUnsigned>
        break;
 8005e4a:	e01c      	b.n	8005e86 <_VPrintTarget+0x332>
 8005e4c:	20005448 	.word	0x20005448
      case 'p':
        v = va_arg(*pParamList, int);
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	1d19      	adds	r1, r3, #4
 8005e56:	687a      	ldr	r2, [r7, #4]
 8005e58:	6011      	str	r1, [r2, #0]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, 8u, 8u, 0u);
 8005e5e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005e60:	f107 0014 	add.w	r0, r7, #20
 8005e64:	2300      	movs	r3, #0
 8005e66:	9301      	str	r3, [sp, #4]
 8005e68:	2308      	movs	r3, #8
 8005e6a:	9300      	str	r3, [sp, #0]
 8005e6c:	2308      	movs	r3, #8
 8005e6e:	2210      	movs	r2, #16
 8005e70:	f7ff fd4a 	bl	8005908 <_PrintUnsigned>
        break;
 8005e74:	e007      	b.n	8005e86 <_VPrintTarget+0x332>
      case '%':
        _StoreChar(&BufferDesc, '%');
 8005e76:	f107 0314 	add.w	r3, r7, #20
 8005e7a:	2125      	movs	r1, #37	; 0x25
 8005e7c:	4618      	mov	r0, r3
 8005e7e:	f7ff fcc7 	bl	8005810 <_StoreChar>
        break;
 8005e82:	e000      	b.n	8005e86 <_VPrintTarget+0x332>
      default:
        break;
 8005e84:	bf00      	nop
      }
      sFormat++;
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	3301      	adds	r3, #1
 8005e8a:	60fb      	str	r3, [r7, #12]
 8005e8c:	e007      	b.n	8005e9e <_VPrintTarget+0x34a>
    } else {
      _StoreChar(&BufferDesc, c);
 8005e8e:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8005e92:	f107 0314 	add.w	r3, r7, #20
 8005e96:	4611      	mov	r1, r2
 8005e98:	4618      	mov	r0, r3
 8005e9a:	f7ff fcb9 	bl	8005810 <_StoreChar>
    }
  } while (*sFormat);
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	781b      	ldrb	r3, [r3, #0]
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	f47f ae72 	bne.w	8005b8c <_VPrintTarget+0x38>
 8005ea8:	e000      	b.n	8005eac <_VPrintTarget+0x358>
      break;
 8005eaa:	bf00      	nop

  //
  // Write remaining data, if any
  //
  if (BufferDesc.Cnt != 0u) {
 8005eac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d041      	beq.n	8005f36 <_VPrintTarget+0x3e2>
    *(BufferDesc.pPayloadStart) = BufferDesc.Cnt;
 8005eb2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005eb4:	69fb      	ldr	r3, [r7, #28]
 8005eb6:	b2d2      	uxtb	r2, r2
 8005eb8:	701a      	strb	r2, [r3, #0]
    ENCODE_U32(BufferDesc.pPayload, BufferDesc.Options);
 8005eba:	69bb      	ldr	r3, [r7, #24]
 8005ebc:	643b      	str	r3, [r7, #64]	; 0x40
 8005ebe:	6a3b      	ldr	r3, [r7, #32]
 8005ec0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005ec2:	e00b      	b.n	8005edc <_VPrintTarget+0x388>
 8005ec4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ec6:	b2da      	uxtb	r2, r3
 8005ec8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005eca:	1c59      	adds	r1, r3, #1
 8005ecc:	6439      	str	r1, [r7, #64]	; 0x40
 8005ece:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005ed2:	b2d2      	uxtb	r2, r2
 8005ed4:	701a      	strb	r2, [r3, #0]
 8005ed6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ed8:	09db      	lsrs	r3, r3, #7
 8005eda:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005edc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ede:	2b7f      	cmp	r3, #127	; 0x7f
 8005ee0:	d8f0      	bhi.n	8005ec4 <_VPrintTarget+0x370>
 8005ee2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005ee4:	1c5a      	adds	r2, r3, #1
 8005ee6:	643a      	str	r2, [r7, #64]	; 0x40
 8005ee8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005eea:	b2d2      	uxtb	r2, r2
 8005eec:	701a      	strb	r2, [r3, #0]
 8005eee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005ef0:	61bb      	str	r3, [r7, #24]
    ENCODE_U32(BufferDesc.pPayload, 0);
 8005ef2:	69bb      	ldr	r3, [r7, #24]
 8005ef4:	63bb      	str	r3, [r7, #56]	; 0x38
 8005ef6:	2300      	movs	r3, #0
 8005ef8:	637b      	str	r3, [r7, #52]	; 0x34
 8005efa:	e00b      	b.n	8005f14 <_VPrintTarget+0x3c0>
 8005efc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005efe:	b2da      	uxtb	r2, r3
 8005f00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f02:	1c59      	adds	r1, r3, #1
 8005f04:	63b9      	str	r1, [r7, #56]	; 0x38
 8005f06:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005f0a:	b2d2      	uxtb	r2, r2
 8005f0c:	701a      	strb	r2, [r3, #0]
 8005f0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f10:	09db      	lsrs	r3, r3, #7
 8005f12:	637b      	str	r3, [r7, #52]	; 0x34
 8005f14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f16:	2b7f      	cmp	r3, #127	; 0x7f
 8005f18:	d8f0      	bhi.n	8005efc <_VPrintTarget+0x3a8>
 8005f1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f1c:	1c5a      	adds	r2, r3, #1
 8005f1e:	63ba      	str	r2, [r7, #56]	; 0x38
 8005f20:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005f22:	b2d2      	uxtb	r2, r2
 8005f24:	701a      	strb	r2, [r3, #0]
 8005f26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f28:	61bb      	str	r3, [r7, #24]
    _SendPacket(BufferDesc.pPayloadStart, BufferDesc.pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8005f2a:	69fb      	ldr	r3, [r7, #28]
 8005f2c:	69b9      	ldr	r1, [r7, #24]
 8005f2e:	221a      	movs	r2, #26
 8005f30:	4618      	mov	r0, r3
 8005f32:	f7ff fb87 	bl	8005644 <_SendPacket>
  }
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  SEGGER_SYSVIEW_UNLOCK();
  RECORD_END();
#else
  RECORD_END();
 8005f36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f38:	f383 8811 	msr	BASEPRI, r3
#endif
}
 8005f3c:	bf00      	nop
 8005f3e:	3758      	adds	r7, #88	; 0x58
 8005f40:	46bd      	mov	sp, r7
 8005f42:	bd80      	pop	{r7, pc}

08005f44 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software 
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 8005f44:	b580      	push	{r7, lr}
 8005f46:	b086      	sub	sp, #24
 8005f48:	af02      	add	r7, sp, #8
 8005f4a:	60f8      	str	r0, [r7, #12]
 8005f4c:	60b9      	str	r1, [r7, #8]
 8005f4e:	607a      	str	r2, [r7, #4]
 8005f50:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8005f52:	2300      	movs	r3, #0
 8005f54:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005f58:	4917      	ldr	r1, [pc, #92]	; (8005fb8 <SEGGER_SYSVIEW_Init+0x74>)
 8005f5a:	4818      	ldr	r0, [pc, #96]	; (8005fbc <SEGGER_SYSVIEW_Init+0x78>)
 8005f5c:	f7ff f942 	bl	80051e4 <SEGGER_RTT_AllocUpBuffer>
 8005f60:	4603      	mov	r3, r0
 8005f62:	b2da      	uxtb	r2, r3
 8005f64:	4b16      	ldr	r3, [pc, #88]	; (8005fc0 <SEGGER_SYSVIEW_Init+0x7c>)
 8005f66:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 8005f68:	4b15      	ldr	r3, [pc, #84]	; (8005fc0 <SEGGER_SYSVIEW_Init+0x7c>)
 8005f6a:	785a      	ldrb	r2, [r3, #1]
 8005f6c:	4b14      	ldr	r3, [pc, #80]	; (8005fc0 <SEGGER_SYSVIEW_Init+0x7c>)
 8005f6e:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8005f70:	4b13      	ldr	r3, [pc, #76]	; (8005fc0 <SEGGER_SYSVIEW_Init+0x7c>)
 8005f72:	7e1b      	ldrb	r3, [r3, #24]
 8005f74:	4618      	mov	r0, r3
 8005f76:	2300      	movs	r3, #0
 8005f78:	9300      	str	r3, [sp, #0]
 8005f7a:	2308      	movs	r3, #8
 8005f7c:	4a11      	ldr	r2, [pc, #68]	; (8005fc4 <SEGGER_SYSVIEW_Init+0x80>)
 8005f7e:	490f      	ldr	r1, [pc, #60]	; (8005fbc <SEGGER_SYSVIEW_Init+0x78>)
 8005f80:	f7ff f9b4 	bl	80052ec <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 8005f84:	4b0e      	ldr	r3, [pc, #56]	; (8005fc0 <SEGGER_SYSVIEW_Init+0x7c>)
 8005f86:	2200      	movs	r2, #0
 8005f88:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8005f8a:	4b0f      	ldr	r3, [pc, #60]	; (8005fc8 <SEGGER_SYSVIEW_Init+0x84>)
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	4a0c      	ldr	r2, [pc, #48]	; (8005fc0 <SEGGER_SYSVIEW_Init+0x7c>)
 8005f90:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 8005f92:	4a0b      	ldr	r2, [pc, #44]	; (8005fc0 <SEGGER_SYSVIEW_Init+0x7c>)
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 8005f98:	4a09      	ldr	r2, [pc, #36]	; (8005fc0 <SEGGER_SYSVIEW_Init+0x7c>)
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 8005f9e:	4a08      	ldr	r2, [pc, #32]	; (8005fc0 <SEGGER_SYSVIEW_Init+0x7c>)
 8005fa0:	68bb      	ldr	r3, [r7, #8]
 8005fa2:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 8005fa4:	4a06      	ldr	r2, [pc, #24]	; (8005fc0 <SEGGER_SYSVIEW_Init+0x7c>)
 8005fa6:	683b      	ldr	r3, [r7, #0]
 8005fa8:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 8005faa:	4b05      	ldr	r3, [pc, #20]	; (8005fc0 <SEGGER_SYSVIEW_Init+0x7c>)
 8005fac:	2200      	movs	r2, #0
 8005fae:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 8005fb0:	bf00      	nop
 8005fb2:	3710      	adds	r7, #16
 8005fb4:	46bd      	mov	sp, r7
 8005fb6:	bd80      	pop	{r7, pc}
 8005fb8:	20004410 	.word	0x20004410
 8005fbc:	08007924 	.word	0x08007924
 8005fc0:	20005418 	.word	0x20005418
 8005fc4:	20005410 	.word	0x20005410
 8005fc8:	e0001004 	.word	0xe0001004

08005fcc <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 8005fcc:	b480      	push	{r7}
 8005fce:	b083      	sub	sp, #12
 8005fd0:	af00      	add	r7, sp, #0
 8005fd2:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 8005fd4:	4a04      	ldr	r2, [pc, #16]	; (8005fe8 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	6113      	str	r3, [r2, #16]
}
 8005fda:	bf00      	nop
 8005fdc:	370c      	adds	r7, #12
 8005fde:	46bd      	mov	sp, r7
 8005fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe4:	4770      	bx	lr
 8005fe6:	bf00      	nop
 8005fe8:	20005418 	.word	0x20005418

08005fec <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8005fec:	b580      	push	{r7, lr}
 8005fee:	b084      	sub	sp, #16
 8005ff0:	af00      	add	r7, sp, #0
 8005ff2:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005ff4:	f3ef 8311 	mrs	r3, BASEPRI
 8005ff8:	f04f 0120 	mov.w	r1, #32
 8005ffc:	f381 8811 	msr	BASEPRI, r1
 8006000:	60fb      	str	r3, [r7, #12]
 8006002:	4808      	ldr	r0, [pc, #32]	; (8006024 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8006004:	f7ff fa2f 	bl	8005466 <_PreparePacket>
 8006008:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 800600a:	687a      	ldr	r2, [r7, #4]
 800600c:	68b9      	ldr	r1, [r7, #8]
 800600e:	68b8      	ldr	r0, [r7, #8]
 8006010:	f7ff fb18 	bl	8005644 <_SendPacket>
  RECORD_END();
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	f383 8811 	msr	BASEPRI, r3
}
 800601a:	bf00      	nop
 800601c:	3710      	adds	r7, #16
 800601e:	46bd      	mov	sp, r7
 8006020:	bd80      	pop	{r7, pc}
 8006022:	bf00      	nop
 8006024:	20005448 	.word	0x20005448

08006028 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8006028:	b580      	push	{r7, lr}
 800602a:	b088      	sub	sp, #32
 800602c:	af00      	add	r7, sp, #0
 800602e:	6078      	str	r0, [r7, #4]
 8006030:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006032:	f3ef 8311 	mrs	r3, BASEPRI
 8006036:	f04f 0120 	mov.w	r1, #32
 800603a:	f381 8811 	msr	BASEPRI, r1
 800603e:	617b      	str	r3, [r7, #20]
 8006040:	4816      	ldr	r0, [pc, #88]	; (800609c <SEGGER_SYSVIEW_RecordU32+0x74>)
 8006042:	f7ff fa10 	bl	8005466 <_PreparePacket>
 8006046:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006048:	693b      	ldr	r3, [r7, #16]
 800604a:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	61fb      	str	r3, [r7, #28]
 8006050:	683b      	ldr	r3, [r7, #0]
 8006052:	61bb      	str	r3, [r7, #24]
 8006054:	e00b      	b.n	800606e <SEGGER_SYSVIEW_RecordU32+0x46>
 8006056:	69bb      	ldr	r3, [r7, #24]
 8006058:	b2da      	uxtb	r2, r3
 800605a:	69fb      	ldr	r3, [r7, #28]
 800605c:	1c59      	adds	r1, r3, #1
 800605e:	61f9      	str	r1, [r7, #28]
 8006060:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006064:	b2d2      	uxtb	r2, r2
 8006066:	701a      	strb	r2, [r3, #0]
 8006068:	69bb      	ldr	r3, [r7, #24]
 800606a:	09db      	lsrs	r3, r3, #7
 800606c:	61bb      	str	r3, [r7, #24]
 800606e:	69bb      	ldr	r3, [r7, #24]
 8006070:	2b7f      	cmp	r3, #127	; 0x7f
 8006072:	d8f0      	bhi.n	8006056 <SEGGER_SYSVIEW_RecordU32+0x2e>
 8006074:	69fb      	ldr	r3, [r7, #28]
 8006076:	1c5a      	adds	r2, r3, #1
 8006078:	61fa      	str	r2, [r7, #28]
 800607a:	69ba      	ldr	r2, [r7, #24]
 800607c:	b2d2      	uxtb	r2, r2
 800607e:	701a      	strb	r2, [r3, #0]
 8006080:	69fb      	ldr	r3, [r7, #28]
 8006082:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8006084:	687a      	ldr	r2, [r7, #4]
 8006086:	68f9      	ldr	r1, [r7, #12]
 8006088:	6938      	ldr	r0, [r7, #16]
 800608a:	f7ff fadb 	bl	8005644 <_SendPacket>
  RECORD_END();
 800608e:	697b      	ldr	r3, [r7, #20]
 8006090:	f383 8811 	msr	BASEPRI, r3
}
 8006094:	bf00      	nop
 8006096:	3720      	adds	r7, #32
 8006098:	46bd      	mov	sp, r7
 800609a:	bd80      	pop	{r7, pc}
 800609c:	20005448 	.word	0x20005448

080060a0 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 80060a0:	b580      	push	{r7, lr}
 80060a2:	b08c      	sub	sp, #48	; 0x30
 80060a4:	af00      	add	r7, sp, #0
 80060a6:	60f8      	str	r0, [r7, #12]
 80060a8:	60b9      	str	r1, [r7, #8]
 80060aa:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 80060ac:	f3ef 8311 	mrs	r3, BASEPRI
 80060b0:	f04f 0120 	mov.w	r1, #32
 80060b4:	f381 8811 	msr	BASEPRI, r1
 80060b8:	61fb      	str	r3, [r7, #28]
 80060ba:	4825      	ldr	r0, [pc, #148]	; (8006150 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 80060bc:	f7ff f9d3 	bl	8005466 <_PreparePacket>
 80060c0:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 80060c2:	69bb      	ldr	r3, [r7, #24]
 80060c4:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 80060c6:	697b      	ldr	r3, [r7, #20]
 80060c8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80060ca:	68bb      	ldr	r3, [r7, #8]
 80060cc:	62bb      	str	r3, [r7, #40]	; 0x28
 80060ce:	e00b      	b.n	80060e8 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 80060d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060d2:	b2da      	uxtb	r2, r3
 80060d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060d6:	1c59      	adds	r1, r3, #1
 80060d8:	62f9      	str	r1, [r7, #44]	; 0x2c
 80060da:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80060de:	b2d2      	uxtb	r2, r2
 80060e0:	701a      	strb	r2, [r3, #0]
 80060e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060e4:	09db      	lsrs	r3, r3, #7
 80060e6:	62bb      	str	r3, [r7, #40]	; 0x28
 80060e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060ea:	2b7f      	cmp	r3, #127	; 0x7f
 80060ec:	d8f0      	bhi.n	80060d0 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 80060ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060f0:	1c5a      	adds	r2, r3, #1
 80060f2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80060f4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80060f6:	b2d2      	uxtb	r2, r2
 80060f8:	701a      	strb	r2, [r3, #0]
 80060fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060fc:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 80060fe:	697b      	ldr	r3, [r7, #20]
 8006100:	627b      	str	r3, [r7, #36]	; 0x24
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	623b      	str	r3, [r7, #32]
 8006106:	e00b      	b.n	8006120 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8006108:	6a3b      	ldr	r3, [r7, #32]
 800610a:	b2da      	uxtb	r2, r3
 800610c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800610e:	1c59      	adds	r1, r3, #1
 8006110:	6279      	str	r1, [r7, #36]	; 0x24
 8006112:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006116:	b2d2      	uxtb	r2, r2
 8006118:	701a      	strb	r2, [r3, #0]
 800611a:	6a3b      	ldr	r3, [r7, #32]
 800611c:	09db      	lsrs	r3, r3, #7
 800611e:	623b      	str	r3, [r7, #32]
 8006120:	6a3b      	ldr	r3, [r7, #32]
 8006122:	2b7f      	cmp	r3, #127	; 0x7f
 8006124:	d8f0      	bhi.n	8006108 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 8006126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006128:	1c5a      	adds	r2, r3, #1
 800612a:	627a      	str	r2, [r7, #36]	; 0x24
 800612c:	6a3a      	ldr	r2, [r7, #32]
 800612e:	b2d2      	uxtb	r2, r2
 8006130:	701a      	strb	r2, [r3, #0]
 8006132:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006134:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8006136:	68fa      	ldr	r2, [r7, #12]
 8006138:	6979      	ldr	r1, [r7, #20]
 800613a:	69b8      	ldr	r0, [r7, #24]
 800613c:	f7ff fa82 	bl	8005644 <_SendPacket>
  RECORD_END();
 8006140:	69fb      	ldr	r3, [r7, #28]
 8006142:	f383 8811 	msr	BASEPRI, r3
}
 8006146:	bf00      	nop
 8006148:	3730      	adds	r7, #48	; 0x30
 800614a:	46bd      	mov	sp, r7
 800614c:	bd80      	pop	{r7, pc}
 800614e:	bf00      	nop
 8006150:	20005448 	.word	0x20005448

08006154 <SEGGER_SYSVIEW_RecordU32x3>:
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 8006154:	b580      	push	{r7, lr}
 8006156:	b08e      	sub	sp, #56	; 0x38
 8006158:	af00      	add	r7, sp, #0
 800615a:	60f8      	str	r0, [r7, #12]
 800615c:	60b9      	str	r1, [r7, #8]
 800615e:	607a      	str	r2, [r7, #4]
 8006160:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 8006162:	f3ef 8311 	mrs	r3, BASEPRI
 8006166:	f04f 0120 	mov.w	r1, #32
 800616a:	f381 8811 	msr	BASEPRI, r1
 800616e:	61fb      	str	r3, [r7, #28]
 8006170:	4832      	ldr	r0, [pc, #200]	; (800623c <SEGGER_SYSVIEW_RecordU32x3+0xe8>)
 8006172:	f7ff f978 	bl	8005466 <_PreparePacket>
 8006176:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8006178:	69bb      	ldr	r3, [r7, #24]
 800617a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 800617c:	697b      	ldr	r3, [r7, #20]
 800617e:	637b      	str	r3, [r7, #52]	; 0x34
 8006180:	68bb      	ldr	r3, [r7, #8]
 8006182:	633b      	str	r3, [r7, #48]	; 0x30
 8006184:	e00b      	b.n	800619e <SEGGER_SYSVIEW_RecordU32x3+0x4a>
 8006186:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006188:	b2da      	uxtb	r2, r3
 800618a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800618c:	1c59      	adds	r1, r3, #1
 800618e:	6379      	str	r1, [r7, #52]	; 0x34
 8006190:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006194:	b2d2      	uxtb	r2, r2
 8006196:	701a      	strb	r2, [r3, #0]
 8006198:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800619a:	09db      	lsrs	r3, r3, #7
 800619c:	633b      	str	r3, [r7, #48]	; 0x30
 800619e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061a0:	2b7f      	cmp	r3, #127	; 0x7f
 80061a2:	d8f0      	bhi.n	8006186 <SEGGER_SYSVIEW_RecordU32x3+0x32>
 80061a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80061a6:	1c5a      	adds	r2, r3, #1
 80061a8:	637a      	str	r2, [r7, #52]	; 0x34
 80061aa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80061ac:	b2d2      	uxtb	r2, r2
 80061ae:	701a      	strb	r2, [r3, #0]
 80061b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80061b2:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 80061b4:	697b      	ldr	r3, [r7, #20]
 80061b6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	62bb      	str	r3, [r7, #40]	; 0x28
 80061bc:	e00b      	b.n	80061d6 <SEGGER_SYSVIEW_RecordU32x3+0x82>
 80061be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061c0:	b2da      	uxtb	r2, r3
 80061c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061c4:	1c59      	adds	r1, r3, #1
 80061c6:	62f9      	str	r1, [r7, #44]	; 0x2c
 80061c8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80061cc:	b2d2      	uxtb	r2, r2
 80061ce:	701a      	strb	r2, [r3, #0]
 80061d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061d2:	09db      	lsrs	r3, r3, #7
 80061d4:	62bb      	str	r3, [r7, #40]	; 0x28
 80061d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061d8:	2b7f      	cmp	r3, #127	; 0x7f
 80061da:	d8f0      	bhi.n	80061be <SEGGER_SYSVIEW_RecordU32x3+0x6a>
 80061dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061de:	1c5a      	adds	r2, r3, #1
 80061e0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80061e2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80061e4:	b2d2      	uxtb	r2, r2
 80061e6:	701a      	strb	r2, [r3, #0]
 80061e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061ea:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 80061ec:	697b      	ldr	r3, [r7, #20]
 80061ee:	627b      	str	r3, [r7, #36]	; 0x24
 80061f0:	683b      	ldr	r3, [r7, #0]
 80061f2:	623b      	str	r3, [r7, #32]
 80061f4:	e00b      	b.n	800620e <SEGGER_SYSVIEW_RecordU32x3+0xba>
 80061f6:	6a3b      	ldr	r3, [r7, #32]
 80061f8:	b2da      	uxtb	r2, r3
 80061fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061fc:	1c59      	adds	r1, r3, #1
 80061fe:	6279      	str	r1, [r7, #36]	; 0x24
 8006200:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006204:	b2d2      	uxtb	r2, r2
 8006206:	701a      	strb	r2, [r3, #0]
 8006208:	6a3b      	ldr	r3, [r7, #32]
 800620a:	09db      	lsrs	r3, r3, #7
 800620c:	623b      	str	r3, [r7, #32]
 800620e:	6a3b      	ldr	r3, [r7, #32]
 8006210:	2b7f      	cmp	r3, #127	; 0x7f
 8006212:	d8f0      	bhi.n	80061f6 <SEGGER_SYSVIEW_RecordU32x3+0xa2>
 8006214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006216:	1c5a      	adds	r2, r3, #1
 8006218:	627a      	str	r2, [r7, #36]	; 0x24
 800621a:	6a3a      	ldr	r2, [r7, #32]
 800621c:	b2d2      	uxtb	r2, r2
 800621e:	701a      	strb	r2, [r3, #0]
 8006220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006222:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8006224:	68fa      	ldr	r2, [r7, #12]
 8006226:	6979      	ldr	r1, [r7, #20]
 8006228:	69b8      	ldr	r0, [r7, #24]
 800622a:	f7ff fa0b 	bl	8005644 <_SendPacket>
  RECORD_END();
 800622e:	69fb      	ldr	r3, [r7, #28]
 8006230:	f383 8811 	msr	BASEPRI, r3
}
 8006234:	bf00      	nop
 8006236:	3738      	adds	r7, #56	; 0x38
 8006238:	46bd      	mov	sp, r7
 800623a:	bd80      	pop	{r7, pc}
 800623c:	20005448 	.word	0x20005448

08006240 <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 8006240:	b580      	push	{r7, lr}
 8006242:	b090      	sub	sp, #64	; 0x40
 8006244:	af00      	add	r7, sp, #0
 8006246:	60f8      	str	r0, [r7, #12]
 8006248:	60b9      	str	r1, [r7, #8]
 800624a:	607a      	str	r2, [r7, #4]
 800624c:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800624e:	f3ef 8311 	mrs	r3, BASEPRI
 8006252:	f04f 0120 	mov.w	r1, #32
 8006256:	f381 8811 	msr	BASEPRI, r1
 800625a:	61fb      	str	r3, [r7, #28]
 800625c:	4840      	ldr	r0, [pc, #256]	; (8006360 <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 800625e:	f7ff f902 	bl	8005466 <_PreparePacket>
 8006262:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8006264:	69bb      	ldr	r3, [r7, #24]
 8006266:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8006268:	697b      	ldr	r3, [r7, #20]
 800626a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800626c:	68bb      	ldr	r3, [r7, #8]
 800626e:	63bb      	str	r3, [r7, #56]	; 0x38
 8006270:	e00b      	b.n	800628a <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 8006272:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006274:	b2da      	uxtb	r2, r3
 8006276:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006278:	1c59      	adds	r1, r3, #1
 800627a:	63f9      	str	r1, [r7, #60]	; 0x3c
 800627c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006280:	b2d2      	uxtb	r2, r2
 8006282:	701a      	strb	r2, [r3, #0]
 8006284:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006286:	09db      	lsrs	r3, r3, #7
 8006288:	63bb      	str	r3, [r7, #56]	; 0x38
 800628a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800628c:	2b7f      	cmp	r3, #127	; 0x7f
 800628e:	d8f0      	bhi.n	8006272 <SEGGER_SYSVIEW_RecordU32x4+0x32>
 8006290:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006292:	1c5a      	adds	r2, r3, #1
 8006294:	63fa      	str	r2, [r7, #60]	; 0x3c
 8006296:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006298:	b2d2      	uxtb	r2, r2
 800629a:	701a      	strb	r2, [r3, #0]
 800629c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800629e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 80062a0:	697b      	ldr	r3, [r7, #20]
 80062a2:	637b      	str	r3, [r7, #52]	; 0x34
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	633b      	str	r3, [r7, #48]	; 0x30
 80062a8:	e00b      	b.n	80062c2 <SEGGER_SYSVIEW_RecordU32x4+0x82>
 80062aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062ac:	b2da      	uxtb	r2, r3
 80062ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80062b0:	1c59      	adds	r1, r3, #1
 80062b2:	6379      	str	r1, [r7, #52]	; 0x34
 80062b4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80062b8:	b2d2      	uxtb	r2, r2
 80062ba:	701a      	strb	r2, [r3, #0]
 80062bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062be:	09db      	lsrs	r3, r3, #7
 80062c0:	633b      	str	r3, [r7, #48]	; 0x30
 80062c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062c4:	2b7f      	cmp	r3, #127	; 0x7f
 80062c6:	d8f0      	bhi.n	80062aa <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 80062c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80062ca:	1c5a      	adds	r2, r3, #1
 80062cc:	637a      	str	r2, [r7, #52]	; 0x34
 80062ce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80062d0:	b2d2      	uxtb	r2, r2
 80062d2:	701a      	strb	r2, [r3, #0]
 80062d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80062d6:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 80062d8:	697b      	ldr	r3, [r7, #20]
 80062da:	62fb      	str	r3, [r7, #44]	; 0x2c
 80062dc:	683b      	ldr	r3, [r7, #0]
 80062de:	62bb      	str	r3, [r7, #40]	; 0x28
 80062e0:	e00b      	b.n	80062fa <SEGGER_SYSVIEW_RecordU32x4+0xba>
 80062e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062e4:	b2da      	uxtb	r2, r3
 80062e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062e8:	1c59      	adds	r1, r3, #1
 80062ea:	62f9      	str	r1, [r7, #44]	; 0x2c
 80062ec:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80062f0:	b2d2      	uxtb	r2, r2
 80062f2:	701a      	strb	r2, [r3, #0]
 80062f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062f6:	09db      	lsrs	r3, r3, #7
 80062f8:	62bb      	str	r3, [r7, #40]	; 0x28
 80062fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062fc:	2b7f      	cmp	r3, #127	; 0x7f
 80062fe:	d8f0      	bhi.n	80062e2 <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 8006300:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006302:	1c5a      	adds	r2, r3, #1
 8006304:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006306:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006308:	b2d2      	uxtb	r2, r2
 800630a:	701a      	strb	r2, [r3, #0]
 800630c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800630e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 8006310:	697b      	ldr	r3, [r7, #20]
 8006312:	627b      	str	r3, [r7, #36]	; 0x24
 8006314:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006316:	623b      	str	r3, [r7, #32]
 8006318:	e00b      	b.n	8006332 <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 800631a:	6a3b      	ldr	r3, [r7, #32]
 800631c:	b2da      	uxtb	r2, r3
 800631e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006320:	1c59      	adds	r1, r3, #1
 8006322:	6279      	str	r1, [r7, #36]	; 0x24
 8006324:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006328:	b2d2      	uxtb	r2, r2
 800632a:	701a      	strb	r2, [r3, #0]
 800632c:	6a3b      	ldr	r3, [r7, #32]
 800632e:	09db      	lsrs	r3, r3, #7
 8006330:	623b      	str	r3, [r7, #32]
 8006332:	6a3b      	ldr	r3, [r7, #32]
 8006334:	2b7f      	cmp	r3, #127	; 0x7f
 8006336:	d8f0      	bhi.n	800631a <SEGGER_SYSVIEW_RecordU32x4+0xda>
 8006338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800633a:	1c5a      	adds	r2, r3, #1
 800633c:	627a      	str	r2, [r7, #36]	; 0x24
 800633e:	6a3a      	ldr	r2, [r7, #32]
 8006340:	b2d2      	uxtb	r2, r2
 8006342:	701a      	strb	r2, [r3, #0]
 8006344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006346:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8006348:	68fa      	ldr	r2, [r7, #12]
 800634a:	6979      	ldr	r1, [r7, #20]
 800634c:	69b8      	ldr	r0, [r7, #24]
 800634e:	f7ff f979 	bl	8005644 <_SendPacket>
  RECORD_END();
 8006352:	69fb      	ldr	r3, [r7, #28]
 8006354:	f383 8811 	msr	BASEPRI, r3
}
 8006358:	bf00      	nop
 800635a:	3740      	adds	r7, #64	; 0x40
 800635c:	46bd      	mov	sp, r7
 800635e:	bd80      	pop	{r7, pc}
 8006360:	20005448 	.word	0x20005448

08006364 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 8006364:	b580      	push	{r7, lr}
 8006366:	b08c      	sub	sp, #48	; 0x30
 8006368:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 800636a:	4b58      	ldr	r3, [pc, #352]	; (80064cc <SEGGER_SYSVIEW_Start+0x168>)
 800636c:	2201      	movs	r2, #1
 800636e:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8006370:	f3ef 8311 	mrs	r3, BASEPRI
 8006374:	f04f 0120 	mov.w	r1, #32
 8006378:	f381 8811 	msr	BASEPRI, r1
 800637c:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 800637e:	4b53      	ldr	r3, [pc, #332]	; (80064cc <SEGGER_SYSVIEW_Start+0x168>)
 8006380:	785b      	ldrb	r3, [r3, #1]
 8006382:	220a      	movs	r2, #10
 8006384:	4952      	ldr	r1, [pc, #328]	; (80064d0 <SEGGER_SYSVIEW_Start+0x16c>)
 8006386:	4618      	mov	r0, r3
 8006388:	f7f9 ff22 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 8006392:	200a      	movs	r0, #10
 8006394:	f7ff fe2a 	bl	8005fec <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8006398:	f3ef 8311 	mrs	r3, BASEPRI
 800639c:	f04f 0120 	mov.w	r1, #32
 80063a0:	f381 8811 	msr	BASEPRI, r1
 80063a4:	60bb      	str	r3, [r7, #8]
 80063a6:	484b      	ldr	r0, [pc, #300]	; (80064d4 <SEGGER_SYSVIEW_Start+0x170>)
 80063a8:	f7ff f85d 	bl	8005466 <_PreparePacket>
 80063ac:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 80063b2:	683b      	ldr	r3, [r7, #0]
 80063b4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80063b6:	4b45      	ldr	r3, [pc, #276]	; (80064cc <SEGGER_SYSVIEW_Start+0x168>)
 80063b8:	685b      	ldr	r3, [r3, #4]
 80063ba:	62bb      	str	r3, [r7, #40]	; 0x28
 80063bc:	e00b      	b.n	80063d6 <SEGGER_SYSVIEW_Start+0x72>
 80063be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063c0:	b2da      	uxtb	r2, r3
 80063c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063c4:	1c59      	adds	r1, r3, #1
 80063c6:	62f9      	str	r1, [r7, #44]	; 0x2c
 80063c8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80063cc:	b2d2      	uxtb	r2, r2
 80063ce:	701a      	strb	r2, [r3, #0]
 80063d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063d2:	09db      	lsrs	r3, r3, #7
 80063d4:	62bb      	str	r3, [r7, #40]	; 0x28
 80063d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063d8:	2b7f      	cmp	r3, #127	; 0x7f
 80063da:	d8f0      	bhi.n	80063be <SEGGER_SYSVIEW_Start+0x5a>
 80063dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063de:	1c5a      	adds	r2, r3, #1
 80063e0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80063e2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80063e4:	b2d2      	uxtb	r2, r2
 80063e6:	701a      	strb	r2, [r3, #0]
 80063e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063ea:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 80063ec:	683b      	ldr	r3, [r7, #0]
 80063ee:	627b      	str	r3, [r7, #36]	; 0x24
 80063f0:	4b36      	ldr	r3, [pc, #216]	; (80064cc <SEGGER_SYSVIEW_Start+0x168>)
 80063f2:	689b      	ldr	r3, [r3, #8]
 80063f4:	623b      	str	r3, [r7, #32]
 80063f6:	e00b      	b.n	8006410 <SEGGER_SYSVIEW_Start+0xac>
 80063f8:	6a3b      	ldr	r3, [r7, #32]
 80063fa:	b2da      	uxtb	r2, r3
 80063fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063fe:	1c59      	adds	r1, r3, #1
 8006400:	6279      	str	r1, [r7, #36]	; 0x24
 8006402:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006406:	b2d2      	uxtb	r2, r2
 8006408:	701a      	strb	r2, [r3, #0]
 800640a:	6a3b      	ldr	r3, [r7, #32]
 800640c:	09db      	lsrs	r3, r3, #7
 800640e:	623b      	str	r3, [r7, #32]
 8006410:	6a3b      	ldr	r3, [r7, #32]
 8006412:	2b7f      	cmp	r3, #127	; 0x7f
 8006414:	d8f0      	bhi.n	80063f8 <SEGGER_SYSVIEW_Start+0x94>
 8006416:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006418:	1c5a      	adds	r2, r3, #1
 800641a:	627a      	str	r2, [r7, #36]	; 0x24
 800641c:	6a3a      	ldr	r2, [r7, #32]
 800641e:	b2d2      	uxtb	r2, r2
 8006420:	701a      	strb	r2, [r3, #0]
 8006422:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006424:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8006426:	683b      	ldr	r3, [r7, #0]
 8006428:	61fb      	str	r3, [r7, #28]
 800642a:	4b28      	ldr	r3, [pc, #160]	; (80064cc <SEGGER_SYSVIEW_Start+0x168>)
 800642c:	691b      	ldr	r3, [r3, #16]
 800642e:	61bb      	str	r3, [r7, #24]
 8006430:	e00b      	b.n	800644a <SEGGER_SYSVIEW_Start+0xe6>
 8006432:	69bb      	ldr	r3, [r7, #24]
 8006434:	b2da      	uxtb	r2, r3
 8006436:	69fb      	ldr	r3, [r7, #28]
 8006438:	1c59      	adds	r1, r3, #1
 800643a:	61f9      	str	r1, [r7, #28]
 800643c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006440:	b2d2      	uxtb	r2, r2
 8006442:	701a      	strb	r2, [r3, #0]
 8006444:	69bb      	ldr	r3, [r7, #24]
 8006446:	09db      	lsrs	r3, r3, #7
 8006448:	61bb      	str	r3, [r7, #24]
 800644a:	69bb      	ldr	r3, [r7, #24]
 800644c:	2b7f      	cmp	r3, #127	; 0x7f
 800644e:	d8f0      	bhi.n	8006432 <SEGGER_SYSVIEW_Start+0xce>
 8006450:	69fb      	ldr	r3, [r7, #28]
 8006452:	1c5a      	adds	r2, r3, #1
 8006454:	61fa      	str	r2, [r7, #28]
 8006456:	69ba      	ldr	r2, [r7, #24]
 8006458:	b2d2      	uxtb	r2, r2
 800645a:	701a      	strb	r2, [r3, #0]
 800645c:	69fb      	ldr	r3, [r7, #28]
 800645e:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8006460:	683b      	ldr	r3, [r7, #0]
 8006462:	617b      	str	r3, [r7, #20]
 8006464:	2300      	movs	r3, #0
 8006466:	613b      	str	r3, [r7, #16]
 8006468:	e00b      	b.n	8006482 <SEGGER_SYSVIEW_Start+0x11e>
 800646a:	693b      	ldr	r3, [r7, #16]
 800646c:	b2da      	uxtb	r2, r3
 800646e:	697b      	ldr	r3, [r7, #20]
 8006470:	1c59      	adds	r1, r3, #1
 8006472:	6179      	str	r1, [r7, #20]
 8006474:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006478:	b2d2      	uxtb	r2, r2
 800647a:	701a      	strb	r2, [r3, #0]
 800647c:	693b      	ldr	r3, [r7, #16]
 800647e:	09db      	lsrs	r3, r3, #7
 8006480:	613b      	str	r3, [r7, #16]
 8006482:	693b      	ldr	r3, [r7, #16]
 8006484:	2b7f      	cmp	r3, #127	; 0x7f
 8006486:	d8f0      	bhi.n	800646a <SEGGER_SYSVIEW_Start+0x106>
 8006488:	697b      	ldr	r3, [r7, #20]
 800648a:	1c5a      	adds	r2, r3, #1
 800648c:	617a      	str	r2, [r7, #20]
 800648e:	693a      	ldr	r2, [r7, #16]
 8006490:	b2d2      	uxtb	r2, r2
 8006492:	701a      	strb	r2, [r3, #0]
 8006494:	697b      	ldr	r3, [r7, #20]
 8006496:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8006498:	2218      	movs	r2, #24
 800649a:	6839      	ldr	r1, [r7, #0]
 800649c:	6878      	ldr	r0, [r7, #4]
 800649e:	f7ff f8d1 	bl	8005644 <_SendPacket>
      RECORD_END();
 80064a2:	68bb      	ldr	r3, [r7, #8]
 80064a4:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 80064a8:	4b08      	ldr	r3, [pc, #32]	; (80064cc <SEGGER_SYSVIEW_Start+0x168>)
 80064aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d002      	beq.n	80064b6 <SEGGER_SYSVIEW_Start+0x152>
      _SYSVIEW_Globals.pfSendSysDesc();
 80064b0:	4b06      	ldr	r3, [pc, #24]	; (80064cc <SEGGER_SYSVIEW_Start+0x168>)
 80064b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064b4:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 80064b6:	f000 f9eb 	bl	8006890 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 80064ba:	f000 f9b1 	bl	8006820 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 80064be:	f000 fc23 	bl	8006d08 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 80064c2:	bf00      	nop
 80064c4:	3730      	adds	r7, #48	; 0x30
 80064c6:	46bd      	mov	sp, r7
 80064c8:	bd80      	pop	{r7, pc}
 80064ca:	bf00      	nop
 80064cc:	20005418 	.word	0x20005418
 80064d0:	0800796c 	.word	0x0800796c
 80064d4:	20005448 	.word	0x20005448

080064d8 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 80064d8:	b580      	push	{r7, lr}
 80064da:	b082      	sub	sp, #8
 80064dc:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80064de:	f3ef 8311 	mrs	r3, BASEPRI
 80064e2:	f04f 0120 	mov.w	r1, #32
 80064e6:	f381 8811 	msr	BASEPRI, r1
 80064ea:	607b      	str	r3, [r7, #4]
 80064ec:	480b      	ldr	r0, [pc, #44]	; (800651c <SEGGER_SYSVIEW_Stop+0x44>)
 80064ee:	f7fe ffba 	bl	8005466 <_PreparePacket>
 80064f2:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 80064f4:	4b0a      	ldr	r3, [pc, #40]	; (8006520 <SEGGER_SYSVIEW_Stop+0x48>)
 80064f6:	781b      	ldrb	r3, [r3, #0]
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d007      	beq.n	800650c <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 80064fc:	220b      	movs	r2, #11
 80064fe:	6839      	ldr	r1, [r7, #0]
 8006500:	6838      	ldr	r0, [r7, #0]
 8006502:	f7ff f89f 	bl	8005644 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 8006506:	4b06      	ldr	r3, [pc, #24]	; (8006520 <SEGGER_SYSVIEW_Stop+0x48>)
 8006508:	2200      	movs	r2, #0
 800650a:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	f383 8811 	msr	BASEPRI, r3
}
 8006512:	bf00      	nop
 8006514:	3708      	adds	r7, #8
 8006516:	46bd      	mov	sp, r7
 8006518:	bd80      	pop	{r7, pc}
 800651a:	bf00      	nop
 800651c:	20005448 	.word	0x20005448
 8006520:	20005418 	.word	0x20005418

08006524 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8006524:	b580      	push	{r7, lr}
 8006526:	b08c      	sub	sp, #48	; 0x30
 8006528:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800652a:	f3ef 8311 	mrs	r3, BASEPRI
 800652e:	f04f 0120 	mov.w	r1, #32
 8006532:	f381 8811 	msr	BASEPRI, r1
 8006536:	60fb      	str	r3, [r7, #12]
 8006538:	4845      	ldr	r0, [pc, #276]	; (8006650 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 800653a:	f7fe ff94 	bl	8005466 <_PreparePacket>
 800653e:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8006540:	68bb      	ldr	r3, [r7, #8]
 8006542:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006548:	4b42      	ldr	r3, [pc, #264]	; (8006654 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800654a:	685b      	ldr	r3, [r3, #4]
 800654c:	62bb      	str	r3, [r7, #40]	; 0x28
 800654e:	e00b      	b.n	8006568 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8006550:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006552:	b2da      	uxtb	r2, r3
 8006554:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006556:	1c59      	adds	r1, r3, #1
 8006558:	62f9      	str	r1, [r7, #44]	; 0x2c
 800655a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800655e:	b2d2      	uxtb	r2, r2
 8006560:	701a      	strb	r2, [r3, #0]
 8006562:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006564:	09db      	lsrs	r3, r3, #7
 8006566:	62bb      	str	r3, [r7, #40]	; 0x28
 8006568:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800656a:	2b7f      	cmp	r3, #127	; 0x7f
 800656c:	d8f0      	bhi.n	8006550 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 800656e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006570:	1c5a      	adds	r2, r3, #1
 8006572:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006574:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006576:	b2d2      	uxtb	r2, r2
 8006578:	701a      	strb	r2, [r3, #0]
 800657a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800657c:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	627b      	str	r3, [r7, #36]	; 0x24
 8006582:	4b34      	ldr	r3, [pc, #208]	; (8006654 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006584:	689b      	ldr	r3, [r3, #8]
 8006586:	623b      	str	r3, [r7, #32]
 8006588:	e00b      	b.n	80065a2 <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 800658a:	6a3b      	ldr	r3, [r7, #32]
 800658c:	b2da      	uxtb	r2, r3
 800658e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006590:	1c59      	adds	r1, r3, #1
 8006592:	6279      	str	r1, [r7, #36]	; 0x24
 8006594:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006598:	b2d2      	uxtb	r2, r2
 800659a:	701a      	strb	r2, [r3, #0]
 800659c:	6a3b      	ldr	r3, [r7, #32]
 800659e:	09db      	lsrs	r3, r3, #7
 80065a0:	623b      	str	r3, [r7, #32]
 80065a2:	6a3b      	ldr	r3, [r7, #32]
 80065a4:	2b7f      	cmp	r3, #127	; 0x7f
 80065a6:	d8f0      	bhi.n	800658a <SEGGER_SYSVIEW_GetSysDesc+0x66>
 80065a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065aa:	1c5a      	adds	r2, r3, #1
 80065ac:	627a      	str	r2, [r7, #36]	; 0x24
 80065ae:	6a3a      	ldr	r2, [r7, #32]
 80065b0:	b2d2      	uxtb	r2, r2
 80065b2:	701a      	strb	r2, [r3, #0]
 80065b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065b6:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	61fb      	str	r3, [r7, #28]
 80065bc:	4b25      	ldr	r3, [pc, #148]	; (8006654 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80065be:	691b      	ldr	r3, [r3, #16]
 80065c0:	61bb      	str	r3, [r7, #24]
 80065c2:	e00b      	b.n	80065dc <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 80065c4:	69bb      	ldr	r3, [r7, #24]
 80065c6:	b2da      	uxtb	r2, r3
 80065c8:	69fb      	ldr	r3, [r7, #28]
 80065ca:	1c59      	adds	r1, r3, #1
 80065cc:	61f9      	str	r1, [r7, #28]
 80065ce:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80065d2:	b2d2      	uxtb	r2, r2
 80065d4:	701a      	strb	r2, [r3, #0]
 80065d6:	69bb      	ldr	r3, [r7, #24]
 80065d8:	09db      	lsrs	r3, r3, #7
 80065da:	61bb      	str	r3, [r7, #24]
 80065dc:	69bb      	ldr	r3, [r7, #24]
 80065de:	2b7f      	cmp	r3, #127	; 0x7f
 80065e0:	d8f0      	bhi.n	80065c4 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 80065e2:	69fb      	ldr	r3, [r7, #28]
 80065e4:	1c5a      	adds	r2, r3, #1
 80065e6:	61fa      	str	r2, [r7, #28]
 80065e8:	69ba      	ldr	r2, [r7, #24]
 80065ea:	b2d2      	uxtb	r2, r2
 80065ec:	701a      	strb	r2, [r3, #0]
 80065ee:	69fb      	ldr	r3, [r7, #28]
 80065f0:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	617b      	str	r3, [r7, #20]
 80065f6:	2300      	movs	r3, #0
 80065f8:	613b      	str	r3, [r7, #16]
 80065fa:	e00b      	b.n	8006614 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 80065fc:	693b      	ldr	r3, [r7, #16]
 80065fe:	b2da      	uxtb	r2, r3
 8006600:	697b      	ldr	r3, [r7, #20]
 8006602:	1c59      	adds	r1, r3, #1
 8006604:	6179      	str	r1, [r7, #20]
 8006606:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800660a:	b2d2      	uxtb	r2, r2
 800660c:	701a      	strb	r2, [r3, #0]
 800660e:	693b      	ldr	r3, [r7, #16]
 8006610:	09db      	lsrs	r3, r3, #7
 8006612:	613b      	str	r3, [r7, #16]
 8006614:	693b      	ldr	r3, [r7, #16]
 8006616:	2b7f      	cmp	r3, #127	; 0x7f
 8006618:	d8f0      	bhi.n	80065fc <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 800661a:	697b      	ldr	r3, [r7, #20]
 800661c:	1c5a      	adds	r2, r3, #1
 800661e:	617a      	str	r2, [r7, #20]
 8006620:	693a      	ldr	r2, [r7, #16]
 8006622:	b2d2      	uxtb	r2, r2
 8006624:	701a      	strb	r2, [r3, #0]
 8006626:	697b      	ldr	r3, [r7, #20]
 8006628:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 800662a:	2218      	movs	r2, #24
 800662c:	6879      	ldr	r1, [r7, #4]
 800662e:	68b8      	ldr	r0, [r7, #8]
 8006630:	f7ff f808 	bl	8005644 <_SendPacket>
  RECORD_END();
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 800663a:	4b06      	ldr	r3, [pc, #24]	; (8006654 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800663c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800663e:	2b00      	cmp	r3, #0
 8006640:	d002      	beq.n	8006648 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 8006642:	4b04      	ldr	r3, [pc, #16]	; (8006654 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006644:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006646:	4798      	blx	r3
  }
}
 8006648:	bf00      	nop
 800664a:	3730      	adds	r7, #48	; 0x30
 800664c:	46bd      	mov	sp, r7
 800664e:	bd80      	pop	{r7, pc}
 8006650:	20005448 	.word	0x20005448
 8006654:	20005418 	.word	0x20005418

08006658 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8006658:	b580      	push	{r7, lr}
 800665a:	b092      	sub	sp, #72	; 0x48
 800665c:	af00      	add	r7, sp, #0
 800665e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8006660:	f3ef 8311 	mrs	r3, BASEPRI
 8006664:	f04f 0120 	mov.w	r1, #32
 8006668:	f381 8811 	msr	BASEPRI, r1
 800666c:	617b      	str	r3, [r7, #20]
 800666e:	486a      	ldr	r0, [pc, #424]	; (8006818 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 8006670:	f7fe fef9 	bl	8005466 <_PreparePacket>
 8006674:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006676:	693b      	ldr	r3, [r7, #16]
 8006678:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	647b      	str	r3, [r7, #68]	; 0x44
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	681a      	ldr	r2, [r3, #0]
 8006682:	4b66      	ldr	r3, [pc, #408]	; (800681c <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8006684:	691b      	ldr	r3, [r3, #16]
 8006686:	1ad3      	subs	r3, r2, r3
 8006688:	643b      	str	r3, [r7, #64]	; 0x40
 800668a:	e00b      	b.n	80066a4 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 800668c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800668e:	b2da      	uxtb	r2, r3
 8006690:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006692:	1c59      	adds	r1, r3, #1
 8006694:	6479      	str	r1, [r7, #68]	; 0x44
 8006696:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800669a:	b2d2      	uxtb	r2, r2
 800669c:	701a      	strb	r2, [r3, #0]
 800669e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80066a0:	09db      	lsrs	r3, r3, #7
 80066a2:	643b      	str	r3, [r7, #64]	; 0x40
 80066a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80066a6:	2b7f      	cmp	r3, #127	; 0x7f
 80066a8:	d8f0      	bhi.n	800668c <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 80066aa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80066ac:	1c5a      	adds	r2, r3, #1
 80066ae:	647a      	str	r2, [r7, #68]	; 0x44
 80066b0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80066b2:	b2d2      	uxtb	r2, r2
 80066b4:	701a      	strb	r2, [r3, #0]
 80066b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80066b8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	689b      	ldr	r3, [r3, #8]
 80066c2:	63bb      	str	r3, [r7, #56]	; 0x38
 80066c4:	e00b      	b.n	80066de <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 80066c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066c8:	b2da      	uxtb	r2, r3
 80066ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80066cc:	1c59      	adds	r1, r3, #1
 80066ce:	63f9      	str	r1, [r7, #60]	; 0x3c
 80066d0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80066d4:	b2d2      	uxtb	r2, r2
 80066d6:	701a      	strb	r2, [r3, #0]
 80066d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066da:	09db      	lsrs	r3, r3, #7
 80066dc:	63bb      	str	r3, [r7, #56]	; 0x38
 80066de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066e0:	2b7f      	cmp	r3, #127	; 0x7f
 80066e2:	d8f0      	bhi.n	80066c6 <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 80066e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80066e6:	1c5a      	adds	r2, r3, #1
 80066e8:	63fa      	str	r2, [r7, #60]	; 0x3c
 80066ea:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80066ec:	b2d2      	uxtb	r2, r2
 80066ee:	701a      	strb	r2, [r3, #0]
 80066f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80066f2:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	685b      	ldr	r3, [r3, #4]
 80066f8:	2220      	movs	r2, #32
 80066fa:	4619      	mov	r1, r3
 80066fc:	68f8      	ldr	r0, [r7, #12]
 80066fe:	f7fe fe65 	bl	80053cc <_EncodeStr>
 8006702:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8006704:	2209      	movs	r2, #9
 8006706:	68f9      	ldr	r1, [r7, #12]
 8006708:	6938      	ldr	r0, [r7, #16]
 800670a:	f7fe ff9b 	bl	8005644 <_SendPacket>
  //
  pPayload = pPayloadStart;
 800670e:	693b      	ldr	r3, [r7, #16]
 8006710:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	637b      	str	r3, [r7, #52]	; 0x34
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	681a      	ldr	r2, [r3, #0]
 800671a:	4b40      	ldr	r3, [pc, #256]	; (800681c <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 800671c:	691b      	ldr	r3, [r3, #16]
 800671e:	1ad3      	subs	r3, r2, r3
 8006720:	633b      	str	r3, [r7, #48]	; 0x30
 8006722:	e00b      	b.n	800673c <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 8006724:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006726:	b2da      	uxtb	r2, r3
 8006728:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800672a:	1c59      	adds	r1, r3, #1
 800672c:	6379      	str	r1, [r7, #52]	; 0x34
 800672e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006732:	b2d2      	uxtb	r2, r2
 8006734:	701a      	strb	r2, [r3, #0]
 8006736:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006738:	09db      	lsrs	r3, r3, #7
 800673a:	633b      	str	r3, [r7, #48]	; 0x30
 800673c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800673e:	2b7f      	cmp	r3, #127	; 0x7f
 8006740:	d8f0      	bhi.n	8006724 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 8006742:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006744:	1c5a      	adds	r2, r3, #1
 8006746:	637a      	str	r2, [r7, #52]	; 0x34
 8006748:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800674a:	b2d2      	uxtb	r2, r2
 800674c:	701a      	strb	r2, [r3, #0]
 800674e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006750:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	68db      	ldr	r3, [r3, #12]
 800675a:	62bb      	str	r3, [r7, #40]	; 0x28
 800675c:	e00b      	b.n	8006776 <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 800675e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006760:	b2da      	uxtb	r2, r3
 8006762:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006764:	1c59      	adds	r1, r3, #1
 8006766:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006768:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800676c:	b2d2      	uxtb	r2, r2
 800676e:	701a      	strb	r2, [r3, #0]
 8006770:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006772:	09db      	lsrs	r3, r3, #7
 8006774:	62bb      	str	r3, [r7, #40]	; 0x28
 8006776:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006778:	2b7f      	cmp	r3, #127	; 0x7f
 800677a:	d8f0      	bhi.n	800675e <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 800677c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800677e:	1c5a      	adds	r2, r3, #1
 8006780:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006782:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006784:	b2d2      	uxtb	r2, r2
 8006786:	701a      	strb	r2, [r3, #0]
 8006788:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800678a:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	627b      	str	r3, [r7, #36]	; 0x24
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	691b      	ldr	r3, [r3, #16]
 8006794:	623b      	str	r3, [r7, #32]
 8006796:	e00b      	b.n	80067b0 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 8006798:	6a3b      	ldr	r3, [r7, #32]
 800679a:	b2da      	uxtb	r2, r3
 800679c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800679e:	1c59      	adds	r1, r3, #1
 80067a0:	6279      	str	r1, [r7, #36]	; 0x24
 80067a2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80067a6:	b2d2      	uxtb	r2, r2
 80067a8:	701a      	strb	r2, [r3, #0]
 80067aa:	6a3b      	ldr	r3, [r7, #32]
 80067ac:	09db      	lsrs	r3, r3, #7
 80067ae:	623b      	str	r3, [r7, #32]
 80067b0:	6a3b      	ldr	r3, [r7, #32]
 80067b2:	2b7f      	cmp	r3, #127	; 0x7f
 80067b4:	d8f0      	bhi.n	8006798 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 80067b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067b8:	1c5a      	adds	r2, r3, #1
 80067ba:	627a      	str	r2, [r7, #36]	; 0x24
 80067bc:	6a3a      	ldr	r2, [r7, #32]
 80067be:	b2d2      	uxtb	r2, r2
 80067c0:	701a      	strb	r2, [r3, #0]
 80067c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067c4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	61fb      	str	r3, [r7, #28]
 80067ca:	2300      	movs	r3, #0
 80067cc:	61bb      	str	r3, [r7, #24]
 80067ce:	e00b      	b.n	80067e8 <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 80067d0:	69bb      	ldr	r3, [r7, #24]
 80067d2:	b2da      	uxtb	r2, r3
 80067d4:	69fb      	ldr	r3, [r7, #28]
 80067d6:	1c59      	adds	r1, r3, #1
 80067d8:	61f9      	str	r1, [r7, #28]
 80067da:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80067de:	b2d2      	uxtb	r2, r2
 80067e0:	701a      	strb	r2, [r3, #0]
 80067e2:	69bb      	ldr	r3, [r7, #24]
 80067e4:	09db      	lsrs	r3, r3, #7
 80067e6:	61bb      	str	r3, [r7, #24]
 80067e8:	69bb      	ldr	r3, [r7, #24]
 80067ea:	2b7f      	cmp	r3, #127	; 0x7f
 80067ec:	d8f0      	bhi.n	80067d0 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 80067ee:	69fb      	ldr	r3, [r7, #28]
 80067f0:	1c5a      	adds	r2, r3, #1
 80067f2:	61fa      	str	r2, [r7, #28]
 80067f4:	69ba      	ldr	r2, [r7, #24]
 80067f6:	b2d2      	uxtb	r2, r2
 80067f8:	701a      	strb	r2, [r3, #0]
 80067fa:	69fb      	ldr	r3, [r7, #28]
 80067fc:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 80067fe:	2215      	movs	r2, #21
 8006800:	68f9      	ldr	r1, [r7, #12]
 8006802:	6938      	ldr	r0, [r7, #16]
 8006804:	f7fe ff1e 	bl	8005644 <_SendPacket>
  RECORD_END();
 8006808:	697b      	ldr	r3, [r7, #20]
 800680a:	f383 8811 	msr	BASEPRI, r3
}
 800680e:	bf00      	nop
 8006810:	3748      	adds	r7, #72	; 0x48
 8006812:	46bd      	mov	sp, r7
 8006814:	bd80      	pop	{r7, pc}
 8006816:	bf00      	nop
 8006818:	20005448 	.word	0x20005448
 800681c:	20005418 	.word	0x20005418

08006820 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8006820:	b580      	push	{r7, lr}
 8006822:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8006824:	4b07      	ldr	r3, [pc, #28]	; (8006844 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8006826:	6a1b      	ldr	r3, [r3, #32]
 8006828:	2b00      	cmp	r3, #0
 800682a:	d008      	beq.n	800683e <SEGGER_SYSVIEW_SendTaskList+0x1e>
 800682c:	4b05      	ldr	r3, [pc, #20]	; (8006844 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800682e:	6a1b      	ldr	r3, [r3, #32]
 8006830:	685b      	ldr	r3, [r3, #4]
 8006832:	2b00      	cmp	r3, #0
 8006834:	d003      	beq.n	800683e <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 8006836:	4b03      	ldr	r3, [pc, #12]	; (8006844 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8006838:	6a1b      	ldr	r3, [r3, #32]
 800683a:	685b      	ldr	r3, [r3, #4]
 800683c:	4798      	blx	r3
  }
}
 800683e:	bf00      	nop
 8006840:	bd80      	pop	{r7, pc}
 8006842:	bf00      	nop
 8006844:	20005418 	.word	0x20005418

08006848 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 8006848:	b580      	push	{r7, lr}
 800684a:	b086      	sub	sp, #24
 800684c:	af00      	add	r7, sp, #0
 800684e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006850:	f3ef 8311 	mrs	r3, BASEPRI
 8006854:	f04f 0120 	mov.w	r1, #32
 8006858:	f381 8811 	msr	BASEPRI, r1
 800685c:	617b      	str	r3, [r7, #20]
 800685e:	480b      	ldr	r0, [pc, #44]	; (800688c <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 8006860:	f7fe fe01 	bl	8005466 <_PreparePacket>
 8006864:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006866:	2280      	movs	r2, #128	; 0x80
 8006868:	6879      	ldr	r1, [r7, #4]
 800686a:	6938      	ldr	r0, [r7, #16]
 800686c:	f7fe fdae 	bl	80053cc <_EncodeStr>
 8006870:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 8006872:	220e      	movs	r2, #14
 8006874:	68f9      	ldr	r1, [r7, #12]
 8006876:	6938      	ldr	r0, [r7, #16]
 8006878:	f7fe fee4 	bl	8005644 <_SendPacket>
  RECORD_END();
 800687c:	697b      	ldr	r3, [r7, #20]
 800687e:	f383 8811 	msr	BASEPRI, r3
}
 8006882:	bf00      	nop
 8006884:	3718      	adds	r7, #24
 8006886:	46bd      	mov	sp, r7
 8006888:	bd80      	pop	{r7, pc}
 800688a:	bf00      	nop
 800688c:	20005448 	.word	0x20005448

08006890 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8006890:	b590      	push	{r4, r7, lr}
 8006892:	b083      	sub	sp, #12
 8006894:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 8006896:	4b15      	ldr	r3, [pc, #84]	; (80068ec <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8006898:	6a1b      	ldr	r3, [r3, #32]
 800689a:	2b00      	cmp	r3, #0
 800689c:	d01a      	beq.n	80068d4 <SEGGER_SYSVIEW_RecordSystime+0x44>
 800689e:	4b13      	ldr	r3, [pc, #76]	; (80068ec <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 80068a0:	6a1b      	ldr	r3, [r3, #32]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d015      	beq.n	80068d4 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 80068a8:	4b10      	ldr	r3, [pc, #64]	; (80068ec <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 80068aa:	6a1b      	ldr	r3, [r3, #32]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	4798      	blx	r3
 80068b0:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 80068b4:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 80068b6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80068ba:	f04f 0200 	mov.w	r2, #0
 80068be:	f04f 0300 	mov.w	r3, #0
 80068c2:	000a      	movs	r2, r1
 80068c4:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 80068c6:	4613      	mov	r3, r2
 80068c8:	461a      	mov	r2, r3
 80068ca:	4621      	mov	r1, r4
 80068cc:	200d      	movs	r0, #13
 80068ce:	f7ff fbe7 	bl	80060a0 <SEGGER_SYSVIEW_RecordU32x2>
 80068d2:	e006      	b.n	80068e2 <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 80068d4:	4b06      	ldr	r3, [pc, #24]	; (80068f0 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	4619      	mov	r1, r3
 80068da:	200c      	movs	r0, #12
 80068dc:	f7ff fba4 	bl	8006028 <SEGGER_SYSVIEW_RecordU32>
  }
}
 80068e0:	bf00      	nop
 80068e2:	bf00      	nop
 80068e4:	370c      	adds	r7, #12
 80068e6:	46bd      	mov	sp, r7
 80068e8:	bd90      	pop	{r4, r7, pc}
 80068ea:	bf00      	nop
 80068ec:	20005418 	.word	0x20005418
 80068f0:	e0001004 	.word	0xe0001004

080068f4 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 80068f4:	b580      	push	{r7, lr}
 80068f6:	b086      	sub	sp, #24
 80068f8:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80068fa:	f3ef 8311 	mrs	r3, BASEPRI
 80068fe:	f04f 0120 	mov.w	r1, #32
 8006902:	f381 8811 	msr	BASEPRI, r1
 8006906:	60fb      	str	r3, [r7, #12]
 8006908:	4819      	ldr	r0, [pc, #100]	; (8006970 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 800690a:	f7fe fdac 	bl	8005466 <_PreparePacket>
 800690e:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8006910:	68bb      	ldr	r3, [r7, #8]
 8006912:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 8006914:	4b17      	ldr	r3, [pc, #92]	; (8006974 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800691c:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	617b      	str	r3, [r7, #20]
 8006922:	683b      	ldr	r3, [r7, #0]
 8006924:	613b      	str	r3, [r7, #16]
 8006926:	e00b      	b.n	8006940 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 8006928:	693b      	ldr	r3, [r7, #16]
 800692a:	b2da      	uxtb	r2, r3
 800692c:	697b      	ldr	r3, [r7, #20]
 800692e:	1c59      	adds	r1, r3, #1
 8006930:	6179      	str	r1, [r7, #20]
 8006932:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006936:	b2d2      	uxtb	r2, r2
 8006938:	701a      	strb	r2, [r3, #0]
 800693a:	693b      	ldr	r3, [r7, #16]
 800693c:	09db      	lsrs	r3, r3, #7
 800693e:	613b      	str	r3, [r7, #16]
 8006940:	693b      	ldr	r3, [r7, #16]
 8006942:	2b7f      	cmp	r3, #127	; 0x7f
 8006944:	d8f0      	bhi.n	8006928 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 8006946:	697b      	ldr	r3, [r7, #20]
 8006948:	1c5a      	adds	r2, r3, #1
 800694a:	617a      	str	r2, [r7, #20]
 800694c:	693a      	ldr	r2, [r7, #16]
 800694e:	b2d2      	uxtb	r2, r2
 8006950:	701a      	strb	r2, [r3, #0]
 8006952:	697b      	ldr	r3, [r7, #20]
 8006954:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 8006956:	2202      	movs	r2, #2
 8006958:	6879      	ldr	r1, [r7, #4]
 800695a:	68b8      	ldr	r0, [r7, #8]
 800695c:	f7fe fe72 	bl	8005644 <_SendPacket>
  RECORD_END();
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	f383 8811 	msr	BASEPRI, r3
}
 8006966:	bf00      	nop
 8006968:	3718      	adds	r7, #24
 800696a:	46bd      	mov	sp, r7
 800696c:	bd80      	pop	{r7, pc}
 800696e:	bf00      	nop
 8006970:	20005448 	.word	0x20005448
 8006974:	e000ed04 	.word	0xe000ed04

08006978 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 8006978:	b580      	push	{r7, lr}
 800697a:	b082      	sub	sp, #8
 800697c:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800697e:	f3ef 8311 	mrs	r3, BASEPRI
 8006982:	f04f 0120 	mov.w	r1, #32
 8006986:	f381 8811 	msr	BASEPRI, r1
 800698a:	607b      	str	r3, [r7, #4]
 800698c:	4807      	ldr	r0, [pc, #28]	; (80069ac <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 800698e:	f7fe fd6a 	bl	8005466 <_PreparePacket>
 8006992:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 8006994:	2203      	movs	r2, #3
 8006996:	6839      	ldr	r1, [r7, #0]
 8006998:	6838      	ldr	r0, [r7, #0]
 800699a:	f7fe fe53 	bl	8005644 <_SendPacket>
  RECORD_END();
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	f383 8811 	msr	BASEPRI, r3
}
 80069a4:	bf00      	nop
 80069a6:	3708      	adds	r7, #8
 80069a8:	46bd      	mov	sp, r7
 80069aa:	bd80      	pop	{r7, pc}
 80069ac:	20005448 	.word	0x20005448

080069b0 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 80069b0:	b580      	push	{r7, lr}
 80069b2:	b082      	sub	sp, #8
 80069b4:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80069b6:	f3ef 8311 	mrs	r3, BASEPRI
 80069ba:	f04f 0120 	mov.w	r1, #32
 80069be:	f381 8811 	msr	BASEPRI, r1
 80069c2:	607b      	str	r3, [r7, #4]
 80069c4:	4807      	ldr	r0, [pc, #28]	; (80069e4 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 80069c6:	f7fe fd4e 	bl	8005466 <_PreparePacket>
 80069ca:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 80069cc:	2212      	movs	r2, #18
 80069ce:	6839      	ldr	r1, [r7, #0]
 80069d0:	6838      	ldr	r0, [r7, #0]
 80069d2:	f7fe fe37 	bl	8005644 <_SendPacket>
  RECORD_END();
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	f383 8811 	msr	BASEPRI, r3
}
 80069dc:	bf00      	nop
 80069de:	3708      	adds	r7, #8
 80069e0:	46bd      	mov	sp, r7
 80069e2:	bd80      	pop	{r7, pc}
 80069e4:	20005448 	.word	0x20005448

080069e8 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 80069e8:	b580      	push	{r7, lr}
 80069ea:	b082      	sub	sp, #8
 80069ec:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80069ee:	f3ef 8311 	mrs	r3, BASEPRI
 80069f2:	f04f 0120 	mov.w	r1, #32
 80069f6:	f381 8811 	msr	BASEPRI, r1
 80069fa:	607b      	str	r3, [r7, #4]
 80069fc:	4807      	ldr	r0, [pc, #28]	; (8006a1c <SEGGER_SYSVIEW_OnIdle+0x34>)
 80069fe:	f7fe fd32 	bl	8005466 <_PreparePacket>
 8006a02:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8006a04:	2211      	movs	r2, #17
 8006a06:	6839      	ldr	r1, [r7, #0]
 8006a08:	6838      	ldr	r0, [r7, #0]
 8006a0a:	f7fe fe1b 	bl	8005644 <_SendPacket>
  RECORD_END();
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	f383 8811 	msr	BASEPRI, r3
}
 8006a14:	bf00      	nop
 8006a16:	3708      	adds	r7, #8
 8006a18:	46bd      	mov	sp, r7
 8006a1a:	bd80      	pop	{r7, pc}
 8006a1c:	20005448 	.word	0x20005448

08006a20 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 8006a20:	b580      	push	{r7, lr}
 8006a22:	b088      	sub	sp, #32
 8006a24:	af00      	add	r7, sp, #0
 8006a26:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006a28:	f3ef 8311 	mrs	r3, BASEPRI
 8006a2c:	f04f 0120 	mov.w	r1, #32
 8006a30:	f381 8811 	msr	BASEPRI, r1
 8006a34:	617b      	str	r3, [r7, #20]
 8006a36:	4819      	ldr	r0, [pc, #100]	; (8006a9c <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 8006a38:	f7fe fd15 	bl	8005466 <_PreparePacket>
 8006a3c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006a3e:	693b      	ldr	r3, [r7, #16]
 8006a40:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006a42:	4b17      	ldr	r3, [pc, #92]	; (8006aa0 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 8006a44:	691b      	ldr	r3, [r3, #16]
 8006a46:	687a      	ldr	r2, [r7, #4]
 8006a48:	1ad3      	subs	r3, r2, r3
 8006a4a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	61fb      	str	r3, [r7, #28]
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	61bb      	str	r3, [r7, #24]
 8006a54:	e00b      	b.n	8006a6e <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 8006a56:	69bb      	ldr	r3, [r7, #24]
 8006a58:	b2da      	uxtb	r2, r3
 8006a5a:	69fb      	ldr	r3, [r7, #28]
 8006a5c:	1c59      	adds	r1, r3, #1
 8006a5e:	61f9      	str	r1, [r7, #28]
 8006a60:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006a64:	b2d2      	uxtb	r2, r2
 8006a66:	701a      	strb	r2, [r3, #0]
 8006a68:	69bb      	ldr	r3, [r7, #24]
 8006a6a:	09db      	lsrs	r3, r3, #7
 8006a6c:	61bb      	str	r3, [r7, #24]
 8006a6e:	69bb      	ldr	r3, [r7, #24]
 8006a70:	2b7f      	cmp	r3, #127	; 0x7f
 8006a72:	d8f0      	bhi.n	8006a56 <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 8006a74:	69fb      	ldr	r3, [r7, #28]
 8006a76:	1c5a      	adds	r2, r3, #1
 8006a78:	61fa      	str	r2, [r7, #28]
 8006a7a:	69ba      	ldr	r2, [r7, #24]
 8006a7c:	b2d2      	uxtb	r2, r2
 8006a7e:	701a      	strb	r2, [r3, #0]
 8006a80:	69fb      	ldr	r3, [r7, #28]
 8006a82:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 8006a84:	2208      	movs	r2, #8
 8006a86:	68f9      	ldr	r1, [r7, #12]
 8006a88:	6938      	ldr	r0, [r7, #16]
 8006a8a:	f7fe fddb 	bl	8005644 <_SendPacket>
  RECORD_END();
 8006a8e:	697b      	ldr	r3, [r7, #20]
 8006a90:	f383 8811 	msr	BASEPRI, r3
}
 8006a94:	bf00      	nop
 8006a96:	3720      	adds	r7, #32
 8006a98:	46bd      	mov	sp, r7
 8006a9a:	bd80      	pop	{r7, pc}
 8006a9c:	20005448 	.word	0x20005448
 8006aa0:	20005418 	.word	0x20005418

08006aa4 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 8006aa4:	b580      	push	{r7, lr}
 8006aa6:	b088      	sub	sp, #32
 8006aa8:	af00      	add	r7, sp, #0
 8006aaa:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006aac:	f3ef 8311 	mrs	r3, BASEPRI
 8006ab0:	f04f 0120 	mov.w	r1, #32
 8006ab4:	f381 8811 	msr	BASEPRI, r1
 8006ab8:	617b      	str	r3, [r7, #20]
 8006aba:	4819      	ldr	r0, [pc, #100]	; (8006b20 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 8006abc:	f7fe fcd3 	bl	8005466 <_PreparePacket>
 8006ac0:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006ac2:	693b      	ldr	r3, [r7, #16]
 8006ac4:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006ac6:	4b17      	ldr	r3, [pc, #92]	; (8006b24 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8006ac8:	691b      	ldr	r3, [r3, #16]
 8006aca:	687a      	ldr	r2, [r7, #4]
 8006acc:	1ad3      	subs	r3, r2, r3
 8006ace:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	61fb      	str	r3, [r7, #28]
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	61bb      	str	r3, [r7, #24]
 8006ad8:	e00b      	b.n	8006af2 <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 8006ada:	69bb      	ldr	r3, [r7, #24]
 8006adc:	b2da      	uxtb	r2, r3
 8006ade:	69fb      	ldr	r3, [r7, #28]
 8006ae0:	1c59      	adds	r1, r3, #1
 8006ae2:	61f9      	str	r1, [r7, #28]
 8006ae4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006ae8:	b2d2      	uxtb	r2, r2
 8006aea:	701a      	strb	r2, [r3, #0]
 8006aec:	69bb      	ldr	r3, [r7, #24]
 8006aee:	09db      	lsrs	r3, r3, #7
 8006af0:	61bb      	str	r3, [r7, #24]
 8006af2:	69bb      	ldr	r3, [r7, #24]
 8006af4:	2b7f      	cmp	r3, #127	; 0x7f
 8006af6:	d8f0      	bhi.n	8006ada <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 8006af8:	69fb      	ldr	r3, [r7, #28]
 8006afa:	1c5a      	adds	r2, r3, #1
 8006afc:	61fa      	str	r2, [r7, #28]
 8006afe:	69ba      	ldr	r2, [r7, #24]
 8006b00:	b2d2      	uxtb	r2, r2
 8006b02:	701a      	strb	r2, [r3, #0]
 8006b04:	69fb      	ldr	r3, [r7, #28]
 8006b06:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8006b08:	2204      	movs	r2, #4
 8006b0a:	68f9      	ldr	r1, [r7, #12]
 8006b0c:	6938      	ldr	r0, [r7, #16]
 8006b0e:	f7fe fd99 	bl	8005644 <_SendPacket>
  RECORD_END();
 8006b12:	697b      	ldr	r3, [r7, #20]
 8006b14:	f383 8811 	msr	BASEPRI, r3
}
 8006b18:	bf00      	nop
 8006b1a:	3720      	adds	r7, #32
 8006b1c:	46bd      	mov	sp, r7
 8006b1e:	bd80      	pop	{r7, pc}
 8006b20:	20005448 	.word	0x20005448
 8006b24:	20005418 	.word	0x20005418

08006b28 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8006b28:	b580      	push	{r7, lr}
 8006b2a:	b088      	sub	sp, #32
 8006b2c:	af00      	add	r7, sp, #0
 8006b2e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006b30:	f3ef 8311 	mrs	r3, BASEPRI
 8006b34:	f04f 0120 	mov.w	r1, #32
 8006b38:	f381 8811 	msr	BASEPRI, r1
 8006b3c:	617b      	str	r3, [r7, #20]
 8006b3e:	4819      	ldr	r0, [pc, #100]	; (8006ba4 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 8006b40:	f7fe fc91 	bl	8005466 <_PreparePacket>
 8006b44:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006b46:	693b      	ldr	r3, [r7, #16]
 8006b48:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006b4a:	4b17      	ldr	r3, [pc, #92]	; (8006ba8 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8006b4c:	691b      	ldr	r3, [r3, #16]
 8006b4e:	687a      	ldr	r2, [r7, #4]
 8006b50:	1ad3      	subs	r3, r2, r3
 8006b52:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	61fb      	str	r3, [r7, #28]
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	61bb      	str	r3, [r7, #24]
 8006b5c:	e00b      	b.n	8006b76 <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 8006b5e:	69bb      	ldr	r3, [r7, #24]
 8006b60:	b2da      	uxtb	r2, r3
 8006b62:	69fb      	ldr	r3, [r7, #28]
 8006b64:	1c59      	adds	r1, r3, #1
 8006b66:	61f9      	str	r1, [r7, #28]
 8006b68:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006b6c:	b2d2      	uxtb	r2, r2
 8006b6e:	701a      	strb	r2, [r3, #0]
 8006b70:	69bb      	ldr	r3, [r7, #24]
 8006b72:	09db      	lsrs	r3, r3, #7
 8006b74:	61bb      	str	r3, [r7, #24]
 8006b76:	69bb      	ldr	r3, [r7, #24]
 8006b78:	2b7f      	cmp	r3, #127	; 0x7f
 8006b7a:	d8f0      	bhi.n	8006b5e <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 8006b7c:	69fb      	ldr	r3, [r7, #28]
 8006b7e:	1c5a      	adds	r2, r3, #1
 8006b80:	61fa      	str	r2, [r7, #28]
 8006b82:	69ba      	ldr	r2, [r7, #24]
 8006b84:	b2d2      	uxtb	r2, r2
 8006b86:	701a      	strb	r2, [r3, #0]
 8006b88:	69fb      	ldr	r3, [r7, #28]
 8006b8a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8006b8c:	2206      	movs	r2, #6
 8006b8e:	68f9      	ldr	r1, [r7, #12]
 8006b90:	6938      	ldr	r0, [r7, #16]
 8006b92:	f7fe fd57 	bl	8005644 <_SendPacket>
  RECORD_END();
 8006b96:	697b      	ldr	r3, [r7, #20]
 8006b98:	f383 8811 	msr	BASEPRI, r3
}
 8006b9c:	bf00      	nop
 8006b9e:	3720      	adds	r7, #32
 8006ba0:	46bd      	mov	sp, r7
 8006ba2:	bd80      	pop	{r7, pc}
 8006ba4:	20005448 	.word	0x20005448
 8006ba8:	20005418 	.word	0x20005418

08006bac <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 8006bac:	b480      	push	{r7}
 8006bae:	b083      	sub	sp, #12
 8006bb0:	af00      	add	r7, sp, #0
 8006bb2:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 8006bb4:	4b04      	ldr	r3, [pc, #16]	; (8006bc8 <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 8006bb6:	691b      	ldr	r3, [r3, #16]
 8006bb8:	687a      	ldr	r2, [r7, #4]
 8006bba:	1ad3      	subs	r3, r2, r3
}
 8006bbc:	4618      	mov	r0, r3
 8006bbe:	370c      	adds	r7, #12
 8006bc0:	46bd      	mov	sp, r7
 8006bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc6:	4770      	bx	lr
 8006bc8:	20005418 	.word	0x20005418

08006bcc <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8006bcc:	b580      	push	{r7, lr}
 8006bce:	b08c      	sub	sp, #48	; 0x30
 8006bd0:	af00      	add	r7, sp, #0
 8006bd2:	4603      	mov	r3, r0
 8006bd4:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 8006bd6:	4b3b      	ldr	r3, [pc, #236]	; (8006cc4 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d06d      	beq.n	8006cba <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 8006bde:	4b39      	ldr	r3, [pc, #228]	; (8006cc4 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 8006be4:	2300      	movs	r3, #0
 8006be6:	62bb      	str	r3, [r7, #40]	; 0x28
 8006be8:	e008      	b.n	8006bfc <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 8006bea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bec:	691b      	ldr	r3, [r3, #16]
 8006bee:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 8006bf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d007      	beq.n	8006c06 <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 8006bf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bf8:	3301      	adds	r3, #1
 8006bfa:	62bb      	str	r3, [r7, #40]	; 0x28
 8006bfc:	79fb      	ldrb	r3, [r7, #7]
 8006bfe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006c00:	429a      	cmp	r2, r3
 8006c02:	d3f2      	bcc.n	8006bea <SEGGER_SYSVIEW_SendModule+0x1e>
 8006c04:	e000      	b.n	8006c08 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 8006c06:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8006c08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d055      	beq.n	8006cba <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006c0e:	f3ef 8311 	mrs	r3, BASEPRI
 8006c12:	f04f 0120 	mov.w	r1, #32
 8006c16:	f381 8811 	msr	BASEPRI, r1
 8006c1a:	617b      	str	r3, [r7, #20]
 8006c1c:	482a      	ldr	r0, [pc, #168]	; (8006cc8 <SEGGER_SYSVIEW_SendModule+0xfc>)
 8006c1e:	f7fe fc22 	bl	8005466 <_PreparePacket>
 8006c22:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8006c24:	693b      	ldr	r3, [r7, #16]
 8006c26:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	627b      	str	r3, [r7, #36]	; 0x24
 8006c2c:	79fb      	ldrb	r3, [r7, #7]
 8006c2e:	623b      	str	r3, [r7, #32]
 8006c30:	e00b      	b.n	8006c4a <SEGGER_SYSVIEW_SendModule+0x7e>
 8006c32:	6a3b      	ldr	r3, [r7, #32]
 8006c34:	b2da      	uxtb	r2, r3
 8006c36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c38:	1c59      	adds	r1, r3, #1
 8006c3a:	6279      	str	r1, [r7, #36]	; 0x24
 8006c3c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006c40:	b2d2      	uxtb	r2, r2
 8006c42:	701a      	strb	r2, [r3, #0]
 8006c44:	6a3b      	ldr	r3, [r7, #32]
 8006c46:	09db      	lsrs	r3, r3, #7
 8006c48:	623b      	str	r3, [r7, #32]
 8006c4a:	6a3b      	ldr	r3, [r7, #32]
 8006c4c:	2b7f      	cmp	r3, #127	; 0x7f
 8006c4e:	d8f0      	bhi.n	8006c32 <SEGGER_SYSVIEW_SendModule+0x66>
 8006c50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c52:	1c5a      	adds	r2, r3, #1
 8006c54:	627a      	str	r2, [r7, #36]	; 0x24
 8006c56:	6a3a      	ldr	r2, [r7, #32]
 8006c58:	b2d2      	uxtb	r2, r2
 8006c5a:	701a      	strb	r2, [r3, #0]
 8006c5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c5e:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	61fb      	str	r3, [r7, #28]
 8006c64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c66:	689b      	ldr	r3, [r3, #8]
 8006c68:	61bb      	str	r3, [r7, #24]
 8006c6a:	e00b      	b.n	8006c84 <SEGGER_SYSVIEW_SendModule+0xb8>
 8006c6c:	69bb      	ldr	r3, [r7, #24]
 8006c6e:	b2da      	uxtb	r2, r3
 8006c70:	69fb      	ldr	r3, [r7, #28]
 8006c72:	1c59      	adds	r1, r3, #1
 8006c74:	61f9      	str	r1, [r7, #28]
 8006c76:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006c7a:	b2d2      	uxtb	r2, r2
 8006c7c:	701a      	strb	r2, [r3, #0]
 8006c7e:	69bb      	ldr	r3, [r7, #24]
 8006c80:	09db      	lsrs	r3, r3, #7
 8006c82:	61bb      	str	r3, [r7, #24]
 8006c84:	69bb      	ldr	r3, [r7, #24]
 8006c86:	2b7f      	cmp	r3, #127	; 0x7f
 8006c88:	d8f0      	bhi.n	8006c6c <SEGGER_SYSVIEW_SendModule+0xa0>
 8006c8a:	69fb      	ldr	r3, [r7, #28]
 8006c8c:	1c5a      	adds	r2, r3, #1
 8006c8e:	61fa      	str	r2, [r7, #28]
 8006c90:	69ba      	ldr	r2, [r7, #24]
 8006c92:	b2d2      	uxtb	r2, r2
 8006c94:	701a      	strb	r2, [r3, #0]
 8006c96:	69fb      	ldr	r3, [r7, #28]
 8006c98:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006c9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	2280      	movs	r2, #128	; 0x80
 8006ca0:	4619      	mov	r1, r3
 8006ca2:	68f8      	ldr	r0, [r7, #12]
 8006ca4:	f7fe fb92 	bl	80053cc <_EncodeStr>
 8006ca8:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 8006caa:	2216      	movs	r2, #22
 8006cac:	68f9      	ldr	r1, [r7, #12]
 8006cae:	6938      	ldr	r0, [r7, #16]
 8006cb0:	f7fe fcc8 	bl	8005644 <_SendPacket>
      RECORD_END();
 8006cb4:	697b      	ldr	r3, [r7, #20]
 8006cb6:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 8006cba:	bf00      	nop
 8006cbc:	3730      	adds	r7, #48	; 0x30
 8006cbe:	46bd      	mov	sp, r7
 8006cc0:	bd80      	pop	{r7, pc}
 8006cc2:	bf00      	nop
 8006cc4:	20005440 	.word	0x20005440
 8006cc8:	20005448 	.word	0x20005448

08006ccc <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8006ccc:	b580      	push	{r7, lr}
 8006cce:	b082      	sub	sp, #8
 8006cd0:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 8006cd2:	4b0c      	ldr	r3, [pc, #48]	; (8006d04 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d00f      	beq.n	8006cfa <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 8006cda:	4b0a      	ldr	r3, [pc, #40]	; (8006d04 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	68db      	ldr	r3, [r3, #12]
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d002      	beq.n	8006cee <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	68db      	ldr	r3, [r3, #12]
 8006cec:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	691b      	ldr	r3, [r3, #16]
 8006cf2:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d1f2      	bne.n	8006ce0 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 8006cfa:	bf00      	nop
 8006cfc:	3708      	adds	r7, #8
 8006cfe:	46bd      	mov	sp, r7
 8006d00:	bd80      	pop	{r7, pc}
 8006d02:	bf00      	nop
 8006d04:	20005440 	.word	0x20005440

08006d08 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8006d08:	b580      	push	{r7, lr}
 8006d0a:	b086      	sub	sp, #24
 8006d0c:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 8006d0e:	f3ef 8311 	mrs	r3, BASEPRI
 8006d12:	f04f 0120 	mov.w	r1, #32
 8006d16:	f381 8811 	msr	BASEPRI, r1
 8006d1a:	60fb      	str	r3, [r7, #12]
 8006d1c:	4817      	ldr	r0, [pc, #92]	; (8006d7c <SEGGER_SYSVIEW_SendNumModules+0x74>)
 8006d1e:	f7fe fba2 	bl	8005466 <_PreparePacket>
 8006d22:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8006d24:	68bb      	ldr	r3, [r7, #8]
 8006d26:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	617b      	str	r3, [r7, #20]
 8006d2c:	4b14      	ldr	r3, [pc, #80]	; (8006d80 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 8006d2e:	781b      	ldrb	r3, [r3, #0]
 8006d30:	613b      	str	r3, [r7, #16]
 8006d32:	e00b      	b.n	8006d4c <SEGGER_SYSVIEW_SendNumModules+0x44>
 8006d34:	693b      	ldr	r3, [r7, #16]
 8006d36:	b2da      	uxtb	r2, r3
 8006d38:	697b      	ldr	r3, [r7, #20]
 8006d3a:	1c59      	adds	r1, r3, #1
 8006d3c:	6179      	str	r1, [r7, #20]
 8006d3e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006d42:	b2d2      	uxtb	r2, r2
 8006d44:	701a      	strb	r2, [r3, #0]
 8006d46:	693b      	ldr	r3, [r7, #16]
 8006d48:	09db      	lsrs	r3, r3, #7
 8006d4a:	613b      	str	r3, [r7, #16]
 8006d4c:	693b      	ldr	r3, [r7, #16]
 8006d4e:	2b7f      	cmp	r3, #127	; 0x7f
 8006d50:	d8f0      	bhi.n	8006d34 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 8006d52:	697b      	ldr	r3, [r7, #20]
 8006d54:	1c5a      	adds	r2, r3, #1
 8006d56:	617a      	str	r2, [r7, #20]
 8006d58:	693a      	ldr	r2, [r7, #16]
 8006d5a:	b2d2      	uxtb	r2, r2
 8006d5c:	701a      	strb	r2, [r3, #0]
 8006d5e:	697b      	ldr	r3, [r7, #20]
 8006d60:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 8006d62:	221b      	movs	r2, #27
 8006d64:	6879      	ldr	r1, [r7, #4]
 8006d66:	68b8      	ldr	r0, [r7, #8]
 8006d68:	f7fe fc6c 	bl	8005644 <_SendPacket>
  RECORD_END();
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	f383 8811 	msr	BASEPRI, r3
}
 8006d72:	bf00      	nop
 8006d74:	3718      	adds	r7, #24
 8006d76:	46bd      	mov	sp, r7
 8006d78:	bd80      	pop	{r7, pc}
 8006d7a:	bf00      	nop
 8006d7c:	20005448 	.word	0x20005448
 8006d80:	20005444 	.word	0x20005444

08006d84 <SEGGER_SYSVIEW_PrintfTarget>:
*    the host.
*
*  Parameters
*    s        - String to be formatted.
*/
void SEGGER_SYSVIEW_PrintfTarget(const char* s, ...) {
 8006d84:	b40f      	push	{r0, r1, r2, r3}
 8006d86:	b580      	push	{r7, lr}
 8006d88:	b082      	sub	sp, #8
 8006d8a:	af00      	add	r7, sp, #0
  va_list ParamList;

  va_start(ParamList, s);
 8006d8c:	f107 0314 	add.w	r3, r7, #20
 8006d90:	607b      	str	r3, [r7, #4]
  _VPrintTarget(s, SEGGER_SYSVIEW_LOG, &ParamList);
 8006d92:	1d3b      	adds	r3, r7, #4
 8006d94:	461a      	mov	r2, r3
 8006d96:	2100      	movs	r1, #0
 8006d98:	6938      	ldr	r0, [r7, #16]
 8006d9a:	f7fe fedb 	bl	8005b54 <_VPrintTarget>
  va_end(ParamList);
}
 8006d9e:	bf00      	nop
 8006da0:	3708      	adds	r7, #8
 8006da2:	46bd      	mov	sp, r7
 8006da4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006da8:	b004      	add	sp, #16
 8006daa:	4770      	bx	lr

08006dac <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 8006dac:	b580      	push	{r7, lr}
 8006dae:	b08a      	sub	sp, #40	; 0x28
 8006db0:	af00      	add	r7, sp, #0
 8006db2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006db4:	f3ef 8311 	mrs	r3, BASEPRI
 8006db8:	f04f 0120 	mov.w	r1, #32
 8006dbc:	f381 8811 	msr	BASEPRI, r1
 8006dc0:	617b      	str	r3, [r7, #20]
 8006dc2:	4827      	ldr	r0, [pc, #156]	; (8006e60 <SEGGER_SYSVIEW_Warn+0xb4>)
 8006dc4:	f7fe fb4f 	bl	8005466 <_PreparePacket>
 8006dc8:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006dca:	2280      	movs	r2, #128	; 0x80
 8006dcc:	6879      	ldr	r1, [r7, #4]
 8006dce:	6938      	ldr	r0, [r7, #16]
 8006dd0:	f7fe fafc 	bl	80053cc <_EncodeStr>
 8006dd4:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	627b      	str	r3, [r7, #36]	; 0x24
 8006dda:	2301      	movs	r3, #1
 8006ddc:	623b      	str	r3, [r7, #32]
 8006dde:	e00b      	b.n	8006df8 <SEGGER_SYSVIEW_Warn+0x4c>
 8006de0:	6a3b      	ldr	r3, [r7, #32]
 8006de2:	b2da      	uxtb	r2, r3
 8006de4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006de6:	1c59      	adds	r1, r3, #1
 8006de8:	6279      	str	r1, [r7, #36]	; 0x24
 8006dea:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006dee:	b2d2      	uxtb	r2, r2
 8006df0:	701a      	strb	r2, [r3, #0]
 8006df2:	6a3b      	ldr	r3, [r7, #32]
 8006df4:	09db      	lsrs	r3, r3, #7
 8006df6:	623b      	str	r3, [r7, #32]
 8006df8:	6a3b      	ldr	r3, [r7, #32]
 8006dfa:	2b7f      	cmp	r3, #127	; 0x7f
 8006dfc:	d8f0      	bhi.n	8006de0 <SEGGER_SYSVIEW_Warn+0x34>
 8006dfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e00:	1c5a      	adds	r2, r3, #1
 8006e02:	627a      	str	r2, [r7, #36]	; 0x24
 8006e04:	6a3a      	ldr	r2, [r7, #32]
 8006e06:	b2d2      	uxtb	r2, r2
 8006e08:	701a      	strb	r2, [r3, #0]
 8006e0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e0c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	61fb      	str	r3, [r7, #28]
 8006e12:	2300      	movs	r3, #0
 8006e14:	61bb      	str	r3, [r7, #24]
 8006e16:	e00b      	b.n	8006e30 <SEGGER_SYSVIEW_Warn+0x84>
 8006e18:	69bb      	ldr	r3, [r7, #24]
 8006e1a:	b2da      	uxtb	r2, r3
 8006e1c:	69fb      	ldr	r3, [r7, #28]
 8006e1e:	1c59      	adds	r1, r3, #1
 8006e20:	61f9      	str	r1, [r7, #28]
 8006e22:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006e26:	b2d2      	uxtb	r2, r2
 8006e28:	701a      	strb	r2, [r3, #0]
 8006e2a:	69bb      	ldr	r3, [r7, #24]
 8006e2c:	09db      	lsrs	r3, r3, #7
 8006e2e:	61bb      	str	r3, [r7, #24]
 8006e30:	69bb      	ldr	r3, [r7, #24]
 8006e32:	2b7f      	cmp	r3, #127	; 0x7f
 8006e34:	d8f0      	bhi.n	8006e18 <SEGGER_SYSVIEW_Warn+0x6c>
 8006e36:	69fb      	ldr	r3, [r7, #28]
 8006e38:	1c5a      	adds	r2, r3, #1
 8006e3a:	61fa      	str	r2, [r7, #28]
 8006e3c:	69ba      	ldr	r2, [r7, #24]
 8006e3e:	b2d2      	uxtb	r2, r2
 8006e40:	701a      	strb	r2, [r3, #0]
 8006e42:	69fb      	ldr	r3, [r7, #28]
 8006e44:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8006e46:	221a      	movs	r2, #26
 8006e48:	68f9      	ldr	r1, [r7, #12]
 8006e4a:	6938      	ldr	r0, [r7, #16]
 8006e4c:	f7fe fbfa 	bl	8005644 <_SendPacket>
  RECORD_END();
 8006e50:	697b      	ldr	r3, [r7, #20]
 8006e52:	f383 8811 	msr	BASEPRI, r3
}
 8006e56:	bf00      	nop
 8006e58:	3728      	adds	r7, #40	; 0x28
 8006e5a:	46bd      	mov	sp, r7
 8006e5c:	bd80      	pop	{r7, pc}
 8006e5e:	bf00      	nop
 8006e60:	20005448 	.word	0x20005448

08006e64 <sniprintf>:
 8006e64:	b40c      	push	{r2, r3}
 8006e66:	b530      	push	{r4, r5, lr}
 8006e68:	4b17      	ldr	r3, [pc, #92]	; (8006ec8 <sniprintf+0x64>)
 8006e6a:	1e0c      	subs	r4, r1, #0
 8006e6c:	681d      	ldr	r5, [r3, #0]
 8006e6e:	b09d      	sub	sp, #116	; 0x74
 8006e70:	da08      	bge.n	8006e84 <sniprintf+0x20>
 8006e72:	238b      	movs	r3, #139	; 0x8b
 8006e74:	602b      	str	r3, [r5, #0]
 8006e76:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006e7a:	b01d      	add	sp, #116	; 0x74
 8006e7c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006e80:	b002      	add	sp, #8
 8006e82:	4770      	bx	lr
 8006e84:	f44f 7302 	mov.w	r3, #520	; 0x208
 8006e88:	f8ad 3014 	strh.w	r3, [sp, #20]
 8006e8c:	bf14      	ite	ne
 8006e8e:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 8006e92:	4623      	moveq	r3, r4
 8006e94:	9304      	str	r3, [sp, #16]
 8006e96:	9307      	str	r3, [sp, #28]
 8006e98:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006e9c:	9002      	str	r0, [sp, #8]
 8006e9e:	9006      	str	r0, [sp, #24]
 8006ea0:	f8ad 3016 	strh.w	r3, [sp, #22]
 8006ea4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8006ea6:	ab21      	add	r3, sp, #132	; 0x84
 8006ea8:	a902      	add	r1, sp, #8
 8006eaa:	4628      	mov	r0, r5
 8006eac:	9301      	str	r3, [sp, #4]
 8006eae:	f000 f9b1 	bl	8007214 <_svfiprintf_r>
 8006eb2:	1c43      	adds	r3, r0, #1
 8006eb4:	bfbc      	itt	lt
 8006eb6:	238b      	movlt	r3, #139	; 0x8b
 8006eb8:	602b      	strlt	r3, [r5, #0]
 8006eba:	2c00      	cmp	r4, #0
 8006ebc:	d0dd      	beq.n	8006e7a <sniprintf+0x16>
 8006ebe:	9b02      	ldr	r3, [sp, #8]
 8006ec0:	2200      	movs	r2, #0
 8006ec2:	701a      	strb	r2, [r3, #0]
 8006ec4:	e7d9      	b.n	8006e7a <sniprintf+0x16>
 8006ec6:	bf00      	nop
 8006ec8:	20000060 	.word	0x20000060

08006ecc <memcmp>:
 8006ecc:	b510      	push	{r4, lr}
 8006ece:	3901      	subs	r1, #1
 8006ed0:	4402      	add	r2, r0
 8006ed2:	4290      	cmp	r0, r2
 8006ed4:	d101      	bne.n	8006eda <memcmp+0xe>
 8006ed6:	2000      	movs	r0, #0
 8006ed8:	e005      	b.n	8006ee6 <memcmp+0x1a>
 8006eda:	7803      	ldrb	r3, [r0, #0]
 8006edc:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8006ee0:	42a3      	cmp	r3, r4
 8006ee2:	d001      	beq.n	8006ee8 <memcmp+0x1c>
 8006ee4:	1b18      	subs	r0, r3, r4
 8006ee6:	bd10      	pop	{r4, pc}
 8006ee8:	3001      	adds	r0, #1
 8006eea:	e7f2      	b.n	8006ed2 <memcmp+0x6>

08006eec <memset>:
 8006eec:	4402      	add	r2, r0
 8006eee:	4603      	mov	r3, r0
 8006ef0:	4293      	cmp	r3, r2
 8006ef2:	d100      	bne.n	8006ef6 <memset+0xa>
 8006ef4:	4770      	bx	lr
 8006ef6:	f803 1b01 	strb.w	r1, [r3], #1
 8006efa:	e7f9      	b.n	8006ef0 <memset+0x4>

08006efc <__errno>:
 8006efc:	4b01      	ldr	r3, [pc, #4]	; (8006f04 <__errno+0x8>)
 8006efe:	6818      	ldr	r0, [r3, #0]
 8006f00:	4770      	bx	lr
 8006f02:	bf00      	nop
 8006f04:	20000060 	.word	0x20000060

08006f08 <__libc_init_array>:
 8006f08:	b570      	push	{r4, r5, r6, lr}
 8006f0a:	4d0d      	ldr	r5, [pc, #52]	; (8006f40 <__libc_init_array+0x38>)
 8006f0c:	4c0d      	ldr	r4, [pc, #52]	; (8006f44 <__libc_init_array+0x3c>)
 8006f0e:	1b64      	subs	r4, r4, r5
 8006f10:	10a4      	asrs	r4, r4, #2
 8006f12:	2600      	movs	r6, #0
 8006f14:	42a6      	cmp	r6, r4
 8006f16:	d109      	bne.n	8006f2c <__libc_init_array+0x24>
 8006f18:	4d0b      	ldr	r5, [pc, #44]	; (8006f48 <__libc_init_array+0x40>)
 8006f1a:	4c0c      	ldr	r4, [pc, #48]	; (8006f4c <__libc_init_array+0x44>)
 8006f1c:	f000 fc6a 	bl	80077f4 <_init>
 8006f20:	1b64      	subs	r4, r4, r5
 8006f22:	10a4      	asrs	r4, r4, #2
 8006f24:	2600      	movs	r6, #0
 8006f26:	42a6      	cmp	r6, r4
 8006f28:	d105      	bne.n	8006f36 <__libc_init_array+0x2e>
 8006f2a:	bd70      	pop	{r4, r5, r6, pc}
 8006f2c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006f30:	4798      	blx	r3
 8006f32:	3601      	adds	r6, #1
 8006f34:	e7ee      	b.n	8006f14 <__libc_init_array+0xc>
 8006f36:	f855 3b04 	ldr.w	r3, [r5], #4
 8006f3a:	4798      	blx	r3
 8006f3c:	3601      	adds	r6, #1
 8006f3e:	e7f2      	b.n	8006f26 <__libc_init_array+0x1e>
 8006f40:	080079bc 	.word	0x080079bc
 8006f44:	080079bc 	.word	0x080079bc
 8006f48:	080079bc 	.word	0x080079bc
 8006f4c:	080079c0 	.word	0x080079c0

08006f50 <__retarget_lock_acquire_recursive>:
 8006f50:	4770      	bx	lr

08006f52 <__retarget_lock_release_recursive>:
 8006f52:	4770      	bx	lr

08006f54 <memcpy>:
 8006f54:	440a      	add	r2, r1
 8006f56:	4291      	cmp	r1, r2
 8006f58:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8006f5c:	d100      	bne.n	8006f60 <memcpy+0xc>
 8006f5e:	4770      	bx	lr
 8006f60:	b510      	push	{r4, lr}
 8006f62:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006f66:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006f6a:	4291      	cmp	r1, r2
 8006f6c:	d1f9      	bne.n	8006f62 <memcpy+0xe>
 8006f6e:	bd10      	pop	{r4, pc}

08006f70 <_free_r>:
 8006f70:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006f72:	2900      	cmp	r1, #0
 8006f74:	d044      	beq.n	8007000 <_free_r+0x90>
 8006f76:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006f7a:	9001      	str	r0, [sp, #4]
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	f1a1 0404 	sub.w	r4, r1, #4
 8006f82:	bfb8      	it	lt
 8006f84:	18e4      	addlt	r4, r4, r3
 8006f86:	f000 f8df 	bl	8007148 <__malloc_lock>
 8006f8a:	4a1e      	ldr	r2, [pc, #120]	; (8007004 <_free_r+0x94>)
 8006f8c:	9801      	ldr	r0, [sp, #4]
 8006f8e:	6813      	ldr	r3, [r2, #0]
 8006f90:	b933      	cbnz	r3, 8006fa0 <_free_r+0x30>
 8006f92:	6063      	str	r3, [r4, #4]
 8006f94:	6014      	str	r4, [r2, #0]
 8006f96:	b003      	add	sp, #12
 8006f98:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006f9c:	f000 b8da 	b.w	8007154 <__malloc_unlock>
 8006fa0:	42a3      	cmp	r3, r4
 8006fa2:	d908      	bls.n	8006fb6 <_free_r+0x46>
 8006fa4:	6825      	ldr	r5, [r4, #0]
 8006fa6:	1961      	adds	r1, r4, r5
 8006fa8:	428b      	cmp	r3, r1
 8006faa:	bf01      	itttt	eq
 8006fac:	6819      	ldreq	r1, [r3, #0]
 8006fae:	685b      	ldreq	r3, [r3, #4]
 8006fb0:	1949      	addeq	r1, r1, r5
 8006fb2:	6021      	streq	r1, [r4, #0]
 8006fb4:	e7ed      	b.n	8006f92 <_free_r+0x22>
 8006fb6:	461a      	mov	r2, r3
 8006fb8:	685b      	ldr	r3, [r3, #4]
 8006fba:	b10b      	cbz	r3, 8006fc0 <_free_r+0x50>
 8006fbc:	42a3      	cmp	r3, r4
 8006fbe:	d9fa      	bls.n	8006fb6 <_free_r+0x46>
 8006fc0:	6811      	ldr	r1, [r2, #0]
 8006fc2:	1855      	adds	r5, r2, r1
 8006fc4:	42a5      	cmp	r5, r4
 8006fc6:	d10b      	bne.n	8006fe0 <_free_r+0x70>
 8006fc8:	6824      	ldr	r4, [r4, #0]
 8006fca:	4421      	add	r1, r4
 8006fcc:	1854      	adds	r4, r2, r1
 8006fce:	42a3      	cmp	r3, r4
 8006fd0:	6011      	str	r1, [r2, #0]
 8006fd2:	d1e0      	bne.n	8006f96 <_free_r+0x26>
 8006fd4:	681c      	ldr	r4, [r3, #0]
 8006fd6:	685b      	ldr	r3, [r3, #4]
 8006fd8:	6053      	str	r3, [r2, #4]
 8006fda:	440c      	add	r4, r1
 8006fdc:	6014      	str	r4, [r2, #0]
 8006fde:	e7da      	b.n	8006f96 <_free_r+0x26>
 8006fe0:	d902      	bls.n	8006fe8 <_free_r+0x78>
 8006fe2:	230c      	movs	r3, #12
 8006fe4:	6003      	str	r3, [r0, #0]
 8006fe6:	e7d6      	b.n	8006f96 <_free_r+0x26>
 8006fe8:	6825      	ldr	r5, [r4, #0]
 8006fea:	1961      	adds	r1, r4, r5
 8006fec:	428b      	cmp	r3, r1
 8006fee:	bf04      	itt	eq
 8006ff0:	6819      	ldreq	r1, [r3, #0]
 8006ff2:	685b      	ldreq	r3, [r3, #4]
 8006ff4:	6063      	str	r3, [r4, #4]
 8006ff6:	bf04      	itt	eq
 8006ff8:	1949      	addeq	r1, r1, r5
 8006ffa:	6021      	streq	r1, [r4, #0]
 8006ffc:	6054      	str	r4, [r2, #4]
 8006ffe:	e7ca      	b.n	8006f96 <_free_r+0x26>
 8007000:	b003      	add	sp, #12
 8007002:	bd30      	pop	{r4, r5, pc}
 8007004:	2000566c 	.word	0x2000566c

08007008 <sbrk_aligned>:
 8007008:	b570      	push	{r4, r5, r6, lr}
 800700a:	4e0e      	ldr	r6, [pc, #56]	; (8007044 <sbrk_aligned+0x3c>)
 800700c:	460c      	mov	r4, r1
 800700e:	6831      	ldr	r1, [r6, #0]
 8007010:	4605      	mov	r5, r0
 8007012:	b911      	cbnz	r1, 800701a <sbrk_aligned+0x12>
 8007014:	f000 fba6 	bl	8007764 <_sbrk_r>
 8007018:	6030      	str	r0, [r6, #0]
 800701a:	4621      	mov	r1, r4
 800701c:	4628      	mov	r0, r5
 800701e:	f000 fba1 	bl	8007764 <_sbrk_r>
 8007022:	1c43      	adds	r3, r0, #1
 8007024:	d00a      	beq.n	800703c <sbrk_aligned+0x34>
 8007026:	1cc4      	adds	r4, r0, #3
 8007028:	f024 0403 	bic.w	r4, r4, #3
 800702c:	42a0      	cmp	r0, r4
 800702e:	d007      	beq.n	8007040 <sbrk_aligned+0x38>
 8007030:	1a21      	subs	r1, r4, r0
 8007032:	4628      	mov	r0, r5
 8007034:	f000 fb96 	bl	8007764 <_sbrk_r>
 8007038:	3001      	adds	r0, #1
 800703a:	d101      	bne.n	8007040 <sbrk_aligned+0x38>
 800703c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8007040:	4620      	mov	r0, r4
 8007042:	bd70      	pop	{r4, r5, r6, pc}
 8007044:	20005670 	.word	0x20005670

08007048 <_malloc_r>:
 8007048:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800704c:	1ccd      	adds	r5, r1, #3
 800704e:	f025 0503 	bic.w	r5, r5, #3
 8007052:	3508      	adds	r5, #8
 8007054:	2d0c      	cmp	r5, #12
 8007056:	bf38      	it	cc
 8007058:	250c      	movcc	r5, #12
 800705a:	2d00      	cmp	r5, #0
 800705c:	4607      	mov	r7, r0
 800705e:	db01      	blt.n	8007064 <_malloc_r+0x1c>
 8007060:	42a9      	cmp	r1, r5
 8007062:	d905      	bls.n	8007070 <_malloc_r+0x28>
 8007064:	230c      	movs	r3, #12
 8007066:	603b      	str	r3, [r7, #0]
 8007068:	2600      	movs	r6, #0
 800706a:	4630      	mov	r0, r6
 800706c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007070:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8007144 <_malloc_r+0xfc>
 8007074:	f000 f868 	bl	8007148 <__malloc_lock>
 8007078:	f8d8 3000 	ldr.w	r3, [r8]
 800707c:	461c      	mov	r4, r3
 800707e:	bb5c      	cbnz	r4, 80070d8 <_malloc_r+0x90>
 8007080:	4629      	mov	r1, r5
 8007082:	4638      	mov	r0, r7
 8007084:	f7ff ffc0 	bl	8007008 <sbrk_aligned>
 8007088:	1c43      	adds	r3, r0, #1
 800708a:	4604      	mov	r4, r0
 800708c:	d155      	bne.n	800713a <_malloc_r+0xf2>
 800708e:	f8d8 4000 	ldr.w	r4, [r8]
 8007092:	4626      	mov	r6, r4
 8007094:	2e00      	cmp	r6, #0
 8007096:	d145      	bne.n	8007124 <_malloc_r+0xdc>
 8007098:	2c00      	cmp	r4, #0
 800709a:	d048      	beq.n	800712e <_malloc_r+0xe6>
 800709c:	6823      	ldr	r3, [r4, #0]
 800709e:	4631      	mov	r1, r6
 80070a0:	4638      	mov	r0, r7
 80070a2:	eb04 0903 	add.w	r9, r4, r3
 80070a6:	f000 fb5d 	bl	8007764 <_sbrk_r>
 80070aa:	4581      	cmp	r9, r0
 80070ac:	d13f      	bne.n	800712e <_malloc_r+0xe6>
 80070ae:	6821      	ldr	r1, [r4, #0]
 80070b0:	1a6d      	subs	r5, r5, r1
 80070b2:	4629      	mov	r1, r5
 80070b4:	4638      	mov	r0, r7
 80070b6:	f7ff ffa7 	bl	8007008 <sbrk_aligned>
 80070ba:	3001      	adds	r0, #1
 80070bc:	d037      	beq.n	800712e <_malloc_r+0xe6>
 80070be:	6823      	ldr	r3, [r4, #0]
 80070c0:	442b      	add	r3, r5
 80070c2:	6023      	str	r3, [r4, #0]
 80070c4:	f8d8 3000 	ldr.w	r3, [r8]
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d038      	beq.n	800713e <_malloc_r+0xf6>
 80070cc:	685a      	ldr	r2, [r3, #4]
 80070ce:	42a2      	cmp	r2, r4
 80070d0:	d12b      	bne.n	800712a <_malloc_r+0xe2>
 80070d2:	2200      	movs	r2, #0
 80070d4:	605a      	str	r2, [r3, #4]
 80070d6:	e00f      	b.n	80070f8 <_malloc_r+0xb0>
 80070d8:	6822      	ldr	r2, [r4, #0]
 80070da:	1b52      	subs	r2, r2, r5
 80070dc:	d41f      	bmi.n	800711e <_malloc_r+0xd6>
 80070de:	2a0b      	cmp	r2, #11
 80070e0:	d917      	bls.n	8007112 <_malloc_r+0xca>
 80070e2:	1961      	adds	r1, r4, r5
 80070e4:	42a3      	cmp	r3, r4
 80070e6:	6025      	str	r5, [r4, #0]
 80070e8:	bf18      	it	ne
 80070ea:	6059      	strne	r1, [r3, #4]
 80070ec:	6863      	ldr	r3, [r4, #4]
 80070ee:	bf08      	it	eq
 80070f0:	f8c8 1000 	streq.w	r1, [r8]
 80070f4:	5162      	str	r2, [r4, r5]
 80070f6:	604b      	str	r3, [r1, #4]
 80070f8:	4638      	mov	r0, r7
 80070fa:	f104 060b 	add.w	r6, r4, #11
 80070fe:	f000 f829 	bl	8007154 <__malloc_unlock>
 8007102:	f026 0607 	bic.w	r6, r6, #7
 8007106:	1d23      	adds	r3, r4, #4
 8007108:	1af2      	subs	r2, r6, r3
 800710a:	d0ae      	beq.n	800706a <_malloc_r+0x22>
 800710c:	1b9b      	subs	r3, r3, r6
 800710e:	50a3      	str	r3, [r4, r2]
 8007110:	e7ab      	b.n	800706a <_malloc_r+0x22>
 8007112:	42a3      	cmp	r3, r4
 8007114:	6862      	ldr	r2, [r4, #4]
 8007116:	d1dd      	bne.n	80070d4 <_malloc_r+0x8c>
 8007118:	f8c8 2000 	str.w	r2, [r8]
 800711c:	e7ec      	b.n	80070f8 <_malloc_r+0xb0>
 800711e:	4623      	mov	r3, r4
 8007120:	6864      	ldr	r4, [r4, #4]
 8007122:	e7ac      	b.n	800707e <_malloc_r+0x36>
 8007124:	4634      	mov	r4, r6
 8007126:	6876      	ldr	r6, [r6, #4]
 8007128:	e7b4      	b.n	8007094 <_malloc_r+0x4c>
 800712a:	4613      	mov	r3, r2
 800712c:	e7cc      	b.n	80070c8 <_malloc_r+0x80>
 800712e:	230c      	movs	r3, #12
 8007130:	603b      	str	r3, [r7, #0]
 8007132:	4638      	mov	r0, r7
 8007134:	f000 f80e 	bl	8007154 <__malloc_unlock>
 8007138:	e797      	b.n	800706a <_malloc_r+0x22>
 800713a:	6025      	str	r5, [r4, #0]
 800713c:	e7dc      	b.n	80070f8 <_malloc_r+0xb0>
 800713e:	605b      	str	r3, [r3, #4]
 8007140:	deff      	udf	#255	; 0xff
 8007142:	bf00      	nop
 8007144:	2000566c 	.word	0x2000566c

08007148 <__malloc_lock>:
 8007148:	4801      	ldr	r0, [pc, #4]	; (8007150 <__malloc_lock+0x8>)
 800714a:	f7ff bf01 	b.w	8006f50 <__retarget_lock_acquire_recursive>
 800714e:	bf00      	nop
 8007150:	20005668 	.word	0x20005668

08007154 <__malloc_unlock>:
 8007154:	4801      	ldr	r0, [pc, #4]	; (800715c <__malloc_unlock+0x8>)
 8007156:	f7ff befc 	b.w	8006f52 <__retarget_lock_release_recursive>
 800715a:	bf00      	nop
 800715c:	20005668 	.word	0x20005668

08007160 <__ssputs_r>:
 8007160:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007164:	688e      	ldr	r6, [r1, #8]
 8007166:	461f      	mov	r7, r3
 8007168:	42be      	cmp	r6, r7
 800716a:	680b      	ldr	r3, [r1, #0]
 800716c:	4682      	mov	sl, r0
 800716e:	460c      	mov	r4, r1
 8007170:	4690      	mov	r8, r2
 8007172:	d82c      	bhi.n	80071ce <__ssputs_r+0x6e>
 8007174:	898a      	ldrh	r2, [r1, #12]
 8007176:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800717a:	d026      	beq.n	80071ca <__ssputs_r+0x6a>
 800717c:	6965      	ldr	r5, [r4, #20]
 800717e:	6909      	ldr	r1, [r1, #16]
 8007180:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007184:	eba3 0901 	sub.w	r9, r3, r1
 8007188:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800718c:	1c7b      	adds	r3, r7, #1
 800718e:	444b      	add	r3, r9
 8007190:	106d      	asrs	r5, r5, #1
 8007192:	429d      	cmp	r5, r3
 8007194:	bf38      	it	cc
 8007196:	461d      	movcc	r5, r3
 8007198:	0553      	lsls	r3, r2, #21
 800719a:	d527      	bpl.n	80071ec <__ssputs_r+0x8c>
 800719c:	4629      	mov	r1, r5
 800719e:	f7ff ff53 	bl	8007048 <_malloc_r>
 80071a2:	4606      	mov	r6, r0
 80071a4:	b360      	cbz	r0, 8007200 <__ssputs_r+0xa0>
 80071a6:	6921      	ldr	r1, [r4, #16]
 80071a8:	464a      	mov	r2, r9
 80071aa:	f7ff fed3 	bl	8006f54 <memcpy>
 80071ae:	89a3      	ldrh	r3, [r4, #12]
 80071b0:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80071b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80071b8:	81a3      	strh	r3, [r4, #12]
 80071ba:	6126      	str	r6, [r4, #16]
 80071bc:	6165      	str	r5, [r4, #20]
 80071be:	444e      	add	r6, r9
 80071c0:	eba5 0509 	sub.w	r5, r5, r9
 80071c4:	6026      	str	r6, [r4, #0]
 80071c6:	60a5      	str	r5, [r4, #8]
 80071c8:	463e      	mov	r6, r7
 80071ca:	42be      	cmp	r6, r7
 80071cc:	d900      	bls.n	80071d0 <__ssputs_r+0x70>
 80071ce:	463e      	mov	r6, r7
 80071d0:	6820      	ldr	r0, [r4, #0]
 80071d2:	4632      	mov	r2, r6
 80071d4:	4641      	mov	r1, r8
 80071d6:	f000 faab 	bl	8007730 <memmove>
 80071da:	68a3      	ldr	r3, [r4, #8]
 80071dc:	1b9b      	subs	r3, r3, r6
 80071de:	60a3      	str	r3, [r4, #8]
 80071e0:	6823      	ldr	r3, [r4, #0]
 80071e2:	4433      	add	r3, r6
 80071e4:	6023      	str	r3, [r4, #0]
 80071e6:	2000      	movs	r0, #0
 80071e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80071ec:	462a      	mov	r2, r5
 80071ee:	f000 fac9 	bl	8007784 <_realloc_r>
 80071f2:	4606      	mov	r6, r0
 80071f4:	2800      	cmp	r0, #0
 80071f6:	d1e0      	bne.n	80071ba <__ssputs_r+0x5a>
 80071f8:	6921      	ldr	r1, [r4, #16]
 80071fa:	4650      	mov	r0, sl
 80071fc:	f7ff feb8 	bl	8006f70 <_free_r>
 8007200:	230c      	movs	r3, #12
 8007202:	f8ca 3000 	str.w	r3, [sl]
 8007206:	89a3      	ldrh	r3, [r4, #12]
 8007208:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800720c:	81a3      	strh	r3, [r4, #12]
 800720e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007212:	e7e9      	b.n	80071e8 <__ssputs_r+0x88>

08007214 <_svfiprintf_r>:
 8007214:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007218:	4698      	mov	r8, r3
 800721a:	898b      	ldrh	r3, [r1, #12]
 800721c:	061b      	lsls	r3, r3, #24
 800721e:	b09d      	sub	sp, #116	; 0x74
 8007220:	4607      	mov	r7, r0
 8007222:	460d      	mov	r5, r1
 8007224:	4614      	mov	r4, r2
 8007226:	d50e      	bpl.n	8007246 <_svfiprintf_r+0x32>
 8007228:	690b      	ldr	r3, [r1, #16]
 800722a:	b963      	cbnz	r3, 8007246 <_svfiprintf_r+0x32>
 800722c:	2140      	movs	r1, #64	; 0x40
 800722e:	f7ff ff0b 	bl	8007048 <_malloc_r>
 8007232:	6028      	str	r0, [r5, #0]
 8007234:	6128      	str	r0, [r5, #16]
 8007236:	b920      	cbnz	r0, 8007242 <_svfiprintf_r+0x2e>
 8007238:	230c      	movs	r3, #12
 800723a:	603b      	str	r3, [r7, #0]
 800723c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007240:	e0d0      	b.n	80073e4 <_svfiprintf_r+0x1d0>
 8007242:	2340      	movs	r3, #64	; 0x40
 8007244:	616b      	str	r3, [r5, #20]
 8007246:	2300      	movs	r3, #0
 8007248:	9309      	str	r3, [sp, #36]	; 0x24
 800724a:	2320      	movs	r3, #32
 800724c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007250:	f8cd 800c 	str.w	r8, [sp, #12]
 8007254:	2330      	movs	r3, #48	; 0x30
 8007256:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80073fc <_svfiprintf_r+0x1e8>
 800725a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800725e:	f04f 0901 	mov.w	r9, #1
 8007262:	4623      	mov	r3, r4
 8007264:	469a      	mov	sl, r3
 8007266:	f813 2b01 	ldrb.w	r2, [r3], #1
 800726a:	b10a      	cbz	r2, 8007270 <_svfiprintf_r+0x5c>
 800726c:	2a25      	cmp	r2, #37	; 0x25
 800726e:	d1f9      	bne.n	8007264 <_svfiprintf_r+0x50>
 8007270:	ebba 0b04 	subs.w	fp, sl, r4
 8007274:	d00b      	beq.n	800728e <_svfiprintf_r+0x7a>
 8007276:	465b      	mov	r3, fp
 8007278:	4622      	mov	r2, r4
 800727a:	4629      	mov	r1, r5
 800727c:	4638      	mov	r0, r7
 800727e:	f7ff ff6f 	bl	8007160 <__ssputs_r>
 8007282:	3001      	adds	r0, #1
 8007284:	f000 80a9 	beq.w	80073da <_svfiprintf_r+0x1c6>
 8007288:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800728a:	445a      	add	r2, fp
 800728c:	9209      	str	r2, [sp, #36]	; 0x24
 800728e:	f89a 3000 	ldrb.w	r3, [sl]
 8007292:	2b00      	cmp	r3, #0
 8007294:	f000 80a1 	beq.w	80073da <_svfiprintf_r+0x1c6>
 8007298:	2300      	movs	r3, #0
 800729a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800729e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80072a2:	f10a 0a01 	add.w	sl, sl, #1
 80072a6:	9304      	str	r3, [sp, #16]
 80072a8:	9307      	str	r3, [sp, #28]
 80072aa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80072ae:	931a      	str	r3, [sp, #104]	; 0x68
 80072b0:	4654      	mov	r4, sl
 80072b2:	2205      	movs	r2, #5
 80072b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80072b8:	4850      	ldr	r0, [pc, #320]	; (80073fc <_svfiprintf_r+0x1e8>)
 80072ba:	f7f8 ffd9 	bl	8000270 <memchr>
 80072be:	9a04      	ldr	r2, [sp, #16]
 80072c0:	b9d8      	cbnz	r0, 80072fa <_svfiprintf_r+0xe6>
 80072c2:	06d0      	lsls	r0, r2, #27
 80072c4:	bf44      	itt	mi
 80072c6:	2320      	movmi	r3, #32
 80072c8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80072cc:	0711      	lsls	r1, r2, #28
 80072ce:	bf44      	itt	mi
 80072d0:	232b      	movmi	r3, #43	; 0x2b
 80072d2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80072d6:	f89a 3000 	ldrb.w	r3, [sl]
 80072da:	2b2a      	cmp	r3, #42	; 0x2a
 80072dc:	d015      	beq.n	800730a <_svfiprintf_r+0xf6>
 80072de:	9a07      	ldr	r2, [sp, #28]
 80072e0:	4654      	mov	r4, sl
 80072e2:	2000      	movs	r0, #0
 80072e4:	f04f 0c0a 	mov.w	ip, #10
 80072e8:	4621      	mov	r1, r4
 80072ea:	f811 3b01 	ldrb.w	r3, [r1], #1
 80072ee:	3b30      	subs	r3, #48	; 0x30
 80072f0:	2b09      	cmp	r3, #9
 80072f2:	d94d      	bls.n	8007390 <_svfiprintf_r+0x17c>
 80072f4:	b1b0      	cbz	r0, 8007324 <_svfiprintf_r+0x110>
 80072f6:	9207      	str	r2, [sp, #28]
 80072f8:	e014      	b.n	8007324 <_svfiprintf_r+0x110>
 80072fa:	eba0 0308 	sub.w	r3, r0, r8
 80072fe:	fa09 f303 	lsl.w	r3, r9, r3
 8007302:	4313      	orrs	r3, r2
 8007304:	9304      	str	r3, [sp, #16]
 8007306:	46a2      	mov	sl, r4
 8007308:	e7d2      	b.n	80072b0 <_svfiprintf_r+0x9c>
 800730a:	9b03      	ldr	r3, [sp, #12]
 800730c:	1d19      	adds	r1, r3, #4
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	9103      	str	r1, [sp, #12]
 8007312:	2b00      	cmp	r3, #0
 8007314:	bfbb      	ittet	lt
 8007316:	425b      	neglt	r3, r3
 8007318:	f042 0202 	orrlt.w	r2, r2, #2
 800731c:	9307      	strge	r3, [sp, #28]
 800731e:	9307      	strlt	r3, [sp, #28]
 8007320:	bfb8      	it	lt
 8007322:	9204      	strlt	r2, [sp, #16]
 8007324:	7823      	ldrb	r3, [r4, #0]
 8007326:	2b2e      	cmp	r3, #46	; 0x2e
 8007328:	d10c      	bne.n	8007344 <_svfiprintf_r+0x130>
 800732a:	7863      	ldrb	r3, [r4, #1]
 800732c:	2b2a      	cmp	r3, #42	; 0x2a
 800732e:	d134      	bne.n	800739a <_svfiprintf_r+0x186>
 8007330:	9b03      	ldr	r3, [sp, #12]
 8007332:	1d1a      	adds	r2, r3, #4
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	9203      	str	r2, [sp, #12]
 8007338:	2b00      	cmp	r3, #0
 800733a:	bfb8      	it	lt
 800733c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8007340:	3402      	adds	r4, #2
 8007342:	9305      	str	r3, [sp, #20]
 8007344:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800740c <_svfiprintf_r+0x1f8>
 8007348:	7821      	ldrb	r1, [r4, #0]
 800734a:	2203      	movs	r2, #3
 800734c:	4650      	mov	r0, sl
 800734e:	f7f8 ff8f 	bl	8000270 <memchr>
 8007352:	b138      	cbz	r0, 8007364 <_svfiprintf_r+0x150>
 8007354:	9b04      	ldr	r3, [sp, #16]
 8007356:	eba0 000a 	sub.w	r0, r0, sl
 800735a:	2240      	movs	r2, #64	; 0x40
 800735c:	4082      	lsls	r2, r0
 800735e:	4313      	orrs	r3, r2
 8007360:	3401      	adds	r4, #1
 8007362:	9304      	str	r3, [sp, #16]
 8007364:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007368:	4825      	ldr	r0, [pc, #148]	; (8007400 <_svfiprintf_r+0x1ec>)
 800736a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800736e:	2206      	movs	r2, #6
 8007370:	f7f8 ff7e 	bl	8000270 <memchr>
 8007374:	2800      	cmp	r0, #0
 8007376:	d038      	beq.n	80073ea <_svfiprintf_r+0x1d6>
 8007378:	4b22      	ldr	r3, [pc, #136]	; (8007404 <_svfiprintf_r+0x1f0>)
 800737a:	bb1b      	cbnz	r3, 80073c4 <_svfiprintf_r+0x1b0>
 800737c:	9b03      	ldr	r3, [sp, #12]
 800737e:	3307      	adds	r3, #7
 8007380:	f023 0307 	bic.w	r3, r3, #7
 8007384:	3308      	adds	r3, #8
 8007386:	9303      	str	r3, [sp, #12]
 8007388:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800738a:	4433      	add	r3, r6
 800738c:	9309      	str	r3, [sp, #36]	; 0x24
 800738e:	e768      	b.n	8007262 <_svfiprintf_r+0x4e>
 8007390:	fb0c 3202 	mla	r2, ip, r2, r3
 8007394:	460c      	mov	r4, r1
 8007396:	2001      	movs	r0, #1
 8007398:	e7a6      	b.n	80072e8 <_svfiprintf_r+0xd4>
 800739a:	2300      	movs	r3, #0
 800739c:	3401      	adds	r4, #1
 800739e:	9305      	str	r3, [sp, #20]
 80073a0:	4619      	mov	r1, r3
 80073a2:	f04f 0c0a 	mov.w	ip, #10
 80073a6:	4620      	mov	r0, r4
 80073a8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80073ac:	3a30      	subs	r2, #48	; 0x30
 80073ae:	2a09      	cmp	r2, #9
 80073b0:	d903      	bls.n	80073ba <_svfiprintf_r+0x1a6>
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d0c6      	beq.n	8007344 <_svfiprintf_r+0x130>
 80073b6:	9105      	str	r1, [sp, #20]
 80073b8:	e7c4      	b.n	8007344 <_svfiprintf_r+0x130>
 80073ba:	fb0c 2101 	mla	r1, ip, r1, r2
 80073be:	4604      	mov	r4, r0
 80073c0:	2301      	movs	r3, #1
 80073c2:	e7f0      	b.n	80073a6 <_svfiprintf_r+0x192>
 80073c4:	ab03      	add	r3, sp, #12
 80073c6:	9300      	str	r3, [sp, #0]
 80073c8:	462a      	mov	r2, r5
 80073ca:	4b0f      	ldr	r3, [pc, #60]	; (8007408 <_svfiprintf_r+0x1f4>)
 80073cc:	a904      	add	r1, sp, #16
 80073ce:	4638      	mov	r0, r7
 80073d0:	f3af 8000 	nop.w
 80073d4:	1c42      	adds	r2, r0, #1
 80073d6:	4606      	mov	r6, r0
 80073d8:	d1d6      	bne.n	8007388 <_svfiprintf_r+0x174>
 80073da:	89ab      	ldrh	r3, [r5, #12]
 80073dc:	065b      	lsls	r3, r3, #25
 80073de:	f53f af2d 	bmi.w	800723c <_svfiprintf_r+0x28>
 80073e2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80073e4:	b01d      	add	sp, #116	; 0x74
 80073e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80073ea:	ab03      	add	r3, sp, #12
 80073ec:	9300      	str	r3, [sp, #0]
 80073ee:	462a      	mov	r2, r5
 80073f0:	4b05      	ldr	r3, [pc, #20]	; (8007408 <_svfiprintf_r+0x1f4>)
 80073f2:	a904      	add	r1, sp, #16
 80073f4:	4638      	mov	r0, r7
 80073f6:	f000 f879 	bl	80074ec <_printf_i>
 80073fa:	e7eb      	b.n	80073d4 <_svfiprintf_r+0x1c0>
 80073fc:	08007988 	.word	0x08007988
 8007400:	08007992 	.word	0x08007992
 8007404:	00000000 	.word	0x00000000
 8007408:	08007161 	.word	0x08007161
 800740c:	0800798e 	.word	0x0800798e

08007410 <_printf_common>:
 8007410:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007414:	4616      	mov	r6, r2
 8007416:	4699      	mov	r9, r3
 8007418:	688a      	ldr	r2, [r1, #8]
 800741a:	690b      	ldr	r3, [r1, #16]
 800741c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007420:	4293      	cmp	r3, r2
 8007422:	bfb8      	it	lt
 8007424:	4613      	movlt	r3, r2
 8007426:	6033      	str	r3, [r6, #0]
 8007428:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800742c:	4607      	mov	r7, r0
 800742e:	460c      	mov	r4, r1
 8007430:	b10a      	cbz	r2, 8007436 <_printf_common+0x26>
 8007432:	3301      	adds	r3, #1
 8007434:	6033      	str	r3, [r6, #0]
 8007436:	6823      	ldr	r3, [r4, #0]
 8007438:	0699      	lsls	r1, r3, #26
 800743a:	bf42      	ittt	mi
 800743c:	6833      	ldrmi	r3, [r6, #0]
 800743e:	3302      	addmi	r3, #2
 8007440:	6033      	strmi	r3, [r6, #0]
 8007442:	6825      	ldr	r5, [r4, #0]
 8007444:	f015 0506 	ands.w	r5, r5, #6
 8007448:	d106      	bne.n	8007458 <_printf_common+0x48>
 800744a:	f104 0a19 	add.w	sl, r4, #25
 800744e:	68e3      	ldr	r3, [r4, #12]
 8007450:	6832      	ldr	r2, [r6, #0]
 8007452:	1a9b      	subs	r3, r3, r2
 8007454:	42ab      	cmp	r3, r5
 8007456:	dc26      	bgt.n	80074a6 <_printf_common+0x96>
 8007458:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800745c:	1e13      	subs	r3, r2, #0
 800745e:	6822      	ldr	r2, [r4, #0]
 8007460:	bf18      	it	ne
 8007462:	2301      	movne	r3, #1
 8007464:	0692      	lsls	r2, r2, #26
 8007466:	d42b      	bmi.n	80074c0 <_printf_common+0xb0>
 8007468:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800746c:	4649      	mov	r1, r9
 800746e:	4638      	mov	r0, r7
 8007470:	47c0      	blx	r8
 8007472:	3001      	adds	r0, #1
 8007474:	d01e      	beq.n	80074b4 <_printf_common+0xa4>
 8007476:	6823      	ldr	r3, [r4, #0]
 8007478:	6922      	ldr	r2, [r4, #16]
 800747a:	f003 0306 	and.w	r3, r3, #6
 800747e:	2b04      	cmp	r3, #4
 8007480:	bf02      	ittt	eq
 8007482:	68e5      	ldreq	r5, [r4, #12]
 8007484:	6833      	ldreq	r3, [r6, #0]
 8007486:	1aed      	subeq	r5, r5, r3
 8007488:	68a3      	ldr	r3, [r4, #8]
 800748a:	bf0c      	ite	eq
 800748c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007490:	2500      	movne	r5, #0
 8007492:	4293      	cmp	r3, r2
 8007494:	bfc4      	itt	gt
 8007496:	1a9b      	subgt	r3, r3, r2
 8007498:	18ed      	addgt	r5, r5, r3
 800749a:	2600      	movs	r6, #0
 800749c:	341a      	adds	r4, #26
 800749e:	42b5      	cmp	r5, r6
 80074a0:	d11a      	bne.n	80074d8 <_printf_common+0xc8>
 80074a2:	2000      	movs	r0, #0
 80074a4:	e008      	b.n	80074b8 <_printf_common+0xa8>
 80074a6:	2301      	movs	r3, #1
 80074a8:	4652      	mov	r2, sl
 80074aa:	4649      	mov	r1, r9
 80074ac:	4638      	mov	r0, r7
 80074ae:	47c0      	blx	r8
 80074b0:	3001      	adds	r0, #1
 80074b2:	d103      	bne.n	80074bc <_printf_common+0xac>
 80074b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80074b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80074bc:	3501      	adds	r5, #1
 80074be:	e7c6      	b.n	800744e <_printf_common+0x3e>
 80074c0:	18e1      	adds	r1, r4, r3
 80074c2:	1c5a      	adds	r2, r3, #1
 80074c4:	2030      	movs	r0, #48	; 0x30
 80074c6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80074ca:	4422      	add	r2, r4
 80074cc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80074d0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80074d4:	3302      	adds	r3, #2
 80074d6:	e7c7      	b.n	8007468 <_printf_common+0x58>
 80074d8:	2301      	movs	r3, #1
 80074da:	4622      	mov	r2, r4
 80074dc:	4649      	mov	r1, r9
 80074de:	4638      	mov	r0, r7
 80074e0:	47c0      	blx	r8
 80074e2:	3001      	adds	r0, #1
 80074e4:	d0e6      	beq.n	80074b4 <_printf_common+0xa4>
 80074e6:	3601      	adds	r6, #1
 80074e8:	e7d9      	b.n	800749e <_printf_common+0x8e>
	...

080074ec <_printf_i>:
 80074ec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80074f0:	7e0f      	ldrb	r7, [r1, #24]
 80074f2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80074f4:	2f78      	cmp	r7, #120	; 0x78
 80074f6:	4691      	mov	r9, r2
 80074f8:	4680      	mov	r8, r0
 80074fa:	460c      	mov	r4, r1
 80074fc:	469a      	mov	sl, r3
 80074fe:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007502:	d807      	bhi.n	8007514 <_printf_i+0x28>
 8007504:	2f62      	cmp	r7, #98	; 0x62
 8007506:	d80a      	bhi.n	800751e <_printf_i+0x32>
 8007508:	2f00      	cmp	r7, #0
 800750a:	f000 80d4 	beq.w	80076b6 <_printf_i+0x1ca>
 800750e:	2f58      	cmp	r7, #88	; 0x58
 8007510:	f000 80c0 	beq.w	8007694 <_printf_i+0x1a8>
 8007514:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007518:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800751c:	e03a      	b.n	8007594 <_printf_i+0xa8>
 800751e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007522:	2b15      	cmp	r3, #21
 8007524:	d8f6      	bhi.n	8007514 <_printf_i+0x28>
 8007526:	a101      	add	r1, pc, #4	; (adr r1, 800752c <_printf_i+0x40>)
 8007528:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800752c:	08007585 	.word	0x08007585
 8007530:	08007599 	.word	0x08007599
 8007534:	08007515 	.word	0x08007515
 8007538:	08007515 	.word	0x08007515
 800753c:	08007515 	.word	0x08007515
 8007540:	08007515 	.word	0x08007515
 8007544:	08007599 	.word	0x08007599
 8007548:	08007515 	.word	0x08007515
 800754c:	08007515 	.word	0x08007515
 8007550:	08007515 	.word	0x08007515
 8007554:	08007515 	.word	0x08007515
 8007558:	0800769d 	.word	0x0800769d
 800755c:	080075c5 	.word	0x080075c5
 8007560:	08007657 	.word	0x08007657
 8007564:	08007515 	.word	0x08007515
 8007568:	08007515 	.word	0x08007515
 800756c:	080076bf 	.word	0x080076bf
 8007570:	08007515 	.word	0x08007515
 8007574:	080075c5 	.word	0x080075c5
 8007578:	08007515 	.word	0x08007515
 800757c:	08007515 	.word	0x08007515
 8007580:	0800765f 	.word	0x0800765f
 8007584:	682b      	ldr	r3, [r5, #0]
 8007586:	1d1a      	adds	r2, r3, #4
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	602a      	str	r2, [r5, #0]
 800758c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007590:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007594:	2301      	movs	r3, #1
 8007596:	e09f      	b.n	80076d8 <_printf_i+0x1ec>
 8007598:	6820      	ldr	r0, [r4, #0]
 800759a:	682b      	ldr	r3, [r5, #0]
 800759c:	0607      	lsls	r7, r0, #24
 800759e:	f103 0104 	add.w	r1, r3, #4
 80075a2:	6029      	str	r1, [r5, #0]
 80075a4:	d501      	bpl.n	80075aa <_printf_i+0xbe>
 80075a6:	681e      	ldr	r6, [r3, #0]
 80075a8:	e003      	b.n	80075b2 <_printf_i+0xc6>
 80075aa:	0646      	lsls	r6, r0, #25
 80075ac:	d5fb      	bpl.n	80075a6 <_printf_i+0xba>
 80075ae:	f9b3 6000 	ldrsh.w	r6, [r3]
 80075b2:	2e00      	cmp	r6, #0
 80075b4:	da03      	bge.n	80075be <_printf_i+0xd2>
 80075b6:	232d      	movs	r3, #45	; 0x2d
 80075b8:	4276      	negs	r6, r6
 80075ba:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80075be:	485a      	ldr	r0, [pc, #360]	; (8007728 <_printf_i+0x23c>)
 80075c0:	230a      	movs	r3, #10
 80075c2:	e012      	b.n	80075ea <_printf_i+0xfe>
 80075c4:	682b      	ldr	r3, [r5, #0]
 80075c6:	6820      	ldr	r0, [r4, #0]
 80075c8:	1d19      	adds	r1, r3, #4
 80075ca:	6029      	str	r1, [r5, #0]
 80075cc:	0605      	lsls	r5, r0, #24
 80075ce:	d501      	bpl.n	80075d4 <_printf_i+0xe8>
 80075d0:	681e      	ldr	r6, [r3, #0]
 80075d2:	e002      	b.n	80075da <_printf_i+0xee>
 80075d4:	0641      	lsls	r1, r0, #25
 80075d6:	d5fb      	bpl.n	80075d0 <_printf_i+0xe4>
 80075d8:	881e      	ldrh	r6, [r3, #0]
 80075da:	4853      	ldr	r0, [pc, #332]	; (8007728 <_printf_i+0x23c>)
 80075dc:	2f6f      	cmp	r7, #111	; 0x6f
 80075de:	bf0c      	ite	eq
 80075e0:	2308      	moveq	r3, #8
 80075e2:	230a      	movne	r3, #10
 80075e4:	2100      	movs	r1, #0
 80075e6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80075ea:	6865      	ldr	r5, [r4, #4]
 80075ec:	60a5      	str	r5, [r4, #8]
 80075ee:	2d00      	cmp	r5, #0
 80075f0:	bfa2      	ittt	ge
 80075f2:	6821      	ldrge	r1, [r4, #0]
 80075f4:	f021 0104 	bicge.w	r1, r1, #4
 80075f8:	6021      	strge	r1, [r4, #0]
 80075fa:	b90e      	cbnz	r6, 8007600 <_printf_i+0x114>
 80075fc:	2d00      	cmp	r5, #0
 80075fe:	d04b      	beq.n	8007698 <_printf_i+0x1ac>
 8007600:	4615      	mov	r5, r2
 8007602:	fbb6 f1f3 	udiv	r1, r6, r3
 8007606:	fb03 6711 	mls	r7, r3, r1, r6
 800760a:	5dc7      	ldrb	r7, [r0, r7]
 800760c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007610:	4637      	mov	r7, r6
 8007612:	42bb      	cmp	r3, r7
 8007614:	460e      	mov	r6, r1
 8007616:	d9f4      	bls.n	8007602 <_printf_i+0x116>
 8007618:	2b08      	cmp	r3, #8
 800761a:	d10b      	bne.n	8007634 <_printf_i+0x148>
 800761c:	6823      	ldr	r3, [r4, #0]
 800761e:	07de      	lsls	r6, r3, #31
 8007620:	d508      	bpl.n	8007634 <_printf_i+0x148>
 8007622:	6923      	ldr	r3, [r4, #16]
 8007624:	6861      	ldr	r1, [r4, #4]
 8007626:	4299      	cmp	r1, r3
 8007628:	bfde      	ittt	le
 800762a:	2330      	movle	r3, #48	; 0x30
 800762c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007630:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8007634:	1b52      	subs	r2, r2, r5
 8007636:	6122      	str	r2, [r4, #16]
 8007638:	f8cd a000 	str.w	sl, [sp]
 800763c:	464b      	mov	r3, r9
 800763e:	aa03      	add	r2, sp, #12
 8007640:	4621      	mov	r1, r4
 8007642:	4640      	mov	r0, r8
 8007644:	f7ff fee4 	bl	8007410 <_printf_common>
 8007648:	3001      	adds	r0, #1
 800764a:	d14a      	bne.n	80076e2 <_printf_i+0x1f6>
 800764c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007650:	b004      	add	sp, #16
 8007652:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007656:	6823      	ldr	r3, [r4, #0]
 8007658:	f043 0320 	orr.w	r3, r3, #32
 800765c:	6023      	str	r3, [r4, #0]
 800765e:	4833      	ldr	r0, [pc, #204]	; (800772c <_printf_i+0x240>)
 8007660:	2778      	movs	r7, #120	; 0x78
 8007662:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007666:	6823      	ldr	r3, [r4, #0]
 8007668:	6829      	ldr	r1, [r5, #0]
 800766a:	061f      	lsls	r7, r3, #24
 800766c:	f851 6b04 	ldr.w	r6, [r1], #4
 8007670:	d402      	bmi.n	8007678 <_printf_i+0x18c>
 8007672:	065f      	lsls	r7, r3, #25
 8007674:	bf48      	it	mi
 8007676:	b2b6      	uxthmi	r6, r6
 8007678:	07df      	lsls	r7, r3, #31
 800767a:	bf48      	it	mi
 800767c:	f043 0320 	orrmi.w	r3, r3, #32
 8007680:	6029      	str	r1, [r5, #0]
 8007682:	bf48      	it	mi
 8007684:	6023      	strmi	r3, [r4, #0]
 8007686:	b91e      	cbnz	r6, 8007690 <_printf_i+0x1a4>
 8007688:	6823      	ldr	r3, [r4, #0]
 800768a:	f023 0320 	bic.w	r3, r3, #32
 800768e:	6023      	str	r3, [r4, #0]
 8007690:	2310      	movs	r3, #16
 8007692:	e7a7      	b.n	80075e4 <_printf_i+0xf8>
 8007694:	4824      	ldr	r0, [pc, #144]	; (8007728 <_printf_i+0x23c>)
 8007696:	e7e4      	b.n	8007662 <_printf_i+0x176>
 8007698:	4615      	mov	r5, r2
 800769a:	e7bd      	b.n	8007618 <_printf_i+0x12c>
 800769c:	682b      	ldr	r3, [r5, #0]
 800769e:	6826      	ldr	r6, [r4, #0]
 80076a0:	6961      	ldr	r1, [r4, #20]
 80076a2:	1d18      	adds	r0, r3, #4
 80076a4:	6028      	str	r0, [r5, #0]
 80076a6:	0635      	lsls	r5, r6, #24
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	d501      	bpl.n	80076b0 <_printf_i+0x1c4>
 80076ac:	6019      	str	r1, [r3, #0]
 80076ae:	e002      	b.n	80076b6 <_printf_i+0x1ca>
 80076b0:	0670      	lsls	r0, r6, #25
 80076b2:	d5fb      	bpl.n	80076ac <_printf_i+0x1c0>
 80076b4:	8019      	strh	r1, [r3, #0]
 80076b6:	2300      	movs	r3, #0
 80076b8:	6123      	str	r3, [r4, #16]
 80076ba:	4615      	mov	r5, r2
 80076bc:	e7bc      	b.n	8007638 <_printf_i+0x14c>
 80076be:	682b      	ldr	r3, [r5, #0]
 80076c0:	1d1a      	adds	r2, r3, #4
 80076c2:	602a      	str	r2, [r5, #0]
 80076c4:	681d      	ldr	r5, [r3, #0]
 80076c6:	6862      	ldr	r2, [r4, #4]
 80076c8:	2100      	movs	r1, #0
 80076ca:	4628      	mov	r0, r5
 80076cc:	f7f8 fdd0 	bl	8000270 <memchr>
 80076d0:	b108      	cbz	r0, 80076d6 <_printf_i+0x1ea>
 80076d2:	1b40      	subs	r0, r0, r5
 80076d4:	6060      	str	r0, [r4, #4]
 80076d6:	6863      	ldr	r3, [r4, #4]
 80076d8:	6123      	str	r3, [r4, #16]
 80076da:	2300      	movs	r3, #0
 80076dc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80076e0:	e7aa      	b.n	8007638 <_printf_i+0x14c>
 80076e2:	6923      	ldr	r3, [r4, #16]
 80076e4:	462a      	mov	r2, r5
 80076e6:	4649      	mov	r1, r9
 80076e8:	4640      	mov	r0, r8
 80076ea:	47d0      	blx	sl
 80076ec:	3001      	adds	r0, #1
 80076ee:	d0ad      	beq.n	800764c <_printf_i+0x160>
 80076f0:	6823      	ldr	r3, [r4, #0]
 80076f2:	079b      	lsls	r3, r3, #30
 80076f4:	d413      	bmi.n	800771e <_printf_i+0x232>
 80076f6:	68e0      	ldr	r0, [r4, #12]
 80076f8:	9b03      	ldr	r3, [sp, #12]
 80076fa:	4298      	cmp	r0, r3
 80076fc:	bfb8      	it	lt
 80076fe:	4618      	movlt	r0, r3
 8007700:	e7a6      	b.n	8007650 <_printf_i+0x164>
 8007702:	2301      	movs	r3, #1
 8007704:	4632      	mov	r2, r6
 8007706:	4649      	mov	r1, r9
 8007708:	4640      	mov	r0, r8
 800770a:	47d0      	blx	sl
 800770c:	3001      	adds	r0, #1
 800770e:	d09d      	beq.n	800764c <_printf_i+0x160>
 8007710:	3501      	adds	r5, #1
 8007712:	68e3      	ldr	r3, [r4, #12]
 8007714:	9903      	ldr	r1, [sp, #12]
 8007716:	1a5b      	subs	r3, r3, r1
 8007718:	42ab      	cmp	r3, r5
 800771a:	dcf2      	bgt.n	8007702 <_printf_i+0x216>
 800771c:	e7eb      	b.n	80076f6 <_printf_i+0x20a>
 800771e:	2500      	movs	r5, #0
 8007720:	f104 0619 	add.w	r6, r4, #25
 8007724:	e7f5      	b.n	8007712 <_printf_i+0x226>
 8007726:	bf00      	nop
 8007728:	08007999 	.word	0x08007999
 800772c:	080079aa 	.word	0x080079aa

08007730 <memmove>:
 8007730:	4288      	cmp	r0, r1
 8007732:	b510      	push	{r4, lr}
 8007734:	eb01 0402 	add.w	r4, r1, r2
 8007738:	d902      	bls.n	8007740 <memmove+0x10>
 800773a:	4284      	cmp	r4, r0
 800773c:	4623      	mov	r3, r4
 800773e:	d807      	bhi.n	8007750 <memmove+0x20>
 8007740:	1e43      	subs	r3, r0, #1
 8007742:	42a1      	cmp	r1, r4
 8007744:	d008      	beq.n	8007758 <memmove+0x28>
 8007746:	f811 2b01 	ldrb.w	r2, [r1], #1
 800774a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800774e:	e7f8      	b.n	8007742 <memmove+0x12>
 8007750:	4402      	add	r2, r0
 8007752:	4601      	mov	r1, r0
 8007754:	428a      	cmp	r2, r1
 8007756:	d100      	bne.n	800775a <memmove+0x2a>
 8007758:	bd10      	pop	{r4, pc}
 800775a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800775e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007762:	e7f7      	b.n	8007754 <memmove+0x24>

08007764 <_sbrk_r>:
 8007764:	b538      	push	{r3, r4, r5, lr}
 8007766:	4d06      	ldr	r5, [pc, #24]	; (8007780 <_sbrk_r+0x1c>)
 8007768:	2300      	movs	r3, #0
 800776a:	4604      	mov	r4, r0
 800776c:	4608      	mov	r0, r1
 800776e:	602b      	str	r3, [r5, #0]
 8007770:	f7f9 f81c 	bl	80007ac <_sbrk>
 8007774:	1c43      	adds	r3, r0, #1
 8007776:	d102      	bne.n	800777e <_sbrk_r+0x1a>
 8007778:	682b      	ldr	r3, [r5, #0]
 800777a:	b103      	cbz	r3, 800777e <_sbrk_r+0x1a>
 800777c:	6023      	str	r3, [r4, #0]
 800777e:	bd38      	pop	{r3, r4, r5, pc}
 8007780:	20005664 	.word	0x20005664

08007784 <_realloc_r>:
 8007784:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007788:	4680      	mov	r8, r0
 800778a:	4614      	mov	r4, r2
 800778c:	460e      	mov	r6, r1
 800778e:	b921      	cbnz	r1, 800779a <_realloc_r+0x16>
 8007790:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007794:	4611      	mov	r1, r2
 8007796:	f7ff bc57 	b.w	8007048 <_malloc_r>
 800779a:	b92a      	cbnz	r2, 80077a8 <_realloc_r+0x24>
 800779c:	f7ff fbe8 	bl	8006f70 <_free_r>
 80077a0:	4625      	mov	r5, r4
 80077a2:	4628      	mov	r0, r5
 80077a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80077a8:	f000 f81b 	bl	80077e2 <_malloc_usable_size_r>
 80077ac:	4284      	cmp	r4, r0
 80077ae:	4607      	mov	r7, r0
 80077b0:	d802      	bhi.n	80077b8 <_realloc_r+0x34>
 80077b2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80077b6:	d812      	bhi.n	80077de <_realloc_r+0x5a>
 80077b8:	4621      	mov	r1, r4
 80077ba:	4640      	mov	r0, r8
 80077bc:	f7ff fc44 	bl	8007048 <_malloc_r>
 80077c0:	4605      	mov	r5, r0
 80077c2:	2800      	cmp	r0, #0
 80077c4:	d0ed      	beq.n	80077a2 <_realloc_r+0x1e>
 80077c6:	42bc      	cmp	r4, r7
 80077c8:	4622      	mov	r2, r4
 80077ca:	4631      	mov	r1, r6
 80077cc:	bf28      	it	cs
 80077ce:	463a      	movcs	r2, r7
 80077d0:	f7ff fbc0 	bl	8006f54 <memcpy>
 80077d4:	4631      	mov	r1, r6
 80077d6:	4640      	mov	r0, r8
 80077d8:	f7ff fbca 	bl	8006f70 <_free_r>
 80077dc:	e7e1      	b.n	80077a2 <_realloc_r+0x1e>
 80077de:	4635      	mov	r5, r6
 80077e0:	e7df      	b.n	80077a2 <_realloc_r+0x1e>

080077e2 <_malloc_usable_size_r>:
 80077e2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80077e6:	1f18      	subs	r0, r3, #4
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	bfbc      	itt	lt
 80077ec:	580b      	ldrlt	r3, [r1, r0]
 80077ee:	18c0      	addlt	r0, r0, r3
 80077f0:	4770      	bx	lr
	...

080077f4 <_init>:
 80077f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80077f6:	bf00      	nop
 80077f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80077fa:	bc08      	pop	{r3}
 80077fc:	469e      	mov	lr, r3
 80077fe:	4770      	bx	lr

08007800 <_fini>:
 8007800:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007802:	bf00      	nop
 8007804:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007806:	bc08      	pop	{r3}
 8007808:	469e      	mov	lr, r3
 800780a:	4770      	bx	lr
