
LED_BUTTON_task_notify.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007598  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001fc  08007728  08007728  00017728  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007924  08007924  00020014  2**0
                  CONTENTS
  4 .ARM          00000000  08007924  08007924  00020014  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007924  08007924  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007924  08007924  00017924  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007928  08007928  00017928  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  0800792c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020014  2**0
                  CONTENTS
 10 .bss          000084d8  20000014  20000014  00020014  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200084ec  200084ec  00020014  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY
 14 .debug_info   00013e30  00000000  00000000  00020087  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00002f10  00000000  00000000  00033eb7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001310  00000000  00000000  00036dc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000ea9  00000000  00000000  000380d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002019b  00000000  00000000  00038f81  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00015a0d  00000000  00000000  0005911c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000c1953  00000000  00000000  0006eb29  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00004fac  00000000  00000000  0013047c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 000000fb  00000000  00000000  00135428  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000014 	.word	0x20000014
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007710 	.word	0x08007710

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000018 	.word	0x20000018
 80001cc:	08007710 	.word	0x08007710

080001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001d0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001d2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001d6:	f8df 0088 	ldr.w	r0, [pc, #136]	; 8000260 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001da:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001de:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 80001e2:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 80001e4:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 80001e6:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 80001e8:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 80001ea:	d332      	bcc.n	8000252 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 80001ec:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 80001ee:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 80001f0:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 80001f2:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 80001f4:	d314      	bcc.n	8000220 <_CheckCase2>

080001f6 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 80001f6:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 80001f8:	19d0      	adds	r0, r2, r7
 80001fa:	bf00      	nop

080001fc <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 80001fc:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000200:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000204:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000206:	d005      	beq.n	8000214 <_CSDone>
        LDRB     R3,[R1], #+1
 8000208:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800020c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000210:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000212:	d1f3      	bne.n	80001fc <_LoopCopyStraight>

08000214 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000214:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000218:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800021a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800021c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800021e:	4770      	bx	lr

08000220 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000220:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000222:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000224:	d319      	bcc.n	800025a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000226:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000228:	1b12      	subs	r2, r2, r4

0800022a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800022a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800022e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000232:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000234:	d1f9      	bne.n	800022a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000236:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000238:	d005      	beq.n	8000246 <_No2ChunkNeeded>

0800023a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800023a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800023e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000242:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000244:	d1f9      	bne.n	800023a <_LoopCopyAfterWrapAround>

08000246 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000246:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800024a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800024c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800024e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000250:	4770      	bx	lr

08000252 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000252:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000254:	3801      	subs	r0, #1
        CMP      R0,R2
 8000256:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000258:	d2cd      	bcs.n	80001f6 <_Case4>

0800025a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800025a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800025c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800025e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000260:	20003f18 	.word	0x20003f18

08000264 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000264:	b580      	push	{r7, lr}
 8000266:	b088      	sub	sp, #32
 8000268:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800026a:	f000 fb6b 	bl	8000944 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800026e:	f000 f89b 	bl	80003a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000272:	f000 f8db 	bl	800042c <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  DWT_CTRL |= (1 << 0);
 8000276:	4b3a      	ldr	r3, [pc, #232]	; (8000360 <main+0xfc>)
 8000278:	681b      	ldr	r3, [r3, #0]
 800027a:	4a39      	ldr	r2, [pc, #228]	; (8000360 <main+0xfc>)
 800027c:	f043 0301 	orr.w	r3, r3, #1
 8000280:	6013      	str	r3, [r2, #0]


  SEGGER_SYSVIEW_Conf();
 8000282:	f005 f8f5 	bl	8005470 <SEGGER_SYSVIEW_Conf>

  SEGGER_SYSVIEW_Start();
 8000286:	f006 fc79 	bl	8006b7c <SEGGER_SYSVIEW_Start>

  Status = xTaskCreate(toggle_GREEN_handler, "Toggle GREEN LED", 200, "GREEN LED toggled", 3, &toggle_GREEN_handle );
 800028a:	4b36      	ldr	r3, [pc, #216]	; (8000364 <main+0x100>)
 800028c:	9301      	str	r3, [sp, #4]
 800028e:	2303      	movs	r3, #3
 8000290:	9300      	str	r3, [sp, #0]
 8000292:	4b35      	ldr	r3, [pc, #212]	; (8000368 <main+0x104>)
 8000294:	22c8      	movs	r2, #200	; 0xc8
 8000296:	4935      	ldr	r1, [pc, #212]	; (800036c <main+0x108>)
 8000298:	4835      	ldr	r0, [pc, #212]	; (8000370 <main+0x10c>)
 800029a:	f002 ff59 	bl	8003150 <xTaskCreate>
 800029e:	6178      	str	r0, [r7, #20]
  configASSERT(Status == pdPASS);
 80002a0:	697b      	ldr	r3, [r7, #20]
 80002a2:	2b01      	cmp	r3, #1
 80002a4:	d00a      	beq.n	80002bc <main+0x58>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 80002a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80002aa:	f383 8811 	msr	BASEPRI, r3
 80002ae:	f3bf 8f6f 	isb	sy
 80002b2:	f3bf 8f4f 	dsb	sy
 80002b6:	613b      	str	r3, [r7, #16]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 80002b8:	bf00      	nop
 80002ba:	e7fe      	b.n	80002ba <main+0x56>

  next_task_handle = toggle_GREEN_handle;
 80002bc:	4b29      	ldr	r3, [pc, #164]	; (8000364 <main+0x100>)
 80002be:	681b      	ldr	r3, [r3, #0]
 80002c0:	4a2c      	ldr	r2, [pc, #176]	; (8000374 <main+0x110>)
 80002c2:	6013      	str	r3, [r2, #0]

  Status = xTaskCreate(toggle_BLUE_handler, "Toggle BLUE LED", 200, "BLUE LED toggled", 2, &toggle_BLUE_handle );
 80002c4:	4b2c      	ldr	r3, [pc, #176]	; (8000378 <main+0x114>)
 80002c6:	9301      	str	r3, [sp, #4]
 80002c8:	2302      	movs	r3, #2
 80002ca:	9300      	str	r3, [sp, #0]
 80002cc:	4b2b      	ldr	r3, [pc, #172]	; (800037c <main+0x118>)
 80002ce:	22c8      	movs	r2, #200	; 0xc8
 80002d0:	492b      	ldr	r1, [pc, #172]	; (8000380 <main+0x11c>)
 80002d2:	482c      	ldr	r0, [pc, #176]	; (8000384 <main+0x120>)
 80002d4:	f002 ff3c 	bl	8003150 <xTaskCreate>
 80002d8:	6178      	str	r0, [r7, #20]
  configASSERT(Status == pdPASS);
 80002da:	697b      	ldr	r3, [r7, #20]
 80002dc:	2b01      	cmp	r3, #1
 80002de:	d00a      	beq.n	80002f6 <main+0x92>
        __asm volatile
 80002e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80002e4:	f383 8811 	msr	BASEPRI, r3
 80002e8:	f3bf 8f6f 	isb	sy
 80002ec:	f3bf 8f4f 	dsb	sy
 80002f0:	60fb      	str	r3, [r7, #12]
    }
 80002f2:	bf00      	nop
 80002f4:	e7fe      	b.n	80002f4 <main+0x90>

  Status = xTaskCreate(toggle_RED_handler, "Toggle RED LED", 200, "RED LED toggled", 1, &toggle_RED_handle );
 80002f6:	4b24      	ldr	r3, [pc, #144]	; (8000388 <main+0x124>)
 80002f8:	9301      	str	r3, [sp, #4]
 80002fa:	2301      	movs	r3, #1
 80002fc:	9300      	str	r3, [sp, #0]
 80002fe:	4b23      	ldr	r3, [pc, #140]	; (800038c <main+0x128>)
 8000300:	22c8      	movs	r2, #200	; 0xc8
 8000302:	4923      	ldr	r1, [pc, #140]	; (8000390 <main+0x12c>)
 8000304:	4823      	ldr	r0, [pc, #140]	; (8000394 <main+0x130>)
 8000306:	f002 ff23 	bl	8003150 <xTaskCreate>
 800030a:	6178      	str	r0, [r7, #20]
  configASSERT(Status == pdPASS);
 800030c:	697b      	ldr	r3, [r7, #20]
 800030e:	2b01      	cmp	r3, #1
 8000310:	d00a      	beq.n	8000328 <main+0xc4>
        __asm volatile
 8000312:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000316:	f383 8811 	msr	BASEPRI, r3
 800031a:	f3bf 8f6f 	isb	sy
 800031e:	f3bf 8f4f 	dsb	sy
 8000322:	60bb      	str	r3, [r7, #8]
    }
 8000324:	bf00      	nop
 8000326:	e7fe      	b.n	8000326 <main+0xc2>

  Status = xTaskCreate(button_press_handler, "Button task", 200, "Button pressed", 4, &BTN_task_handle );
 8000328:	4b1b      	ldr	r3, [pc, #108]	; (8000398 <main+0x134>)
 800032a:	9301      	str	r3, [sp, #4]
 800032c:	2304      	movs	r3, #4
 800032e:	9300      	str	r3, [sp, #0]
 8000330:	4b1a      	ldr	r3, [pc, #104]	; (800039c <main+0x138>)
 8000332:	22c8      	movs	r2, #200	; 0xc8
 8000334:	491a      	ldr	r1, [pc, #104]	; (80003a0 <main+0x13c>)
 8000336:	481b      	ldr	r0, [pc, #108]	; (80003a4 <main+0x140>)
 8000338:	f002 ff0a 	bl	8003150 <xTaskCreate>
 800033c:	6178      	str	r0, [r7, #20]
  configASSERT(Status == pdPASS);
 800033e:	697b      	ldr	r3, [r7, #20]
 8000340:	2b01      	cmp	r3, #1
 8000342:	d00a      	beq.n	800035a <main+0xf6>
        __asm volatile
 8000344:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000348:	f383 8811 	msr	BASEPRI, r3
 800034c:	f3bf 8f6f 	isb	sy
 8000350:	f3bf 8f4f 	dsb	sy
 8000354:	607b      	str	r3, [r7, #4]
    }
 8000356:	bf00      	nop
 8000358:	e7fe      	b.n	8000358 <main+0xf4>

  //START SCHEDULER
  vTaskStartScheduler();
 800035a:	f003 f967 	bl	800362c <vTaskStartScheduler>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800035e:	e7fe      	b.n	800035e <main+0xfa>
 8000360:	e0001000 	.word	0xe0001000
 8000364:	20000034 	.word	0x20000034
 8000368:	08007728 	.word	0x08007728
 800036c:	0800773c 	.word	0x0800773c
 8000370:	08000595 	.word	0x08000595
 8000374:	20000030 	.word	0x20000030
 8000378:	20000038 	.word	0x20000038
 800037c:	08007750 	.word	0x08007750
 8000380:	08007764 	.word	0x08007764
 8000384:	080005fd 	.word	0x080005fd
 8000388:	2000003c 	.word	0x2000003c
 800038c:	08007774 	.word	0x08007774
 8000390:	08007784 	.word	0x08007784
 8000394:	08000665 	.word	0x08000665
 8000398:	20000040 	.word	0x20000040
 800039c:	08007794 	.word	0x08007794
 80003a0:	080077a4 	.word	0x080077a4
 80003a4:	080006d5 	.word	0x080006d5

080003a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80003a8:	b580      	push	{r7, lr}
 80003aa:	b090      	sub	sp, #64	; 0x40
 80003ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003ae:	f107 0318 	add.w	r3, r7, #24
 80003b2:	2228      	movs	r2, #40	; 0x28
 80003b4:	2100      	movs	r1, #0
 80003b6:	4618      	mov	r0, r3
 80003b8:	f007 f970 	bl	800769c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003bc:	1d3b      	adds	r3, r7, #4
 80003be:	2200      	movs	r2, #0
 80003c0:	601a      	str	r2, [r3, #0]
 80003c2:	605a      	str	r2, [r3, #4]
 80003c4:	609a      	str	r2, [r3, #8]
 80003c6:	60da      	str	r2, [r3, #12]
 80003c8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80003ca:	2302      	movs	r3, #2
 80003cc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80003ce:	2301      	movs	r3, #1
 80003d0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80003d2:	2310      	movs	r3, #16
 80003d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80003d6:	2302      	movs	r3, #2
 80003d8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80003da:	2300      	movs	r3, #0
 80003dc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 80003de:	f44f 1320 	mov.w	r3, #2621440	; 0x280000
 80003e2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003e4:	f107 0318 	add.w	r3, r7, #24
 80003e8:	4618      	mov	r0, r3
 80003ea:	f000 fd87 	bl	8000efc <HAL_RCC_OscConfig>
 80003ee:	4603      	mov	r3, r0
 80003f0:	2b00      	cmp	r3, #0
 80003f2:	d001      	beq.n	80003f8 <SystemClock_Config+0x50>
  {
    Error_Handler();
 80003f4:	f000 f9a6 	bl	8000744 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003f8:	230f      	movs	r3, #15
 80003fa:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80003fc:	2302      	movs	r3, #2
 80003fe:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000400:	2300      	movs	r3, #0
 8000402:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000404:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000408:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800040a:	2300      	movs	r3, #0
 800040c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800040e:	1d3b      	adds	r3, r7, #4
 8000410:	2101      	movs	r1, #1
 8000412:	4618      	mov	r0, r3
 8000414:	f001 fdb0 	bl	8001f78 <HAL_RCC_ClockConfig>
 8000418:	4603      	mov	r3, r0
 800041a:	2b00      	cmp	r3, #0
 800041c:	d001      	beq.n	8000422 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 800041e:	f000 f991 	bl	8000744 <Error_Handler>
  }
}
 8000422:	bf00      	nop
 8000424:	3740      	adds	r7, #64	; 0x40
 8000426:	46bd      	mov	sp, r7
 8000428:	bd80      	pop	{r7, pc}
	...

0800042c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800042c:	b580      	push	{r7, lr}
 800042e:	b08a      	sub	sp, #40	; 0x28
 8000430:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000432:	f107 0314 	add.w	r3, r7, #20
 8000436:	2200      	movs	r2, #0
 8000438:	601a      	str	r2, [r3, #0]
 800043a:	605a      	str	r2, [r3, #4]
 800043c:	609a      	str	r2, [r3, #8]
 800043e:	60da      	str	r2, [r3, #12]
 8000440:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000442:	4b51      	ldr	r3, [pc, #324]	; (8000588 <MX_GPIO_Init+0x15c>)
 8000444:	695b      	ldr	r3, [r3, #20]
 8000446:	4a50      	ldr	r2, [pc, #320]	; (8000588 <MX_GPIO_Init+0x15c>)
 8000448:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800044c:	6153      	str	r3, [r2, #20]
 800044e:	4b4e      	ldr	r3, [pc, #312]	; (8000588 <MX_GPIO_Init+0x15c>)
 8000450:	695b      	ldr	r3, [r3, #20]
 8000452:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000456:	613b      	str	r3, [r7, #16]
 8000458:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800045a:	4b4b      	ldr	r3, [pc, #300]	; (8000588 <MX_GPIO_Init+0x15c>)
 800045c:	695b      	ldr	r3, [r3, #20]
 800045e:	4a4a      	ldr	r2, [pc, #296]	; (8000588 <MX_GPIO_Init+0x15c>)
 8000460:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000464:	6153      	str	r3, [r2, #20]
 8000466:	4b48      	ldr	r3, [pc, #288]	; (8000588 <MX_GPIO_Init+0x15c>)
 8000468:	695b      	ldr	r3, [r3, #20]
 800046a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800046e:	60fb      	str	r3, [r7, #12]
 8000470:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000472:	4b45      	ldr	r3, [pc, #276]	; (8000588 <MX_GPIO_Init+0x15c>)
 8000474:	695b      	ldr	r3, [r3, #20]
 8000476:	4a44      	ldr	r2, [pc, #272]	; (8000588 <MX_GPIO_Init+0x15c>)
 8000478:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800047c:	6153      	str	r3, [r2, #20]
 800047e:	4b42      	ldr	r3, [pc, #264]	; (8000588 <MX_GPIO_Init+0x15c>)
 8000480:	695b      	ldr	r3, [r3, #20]
 8000482:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000486:	60bb      	str	r3, [r7, #8]
 8000488:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800048a:	4b3f      	ldr	r3, [pc, #252]	; (8000588 <MX_GPIO_Init+0x15c>)
 800048c:	695b      	ldr	r3, [r3, #20]
 800048e:	4a3e      	ldr	r2, [pc, #248]	; (8000588 <MX_GPIO_Init+0x15c>)
 8000490:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000494:	6153      	str	r3, [r2, #20]
 8000496:	4b3c      	ldr	r3, [pc, #240]	; (8000588 <MX_GPIO_Init+0x15c>)
 8000498:	695b      	ldr	r3, [r3, #20]
 800049a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800049e:	607b      	str	r3, [r7, #4]
 80004a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80004a2:	4b39      	ldr	r3, [pc, #228]	; (8000588 <MX_GPIO_Init+0x15c>)
 80004a4:	695b      	ldr	r3, [r3, #20]
 80004a6:	4a38      	ldr	r2, [pc, #224]	; (8000588 <MX_GPIO_Init+0x15c>)
 80004a8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80004ac:	6153      	str	r3, [r2, #20]
 80004ae:	4b36      	ldr	r3, [pc, #216]	; (8000588 <MX_GPIO_Init+0x15c>)
 80004b0:	695b      	ldr	r3, [r3, #20]
 80004b2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80004b6:	603b      	str	r3, [r7, #0]
 80004b8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 80004ba:	2200      	movs	r2, #0
 80004bc:	f64f 7108 	movw	r1, #65288	; 0xff08
 80004c0:	4832      	ldr	r0, [pc, #200]	; (800058c <MX_GPIO_Init+0x160>)
 80004c2:	f000 fce9 	bl	8000e98 <HAL_GPIO_WritePin>
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : DRDY_Pin MEMS_INT3_Pin MEMS_INT4_Pin MEMS_INT1_Pin
                           MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = DRDY_Pin|MEMS_INT3_Pin|MEMS_INT4_Pin|MEMS_INT1_Pin
 80004c6:	2337      	movs	r3, #55	; 0x37
 80004c8:	617b      	str	r3, [r7, #20]
                          |MEMS_INT2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80004ca:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80004ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004d0:	2300      	movs	r3, #0
 80004d2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80004d4:	f107 0314 	add.w	r3, r7, #20
 80004d8:	4619      	mov	r1, r3
 80004da:	482c      	ldr	r0, [pc, #176]	; (800058c <MX_GPIO_Init+0x160>)
 80004dc:	f000 fb4a 	bl	8000b74 <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_I2C_SPI_Pin LD4_Pin LD3_Pin LD5_Pin
                           LD7_Pin LD9_Pin LD10_Pin LD8_Pin
                           LD6_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 80004e0:	f64f 7308 	movw	r3, #65288	; 0xff08
 80004e4:	617b      	str	r3, [r7, #20]
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004e6:	2301      	movs	r3, #1
 80004e8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004ea:	2300      	movs	r3, #0
 80004ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004ee:	2300      	movs	r3, #0
 80004f0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80004f2:	f107 0314 	add.w	r3, r7, #20
 80004f6:	4619      	mov	r1, r3
 80004f8:	4824      	ldr	r0, [pc, #144]	; (800058c <MX_GPIO_Init+0x160>)
 80004fa:	f000 fb3b 	bl	8000b74 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80004fe:	2301      	movs	r3, #1
 8000500:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000502:	2300      	movs	r3, #0
 8000504:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000506:	2300      	movs	r3, #0
 8000508:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800050a:	f107 0314 	add.w	r3, r7, #20
 800050e:	4619      	mov	r1, r3
 8000510:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000514:	f000 fb2e 	bl	8000b74 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MISOA7_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MISOA7_Pin;
 8000518:	23e0      	movs	r3, #224	; 0xe0
 800051a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800051c:	2302      	movs	r3, #2
 800051e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000520:	2300      	movs	r3, #0
 8000522:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000524:	2300      	movs	r3, #0
 8000526:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000528:	2305      	movs	r3, #5
 800052a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800052c:	f107 0314 	add.w	r3, r7, #20
 8000530:	4619      	mov	r1, r3
 8000532:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000536:	f000 fb1d 	bl	8000b74 <HAL_GPIO_Init>

  /*Configure GPIO pins : DM_Pin DP_Pin */
  GPIO_InitStruct.Pin = DM_Pin|DP_Pin;
 800053a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800053e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000540:	2302      	movs	r3, #2
 8000542:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000544:	2300      	movs	r3, #0
 8000546:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000548:	2303      	movs	r3, #3
 800054a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 800054c:	230e      	movs	r3, #14
 800054e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000550:	f107 0314 	add.w	r3, r7, #20
 8000554:	4619      	mov	r1, r3
 8000556:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800055a:	f000 fb0b 	bl	8000b74 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2C1_SCL_Pin I2C1_SDA_Pin */
  GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 800055e:	23c0      	movs	r3, #192	; 0xc0
 8000560:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000562:	2312      	movs	r3, #18
 8000564:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000566:	2300      	movs	r3, #0
 8000568:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800056a:	2300      	movs	r3, #0
 800056c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800056e:	2304      	movs	r3, #4
 8000570:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000572:	f107 0314 	add.w	r3, r7, #20
 8000576:	4619      	mov	r1, r3
 8000578:	4805      	ldr	r0, [pc, #20]	; (8000590 <MX_GPIO_Init+0x164>)
 800057a:	f000 fafb 	bl	8000b74 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800057e:	bf00      	nop
 8000580:	3728      	adds	r7, #40	; 0x28
 8000582:	46bd      	mov	sp, r7
 8000584:	bd80      	pop	{r7, pc}
 8000586:	bf00      	nop
 8000588:	40021000 	.word	0x40021000
 800058c:	48001000 	.word	0x48001000
 8000590:	48000400 	.word	0x48000400

08000594 <toggle_GREEN_handler>:

/* USER CODE BEGIN 4 */
static void toggle_GREEN_handler(void* parameters){
 8000594:	b580      	push	{r7, lr}
 8000596:	b086      	sub	sp, #24
 8000598:	af02      	add	r7, sp, #8
 800059a:	6078      	str	r0, [r7, #4]

	BaseType_t status;
	while(1){
		SEGGER_SYSVIEW_PrintfTarget("Toggling GREEN LED");
 800059c:	4813      	ldr	r0, [pc, #76]	; (80005ec <toggle_GREEN_handler+0x58>)
 800059e:	f006 fffd 	bl	800759c <SEGGER_SYSVIEW_PrintfTarget>
		HAL_GPIO_TogglePin(GPIOE, LED_GREEN);
 80005a2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80005a6:	4812      	ldr	r0, [pc, #72]	; (80005f0 <toggle_GREEN_handler+0x5c>)
 80005a8:	f000 fc8e 	bl	8000ec8 <HAL_GPIO_TogglePin>
		status = xTaskNotifyWait(0,0,NULL,pdMS_TO_TICKS(1000));
 80005ac:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005b0:	9300      	str	r3, [sp, #0]
 80005b2:	2300      	movs	r3, #0
 80005b4:	2200      	movs	r2, #0
 80005b6:	2100      	movs	r1, #0
 80005b8:	2000      	movs	r0, #0
 80005ba:	f003 fde9 	bl	8004190 <xTaskGenericNotifyWait>
 80005be:	60f8      	str	r0, [r7, #12]

		if(status == pdTRUE){
 80005c0:	68fb      	ldr	r3, [r7, #12]
 80005c2:	2b01      	cmp	r3, #1
 80005c4:	d1ea      	bne.n	800059c <toggle_GREEN_handler+0x8>
			//the button was pressed
			vTaskSuspendAll();
 80005c6:	f003 f893 	bl	80036f0 <vTaskSuspendAll>
			next_task_handle = toggle_BLUE_handle;
 80005ca:	4b0a      	ldr	r3, [pc, #40]	; (80005f4 <toggle_GREEN_handler+0x60>)
 80005cc:	681b      	ldr	r3, [r3, #0]
 80005ce:	4a0a      	ldr	r2, [pc, #40]	; (80005f8 <toggle_GREEN_handler+0x64>)
 80005d0:	6013      	str	r3, [r2, #0]
			xTaskResumeAll();
 80005d2:	f003 f89b 	bl	800370c <xTaskResumeAll>
			HAL_GPIO_WritePin(GPIOE, LED_GREEN, GPIO_PIN_SET);
 80005d6:	2201      	movs	r2, #1
 80005d8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80005dc:	4804      	ldr	r0, [pc, #16]	; (80005f0 <toggle_GREEN_handler+0x5c>)
 80005de:	f000 fc5b 	bl	8000e98 <HAL_GPIO_WritePin>
			vTaskDelete(NULL);
 80005e2:	2000      	movs	r0, #0
 80005e4:	f002 ff3c 	bl	8003460 <vTaskDelete>
		SEGGER_SYSVIEW_PrintfTarget("Toggling GREEN LED");
 80005e8:	e7d8      	b.n	800059c <toggle_GREEN_handler+0x8>
 80005ea:	bf00      	nop
 80005ec:	080077b0 	.word	0x080077b0
 80005f0:	48001000 	.word	0x48001000
 80005f4:	20000038 	.word	0x20000038
 80005f8:	20000030 	.word	0x20000030

080005fc <toggle_BLUE_handler>:
		}
	}
}

static void toggle_BLUE_handler(void* parameters){
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b086      	sub	sp, #24
 8000600:	af02      	add	r7, sp, #8
 8000602:	6078      	str	r0, [r7, #4]

	BaseType_t status;
	while(1){
		SEGGER_SYSVIEW_PrintfTarget("Toggling BLUE LED");
 8000604:	4813      	ldr	r0, [pc, #76]	; (8000654 <toggle_BLUE_handler+0x58>)
 8000606:	f006 ffc9 	bl	800759c <SEGGER_SYSVIEW_PrintfTarget>
		HAL_GPIO_TogglePin(GPIOE, LED_BLUE);
 800060a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800060e:	4812      	ldr	r0, [pc, #72]	; (8000658 <toggle_BLUE_handler+0x5c>)
 8000610:	f000 fc5a 	bl	8000ec8 <HAL_GPIO_TogglePin>
		status = xTaskNotifyWait(0,0,NULL,pdMS_TO_TICKS(800));
 8000614:	f44f 7348 	mov.w	r3, #800	; 0x320
 8000618:	9300      	str	r3, [sp, #0]
 800061a:	2300      	movs	r3, #0
 800061c:	2200      	movs	r2, #0
 800061e:	2100      	movs	r1, #0
 8000620:	2000      	movs	r0, #0
 8000622:	f003 fdb5 	bl	8004190 <xTaskGenericNotifyWait>
 8000626:	60f8      	str	r0, [r7, #12]

		if(status == pdTRUE){
 8000628:	68fb      	ldr	r3, [r7, #12]
 800062a:	2b01      	cmp	r3, #1
 800062c:	d1ea      	bne.n	8000604 <toggle_BLUE_handler+0x8>
			//the button was pressed
			vTaskSuspendAll();
 800062e:	f003 f85f 	bl	80036f0 <vTaskSuspendAll>
			next_task_handle = toggle_RED_handle;
 8000632:	4b0a      	ldr	r3, [pc, #40]	; (800065c <toggle_BLUE_handler+0x60>)
 8000634:	681b      	ldr	r3, [r3, #0]
 8000636:	4a0a      	ldr	r2, [pc, #40]	; (8000660 <toggle_BLUE_handler+0x64>)
 8000638:	6013      	str	r3, [r2, #0]
			xTaskResumeAll();
 800063a:	f003 f867 	bl	800370c <xTaskResumeAll>
			HAL_GPIO_WritePin(GPIOE, LED_BLUE, GPIO_PIN_SET);
 800063e:	2201      	movs	r2, #1
 8000640:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000644:	4804      	ldr	r0, [pc, #16]	; (8000658 <toggle_BLUE_handler+0x5c>)
 8000646:	f000 fc27 	bl	8000e98 <HAL_GPIO_WritePin>
			vTaskDelete(NULL);
 800064a:	2000      	movs	r0, #0
 800064c:	f002 ff08 	bl	8003460 <vTaskDelete>
		SEGGER_SYSVIEW_PrintfTarget("Toggling BLUE LED");
 8000650:	e7d8      	b.n	8000604 <toggle_BLUE_handler+0x8>
 8000652:	bf00      	nop
 8000654:	080077c4 	.word	0x080077c4
 8000658:	48001000 	.word	0x48001000
 800065c:	2000003c 	.word	0x2000003c
 8000660:	20000030 	.word	0x20000030

08000664 <toggle_RED_handler>:
		}
	}
}

static void toggle_RED_handler(void* parameters){
 8000664:	b580      	push	{r7, lr}
 8000666:	b086      	sub	sp, #24
 8000668:	af02      	add	r7, sp, #8
 800066a:	6078      	str	r0, [r7, #4]

	BaseType_t status;
	while(1){
		SEGGER_SYSVIEW_PrintfTarget("Toggling RED LED");
 800066c:	4815      	ldr	r0, [pc, #84]	; (80006c4 <toggle_RED_handler+0x60>)
 800066e:	f006 ff95 	bl	800759c <SEGGER_SYSVIEW_PrintfTarget>
		HAL_GPIO_TogglePin(GPIOE, LED_RED);
 8000672:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000676:	4814      	ldr	r0, [pc, #80]	; (80006c8 <toggle_RED_handler+0x64>)
 8000678:	f000 fc26 	bl	8000ec8 <HAL_GPIO_TogglePin>
		status = xTaskNotifyWait(0,0,NULL,pdMS_TO_TICKS(500));
 800067c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000680:	9300      	str	r3, [sp, #0]
 8000682:	2300      	movs	r3, #0
 8000684:	2200      	movs	r2, #0
 8000686:	2100      	movs	r1, #0
 8000688:	2000      	movs	r0, #0
 800068a:	f003 fd81 	bl	8004190 <xTaskGenericNotifyWait>
 800068e:	60f8      	str	r0, [r7, #12]

		if(status == pdTRUE){
 8000690:	68fb      	ldr	r3, [r7, #12]
 8000692:	2b01      	cmp	r3, #1
 8000694:	d1ea      	bne.n	800066c <toggle_RED_handler+0x8>
			//the button was pressed
			vTaskSuspendAll();
 8000696:	f003 f82b 	bl	80036f0 <vTaskSuspendAll>
			next_task_handle = NULL;
 800069a:	4b0c      	ldr	r3, [pc, #48]	; (80006cc <toggle_RED_handler+0x68>)
 800069c:	2200      	movs	r2, #0
 800069e:	601a      	str	r2, [r3, #0]
			xTaskResumeAll();
 80006a0:	f003 f834 	bl	800370c <xTaskResumeAll>
			HAL_GPIO_WritePin(GPIOE, LED_RED, GPIO_PIN_SET);
 80006a4:	2201      	movs	r2, #1
 80006a6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006aa:	4807      	ldr	r0, [pc, #28]	; (80006c8 <toggle_RED_handler+0x64>)
 80006ac:	f000 fbf4 	bl	8000e98 <HAL_GPIO_WritePin>
			vTaskDelete(BTN_task_handle);
 80006b0:	4b07      	ldr	r3, [pc, #28]	; (80006d0 <toggle_RED_handler+0x6c>)
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	4618      	mov	r0, r3
 80006b6:	f002 fed3 	bl	8003460 <vTaskDelete>
			vTaskDelete(NULL);
 80006ba:	2000      	movs	r0, #0
 80006bc:	f002 fed0 	bl	8003460 <vTaskDelete>
		SEGGER_SYSVIEW_PrintfTarget("Toggling RED LED");
 80006c0:	e7d4      	b.n	800066c <toggle_RED_handler+0x8>
 80006c2:	bf00      	nop
 80006c4:	080077d8 	.word	0x080077d8
 80006c8:	48001000 	.word	0x48001000
 80006cc:	20000030 	.word	0x20000030
 80006d0:	20000040 	.word	0x20000040

080006d4 <button_press_handler>:
		}
	}
}

static void button_press_handler(void* parameters){
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b086      	sub	sp, #24
 80006d8:	af02      	add	r7, sp, #8
 80006da:	6078      	str	r0, [r7, #4]

	uint8_t btn_read = 0;
 80006dc:	2300      	movs	r3, #0
 80006de:	73bb      	strb	r3, [r7, #14]
	uint8_t prev_state = 0;
 80006e0:	2300      	movs	r3, #0
 80006e2:	73fb      	strb	r3, [r7, #15]

	while(1){
		btn_read = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0);
 80006e4:	2101      	movs	r1, #1
 80006e6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006ea:	f000 fbbd 	bl	8000e68 <HAL_GPIO_ReadPin>
 80006ee:	4603      	mov	r3, r0
 80006f0:	73bb      	strb	r3, [r7, #14]

		if(btn_read){
 80006f2:	7bbb      	ldrb	r3, [r7, #14]
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d00b      	beq.n	8000710 <button_press_handler+0x3c>
			if(!prev_state){
 80006f8:	7bfb      	ldrb	r3, [r7, #15]
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d108      	bne.n	8000710 <button_press_handler+0x3c>
				xTaskNotify(next_task_handle, 0, eNoAction);
 80006fe:	4b07      	ldr	r3, [pc, #28]	; (800071c <button_press_handler+0x48>)
 8000700:	6818      	ldr	r0, [r3, #0]
 8000702:	2300      	movs	r3, #0
 8000704:	9300      	str	r3, [sp, #0]
 8000706:	2300      	movs	r3, #0
 8000708:	2200      	movs	r2, #0
 800070a:	2100      	movs	r1, #0
 800070c:	f003 fdc8 	bl	80042a0 <xTaskGenericNotify>
			}
		}
		prev_state = btn_read;
 8000710:	7bbb      	ldrb	r3, [r7, #14]
 8000712:	73fb      	strb	r3, [r7, #15]
		vTaskDelay(pdMS_TO_TICKS(10));
 8000714:	200a      	movs	r0, #10
 8000716:	f002 ff51 	bl	80035bc <vTaskDelay>
		btn_read = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0);
 800071a:	e7e3      	b.n	80006e4 <button_press_handler+0x10>
 800071c:	20000030 	.word	0x20000030

08000720 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	b082      	sub	sp, #8
 8000724:	af00      	add	r7, sp, #0
 8000726:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	681b      	ldr	r3, [r3, #0]
 800072c:	4a04      	ldr	r2, [pc, #16]	; (8000740 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800072e:	4293      	cmp	r3, r2
 8000730:	d101      	bne.n	8000736 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000732:	f000 f91d 	bl	8000970 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000736:	bf00      	nop
 8000738:	3708      	adds	r7, #8
 800073a:	46bd      	mov	sp, r7
 800073c:	bd80      	pop	{r7, pc}
 800073e:	bf00      	nop
 8000740:	40001000 	.word	0x40001000

08000744 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000744:	b480      	push	{r7}
 8000746:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000748:	b672      	cpsid	i
}
 800074a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800074c:	e7fe      	b.n	800074c <Error_Handler+0x8>
	...

08000750 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	b082      	sub	sp, #8
 8000754:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000756:	4b0f      	ldr	r3, [pc, #60]	; (8000794 <HAL_MspInit+0x44>)
 8000758:	699b      	ldr	r3, [r3, #24]
 800075a:	4a0e      	ldr	r2, [pc, #56]	; (8000794 <HAL_MspInit+0x44>)
 800075c:	f043 0301 	orr.w	r3, r3, #1
 8000760:	6193      	str	r3, [r2, #24]
 8000762:	4b0c      	ldr	r3, [pc, #48]	; (8000794 <HAL_MspInit+0x44>)
 8000764:	699b      	ldr	r3, [r3, #24]
 8000766:	f003 0301 	and.w	r3, r3, #1
 800076a:	607b      	str	r3, [r7, #4]
 800076c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800076e:	4b09      	ldr	r3, [pc, #36]	; (8000794 <HAL_MspInit+0x44>)
 8000770:	69db      	ldr	r3, [r3, #28]
 8000772:	4a08      	ldr	r2, [pc, #32]	; (8000794 <HAL_MspInit+0x44>)
 8000774:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000778:	61d3      	str	r3, [r2, #28]
 800077a:	4b06      	ldr	r3, [pc, #24]	; (8000794 <HAL_MspInit+0x44>)
 800077c:	69db      	ldr	r3, [r3, #28]
 800077e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000782:	603b      	str	r3, [r7, #0]
 8000784:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */
  vInitPrioGroupValue();
 8000786:	f004 faef 	bl	8004d68 <vInitPrioGroupValue>
  /* USER CODE END MspInit 1 */
}
 800078a:	bf00      	nop
 800078c:	3708      	adds	r7, #8
 800078e:	46bd      	mov	sp, r7
 8000790:	bd80      	pop	{r7, pc}
 8000792:	bf00      	nop
 8000794:	40021000 	.word	0x40021000

08000798 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b08e      	sub	sp, #56	; 0x38
 800079c:	af00      	add	r7, sp, #0
 800079e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80007a0:	2300      	movs	r3, #0
 80007a2:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80007a4:	2300      	movs	r3, #0
 80007a6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80007a8:	4b33      	ldr	r3, [pc, #204]	; (8000878 <HAL_InitTick+0xe0>)
 80007aa:	69db      	ldr	r3, [r3, #28]
 80007ac:	4a32      	ldr	r2, [pc, #200]	; (8000878 <HAL_InitTick+0xe0>)
 80007ae:	f043 0310 	orr.w	r3, r3, #16
 80007b2:	61d3      	str	r3, [r2, #28]
 80007b4:	4b30      	ldr	r3, [pc, #192]	; (8000878 <HAL_InitTick+0xe0>)
 80007b6:	69db      	ldr	r3, [r3, #28]
 80007b8:	f003 0310 	and.w	r3, r3, #16
 80007bc:	60fb      	str	r3, [r7, #12]
 80007be:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80007c0:	f107 0210 	add.w	r2, r7, #16
 80007c4:	f107 0314 	add.w	r3, r7, #20
 80007c8:	4611      	mov	r1, r2
 80007ca:	4618      	mov	r0, r3
 80007cc:	f001 fde8 	bl	80023a0 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80007d0:	6a3b      	ldr	r3, [r7, #32]
 80007d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80007d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d103      	bne.n	80007e2 <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80007da:	f001 fdbf 	bl	800235c <HAL_RCC_GetPCLK1Freq>
 80007de:	6378      	str	r0, [r7, #52]	; 0x34
 80007e0:	e004      	b.n	80007ec <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80007e2:	f001 fdbb 	bl	800235c <HAL_RCC_GetPCLK1Freq>
 80007e6:	4603      	mov	r3, r0
 80007e8:	005b      	lsls	r3, r3, #1
 80007ea:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80007ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80007ee:	4a23      	ldr	r2, [pc, #140]	; (800087c <HAL_InitTick+0xe4>)
 80007f0:	fba2 2303 	umull	r2, r3, r2, r3
 80007f4:	0c9b      	lsrs	r3, r3, #18
 80007f6:	3b01      	subs	r3, #1
 80007f8:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80007fa:	4b21      	ldr	r3, [pc, #132]	; (8000880 <HAL_InitTick+0xe8>)
 80007fc:	4a21      	ldr	r2, [pc, #132]	; (8000884 <HAL_InitTick+0xec>)
 80007fe:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000800:	4b1f      	ldr	r3, [pc, #124]	; (8000880 <HAL_InitTick+0xe8>)
 8000802:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000806:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000808:	4a1d      	ldr	r2, [pc, #116]	; (8000880 <HAL_InitTick+0xe8>)
 800080a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800080c:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800080e:	4b1c      	ldr	r3, [pc, #112]	; (8000880 <HAL_InitTick+0xe8>)
 8000810:	2200      	movs	r2, #0
 8000812:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000814:	4b1a      	ldr	r3, [pc, #104]	; (8000880 <HAL_InitTick+0xe8>)
 8000816:	2200      	movs	r2, #0
 8000818:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800081a:	4b19      	ldr	r3, [pc, #100]	; (8000880 <HAL_InitTick+0xe8>)
 800081c:	2200      	movs	r2, #0
 800081e:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000820:	4817      	ldr	r0, [pc, #92]	; (8000880 <HAL_InitTick+0xe8>)
 8000822:	f001 fdef 	bl	8002404 <HAL_TIM_Base_Init>
 8000826:	4603      	mov	r3, r0
 8000828:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 800082c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000830:	2b00      	cmp	r3, #0
 8000832:	d11b      	bne.n	800086c <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000834:	4812      	ldr	r0, [pc, #72]	; (8000880 <HAL_InitTick+0xe8>)
 8000836:	f001 fe47 	bl	80024c8 <HAL_TIM_Base_Start_IT>
 800083a:	4603      	mov	r3, r0
 800083c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000840:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000844:	2b00      	cmp	r3, #0
 8000846:	d111      	bne.n	800086c <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000848:	2036      	movs	r0, #54	; 0x36
 800084a:	f000 f985 	bl	8000b58 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	2b0f      	cmp	r3, #15
 8000852:	d808      	bhi.n	8000866 <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000854:	2200      	movs	r2, #0
 8000856:	6879      	ldr	r1, [r7, #4]
 8000858:	2036      	movs	r0, #54	; 0x36
 800085a:	f000 f961 	bl	8000b20 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800085e:	4a0a      	ldr	r2, [pc, #40]	; (8000888 <HAL_InitTick+0xf0>)
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	6013      	str	r3, [r2, #0]
 8000864:	e002      	b.n	800086c <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 8000866:	2301      	movs	r3, #1
 8000868:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 800086c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000870:	4618      	mov	r0, r3
 8000872:	3738      	adds	r7, #56	; 0x38
 8000874:	46bd      	mov	sp, r7
 8000876:	bd80      	pop	{r7, pc}
 8000878:	40021000 	.word	0x40021000
 800087c:	431bde83 	.word	0x431bde83
 8000880:	20000044 	.word	0x20000044
 8000884:	40001000 	.word	0x40001000
 8000888:	20000004 	.word	0x20000004

0800088c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800088c:	b480      	push	{r7}
 800088e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000890:	e7fe      	b.n	8000890 <NMI_Handler+0x4>

08000892 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000892:	b480      	push	{r7}
 8000894:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000896:	e7fe      	b.n	8000896 <HardFault_Handler+0x4>

08000898 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000898:	b480      	push	{r7}
 800089a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800089c:	e7fe      	b.n	800089c <MemManage_Handler+0x4>

0800089e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800089e:	b480      	push	{r7}
 80008a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008a2:	e7fe      	b.n	80008a2 <BusFault_Handler+0x4>

080008a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008a4:	b480      	push	{r7}
 80008a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008a8:	e7fe      	b.n	80008a8 <UsageFault_Handler+0x4>

080008aa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008aa:	b480      	push	{r7}
 80008ac:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008ae:	bf00      	nop
 80008b0:	46bd      	mov	sp, r7
 80008b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b6:	4770      	bx	lr

080008b8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles Timer 6 interrupt and DAC underrun interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80008bc:	4802      	ldr	r0, [pc, #8]	; (80008c8 <TIM6_DAC_IRQHandler+0x10>)
 80008be:	f001 fe6d 	bl	800259c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80008c2:	bf00      	nop
 80008c4:	bd80      	pop	{r7, pc}
 80008c6:	bf00      	nop
 80008c8:	20000044 	.word	0x20000044

080008cc <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80008cc:	b480      	push	{r7}
 80008ce:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80008d0:	4b06      	ldr	r3, [pc, #24]	; (80008ec <SystemInit+0x20>)
 80008d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80008d6:	4a05      	ldr	r2, [pc, #20]	; (80008ec <SystemInit+0x20>)
 80008d8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80008dc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80008e0:	bf00      	nop
 80008e2:	46bd      	mov	sp, r7
 80008e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e8:	4770      	bx	lr
 80008ea:	bf00      	nop
 80008ec:	e000ed00 	.word	0xe000ed00

080008f0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80008f0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000928 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80008f4:	f7ff ffea 	bl	80008cc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80008f8:	480c      	ldr	r0, [pc, #48]	; (800092c <LoopForever+0x6>)
  ldr r1, =_edata
 80008fa:	490d      	ldr	r1, [pc, #52]	; (8000930 <LoopForever+0xa>)
  ldr r2, =_sidata
 80008fc:	4a0d      	ldr	r2, [pc, #52]	; (8000934 <LoopForever+0xe>)
  movs r3, #0
 80008fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000900:	e002      	b.n	8000908 <LoopCopyDataInit>

08000902 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000902:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000904:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000906:	3304      	adds	r3, #4

08000908 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000908:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800090a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800090c:	d3f9      	bcc.n	8000902 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800090e:	4a0a      	ldr	r2, [pc, #40]	; (8000938 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000910:	4c0a      	ldr	r4, [pc, #40]	; (800093c <LoopForever+0x16>)
  movs r3, #0
 8000912:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000914:	e001      	b.n	800091a <LoopFillZerobss>

08000916 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000916:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000918:	3204      	adds	r2, #4

0800091a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800091a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800091c:	d3fb      	bcc.n	8000916 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800091e:	f006 fec5 	bl	80076ac <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000922:	f7ff fc9f 	bl	8000264 <main>

08000926 <LoopForever>:

LoopForever:
    b LoopForever
 8000926:	e7fe      	b.n	8000926 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000928:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 800092c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000930:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8000934:	0800792c 	.word	0x0800792c
  ldr r2, =_sbss
 8000938:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 800093c:	200084ec 	.word	0x200084ec

08000940 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000940:	e7fe      	b.n	8000940 <ADC1_2_IRQHandler>
	...

08000944 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000948:	4b08      	ldr	r3, [pc, #32]	; (800096c <HAL_Init+0x28>)
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	4a07      	ldr	r2, [pc, #28]	; (800096c <HAL_Init+0x28>)
 800094e:	f043 0310 	orr.w	r3, r3, #16
 8000952:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000954:	2003      	movs	r0, #3
 8000956:	f000 f8d8 	bl	8000b0a <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800095a:	200f      	movs	r0, #15
 800095c:	f7ff ff1c 	bl	8000798 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000960:	f7ff fef6 	bl	8000750 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000964:	2300      	movs	r3, #0
}
 8000966:	4618      	mov	r0, r3
 8000968:	bd80      	pop	{r7, pc}
 800096a:	bf00      	nop
 800096c:	40022000 	.word	0x40022000

08000970 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000970:	b480      	push	{r7}
 8000972:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000974:	4b06      	ldr	r3, [pc, #24]	; (8000990 <HAL_IncTick+0x20>)
 8000976:	781b      	ldrb	r3, [r3, #0]
 8000978:	461a      	mov	r2, r3
 800097a:	4b06      	ldr	r3, [pc, #24]	; (8000994 <HAL_IncTick+0x24>)
 800097c:	681b      	ldr	r3, [r3, #0]
 800097e:	4413      	add	r3, r2
 8000980:	4a04      	ldr	r2, [pc, #16]	; (8000994 <HAL_IncTick+0x24>)
 8000982:	6013      	str	r3, [r2, #0]
}
 8000984:	bf00      	nop
 8000986:	46bd      	mov	sp, r7
 8000988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098c:	4770      	bx	lr
 800098e:	bf00      	nop
 8000990:	20000008 	.word	0x20000008
 8000994:	20000090 	.word	0x20000090

08000998 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000998:	b480      	push	{r7}
 800099a:	af00      	add	r7, sp, #0
  return uwTick;  
 800099c:	4b03      	ldr	r3, [pc, #12]	; (80009ac <HAL_GetTick+0x14>)
 800099e:	681b      	ldr	r3, [r3, #0]
}
 80009a0:	4618      	mov	r0, r3
 80009a2:	46bd      	mov	sp, r7
 80009a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a8:	4770      	bx	lr
 80009aa:	bf00      	nop
 80009ac:	20000090 	.word	0x20000090

080009b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009b0:	b480      	push	{r7}
 80009b2:	b085      	sub	sp, #20
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	f003 0307 	and.w	r3, r3, #7
 80009be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80009c0:	4b0c      	ldr	r3, [pc, #48]	; (80009f4 <__NVIC_SetPriorityGrouping+0x44>)
 80009c2:	68db      	ldr	r3, [r3, #12]
 80009c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80009c6:	68ba      	ldr	r2, [r7, #8]
 80009c8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80009cc:	4013      	ands	r3, r2
 80009ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80009d0:	68fb      	ldr	r3, [r7, #12]
 80009d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80009d4:	68bb      	ldr	r3, [r7, #8]
 80009d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80009d8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80009dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80009e2:	4a04      	ldr	r2, [pc, #16]	; (80009f4 <__NVIC_SetPriorityGrouping+0x44>)
 80009e4:	68bb      	ldr	r3, [r7, #8]
 80009e6:	60d3      	str	r3, [r2, #12]
}
 80009e8:	bf00      	nop
 80009ea:	3714      	adds	r7, #20
 80009ec:	46bd      	mov	sp, r7
 80009ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f2:	4770      	bx	lr
 80009f4:	e000ed00 	.word	0xe000ed00

080009f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80009f8:	b480      	push	{r7}
 80009fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80009fc:	4b04      	ldr	r3, [pc, #16]	; (8000a10 <__NVIC_GetPriorityGrouping+0x18>)
 80009fe:	68db      	ldr	r3, [r3, #12]
 8000a00:	0a1b      	lsrs	r3, r3, #8
 8000a02:	f003 0307 	and.w	r3, r3, #7
}
 8000a06:	4618      	mov	r0, r3
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0e:	4770      	bx	lr
 8000a10:	e000ed00 	.word	0xe000ed00

08000a14 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a14:	b480      	push	{r7}
 8000a16:	b083      	sub	sp, #12
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	db0b      	blt.n	8000a3e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a26:	79fb      	ldrb	r3, [r7, #7]
 8000a28:	f003 021f 	and.w	r2, r3, #31
 8000a2c:	4907      	ldr	r1, [pc, #28]	; (8000a4c <__NVIC_EnableIRQ+0x38>)
 8000a2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a32:	095b      	lsrs	r3, r3, #5
 8000a34:	2001      	movs	r0, #1
 8000a36:	fa00 f202 	lsl.w	r2, r0, r2
 8000a3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000a3e:	bf00      	nop
 8000a40:	370c      	adds	r7, #12
 8000a42:	46bd      	mov	sp, r7
 8000a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a48:	4770      	bx	lr
 8000a4a:	bf00      	nop
 8000a4c:	e000e100 	.word	0xe000e100

08000a50 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a50:	b480      	push	{r7}
 8000a52:	b083      	sub	sp, #12
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	4603      	mov	r3, r0
 8000a58:	6039      	str	r1, [r7, #0]
 8000a5a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	db0a      	blt.n	8000a7a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a64:	683b      	ldr	r3, [r7, #0]
 8000a66:	b2da      	uxtb	r2, r3
 8000a68:	490c      	ldr	r1, [pc, #48]	; (8000a9c <__NVIC_SetPriority+0x4c>)
 8000a6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a6e:	0112      	lsls	r2, r2, #4
 8000a70:	b2d2      	uxtb	r2, r2
 8000a72:	440b      	add	r3, r1
 8000a74:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a78:	e00a      	b.n	8000a90 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a7a:	683b      	ldr	r3, [r7, #0]
 8000a7c:	b2da      	uxtb	r2, r3
 8000a7e:	4908      	ldr	r1, [pc, #32]	; (8000aa0 <__NVIC_SetPriority+0x50>)
 8000a80:	79fb      	ldrb	r3, [r7, #7]
 8000a82:	f003 030f 	and.w	r3, r3, #15
 8000a86:	3b04      	subs	r3, #4
 8000a88:	0112      	lsls	r2, r2, #4
 8000a8a:	b2d2      	uxtb	r2, r2
 8000a8c:	440b      	add	r3, r1
 8000a8e:	761a      	strb	r2, [r3, #24]
}
 8000a90:	bf00      	nop
 8000a92:	370c      	adds	r7, #12
 8000a94:	46bd      	mov	sp, r7
 8000a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9a:	4770      	bx	lr
 8000a9c:	e000e100 	.word	0xe000e100
 8000aa0:	e000ed00 	.word	0xe000ed00

08000aa4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	b089      	sub	sp, #36	; 0x24
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	60f8      	str	r0, [r7, #12]
 8000aac:	60b9      	str	r1, [r7, #8]
 8000aae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ab0:	68fb      	ldr	r3, [r7, #12]
 8000ab2:	f003 0307 	and.w	r3, r3, #7
 8000ab6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ab8:	69fb      	ldr	r3, [r7, #28]
 8000aba:	f1c3 0307 	rsb	r3, r3, #7
 8000abe:	2b04      	cmp	r3, #4
 8000ac0:	bf28      	it	cs
 8000ac2:	2304      	movcs	r3, #4
 8000ac4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ac6:	69fb      	ldr	r3, [r7, #28]
 8000ac8:	3304      	adds	r3, #4
 8000aca:	2b06      	cmp	r3, #6
 8000acc:	d902      	bls.n	8000ad4 <NVIC_EncodePriority+0x30>
 8000ace:	69fb      	ldr	r3, [r7, #28]
 8000ad0:	3b03      	subs	r3, #3
 8000ad2:	e000      	b.n	8000ad6 <NVIC_EncodePriority+0x32>
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ad8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000adc:	69bb      	ldr	r3, [r7, #24]
 8000ade:	fa02 f303 	lsl.w	r3, r2, r3
 8000ae2:	43da      	mvns	r2, r3
 8000ae4:	68bb      	ldr	r3, [r7, #8]
 8000ae6:	401a      	ands	r2, r3
 8000ae8:	697b      	ldr	r3, [r7, #20]
 8000aea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000aec:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000af0:	697b      	ldr	r3, [r7, #20]
 8000af2:	fa01 f303 	lsl.w	r3, r1, r3
 8000af6:	43d9      	mvns	r1, r3
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000afc:	4313      	orrs	r3, r2
         );
}
 8000afe:	4618      	mov	r0, r3
 8000b00:	3724      	adds	r7, #36	; 0x24
 8000b02:	46bd      	mov	sp, r7
 8000b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b08:	4770      	bx	lr

08000b0a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b0a:	b580      	push	{r7, lr}
 8000b0c:	b082      	sub	sp, #8
 8000b0e:	af00      	add	r7, sp, #0
 8000b10:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b12:	6878      	ldr	r0, [r7, #4]
 8000b14:	f7ff ff4c 	bl	80009b0 <__NVIC_SetPriorityGrouping>
}
 8000b18:	bf00      	nop
 8000b1a:	3708      	adds	r7, #8
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	bd80      	pop	{r7, pc}

08000b20 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b086      	sub	sp, #24
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	4603      	mov	r3, r0
 8000b28:	60b9      	str	r1, [r7, #8]
 8000b2a:	607a      	str	r2, [r7, #4]
 8000b2c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000b2e:	2300      	movs	r3, #0
 8000b30:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000b32:	f7ff ff61 	bl	80009f8 <__NVIC_GetPriorityGrouping>
 8000b36:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b38:	687a      	ldr	r2, [r7, #4]
 8000b3a:	68b9      	ldr	r1, [r7, #8]
 8000b3c:	6978      	ldr	r0, [r7, #20]
 8000b3e:	f7ff ffb1 	bl	8000aa4 <NVIC_EncodePriority>
 8000b42:	4602      	mov	r2, r0
 8000b44:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b48:	4611      	mov	r1, r2
 8000b4a:	4618      	mov	r0, r3
 8000b4c:	f7ff ff80 	bl	8000a50 <__NVIC_SetPriority>
}
 8000b50:	bf00      	nop
 8000b52:	3718      	adds	r7, #24
 8000b54:	46bd      	mov	sp, r7
 8000b56:	bd80      	pop	{r7, pc}

08000b58 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b082      	sub	sp, #8
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	4603      	mov	r3, r0
 8000b60:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000b62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b66:	4618      	mov	r0, r3
 8000b68:	f7ff ff54 	bl	8000a14 <__NVIC_EnableIRQ>
}
 8000b6c:	bf00      	nop
 8000b6e:	3708      	adds	r7, #8
 8000b70:	46bd      	mov	sp, r7
 8000b72:	bd80      	pop	{r7, pc}

08000b74 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b74:	b480      	push	{r7}
 8000b76:	b087      	sub	sp, #28
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	6078      	str	r0, [r7, #4]
 8000b7c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b82:	e154      	b.n	8000e2e <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000b84:	683b      	ldr	r3, [r7, #0]
 8000b86:	681a      	ldr	r2, [r3, #0]
 8000b88:	2101      	movs	r1, #1
 8000b8a:	697b      	ldr	r3, [r7, #20]
 8000b8c:	fa01 f303 	lsl.w	r3, r1, r3
 8000b90:	4013      	ands	r3, r2
 8000b92:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000b94:	68fb      	ldr	r3, [r7, #12]
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	f000 8146 	beq.w	8000e28 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000b9c:	683b      	ldr	r3, [r7, #0]
 8000b9e:	685b      	ldr	r3, [r3, #4]
 8000ba0:	f003 0303 	and.w	r3, r3, #3
 8000ba4:	2b01      	cmp	r3, #1
 8000ba6:	d005      	beq.n	8000bb4 <HAL_GPIO_Init+0x40>
 8000ba8:	683b      	ldr	r3, [r7, #0]
 8000baa:	685b      	ldr	r3, [r3, #4]
 8000bac:	f003 0303 	and.w	r3, r3, #3
 8000bb0:	2b02      	cmp	r3, #2
 8000bb2:	d130      	bne.n	8000c16 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	689b      	ldr	r3, [r3, #8]
 8000bb8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000bba:	697b      	ldr	r3, [r7, #20]
 8000bbc:	005b      	lsls	r3, r3, #1
 8000bbe:	2203      	movs	r2, #3
 8000bc0:	fa02 f303 	lsl.w	r3, r2, r3
 8000bc4:	43db      	mvns	r3, r3
 8000bc6:	693a      	ldr	r2, [r7, #16]
 8000bc8:	4013      	ands	r3, r2
 8000bca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000bcc:	683b      	ldr	r3, [r7, #0]
 8000bce:	68da      	ldr	r2, [r3, #12]
 8000bd0:	697b      	ldr	r3, [r7, #20]
 8000bd2:	005b      	lsls	r3, r3, #1
 8000bd4:	fa02 f303 	lsl.w	r3, r2, r3
 8000bd8:	693a      	ldr	r2, [r7, #16]
 8000bda:	4313      	orrs	r3, r2
 8000bdc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	693a      	ldr	r2, [r7, #16]
 8000be2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	685b      	ldr	r3, [r3, #4]
 8000be8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000bea:	2201      	movs	r2, #1
 8000bec:	697b      	ldr	r3, [r7, #20]
 8000bee:	fa02 f303 	lsl.w	r3, r2, r3
 8000bf2:	43db      	mvns	r3, r3
 8000bf4:	693a      	ldr	r2, [r7, #16]
 8000bf6:	4013      	ands	r3, r2
 8000bf8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000bfa:	683b      	ldr	r3, [r7, #0]
 8000bfc:	685b      	ldr	r3, [r3, #4]
 8000bfe:	091b      	lsrs	r3, r3, #4
 8000c00:	f003 0201 	and.w	r2, r3, #1
 8000c04:	697b      	ldr	r3, [r7, #20]
 8000c06:	fa02 f303 	lsl.w	r3, r2, r3
 8000c0a:	693a      	ldr	r2, [r7, #16]
 8000c0c:	4313      	orrs	r3, r2
 8000c0e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	693a      	ldr	r2, [r7, #16]
 8000c14:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000c16:	683b      	ldr	r3, [r7, #0]
 8000c18:	685b      	ldr	r3, [r3, #4]
 8000c1a:	f003 0303 	and.w	r3, r3, #3
 8000c1e:	2b03      	cmp	r3, #3
 8000c20:	d017      	beq.n	8000c52 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	68db      	ldr	r3, [r3, #12]
 8000c26:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000c28:	697b      	ldr	r3, [r7, #20]
 8000c2a:	005b      	lsls	r3, r3, #1
 8000c2c:	2203      	movs	r2, #3
 8000c2e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c32:	43db      	mvns	r3, r3
 8000c34:	693a      	ldr	r2, [r7, #16]
 8000c36:	4013      	ands	r3, r2
 8000c38:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000c3a:	683b      	ldr	r3, [r7, #0]
 8000c3c:	689a      	ldr	r2, [r3, #8]
 8000c3e:	697b      	ldr	r3, [r7, #20]
 8000c40:	005b      	lsls	r3, r3, #1
 8000c42:	fa02 f303 	lsl.w	r3, r2, r3
 8000c46:	693a      	ldr	r2, [r7, #16]
 8000c48:	4313      	orrs	r3, r2
 8000c4a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	693a      	ldr	r2, [r7, #16]
 8000c50:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c52:	683b      	ldr	r3, [r7, #0]
 8000c54:	685b      	ldr	r3, [r3, #4]
 8000c56:	f003 0303 	and.w	r3, r3, #3
 8000c5a:	2b02      	cmp	r3, #2
 8000c5c:	d123      	bne.n	8000ca6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000c5e:	697b      	ldr	r3, [r7, #20]
 8000c60:	08da      	lsrs	r2, r3, #3
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	3208      	adds	r2, #8
 8000c66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c6a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000c6c:	697b      	ldr	r3, [r7, #20]
 8000c6e:	f003 0307 	and.w	r3, r3, #7
 8000c72:	009b      	lsls	r3, r3, #2
 8000c74:	220f      	movs	r2, #15
 8000c76:	fa02 f303 	lsl.w	r3, r2, r3
 8000c7a:	43db      	mvns	r3, r3
 8000c7c:	693a      	ldr	r2, [r7, #16]
 8000c7e:	4013      	ands	r3, r2
 8000c80:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000c82:	683b      	ldr	r3, [r7, #0]
 8000c84:	691a      	ldr	r2, [r3, #16]
 8000c86:	697b      	ldr	r3, [r7, #20]
 8000c88:	f003 0307 	and.w	r3, r3, #7
 8000c8c:	009b      	lsls	r3, r3, #2
 8000c8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c92:	693a      	ldr	r2, [r7, #16]
 8000c94:	4313      	orrs	r3, r2
 8000c96:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000c98:	697b      	ldr	r3, [r7, #20]
 8000c9a:	08da      	lsrs	r2, r3, #3
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	3208      	adds	r2, #8
 8000ca0:	6939      	ldr	r1, [r7, #16]
 8000ca2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000cac:	697b      	ldr	r3, [r7, #20]
 8000cae:	005b      	lsls	r3, r3, #1
 8000cb0:	2203      	movs	r2, #3
 8000cb2:	fa02 f303 	lsl.w	r3, r2, r3
 8000cb6:	43db      	mvns	r3, r3
 8000cb8:	693a      	ldr	r2, [r7, #16]
 8000cba:	4013      	ands	r3, r2
 8000cbc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000cbe:	683b      	ldr	r3, [r7, #0]
 8000cc0:	685b      	ldr	r3, [r3, #4]
 8000cc2:	f003 0203 	and.w	r2, r3, #3
 8000cc6:	697b      	ldr	r3, [r7, #20]
 8000cc8:	005b      	lsls	r3, r3, #1
 8000cca:	fa02 f303 	lsl.w	r3, r2, r3
 8000cce:	693a      	ldr	r2, [r7, #16]
 8000cd0:	4313      	orrs	r3, r2
 8000cd2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	693a      	ldr	r2, [r7, #16]
 8000cd8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000cda:	683b      	ldr	r3, [r7, #0]
 8000cdc:	685b      	ldr	r3, [r3, #4]
 8000cde:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	f000 80a0 	beq.w	8000e28 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ce8:	4b58      	ldr	r3, [pc, #352]	; (8000e4c <HAL_GPIO_Init+0x2d8>)
 8000cea:	699b      	ldr	r3, [r3, #24]
 8000cec:	4a57      	ldr	r2, [pc, #348]	; (8000e4c <HAL_GPIO_Init+0x2d8>)
 8000cee:	f043 0301 	orr.w	r3, r3, #1
 8000cf2:	6193      	str	r3, [r2, #24]
 8000cf4:	4b55      	ldr	r3, [pc, #340]	; (8000e4c <HAL_GPIO_Init+0x2d8>)
 8000cf6:	699b      	ldr	r3, [r3, #24]
 8000cf8:	f003 0301 	and.w	r3, r3, #1
 8000cfc:	60bb      	str	r3, [r7, #8]
 8000cfe:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000d00:	4a53      	ldr	r2, [pc, #332]	; (8000e50 <HAL_GPIO_Init+0x2dc>)
 8000d02:	697b      	ldr	r3, [r7, #20]
 8000d04:	089b      	lsrs	r3, r3, #2
 8000d06:	3302      	adds	r3, #2
 8000d08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d0c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000d0e:	697b      	ldr	r3, [r7, #20]
 8000d10:	f003 0303 	and.w	r3, r3, #3
 8000d14:	009b      	lsls	r3, r3, #2
 8000d16:	220f      	movs	r2, #15
 8000d18:	fa02 f303 	lsl.w	r3, r2, r3
 8000d1c:	43db      	mvns	r3, r3
 8000d1e:	693a      	ldr	r2, [r7, #16]
 8000d20:	4013      	ands	r3, r2
 8000d22:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000d2a:	d019      	beq.n	8000d60 <HAL_GPIO_Init+0x1ec>
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	4a49      	ldr	r2, [pc, #292]	; (8000e54 <HAL_GPIO_Init+0x2e0>)
 8000d30:	4293      	cmp	r3, r2
 8000d32:	d013      	beq.n	8000d5c <HAL_GPIO_Init+0x1e8>
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	4a48      	ldr	r2, [pc, #288]	; (8000e58 <HAL_GPIO_Init+0x2e4>)
 8000d38:	4293      	cmp	r3, r2
 8000d3a:	d00d      	beq.n	8000d58 <HAL_GPIO_Init+0x1e4>
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	4a47      	ldr	r2, [pc, #284]	; (8000e5c <HAL_GPIO_Init+0x2e8>)
 8000d40:	4293      	cmp	r3, r2
 8000d42:	d007      	beq.n	8000d54 <HAL_GPIO_Init+0x1e0>
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	4a46      	ldr	r2, [pc, #280]	; (8000e60 <HAL_GPIO_Init+0x2ec>)
 8000d48:	4293      	cmp	r3, r2
 8000d4a:	d101      	bne.n	8000d50 <HAL_GPIO_Init+0x1dc>
 8000d4c:	2304      	movs	r3, #4
 8000d4e:	e008      	b.n	8000d62 <HAL_GPIO_Init+0x1ee>
 8000d50:	2305      	movs	r3, #5
 8000d52:	e006      	b.n	8000d62 <HAL_GPIO_Init+0x1ee>
 8000d54:	2303      	movs	r3, #3
 8000d56:	e004      	b.n	8000d62 <HAL_GPIO_Init+0x1ee>
 8000d58:	2302      	movs	r3, #2
 8000d5a:	e002      	b.n	8000d62 <HAL_GPIO_Init+0x1ee>
 8000d5c:	2301      	movs	r3, #1
 8000d5e:	e000      	b.n	8000d62 <HAL_GPIO_Init+0x1ee>
 8000d60:	2300      	movs	r3, #0
 8000d62:	697a      	ldr	r2, [r7, #20]
 8000d64:	f002 0203 	and.w	r2, r2, #3
 8000d68:	0092      	lsls	r2, r2, #2
 8000d6a:	4093      	lsls	r3, r2
 8000d6c:	693a      	ldr	r2, [r7, #16]
 8000d6e:	4313      	orrs	r3, r2
 8000d70:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000d72:	4937      	ldr	r1, [pc, #220]	; (8000e50 <HAL_GPIO_Init+0x2dc>)
 8000d74:	697b      	ldr	r3, [r7, #20]
 8000d76:	089b      	lsrs	r3, r3, #2
 8000d78:	3302      	adds	r3, #2
 8000d7a:	693a      	ldr	r2, [r7, #16]
 8000d7c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000d80:	4b38      	ldr	r3, [pc, #224]	; (8000e64 <HAL_GPIO_Init+0x2f0>)
 8000d82:	689b      	ldr	r3, [r3, #8]
 8000d84:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d86:	68fb      	ldr	r3, [r7, #12]
 8000d88:	43db      	mvns	r3, r3
 8000d8a:	693a      	ldr	r2, [r7, #16]
 8000d8c:	4013      	ands	r3, r2
 8000d8e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000d90:	683b      	ldr	r3, [r7, #0]
 8000d92:	685b      	ldr	r3, [r3, #4]
 8000d94:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d003      	beq.n	8000da4 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8000d9c:	693a      	ldr	r2, [r7, #16]
 8000d9e:	68fb      	ldr	r3, [r7, #12]
 8000da0:	4313      	orrs	r3, r2
 8000da2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000da4:	4a2f      	ldr	r2, [pc, #188]	; (8000e64 <HAL_GPIO_Init+0x2f0>)
 8000da6:	693b      	ldr	r3, [r7, #16]
 8000da8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000daa:	4b2e      	ldr	r3, [pc, #184]	; (8000e64 <HAL_GPIO_Init+0x2f0>)
 8000dac:	68db      	ldr	r3, [r3, #12]
 8000dae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000db0:	68fb      	ldr	r3, [r7, #12]
 8000db2:	43db      	mvns	r3, r3
 8000db4:	693a      	ldr	r2, [r7, #16]
 8000db6:	4013      	ands	r3, r2
 8000db8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000dba:	683b      	ldr	r3, [r7, #0]
 8000dbc:	685b      	ldr	r3, [r3, #4]
 8000dbe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d003      	beq.n	8000dce <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8000dc6:	693a      	ldr	r2, [r7, #16]
 8000dc8:	68fb      	ldr	r3, [r7, #12]
 8000dca:	4313      	orrs	r3, r2
 8000dcc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000dce:	4a25      	ldr	r2, [pc, #148]	; (8000e64 <HAL_GPIO_Init+0x2f0>)
 8000dd0:	693b      	ldr	r3, [r7, #16]
 8000dd2:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000dd4:	4b23      	ldr	r3, [pc, #140]	; (8000e64 <HAL_GPIO_Init+0x2f0>)
 8000dd6:	685b      	ldr	r3, [r3, #4]
 8000dd8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000dda:	68fb      	ldr	r3, [r7, #12]
 8000ddc:	43db      	mvns	r3, r3
 8000dde:	693a      	ldr	r2, [r7, #16]
 8000de0:	4013      	ands	r3, r2
 8000de2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000de4:	683b      	ldr	r3, [r7, #0]
 8000de6:	685b      	ldr	r3, [r3, #4]
 8000de8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d003      	beq.n	8000df8 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8000df0:	693a      	ldr	r2, [r7, #16]
 8000df2:	68fb      	ldr	r3, [r7, #12]
 8000df4:	4313      	orrs	r3, r2
 8000df6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000df8:	4a1a      	ldr	r2, [pc, #104]	; (8000e64 <HAL_GPIO_Init+0x2f0>)
 8000dfa:	693b      	ldr	r3, [r7, #16]
 8000dfc:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000dfe:	4b19      	ldr	r3, [pc, #100]	; (8000e64 <HAL_GPIO_Init+0x2f0>)
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e04:	68fb      	ldr	r3, [r7, #12]
 8000e06:	43db      	mvns	r3, r3
 8000e08:	693a      	ldr	r2, [r7, #16]
 8000e0a:	4013      	ands	r3, r2
 8000e0c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000e0e:	683b      	ldr	r3, [r7, #0]
 8000e10:	685b      	ldr	r3, [r3, #4]
 8000e12:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d003      	beq.n	8000e22 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8000e1a:	693a      	ldr	r2, [r7, #16]
 8000e1c:	68fb      	ldr	r3, [r7, #12]
 8000e1e:	4313      	orrs	r3, r2
 8000e20:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000e22:	4a10      	ldr	r2, [pc, #64]	; (8000e64 <HAL_GPIO_Init+0x2f0>)
 8000e24:	693b      	ldr	r3, [r7, #16]
 8000e26:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000e28:	697b      	ldr	r3, [r7, #20]
 8000e2a:	3301      	adds	r3, #1
 8000e2c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e2e:	683b      	ldr	r3, [r7, #0]
 8000e30:	681a      	ldr	r2, [r3, #0]
 8000e32:	697b      	ldr	r3, [r7, #20]
 8000e34:	fa22 f303 	lsr.w	r3, r2, r3
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	f47f aea3 	bne.w	8000b84 <HAL_GPIO_Init+0x10>
  }
}
 8000e3e:	bf00      	nop
 8000e40:	bf00      	nop
 8000e42:	371c      	adds	r7, #28
 8000e44:	46bd      	mov	sp, r7
 8000e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4a:	4770      	bx	lr
 8000e4c:	40021000 	.word	0x40021000
 8000e50:	40010000 	.word	0x40010000
 8000e54:	48000400 	.word	0x48000400
 8000e58:	48000800 	.word	0x48000800
 8000e5c:	48000c00 	.word	0x48000c00
 8000e60:	48001000 	.word	0x48001000
 8000e64:	40010400 	.word	0x40010400

08000e68 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	b085      	sub	sp, #20
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
 8000e70:	460b      	mov	r3, r1
 8000e72:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	691a      	ldr	r2, [r3, #16]
 8000e78:	887b      	ldrh	r3, [r7, #2]
 8000e7a:	4013      	ands	r3, r2
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d002      	beq.n	8000e86 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000e80:	2301      	movs	r3, #1
 8000e82:	73fb      	strb	r3, [r7, #15]
 8000e84:	e001      	b.n	8000e8a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000e86:	2300      	movs	r3, #0
 8000e88:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000e8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	3714      	adds	r7, #20
 8000e90:	46bd      	mov	sp, r7
 8000e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e96:	4770      	bx	lr

08000e98 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	b083      	sub	sp, #12
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
 8000ea0:	460b      	mov	r3, r1
 8000ea2:	807b      	strh	r3, [r7, #2]
 8000ea4:	4613      	mov	r3, r2
 8000ea6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000ea8:	787b      	ldrb	r3, [r7, #1]
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d003      	beq.n	8000eb6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000eae:	887a      	ldrh	r2, [r7, #2]
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000eb4:	e002      	b.n	8000ebc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000eb6:	887a      	ldrh	r2, [r7, #2]
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000ebc:	bf00      	nop
 8000ebe:	370c      	adds	r7, #12
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec6:	4770      	bx	lr

08000ec8 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	b085      	sub	sp, #20
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
 8000ed0:	460b      	mov	r3, r1
 8000ed2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	695b      	ldr	r3, [r3, #20]
 8000ed8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000eda:	887a      	ldrh	r2, [r7, #2]
 8000edc:	68fb      	ldr	r3, [r7, #12]
 8000ede:	4013      	ands	r3, r2
 8000ee0:	041a      	lsls	r2, r3, #16
 8000ee2:	68fb      	ldr	r3, [r7, #12]
 8000ee4:	43d9      	mvns	r1, r3
 8000ee6:	887b      	ldrh	r3, [r7, #2]
 8000ee8:	400b      	ands	r3, r1
 8000eea:	431a      	orrs	r2, r3
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	619a      	str	r2, [r3, #24]
}
 8000ef0:	bf00      	nop
 8000ef2:	3714      	adds	r7, #20
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efa:	4770      	bx	lr

08000efc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8000f02:	af00      	add	r7, sp, #0
 8000f04:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000f08:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000f0c:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000f0e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000f12:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d102      	bne.n	8000f22 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8000f1c:	2301      	movs	r3, #1
 8000f1e:	f001 b823 	b.w	8001f68 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000f22:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000f26:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	f003 0301 	and.w	r3, r3, #1
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	f000 817d 	beq.w	8001232 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000f38:	4bbc      	ldr	r3, [pc, #752]	; (800122c <HAL_RCC_OscConfig+0x330>)
 8000f3a:	685b      	ldr	r3, [r3, #4]
 8000f3c:	f003 030c 	and.w	r3, r3, #12
 8000f40:	2b04      	cmp	r3, #4
 8000f42:	d00c      	beq.n	8000f5e <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000f44:	4bb9      	ldr	r3, [pc, #740]	; (800122c <HAL_RCC_OscConfig+0x330>)
 8000f46:	685b      	ldr	r3, [r3, #4]
 8000f48:	f003 030c 	and.w	r3, r3, #12
 8000f4c:	2b08      	cmp	r3, #8
 8000f4e:	d15c      	bne.n	800100a <HAL_RCC_OscConfig+0x10e>
 8000f50:	4bb6      	ldr	r3, [pc, #728]	; (800122c <HAL_RCC_OscConfig+0x330>)
 8000f52:	685b      	ldr	r3, [r3, #4]
 8000f54:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f5c:	d155      	bne.n	800100a <HAL_RCC_OscConfig+0x10e>
 8000f5e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f62:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f66:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8000f6a:	fa93 f3a3 	rbit	r3, r3
 8000f6e:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000f72:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f76:	fab3 f383 	clz	r3, r3
 8000f7a:	b2db      	uxtb	r3, r3
 8000f7c:	095b      	lsrs	r3, r3, #5
 8000f7e:	b2db      	uxtb	r3, r3
 8000f80:	f043 0301 	orr.w	r3, r3, #1
 8000f84:	b2db      	uxtb	r3, r3
 8000f86:	2b01      	cmp	r3, #1
 8000f88:	d102      	bne.n	8000f90 <HAL_RCC_OscConfig+0x94>
 8000f8a:	4ba8      	ldr	r3, [pc, #672]	; (800122c <HAL_RCC_OscConfig+0x330>)
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	e015      	b.n	8000fbc <HAL_RCC_OscConfig+0xc0>
 8000f90:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f94:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f98:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8000f9c:	fa93 f3a3 	rbit	r3, r3
 8000fa0:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8000fa4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000fa8:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8000fac:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8000fb0:	fa93 f3a3 	rbit	r3, r3
 8000fb4:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8000fb8:	4b9c      	ldr	r3, [pc, #624]	; (800122c <HAL_RCC_OscConfig+0x330>)
 8000fba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fbc:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000fc0:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8000fc4:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8000fc8:	fa92 f2a2 	rbit	r2, r2
 8000fcc:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8000fd0:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8000fd4:	fab2 f282 	clz	r2, r2
 8000fd8:	b2d2      	uxtb	r2, r2
 8000fda:	f042 0220 	orr.w	r2, r2, #32
 8000fde:	b2d2      	uxtb	r2, r2
 8000fe0:	f002 021f 	and.w	r2, r2, #31
 8000fe4:	2101      	movs	r1, #1
 8000fe6:	fa01 f202 	lsl.w	r2, r1, r2
 8000fea:	4013      	ands	r3, r2
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	f000 811f 	beq.w	8001230 <HAL_RCC_OscConfig+0x334>
 8000ff2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000ff6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	685b      	ldr	r3, [r3, #4]
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	f040 8116 	bne.w	8001230 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8001004:	2301      	movs	r3, #1
 8001006:	f000 bfaf 	b.w	8001f68 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800100a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800100e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	685b      	ldr	r3, [r3, #4]
 8001016:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800101a:	d106      	bne.n	800102a <HAL_RCC_OscConfig+0x12e>
 800101c:	4b83      	ldr	r3, [pc, #524]	; (800122c <HAL_RCC_OscConfig+0x330>)
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	4a82      	ldr	r2, [pc, #520]	; (800122c <HAL_RCC_OscConfig+0x330>)
 8001022:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001026:	6013      	str	r3, [r2, #0]
 8001028:	e036      	b.n	8001098 <HAL_RCC_OscConfig+0x19c>
 800102a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800102e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	685b      	ldr	r3, [r3, #4]
 8001036:	2b00      	cmp	r3, #0
 8001038:	d10c      	bne.n	8001054 <HAL_RCC_OscConfig+0x158>
 800103a:	4b7c      	ldr	r3, [pc, #496]	; (800122c <HAL_RCC_OscConfig+0x330>)
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	4a7b      	ldr	r2, [pc, #492]	; (800122c <HAL_RCC_OscConfig+0x330>)
 8001040:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001044:	6013      	str	r3, [r2, #0]
 8001046:	4b79      	ldr	r3, [pc, #484]	; (800122c <HAL_RCC_OscConfig+0x330>)
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	4a78      	ldr	r2, [pc, #480]	; (800122c <HAL_RCC_OscConfig+0x330>)
 800104c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001050:	6013      	str	r3, [r2, #0]
 8001052:	e021      	b.n	8001098 <HAL_RCC_OscConfig+0x19c>
 8001054:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001058:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	685b      	ldr	r3, [r3, #4]
 8001060:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001064:	d10c      	bne.n	8001080 <HAL_RCC_OscConfig+0x184>
 8001066:	4b71      	ldr	r3, [pc, #452]	; (800122c <HAL_RCC_OscConfig+0x330>)
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	4a70      	ldr	r2, [pc, #448]	; (800122c <HAL_RCC_OscConfig+0x330>)
 800106c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001070:	6013      	str	r3, [r2, #0]
 8001072:	4b6e      	ldr	r3, [pc, #440]	; (800122c <HAL_RCC_OscConfig+0x330>)
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	4a6d      	ldr	r2, [pc, #436]	; (800122c <HAL_RCC_OscConfig+0x330>)
 8001078:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800107c:	6013      	str	r3, [r2, #0]
 800107e:	e00b      	b.n	8001098 <HAL_RCC_OscConfig+0x19c>
 8001080:	4b6a      	ldr	r3, [pc, #424]	; (800122c <HAL_RCC_OscConfig+0x330>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	4a69      	ldr	r2, [pc, #420]	; (800122c <HAL_RCC_OscConfig+0x330>)
 8001086:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800108a:	6013      	str	r3, [r2, #0]
 800108c:	4b67      	ldr	r3, [pc, #412]	; (800122c <HAL_RCC_OscConfig+0x330>)
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	4a66      	ldr	r2, [pc, #408]	; (800122c <HAL_RCC_OscConfig+0x330>)
 8001092:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001096:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001098:	4b64      	ldr	r3, [pc, #400]	; (800122c <HAL_RCC_OscConfig+0x330>)
 800109a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800109c:	f023 020f 	bic.w	r2, r3, #15
 80010a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80010a4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	689b      	ldr	r3, [r3, #8]
 80010ac:	495f      	ldr	r1, [pc, #380]	; (800122c <HAL_RCC_OscConfig+0x330>)
 80010ae:	4313      	orrs	r3, r2
 80010b0:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80010b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80010b6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	685b      	ldr	r3, [r3, #4]
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d059      	beq.n	8001176 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010c2:	f7ff fc69 	bl	8000998 <HAL_GetTick>
 80010c6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010ca:	e00a      	b.n	80010e2 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80010cc:	f7ff fc64 	bl	8000998 <HAL_GetTick>
 80010d0:	4602      	mov	r2, r0
 80010d2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80010d6:	1ad3      	subs	r3, r2, r3
 80010d8:	2b64      	cmp	r3, #100	; 0x64
 80010da:	d902      	bls.n	80010e2 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 80010dc:	2303      	movs	r3, #3
 80010de:	f000 bf43 	b.w	8001f68 <HAL_RCC_OscConfig+0x106c>
 80010e2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80010e6:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010ea:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 80010ee:	fa93 f3a3 	rbit	r3, r3
 80010f2:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 80010f6:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010fa:	fab3 f383 	clz	r3, r3
 80010fe:	b2db      	uxtb	r3, r3
 8001100:	095b      	lsrs	r3, r3, #5
 8001102:	b2db      	uxtb	r3, r3
 8001104:	f043 0301 	orr.w	r3, r3, #1
 8001108:	b2db      	uxtb	r3, r3
 800110a:	2b01      	cmp	r3, #1
 800110c:	d102      	bne.n	8001114 <HAL_RCC_OscConfig+0x218>
 800110e:	4b47      	ldr	r3, [pc, #284]	; (800122c <HAL_RCC_OscConfig+0x330>)
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	e015      	b.n	8001140 <HAL_RCC_OscConfig+0x244>
 8001114:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001118:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800111c:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8001120:	fa93 f3a3 	rbit	r3, r3
 8001124:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8001128:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800112c:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8001130:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8001134:	fa93 f3a3 	rbit	r3, r3
 8001138:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 800113c:	4b3b      	ldr	r3, [pc, #236]	; (800122c <HAL_RCC_OscConfig+0x330>)
 800113e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001140:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001144:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8001148:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 800114c:	fa92 f2a2 	rbit	r2, r2
 8001150:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8001154:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8001158:	fab2 f282 	clz	r2, r2
 800115c:	b2d2      	uxtb	r2, r2
 800115e:	f042 0220 	orr.w	r2, r2, #32
 8001162:	b2d2      	uxtb	r2, r2
 8001164:	f002 021f 	and.w	r2, r2, #31
 8001168:	2101      	movs	r1, #1
 800116a:	fa01 f202 	lsl.w	r2, r1, r2
 800116e:	4013      	ands	r3, r2
 8001170:	2b00      	cmp	r3, #0
 8001172:	d0ab      	beq.n	80010cc <HAL_RCC_OscConfig+0x1d0>
 8001174:	e05d      	b.n	8001232 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001176:	f7ff fc0f 	bl	8000998 <HAL_GetTick>
 800117a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800117e:	e00a      	b.n	8001196 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001180:	f7ff fc0a 	bl	8000998 <HAL_GetTick>
 8001184:	4602      	mov	r2, r0
 8001186:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800118a:	1ad3      	subs	r3, r2, r3
 800118c:	2b64      	cmp	r3, #100	; 0x64
 800118e:	d902      	bls.n	8001196 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8001190:	2303      	movs	r3, #3
 8001192:	f000 bee9 	b.w	8001f68 <HAL_RCC_OscConfig+0x106c>
 8001196:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800119a:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800119e:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 80011a2:	fa93 f3a3 	rbit	r3, r3
 80011a6:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 80011aa:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011ae:	fab3 f383 	clz	r3, r3
 80011b2:	b2db      	uxtb	r3, r3
 80011b4:	095b      	lsrs	r3, r3, #5
 80011b6:	b2db      	uxtb	r3, r3
 80011b8:	f043 0301 	orr.w	r3, r3, #1
 80011bc:	b2db      	uxtb	r3, r3
 80011be:	2b01      	cmp	r3, #1
 80011c0:	d102      	bne.n	80011c8 <HAL_RCC_OscConfig+0x2cc>
 80011c2:	4b1a      	ldr	r3, [pc, #104]	; (800122c <HAL_RCC_OscConfig+0x330>)
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	e015      	b.n	80011f4 <HAL_RCC_OscConfig+0x2f8>
 80011c8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80011cc:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011d0:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 80011d4:	fa93 f3a3 	rbit	r3, r3
 80011d8:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80011dc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80011e0:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80011e4:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80011e8:	fa93 f3a3 	rbit	r3, r3
 80011ec:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 80011f0:	4b0e      	ldr	r3, [pc, #56]	; (800122c <HAL_RCC_OscConfig+0x330>)
 80011f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011f4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80011f8:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 80011fc:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8001200:	fa92 f2a2 	rbit	r2, r2
 8001204:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8001208:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 800120c:	fab2 f282 	clz	r2, r2
 8001210:	b2d2      	uxtb	r2, r2
 8001212:	f042 0220 	orr.w	r2, r2, #32
 8001216:	b2d2      	uxtb	r2, r2
 8001218:	f002 021f 	and.w	r2, r2, #31
 800121c:	2101      	movs	r1, #1
 800121e:	fa01 f202 	lsl.w	r2, r1, r2
 8001222:	4013      	ands	r3, r2
 8001224:	2b00      	cmp	r3, #0
 8001226:	d1ab      	bne.n	8001180 <HAL_RCC_OscConfig+0x284>
 8001228:	e003      	b.n	8001232 <HAL_RCC_OscConfig+0x336>
 800122a:	bf00      	nop
 800122c:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001230:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001232:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001236:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	f003 0302 	and.w	r3, r3, #2
 8001242:	2b00      	cmp	r3, #0
 8001244:	f000 817d 	beq.w	8001542 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001248:	4ba6      	ldr	r3, [pc, #664]	; (80014e4 <HAL_RCC_OscConfig+0x5e8>)
 800124a:	685b      	ldr	r3, [r3, #4]
 800124c:	f003 030c 	and.w	r3, r3, #12
 8001250:	2b00      	cmp	r3, #0
 8001252:	d00b      	beq.n	800126c <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001254:	4ba3      	ldr	r3, [pc, #652]	; (80014e4 <HAL_RCC_OscConfig+0x5e8>)
 8001256:	685b      	ldr	r3, [r3, #4]
 8001258:	f003 030c 	and.w	r3, r3, #12
 800125c:	2b08      	cmp	r3, #8
 800125e:	d172      	bne.n	8001346 <HAL_RCC_OscConfig+0x44a>
 8001260:	4ba0      	ldr	r3, [pc, #640]	; (80014e4 <HAL_RCC_OscConfig+0x5e8>)
 8001262:	685b      	ldr	r3, [r3, #4]
 8001264:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001268:	2b00      	cmp	r3, #0
 800126a:	d16c      	bne.n	8001346 <HAL_RCC_OscConfig+0x44a>
 800126c:	2302      	movs	r3, #2
 800126e:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001272:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8001276:	fa93 f3a3 	rbit	r3, r3
 800127a:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 800127e:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001282:	fab3 f383 	clz	r3, r3
 8001286:	b2db      	uxtb	r3, r3
 8001288:	095b      	lsrs	r3, r3, #5
 800128a:	b2db      	uxtb	r3, r3
 800128c:	f043 0301 	orr.w	r3, r3, #1
 8001290:	b2db      	uxtb	r3, r3
 8001292:	2b01      	cmp	r3, #1
 8001294:	d102      	bne.n	800129c <HAL_RCC_OscConfig+0x3a0>
 8001296:	4b93      	ldr	r3, [pc, #588]	; (80014e4 <HAL_RCC_OscConfig+0x5e8>)
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	e013      	b.n	80012c4 <HAL_RCC_OscConfig+0x3c8>
 800129c:	2302      	movs	r3, #2
 800129e:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012a2:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 80012a6:	fa93 f3a3 	rbit	r3, r3
 80012aa:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80012ae:	2302      	movs	r3, #2
 80012b0:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80012b4:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80012b8:	fa93 f3a3 	rbit	r3, r3
 80012bc:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 80012c0:	4b88      	ldr	r3, [pc, #544]	; (80014e4 <HAL_RCC_OscConfig+0x5e8>)
 80012c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012c4:	2202      	movs	r2, #2
 80012c6:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 80012ca:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80012ce:	fa92 f2a2 	rbit	r2, r2
 80012d2:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 80012d6:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 80012da:	fab2 f282 	clz	r2, r2
 80012de:	b2d2      	uxtb	r2, r2
 80012e0:	f042 0220 	orr.w	r2, r2, #32
 80012e4:	b2d2      	uxtb	r2, r2
 80012e6:	f002 021f 	and.w	r2, r2, #31
 80012ea:	2101      	movs	r1, #1
 80012ec:	fa01 f202 	lsl.w	r2, r1, r2
 80012f0:	4013      	ands	r3, r2
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d00a      	beq.n	800130c <HAL_RCC_OscConfig+0x410>
 80012f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80012fa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	691b      	ldr	r3, [r3, #16]
 8001302:	2b01      	cmp	r3, #1
 8001304:	d002      	beq.n	800130c <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8001306:	2301      	movs	r3, #1
 8001308:	f000 be2e 	b.w	8001f68 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800130c:	4b75      	ldr	r3, [pc, #468]	; (80014e4 <HAL_RCC_OscConfig+0x5e8>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001314:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001318:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	695b      	ldr	r3, [r3, #20]
 8001320:	21f8      	movs	r1, #248	; 0xf8
 8001322:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001326:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 800132a:	fa91 f1a1 	rbit	r1, r1
 800132e:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8001332:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8001336:	fab1 f181 	clz	r1, r1
 800133a:	b2c9      	uxtb	r1, r1
 800133c:	408b      	lsls	r3, r1
 800133e:	4969      	ldr	r1, [pc, #420]	; (80014e4 <HAL_RCC_OscConfig+0x5e8>)
 8001340:	4313      	orrs	r3, r2
 8001342:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001344:	e0fd      	b.n	8001542 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001346:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800134a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	691b      	ldr	r3, [r3, #16]
 8001352:	2b00      	cmp	r3, #0
 8001354:	f000 8088 	beq.w	8001468 <HAL_RCC_OscConfig+0x56c>
 8001358:	2301      	movs	r3, #1
 800135a:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800135e:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8001362:	fa93 f3a3 	rbit	r3, r3
 8001366:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 800136a:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800136e:	fab3 f383 	clz	r3, r3
 8001372:	b2db      	uxtb	r3, r3
 8001374:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001378:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800137c:	009b      	lsls	r3, r3, #2
 800137e:	461a      	mov	r2, r3
 8001380:	2301      	movs	r3, #1
 8001382:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001384:	f7ff fb08 	bl	8000998 <HAL_GetTick>
 8001388:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800138c:	e00a      	b.n	80013a4 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800138e:	f7ff fb03 	bl	8000998 <HAL_GetTick>
 8001392:	4602      	mov	r2, r0
 8001394:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001398:	1ad3      	subs	r3, r2, r3
 800139a:	2b02      	cmp	r3, #2
 800139c:	d902      	bls.n	80013a4 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 800139e:	2303      	movs	r3, #3
 80013a0:	f000 bde2 	b.w	8001f68 <HAL_RCC_OscConfig+0x106c>
 80013a4:	2302      	movs	r3, #2
 80013a6:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013aa:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 80013ae:	fa93 f3a3 	rbit	r3, r3
 80013b2:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 80013b6:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013ba:	fab3 f383 	clz	r3, r3
 80013be:	b2db      	uxtb	r3, r3
 80013c0:	095b      	lsrs	r3, r3, #5
 80013c2:	b2db      	uxtb	r3, r3
 80013c4:	f043 0301 	orr.w	r3, r3, #1
 80013c8:	b2db      	uxtb	r3, r3
 80013ca:	2b01      	cmp	r3, #1
 80013cc:	d102      	bne.n	80013d4 <HAL_RCC_OscConfig+0x4d8>
 80013ce:	4b45      	ldr	r3, [pc, #276]	; (80014e4 <HAL_RCC_OscConfig+0x5e8>)
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	e013      	b.n	80013fc <HAL_RCC_OscConfig+0x500>
 80013d4:	2302      	movs	r3, #2
 80013d6:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013da:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80013de:	fa93 f3a3 	rbit	r3, r3
 80013e2:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80013e6:	2302      	movs	r3, #2
 80013e8:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80013ec:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80013f0:	fa93 f3a3 	rbit	r3, r3
 80013f4:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 80013f8:	4b3a      	ldr	r3, [pc, #232]	; (80014e4 <HAL_RCC_OscConfig+0x5e8>)
 80013fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013fc:	2202      	movs	r2, #2
 80013fe:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8001402:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8001406:	fa92 f2a2 	rbit	r2, r2
 800140a:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 800140e:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8001412:	fab2 f282 	clz	r2, r2
 8001416:	b2d2      	uxtb	r2, r2
 8001418:	f042 0220 	orr.w	r2, r2, #32
 800141c:	b2d2      	uxtb	r2, r2
 800141e:	f002 021f 	and.w	r2, r2, #31
 8001422:	2101      	movs	r1, #1
 8001424:	fa01 f202 	lsl.w	r2, r1, r2
 8001428:	4013      	ands	r3, r2
 800142a:	2b00      	cmp	r3, #0
 800142c:	d0af      	beq.n	800138e <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800142e:	4b2d      	ldr	r3, [pc, #180]	; (80014e4 <HAL_RCC_OscConfig+0x5e8>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001436:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800143a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	695b      	ldr	r3, [r3, #20]
 8001442:	21f8      	movs	r1, #248	; 0xf8
 8001444:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001448:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 800144c:	fa91 f1a1 	rbit	r1, r1
 8001450:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8001454:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8001458:	fab1 f181 	clz	r1, r1
 800145c:	b2c9      	uxtb	r1, r1
 800145e:	408b      	lsls	r3, r1
 8001460:	4920      	ldr	r1, [pc, #128]	; (80014e4 <HAL_RCC_OscConfig+0x5e8>)
 8001462:	4313      	orrs	r3, r2
 8001464:	600b      	str	r3, [r1, #0]
 8001466:	e06c      	b.n	8001542 <HAL_RCC_OscConfig+0x646>
 8001468:	2301      	movs	r3, #1
 800146a:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800146e:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8001472:	fa93 f3a3 	rbit	r3, r3
 8001476:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 800147a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800147e:	fab3 f383 	clz	r3, r3
 8001482:	b2db      	uxtb	r3, r3
 8001484:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001488:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800148c:	009b      	lsls	r3, r3, #2
 800148e:	461a      	mov	r2, r3
 8001490:	2300      	movs	r3, #0
 8001492:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001494:	f7ff fa80 	bl	8000998 <HAL_GetTick>
 8001498:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800149c:	e00a      	b.n	80014b4 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800149e:	f7ff fa7b 	bl	8000998 <HAL_GetTick>
 80014a2:	4602      	mov	r2, r0
 80014a4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80014a8:	1ad3      	subs	r3, r2, r3
 80014aa:	2b02      	cmp	r3, #2
 80014ac:	d902      	bls.n	80014b4 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 80014ae:	2303      	movs	r3, #3
 80014b0:	f000 bd5a 	b.w	8001f68 <HAL_RCC_OscConfig+0x106c>
 80014b4:	2302      	movs	r3, #2
 80014b6:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014ba:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80014be:	fa93 f3a3 	rbit	r3, r3
 80014c2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 80014c6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014ca:	fab3 f383 	clz	r3, r3
 80014ce:	b2db      	uxtb	r3, r3
 80014d0:	095b      	lsrs	r3, r3, #5
 80014d2:	b2db      	uxtb	r3, r3
 80014d4:	f043 0301 	orr.w	r3, r3, #1
 80014d8:	b2db      	uxtb	r3, r3
 80014da:	2b01      	cmp	r3, #1
 80014dc:	d104      	bne.n	80014e8 <HAL_RCC_OscConfig+0x5ec>
 80014de:	4b01      	ldr	r3, [pc, #4]	; (80014e4 <HAL_RCC_OscConfig+0x5e8>)
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	e015      	b.n	8001510 <HAL_RCC_OscConfig+0x614>
 80014e4:	40021000 	.word	0x40021000
 80014e8:	2302      	movs	r3, #2
 80014ea:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014ee:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80014f2:	fa93 f3a3 	rbit	r3, r3
 80014f6:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80014fa:	2302      	movs	r3, #2
 80014fc:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001500:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001504:	fa93 f3a3 	rbit	r3, r3
 8001508:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800150c:	4bc8      	ldr	r3, [pc, #800]	; (8001830 <HAL_RCC_OscConfig+0x934>)
 800150e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001510:	2202      	movs	r2, #2
 8001512:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8001516:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800151a:	fa92 f2a2 	rbit	r2, r2
 800151e:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8001522:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8001526:	fab2 f282 	clz	r2, r2
 800152a:	b2d2      	uxtb	r2, r2
 800152c:	f042 0220 	orr.w	r2, r2, #32
 8001530:	b2d2      	uxtb	r2, r2
 8001532:	f002 021f 	and.w	r2, r2, #31
 8001536:	2101      	movs	r1, #1
 8001538:	fa01 f202 	lsl.w	r2, r1, r2
 800153c:	4013      	ands	r3, r2
 800153e:	2b00      	cmp	r3, #0
 8001540:	d1ad      	bne.n	800149e <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001542:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001546:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	f003 0308 	and.w	r3, r3, #8
 8001552:	2b00      	cmp	r3, #0
 8001554:	f000 8110 	beq.w	8001778 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001558:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800155c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	699b      	ldr	r3, [r3, #24]
 8001564:	2b00      	cmp	r3, #0
 8001566:	d079      	beq.n	800165c <HAL_RCC_OscConfig+0x760>
 8001568:	2301      	movs	r3, #1
 800156a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800156e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001572:	fa93 f3a3 	rbit	r3, r3
 8001576:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 800157a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800157e:	fab3 f383 	clz	r3, r3
 8001582:	b2db      	uxtb	r3, r3
 8001584:	461a      	mov	r2, r3
 8001586:	4bab      	ldr	r3, [pc, #684]	; (8001834 <HAL_RCC_OscConfig+0x938>)
 8001588:	4413      	add	r3, r2
 800158a:	009b      	lsls	r3, r3, #2
 800158c:	461a      	mov	r2, r3
 800158e:	2301      	movs	r3, #1
 8001590:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001592:	f7ff fa01 	bl	8000998 <HAL_GetTick>
 8001596:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800159a:	e00a      	b.n	80015b2 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800159c:	f7ff f9fc 	bl	8000998 <HAL_GetTick>
 80015a0:	4602      	mov	r2, r0
 80015a2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80015a6:	1ad3      	subs	r3, r2, r3
 80015a8:	2b02      	cmp	r3, #2
 80015aa:	d902      	bls.n	80015b2 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 80015ac:	2303      	movs	r3, #3
 80015ae:	f000 bcdb 	b.w	8001f68 <HAL_RCC_OscConfig+0x106c>
 80015b2:	2302      	movs	r3, #2
 80015b4:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015b8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80015bc:	fa93 f3a3 	rbit	r3, r3
 80015c0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80015c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015c8:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80015cc:	2202      	movs	r2, #2
 80015ce:	601a      	str	r2, [r3, #0]
 80015d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015d4:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	fa93 f2a3 	rbit	r2, r3
 80015de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015e2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80015e6:	601a      	str	r2, [r3, #0]
 80015e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015ec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80015f0:	2202      	movs	r2, #2
 80015f2:	601a      	str	r2, [r3, #0]
 80015f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015f8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	fa93 f2a3 	rbit	r2, r3
 8001602:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001606:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800160a:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800160c:	4b88      	ldr	r3, [pc, #544]	; (8001830 <HAL_RCC_OscConfig+0x934>)
 800160e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001610:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001614:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001618:	2102      	movs	r1, #2
 800161a:	6019      	str	r1, [r3, #0]
 800161c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001620:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	fa93 f1a3 	rbit	r1, r3
 800162a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800162e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001632:	6019      	str	r1, [r3, #0]
  return result;
 8001634:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001638:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	fab3 f383 	clz	r3, r3
 8001642:	b2db      	uxtb	r3, r3
 8001644:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001648:	b2db      	uxtb	r3, r3
 800164a:	f003 031f 	and.w	r3, r3, #31
 800164e:	2101      	movs	r1, #1
 8001650:	fa01 f303 	lsl.w	r3, r1, r3
 8001654:	4013      	ands	r3, r2
 8001656:	2b00      	cmp	r3, #0
 8001658:	d0a0      	beq.n	800159c <HAL_RCC_OscConfig+0x6a0>
 800165a:	e08d      	b.n	8001778 <HAL_RCC_OscConfig+0x87c>
 800165c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001660:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001664:	2201      	movs	r2, #1
 8001666:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001668:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800166c:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	fa93 f2a3 	rbit	r2, r3
 8001676:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800167a:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800167e:	601a      	str	r2, [r3, #0]
  return result;
 8001680:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001684:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001688:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800168a:	fab3 f383 	clz	r3, r3
 800168e:	b2db      	uxtb	r3, r3
 8001690:	461a      	mov	r2, r3
 8001692:	4b68      	ldr	r3, [pc, #416]	; (8001834 <HAL_RCC_OscConfig+0x938>)
 8001694:	4413      	add	r3, r2
 8001696:	009b      	lsls	r3, r3, #2
 8001698:	461a      	mov	r2, r3
 800169a:	2300      	movs	r3, #0
 800169c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800169e:	f7ff f97b 	bl	8000998 <HAL_GetTick>
 80016a2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016a6:	e00a      	b.n	80016be <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80016a8:	f7ff f976 	bl	8000998 <HAL_GetTick>
 80016ac:	4602      	mov	r2, r0
 80016ae:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80016b2:	1ad3      	subs	r3, r2, r3
 80016b4:	2b02      	cmp	r3, #2
 80016b6:	d902      	bls.n	80016be <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 80016b8:	2303      	movs	r3, #3
 80016ba:	f000 bc55 	b.w	8001f68 <HAL_RCC_OscConfig+0x106c>
 80016be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016c2:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80016c6:	2202      	movs	r2, #2
 80016c8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016ce:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	fa93 f2a3 	rbit	r2, r3
 80016d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016dc:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80016e0:	601a      	str	r2, [r3, #0]
 80016e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016e6:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80016ea:	2202      	movs	r2, #2
 80016ec:	601a      	str	r2, [r3, #0]
 80016ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016f2:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	fa93 f2a3 	rbit	r2, r3
 80016fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001700:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001704:	601a      	str	r2, [r3, #0]
 8001706:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800170a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800170e:	2202      	movs	r2, #2
 8001710:	601a      	str	r2, [r3, #0]
 8001712:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001716:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	fa93 f2a3 	rbit	r2, r3
 8001720:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001724:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001728:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800172a:	4b41      	ldr	r3, [pc, #260]	; (8001830 <HAL_RCC_OscConfig+0x934>)
 800172c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800172e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001732:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8001736:	2102      	movs	r1, #2
 8001738:	6019      	str	r1, [r3, #0]
 800173a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800173e:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	fa93 f1a3 	rbit	r1, r3
 8001748:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800174c:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001750:	6019      	str	r1, [r3, #0]
  return result;
 8001752:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001756:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	fab3 f383 	clz	r3, r3
 8001760:	b2db      	uxtb	r3, r3
 8001762:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001766:	b2db      	uxtb	r3, r3
 8001768:	f003 031f 	and.w	r3, r3, #31
 800176c:	2101      	movs	r1, #1
 800176e:	fa01 f303 	lsl.w	r3, r1, r3
 8001772:	4013      	ands	r3, r2
 8001774:	2b00      	cmp	r3, #0
 8001776:	d197      	bne.n	80016a8 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001778:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800177c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	f003 0304 	and.w	r3, r3, #4
 8001788:	2b00      	cmp	r3, #0
 800178a:	f000 81a1 	beq.w	8001ad0 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 800178e:	2300      	movs	r3, #0
 8001790:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001794:	4b26      	ldr	r3, [pc, #152]	; (8001830 <HAL_RCC_OscConfig+0x934>)
 8001796:	69db      	ldr	r3, [r3, #28]
 8001798:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800179c:	2b00      	cmp	r3, #0
 800179e:	d116      	bne.n	80017ce <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80017a0:	4b23      	ldr	r3, [pc, #140]	; (8001830 <HAL_RCC_OscConfig+0x934>)
 80017a2:	69db      	ldr	r3, [r3, #28]
 80017a4:	4a22      	ldr	r2, [pc, #136]	; (8001830 <HAL_RCC_OscConfig+0x934>)
 80017a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017aa:	61d3      	str	r3, [r2, #28]
 80017ac:	4b20      	ldr	r3, [pc, #128]	; (8001830 <HAL_RCC_OscConfig+0x934>)
 80017ae:	69db      	ldr	r3, [r3, #28]
 80017b0:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80017b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017b8:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 80017bc:	601a      	str	r2, [r3, #0]
 80017be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017c2:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 80017c6:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80017c8:	2301      	movs	r3, #1
 80017ca:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017ce:	4b1a      	ldr	r3, [pc, #104]	; (8001838 <HAL_RCC_OscConfig+0x93c>)
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d11a      	bne.n	8001810 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80017da:	4b17      	ldr	r3, [pc, #92]	; (8001838 <HAL_RCC_OscConfig+0x93c>)
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	4a16      	ldr	r2, [pc, #88]	; (8001838 <HAL_RCC_OscConfig+0x93c>)
 80017e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017e4:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80017e6:	f7ff f8d7 	bl	8000998 <HAL_GetTick>
 80017ea:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017ee:	e009      	b.n	8001804 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80017f0:	f7ff f8d2 	bl	8000998 <HAL_GetTick>
 80017f4:	4602      	mov	r2, r0
 80017f6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80017fa:	1ad3      	subs	r3, r2, r3
 80017fc:	2b64      	cmp	r3, #100	; 0x64
 80017fe:	d901      	bls.n	8001804 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8001800:	2303      	movs	r3, #3
 8001802:	e3b1      	b.n	8001f68 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001804:	4b0c      	ldr	r3, [pc, #48]	; (8001838 <HAL_RCC_OscConfig+0x93c>)
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800180c:	2b00      	cmp	r3, #0
 800180e:	d0ef      	beq.n	80017f0 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001810:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001814:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	68db      	ldr	r3, [r3, #12]
 800181c:	2b01      	cmp	r3, #1
 800181e:	d10d      	bne.n	800183c <HAL_RCC_OscConfig+0x940>
 8001820:	4b03      	ldr	r3, [pc, #12]	; (8001830 <HAL_RCC_OscConfig+0x934>)
 8001822:	6a1b      	ldr	r3, [r3, #32]
 8001824:	4a02      	ldr	r2, [pc, #8]	; (8001830 <HAL_RCC_OscConfig+0x934>)
 8001826:	f043 0301 	orr.w	r3, r3, #1
 800182a:	6213      	str	r3, [r2, #32]
 800182c:	e03c      	b.n	80018a8 <HAL_RCC_OscConfig+0x9ac>
 800182e:	bf00      	nop
 8001830:	40021000 	.word	0x40021000
 8001834:	10908120 	.word	0x10908120
 8001838:	40007000 	.word	0x40007000
 800183c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001840:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	68db      	ldr	r3, [r3, #12]
 8001848:	2b00      	cmp	r3, #0
 800184a:	d10c      	bne.n	8001866 <HAL_RCC_OscConfig+0x96a>
 800184c:	4bc1      	ldr	r3, [pc, #772]	; (8001b54 <HAL_RCC_OscConfig+0xc58>)
 800184e:	6a1b      	ldr	r3, [r3, #32]
 8001850:	4ac0      	ldr	r2, [pc, #768]	; (8001b54 <HAL_RCC_OscConfig+0xc58>)
 8001852:	f023 0301 	bic.w	r3, r3, #1
 8001856:	6213      	str	r3, [r2, #32]
 8001858:	4bbe      	ldr	r3, [pc, #760]	; (8001b54 <HAL_RCC_OscConfig+0xc58>)
 800185a:	6a1b      	ldr	r3, [r3, #32]
 800185c:	4abd      	ldr	r2, [pc, #756]	; (8001b54 <HAL_RCC_OscConfig+0xc58>)
 800185e:	f023 0304 	bic.w	r3, r3, #4
 8001862:	6213      	str	r3, [r2, #32]
 8001864:	e020      	b.n	80018a8 <HAL_RCC_OscConfig+0x9ac>
 8001866:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800186a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	68db      	ldr	r3, [r3, #12]
 8001872:	2b05      	cmp	r3, #5
 8001874:	d10c      	bne.n	8001890 <HAL_RCC_OscConfig+0x994>
 8001876:	4bb7      	ldr	r3, [pc, #732]	; (8001b54 <HAL_RCC_OscConfig+0xc58>)
 8001878:	6a1b      	ldr	r3, [r3, #32]
 800187a:	4ab6      	ldr	r2, [pc, #728]	; (8001b54 <HAL_RCC_OscConfig+0xc58>)
 800187c:	f043 0304 	orr.w	r3, r3, #4
 8001880:	6213      	str	r3, [r2, #32]
 8001882:	4bb4      	ldr	r3, [pc, #720]	; (8001b54 <HAL_RCC_OscConfig+0xc58>)
 8001884:	6a1b      	ldr	r3, [r3, #32]
 8001886:	4ab3      	ldr	r2, [pc, #716]	; (8001b54 <HAL_RCC_OscConfig+0xc58>)
 8001888:	f043 0301 	orr.w	r3, r3, #1
 800188c:	6213      	str	r3, [r2, #32]
 800188e:	e00b      	b.n	80018a8 <HAL_RCC_OscConfig+0x9ac>
 8001890:	4bb0      	ldr	r3, [pc, #704]	; (8001b54 <HAL_RCC_OscConfig+0xc58>)
 8001892:	6a1b      	ldr	r3, [r3, #32]
 8001894:	4aaf      	ldr	r2, [pc, #700]	; (8001b54 <HAL_RCC_OscConfig+0xc58>)
 8001896:	f023 0301 	bic.w	r3, r3, #1
 800189a:	6213      	str	r3, [r2, #32]
 800189c:	4bad      	ldr	r3, [pc, #692]	; (8001b54 <HAL_RCC_OscConfig+0xc58>)
 800189e:	6a1b      	ldr	r3, [r3, #32]
 80018a0:	4aac      	ldr	r2, [pc, #688]	; (8001b54 <HAL_RCC_OscConfig+0xc58>)
 80018a2:	f023 0304 	bic.w	r3, r3, #4
 80018a6:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80018a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018ac:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	68db      	ldr	r3, [r3, #12]
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	f000 8081 	beq.w	80019bc <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018ba:	f7ff f86d 	bl	8000998 <HAL_GetTick>
 80018be:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018c2:	e00b      	b.n	80018dc <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80018c4:	f7ff f868 	bl	8000998 <HAL_GetTick>
 80018c8:	4602      	mov	r2, r0
 80018ca:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80018ce:	1ad3      	subs	r3, r2, r3
 80018d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80018d4:	4293      	cmp	r3, r2
 80018d6:	d901      	bls.n	80018dc <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 80018d8:	2303      	movs	r3, #3
 80018da:	e345      	b.n	8001f68 <HAL_RCC_OscConfig+0x106c>
 80018dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018e0:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80018e4:	2202      	movs	r2, #2
 80018e6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018ec:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	fa93 f2a3 	rbit	r2, r3
 80018f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018fa:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80018fe:	601a      	str	r2, [r3, #0]
 8001900:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001904:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8001908:	2202      	movs	r2, #2
 800190a:	601a      	str	r2, [r3, #0]
 800190c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001910:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	fa93 f2a3 	rbit	r2, r3
 800191a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800191e:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8001922:	601a      	str	r2, [r3, #0]
  return result;
 8001924:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001928:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800192c:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800192e:	fab3 f383 	clz	r3, r3
 8001932:	b2db      	uxtb	r3, r3
 8001934:	095b      	lsrs	r3, r3, #5
 8001936:	b2db      	uxtb	r3, r3
 8001938:	f043 0302 	orr.w	r3, r3, #2
 800193c:	b2db      	uxtb	r3, r3
 800193e:	2b02      	cmp	r3, #2
 8001940:	d102      	bne.n	8001948 <HAL_RCC_OscConfig+0xa4c>
 8001942:	4b84      	ldr	r3, [pc, #528]	; (8001b54 <HAL_RCC_OscConfig+0xc58>)
 8001944:	6a1b      	ldr	r3, [r3, #32]
 8001946:	e013      	b.n	8001970 <HAL_RCC_OscConfig+0xa74>
 8001948:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800194c:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8001950:	2202      	movs	r2, #2
 8001952:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001954:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001958:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	fa93 f2a3 	rbit	r2, r3
 8001962:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001966:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 800196a:	601a      	str	r2, [r3, #0]
 800196c:	4b79      	ldr	r3, [pc, #484]	; (8001b54 <HAL_RCC_OscConfig+0xc58>)
 800196e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001970:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001974:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8001978:	2102      	movs	r1, #2
 800197a:	6011      	str	r1, [r2, #0]
 800197c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001980:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8001984:	6812      	ldr	r2, [r2, #0]
 8001986:	fa92 f1a2 	rbit	r1, r2
 800198a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800198e:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8001992:	6011      	str	r1, [r2, #0]
  return result;
 8001994:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001998:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 800199c:	6812      	ldr	r2, [r2, #0]
 800199e:	fab2 f282 	clz	r2, r2
 80019a2:	b2d2      	uxtb	r2, r2
 80019a4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80019a8:	b2d2      	uxtb	r2, r2
 80019aa:	f002 021f 	and.w	r2, r2, #31
 80019ae:	2101      	movs	r1, #1
 80019b0:	fa01 f202 	lsl.w	r2, r1, r2
 80019b4:	4013      	ands	r3, r2
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d084      	beq.n	80018c4 <HAL_RCC_OscConfig+0x9c8>
 80019ba:	e07f      	b.n	8001abc <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019bc:	f7fe ffec 	bl	8000998 <HAL_GetTick>
 80019c0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80019c4:	e00b      	b.n	80019de <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80019c6:	f7fe ffe7 	bl	8000998 <HAL_GetTick>
 80019ca:	4602      	mov	r2, r0
 80019cc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80019d0:	1ad3      	subs	r3, r2, r3
 80019d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80019d6:	4293      	cmp	r3, r2
 80019d8:	d901      	bls.n	80019de <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 80019da:	2303      	movs	r3, #3
 80019dc:	e2c4      	b.n	8001f68 <HAL_RCC_OscConfig+0x106c>
 80019de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019e2:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80019e6:	2202      	movs	r2, #2
 80019e8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019ee:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	fa93 f2a3 	rbit	r2, r3
 80019f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019fc:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8001a00:	601a      	str	r2, [r3, #0]
 8001a02:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a06:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8001a0a:	2202      	movs	r2, #2
 8001a0c:	601a      	str	r2, [r3, #0]
 8001a0e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a12:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	fa93 f2a3 	rbit	r2, r3
 8001a1c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a20:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8001a24:	601a      	str	r2, [r3, #0]
  return result;
 8001a26:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a2a:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8001a2e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a30:	fab3 f383 	clz	r3, r3
 8001a34:	b2db      	uxtb	r3, r3
 8001a36:	095b      	lsrs	r3, r3, #5
 8001a38:	b2db      	uxtb	r3, r3
 8001a3a:	f043 0302 	orr.w	r3, r3, #2
 8001a3e:	b2db      	uxtb	r3, r3
 8001a40:	2b02      	cmp	r3, #2
 8001a42:	d102      	bne.n	8001a4a <HAL_RCC_OscConfig+0xb4e>
 8001a44:	4b43      	ldr	r3, [pc, #268]	; (8001b54 <HAL_RCC_OscConfig+0xc58>)
 8001a46:	6a1b      	ldr	r3, [r3, #32]
 8001a48:	e013      	b.n	8001a72 <HAL_RCC_OscConfig+0xb76>
 8001a4a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a4e:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8001a52:	2202      	movs	r2, #2
 8001a54:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a56:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a5a:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	fa93 f2a3 	rbit	r2, r3
 8001a64:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a68:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8001a6c:	601a      	str	r2, [r3, #0]
 8001a6e:	4b39      	ldr	r3, [pc, #228]	; (8001b54 <HAL_RCC_OscConfig+0xc58>)
 8001a70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a72:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001a76:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8001a7a:	2102      	movs	r1, #2
 8001a7c:	6011      	str	r1, [r2, #0]
 8001a7e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001a82:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8001a86:	6812      	ldr	r2, [r2, #0]
 8001a88:	fa92 f1a2 	rbit	r1, r2
 8001a8c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001a90:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8001a94:	6011      	str	r1, [r2, #0]
  return result;
 8001a96:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001a9a:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8001a9e:	6812      	ldr	r2, [r2, #0]
 8001aa0:	fab2 f282 	clz	r2, r2
 8001aa4:	b2d2      	uxtb	r2, r2
 8001aa6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001aaa:	b2d2      	uxtb	r2, r2
 8001aac:	f002 021f 	and.w	r2, r2, #31
 8001ab0:	2101      	movs	r1, #1
 8001ab2:	fa01 f202 	lsl.w	r2, r1, r2
 8001ab6:	4013      	ands	r3, r2
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d184      	bne.n	80019c6 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001abc:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8001ac0:	2b01      	cmp	r3, #1
 8001ac2:	d105      	bne.n	8001ad0 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ac4:	4b23      	ldr	r3, [pc, #140]	; (8001b54 <HAL_RCC_OscConfig+0xc58>)
 8001ac6:	69db      	ldr	r3, [r3, #28]
 8001ac8:	4a22      	ldr	r2, [pc, #136]	; (8001b54 <HAL_RCC_OscConfig+0xc58>)
 8001aca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ace:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001ad0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ad4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	69db      	ldr	r3, [r3, #28]
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	f000 8242 	beq.w	8001f66 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001ae2:	4b1c      	ldr	r3, [pc, #112]	; (8001b54 <HAL_RCC_OscConfig+0xc58>)
 8001ae4:	685b      	ldr	r3, [r3, #4]
 8001ae6:	f003 030c 	and.w	r3, r3, #12
 8001aea:	2b08      	cmp	r3, #8
 8001aec:	f000 8213 	beq.w	8001f16 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001af0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001af4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	69db      	ldr	r3, [r3, #28]
 8001afc:	2b02      	cmp	r3, #2
 8001afe:	f040 8162 	bne.w	8001dc6 <HAL_RCC_OscConfig+0xeca>
 8001b02:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b06:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8001b0a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001b0e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b10:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b14:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	fa93 f2a3 	rbit	r2, r3
 8001b1e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b22:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8001b26:	601a      	str	r2, [r3, #0]
  return result;
 8001b28:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b2c:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8001b30:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b32:	fab3 f383 	clz	r3, r3
 8001b36:	b2db      	uxtb	r3, r3
 8001b38:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001b3c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001b40:	009b      	lsls	r3, r3, #2
 8001b42:	461a      	mov	r2, r3
 8001b44:	2300      	movs	r3, #0
 8001b46:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b48:	f7fe ff26 	bl	8000998 <HAL_GetTick>
 8001b4c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b50:	e00c      	b.n	8001b6c <HAL_RCC_OscConfig+0xc70>
 8001b52:	bf00      	nop
 8001b54:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b58:	f7fe ff1e 	bl	8000998 <HAL_GetTick>
 8001b5c:	4602      	mov	r2, r0
 8001b5e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001b62:	1ad3      	subs	r3, r2, r3
 8001b64:	2b02      	cmp	r3, #2
 8001b66:	d901      	bls.n	8001b6c <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8001b68:	2303      	movs	r3, #3
 8001b6a:	e1fd      	b.n	8001f68 <HAL_RCC_OscConfig+0x106c>
 8001b6c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b70:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8001b74:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001b78:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b7a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b7e:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	fa93 f2a3 	rbit	r2, r3
 8001b88:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b8c:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001b90:	601a      	str	r2, [r3, #0]
  return result;
 8001b92:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b96:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001b9a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b9c:	fab3 f383 	clz	r3, r3
 8001ba0:	b2db      	uxtb	r3, r3
 8001ba2:	095b      	lsrs	r3, r3, #5
 8001ba4:	b2db      	uxtb	r3, r3
 8001ba6:	f043 0301 	orr.w	r3, r3, #1
 8001baa:	b2db      	uxtb	r3, r3
 8001bac:	2b01      	cmp	r3, #1
 8001bae:	d102      	bne.n	8001bb6 <HAL_RCC_OscConfig+0xcba>
 8001bb0:	4bb0      	ldr	r3, [pc, #704]	; (8001e74 <HAL_RCC_OscConfig+0xf78>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	e027      	b.n	8001c06 <HAL_RCC_OscConfig+0xd0a>
 8001bb6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bba:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8001bbe:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001bc2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bc4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bc8:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	fa93 f2a3 	rbit	r2, r3
 8001bd2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bd6:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8001bda:	601a      	str	r2, [r3, #0]
 8001bdc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001be0:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8001be4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001be8:	601a      	str	r2, [r3, #0]
 8001bea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bee:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	fa93 f2a3 	rbit	r2, r3
 8001bf8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bfc:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8001c00:	601a      	str	r2, [r3, #0]
 8001c02:	4b9c      	ldr	r3, [pc, #624]	; (8001e74 <HAL_RCC_OscConfig+0xf78>)
 8001c04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c06:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001c0a:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8001c0e:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001c12:	6011      	str	r1, [r2, #0]
 8001c14:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001c18:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8001c1c:	6812      	ldr	r2, [r2, #0]
 8001c1e:	fa92 f1a2 	rbit	r1, r2
 8001c22:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001c26:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8001c2a:	6011      	str	r1, [r2, #0]
  return result;
 8001c2c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001c30:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8001c34:	6812      	ldr	r2, [r2, #0]
 8001c36:	fab2 f282 	clz	r2, r2
 8001c3a:	b2d2      	uxtb	r2, r2
 8001c3c:	f042 0220 	orr.w	r2, r2, #32
 8001c40:	b2d2      	uxtb	r2, r2
 8001c42:	f002 021f 	and.w	r2, r2, #31
 8001c46:	2101      	movs	r1, #1
 8001c48:	fa01 f202 	lsl.w	r2, r1, r2
 8001c4c:	4013      	ands	r3, r2
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d182      	bne.n	8001b58 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001c52:	4b88      	ldr	r3, [pc, #544]	; (8001e74 <HAL_RCC_OscConfig+0xf78>)
 8001c54:	685b      	ldr	r3, [r3, #4]
 8001c56:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001c5a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c5e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8001c66:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c6a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	6a1b      	ldr	r3, [r3, #32]
 8001c72:	430b      	orrs	r3, r1
 8001c74:	497f      	ldr	r1, [pc, #508]	; (8001e74 <HAL_RCC_OscConfig+0xf78>)
 8001c76:	4313      	orrs	r3, r2
 8001c78:	604b      	str	r3, [r1, #4]
 8001c7a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c7e:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8001c82:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001c86:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c88:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c8c:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	fa93 f2a3 	rbit	r2, r3
 8001c96:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c9a:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8001c9e:	601a      	str	r2, [r3, #0]
  return result;
 8001ca0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ca4:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8001ca8:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001caa:	fab3 f383 	clz	r3, r3
 8001cae:	b2db      	uxtb	r3, r3
 8001cb0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001cb4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001cb8:	009b      	lsls	r3, r3, #2
 8001cba:	461a      	mov	r2, r3
 8001cbc:	2301      	movs	r3, #1
 8001cbe:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cc0:	f7fe fe6a 	bl	8000998 <HAL_GetTick>
 8001cc4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001cc8:	e009      	b.n	8001cde <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001cca:	f7fe fe65 	bl	8000998 <HAL_GetTick>
 8001cce:	4602      	mov	r2, r0
 8001cd0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001cd4:	1ad3      	subs	r3, r2, r3
 8001cd6:	2b02      	cmp	r3, #2
 8001cd8:	d901      	bls.n	8001cde <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8001cda:	2303      	movs	r3, #3
 8001cdc:	e144      	b.n	8001f68 <HAL_RCC_OscConfig+0x106c>
 8001cde:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ce2:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8001ce6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001cea:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cf0:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	fa93 f2a3 	rbit	r2, r3
 8001cfa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cfe:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8001d02:	601a      	str	r2, [r3, #0]
  return result;
 8001d04:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d08:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8001d0c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001d0e:	fab3 f383 	clz	r3, r3
 8001d12:	b2db      	uxtb	r3, r3
 8001d14:	095b      	lsrs	r3, r3, #5
 8001d16:	b2db      	uxtb	r3, r3
 8001d18:	f043 0301 	orr.w	r3, r3, #1
 8001d1c:	b2db      	uxtb	r3, r3
 8001d1e:	2b01      	cmp	r3, #1
 8001d20:	d102      	bne.n	8001d28 <HAL_RCC_OscConfig+0xe2c>
 8001d22:	4b54      	ldr	r3, [pc, #336]	; (8001e74 <HAL_RCC_OscConfig+0xf78>)
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	e027      	b.n	8001d78 <HAL_RCC_OscConfig+0xe7c>
 8001d28:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d2c:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8001d30:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001d34:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d36:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d3a:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	fa93 f2a3 	rbit	r2, r3
 8001d44:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d48:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8001d4c:	601a      	str	r2, [r3, #0]
 8001d4e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d52:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8001d56:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001d5a:	601a      	str	r2, [r3, #0]
 8001d5c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d60:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	fa93 f2a3 	rbit	r2, r3
 8001d6a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d6e:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8001d72:	601a      	str	r2, [r3, #0]
 8001d74:	4b3f      	ldr	r3, [pc, #252]	; (8001e74 <HAL_RCC_OscConfig+0xf78>)
 8001d76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d78:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001d7c:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8001d80:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001d84:	6011      	str	r1, [r2, #0]
 8001d86:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001d8a:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8001d8e:	6812      	ldr	r2, [r2, #0]
 8001d90:	fa92 f1a2 	rbit	r1, r2
 8001d94:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001d98:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8001d9c:	6011      	str	r1, [r2, #0]
  return result;
 8001d9e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001da2:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8001da6:	6812      	ldr	r2, [r2, #0]
 8001da8:	fab2 f282 	clz	r2, r2
 8001dac:	b2d2      	uxtb	r2, r2
 8001dae:	f042 0220 	orr.w	r2, r2, #32
 8001db2:	b2d2      	uxtb	r2, r2
 8001db4:	f002 021f 	and.w	r2, r2, #31
 8001db8:	2101      	movs	r1, #1
 8001dba:	fa01 f202 	lsl.w	r2, r1, r2
 8001dbe:	4013      	ands	r3, r2
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d082      	beq.n	8001cca <HAL_RCC_OscConfig+0xdce>
 8001dc4:	e0cf      	b.n	8001f66 <HAL_RCC_OscConfig+0x106a>
 8001dc6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001dca:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8001dce:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001dd2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dd4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001dd8:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	fa93 f2a3 	rbit	r2, r3
 8001de2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001de6:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8001dea:	601a      	str	r2, [r3, #0]
  return result;
 8001dec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001df0:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8001df4:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001df6:	fab3 f383 	clz	r3, r3
 8001dfa:	b2db      	uxtb	r3, r3
 8001dfc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001e00:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001e04:	009b      	lsls	r3, r3, #2
 8001e06:	461a      	mov	r2, r3
 8001e08:	2300      	movs	r3, #0
 8001e0a:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e0c:	f7fe fdc4 	bl	8000998 <HAL_GetTick>
 8001e10:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e14:	e009      	b.n	8001e2a <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e16:	f7fe fdbf 	bl	8000998 <HAL_GetTick>
 8001e1a:	4602      	mov	r2, r0
 8001e1c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001e20:	1ad3      	subs	r3, r2, r3
 8001e22:	2b02      	cmp	r3, #2
 8001e24:	d901      	bls.n	8001e2a <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8001e26:	2303      	movs	r3, #3
 8001e28:	e09e      	b.n	8001f68 <HAL_RCC_OscConfig+0x106c>
 8001e2a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e2e:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8001e32:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001e36:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e38:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e3c:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	fa93 f2a3 	rbit	r2, r3
 8001e46:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e4a:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8001e4e:	601a      	str	r2, [r3, #0]
  return result;
 8001e50:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e54:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8001e58:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e5a:	fab3 f383 	clz	r3, r3
 8001e5e:	b2db      	uxtb	r3, r3
 8001e60:	095b      	lsrs	r3, r3, #5
 8001e62:	b2db      	uxtb	r3, r3
 8001e64:	f043 0301 	orr.w	r3, r3, #1
 8001e68:	b2db      	uxtb	r3, r3
 8001e6a:	2b01      	cmp	r3, #1
 8001e6c:	d104      	bne.n	8001e78 <HAL_RCC_OscConfig+0xf7c>
 8001e6e:	4b01      	ldr	r3, [pc, #4]	; (8001e74 <HAL_RCC_OscConfig+0xf78>)
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	e029      	b.n	8001ec8 <HAL_RCC_OscConfig+0xfcc>
 8001e74:	40021000 	.word	0x40021000
 8001e78:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e7c:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8001e80:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001e84:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e86:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e8a:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	fa93 f2a3 	rbit	r2, r3
 8001e94:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e98:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8001e9c:	601a      	str	r2, [r3, #0]
 8001e9e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ea2:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8001ea6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001eaa:	601a      	str	r2, [r3, #0]
 8001eac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001eb0:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	fa93 f2a3 	rbit	r2, r3
 8001eba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ebe:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8001ec2:	601a      	str	r2, [r3, #0]
 8001ec4:	4b2b      	ldr	r3, [pc, #172]	; (8001f74 <HAL_RCC_OscConfig+0x1078>)
 8001ec6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ec8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001ecc:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8001ed0:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001ed4:	6011      	str	r1, [r2, #0]
 8001ed6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001eda:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8001ede:	6812      	ldr	r2, [r2, #0]
 8001ee0:	fa92 f1a2 	rbit	r1, r2
 8001ee4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001ee8:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8001eec:	6011      	str	r1, [r2, #0]
  return result;
 8001eee:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001ef2:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8001ef6:	6812      	ldr	r2, [r2, #0]
 8001ef8:	fab2 f282 	clz	r2, r2
 8001efc:	b2d2      	uxtb	r2, r2
 8001efe:	f042 0220 	orr.w	r2, r2, #32
 8001f02:	b2d2      	uxtb	r2, r2
 8001f04:	f002 021f 	and.w	r2, r2, #31
 8001f08:	2101      	movs	r1, #1
 8001f0a:	fa01 f202 	lsl.w	r2, r1, r2
 8001f0e:	4013      	ands	r3, r2
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d180      	bne.n	8001e16 <HAL_RCC_OscConfig+0xf1a>
 8001f14:	e027      	b.n	8001f66 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001f16:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f1a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	69db      	ldr	r3, [r3, #28]
 8001f22:	2b01      	cmp	r3, #1
 8001f24:	d101      	bne.n	8001f2a <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8001f26:	2301      	movs	r3, #1
 8001f28:	e01e      	b.n	8001f68 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001f2a:	4b12      	ldr	r3, [pc, #72]	; (8001f74 <HAL_RCC_OscConfig+0x1078>)
 8001f2c:	685b      	ldr	r3, [r3, #4]
 8001f2e:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001f32:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001f36:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001f3a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f3e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	6a1b      	ldr	r3, [r3, #32]
 8001f46:	429a      	cmp	r2, r3
 8001f48:	d10b      	bne.n	8001f62 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8001f4a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001f4e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001f52:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f56:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001f5e:	429a      	cmp	r2, r3
 8001f60:	d001      	beq.n	8001f66 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8001f62:	2301      	movs	r3, #1
 8001f64:	e000      	b.n	8001f68 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8001f66:	2300      	movs	r3, #0
}
 8001f68:	4618      	mov	r0, r3
 8001f6a:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	bd80      	pop	{r7, pc}
 8001f72:	bf00      	nop
 8001f74:	40021000 	.word	0x40021000

08001f78 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b09e      	sub	sp, #120	; 0x78
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
 8001f80:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001f82:	2300      	movs	r3, #0
 8001f84:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d101      	bne.n	8001f90 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001f8c:	2301      	movs	r3, #1
 8001f8e:	e162      	b.n	8002256 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001f90:	4b90      	ldr	r3, [pc, #576]	; (80021d4 <HAL_RCC_ClockConfig+0x25c>)
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f003 0307 	and.w	r3, r3, #7
 8001f98:	683a      	ldr	r2, [r7, #0]
 8001f9a:	429a      	cmp	r2, r3
 8001f9c:	d910      	bls.n	8001fc0 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f9e:	4b8d      	ldr	r3, [pc, #564]	; (80021d4 <HAL_RCC_ClockConfig+0x25c>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f023 0207 	bic.w	r2, r3, #7
 8001fa6:	498b      	ldr	r1, [pc, #556]	; (80021d4 <HAL_RCC_ClockConfig+0x25c>)
 8001fa8:	683b      	ldr	r3, [r7, #0]
 8001faa:	4313      	orrs	r3, r2
 8001fac:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fae:	4b89      	ldr	r3, [pc, #548]	; (80021d4 <HAL_RCC_ClockConfig+0x25c>)
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f003 0307 	and.w	r3, r3, #7
 8001fb6:	683a      	ldr	r2, [r7, #0]
 8001fb8:	429a      	cmp	r2, r3
 8001fba:	d001      	beq.n	8001fc0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001fbc:	2301      	movs	r3, #1
 8001fbe:	e14a      	b.n	8002256 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f003 0302 	and.w	r3, r3, #2
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d008      	beq.n	8001fde <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001fcc:	4b82      	ldr	r3, [pc, #520]	; (80021d8 <HAL_RCC_ClockConfig+0x260>)
 8001fce:	685b      	ldr	r3, [r3, #4]
 8001fd0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	689b      	ldr	r3, [r3, #8]
 8001fd8:	497f      	ldr	r1, [pc, #508]	; (80021d8 <HAL_RCC_ClockConfig+0x260>)
 8001fda:	4313      	orrs	r3, r2
 8001fdc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f003 0301 	and.w	r3, r3, #1
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	f000 80dc 	beq.w	80021a4 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	685b      	ldr	r3, [r3, #4]
 8001ff0:	2b01      	cmp	r3, #1
 8001ff2:	d13c      	bne.n	800206e <HAL_RCC_ClockConfig+0xf6>
 8001ff4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001ff8:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ffa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001ffc:	fa93 f3a3 	rbit	r3, r3
 8002000:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002002:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002004:	fab3 f383 	clz	r3, r3
 8002008:	b2db      	uxtb	r3, r3
 800200a:	095b      	lsrs	r3, r3, #5
 800200c:	b2db      	uxtb	r3, r3
 800200e:	f043 0301 	orr.w	r3, r3, #1
 8002012:	b2db      	uxtb	r3, r3
 8002014:	2b01      	cmp	r3, #1
 8002016:	d102      	bne.n	800201e <HAL_RCC_ClockConfig+0xa6>
 8002018:	4b6f      	ldr	r3, [pc, #444]	; (80021d8 <HAL_RCC_ClockConfig+0x260>)
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	e00f      	b.n	800203e <HAL_RCC_ClockConfig+0xc6>
 800201e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002022:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002024:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002026:	fa93 f3a3 	rbit	r3, r3
 800202a:	667b      	str	r3, [r7, #100]	; 0x64
 800202c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002030:	663b      	str	r3, [r7, #96]	; 0x60
 8002032:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002034:	fa93 f3a3 	rbit	r3, r3
 8002038:	65fb      	str	r3, [r7, #92]	; 0x5c
 800203a:	4b67      	ldr	r3, [pc, #412]	; (80021d8 <HAL_RCC_ClockConfig+0x260>)
 800203c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800203e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002042:	65ba      	str	r2, [r7, #88]	; 0x58
 8002044:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002046:	fa92 f2a2 	rbit	r2, r2
 800204a:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 800204c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800204e:	fab2 f282 	clz	r2, r2
 8002052:	b2d2      	uxtb	r2, r2
 8002054:	f042 0220 	orr.w	r2, r2, #32
 8002058:	b2d2      	uxtb	r2, r2
 800205a:	f002 021f 	and.w	r2, r2, #31
 800205e:	2101      	movs	r1, #1
 8002060:	fa01 f202 	lsl.w	r2, r1, r2
 8002064:	4013      	ands	r3, r2
 8002066:	2b00      	cmp	r3, #0
 8002068:	d17b      	bne.n	8002162 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800206a:	2301      	movs	r3, #1
 800206c:	e0f3      	b.n	8002256 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	685b      	ldr	r3, [r3, #4]
 8002072:	2b02      	cmp	r3, #2
 8002074:	d13c      	bne.n	80020f0 <HAL_RCC_ClockConfig+0x178>
 8002076:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800207a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800207c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800207e:	fa93 f3a3 	rbit	r3, r3
 8002082:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002084:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002086:	fab3 f383 	clz	r3, r3
 800208a:	b2db      	uxtb	r3, r3
 800208c:	095b      	lsrs	r3, r3, #5
 800208e:	b2db      	uxtb	r3, r3
 8002090:	f043 0301 	orr.w	r3, r3, #1
 8002094:	b2db      	uxtb	r3, r3
 8002096:	2b01      	cmp	r3, #1
 8002098:	d102      	bne.n	80020a0 <HAL_RCC_ClockConfig+0x128>
 800209a:	4b4f      	ldr	r3, [pc, #316]	; (80021d8 <HAL_RCC_ClockConfig+0x260>)
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	e00f      	b.n	80020c0 <HAL_RCC_ClockConfig+0x148>
 80020a0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80020a4:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80020a8:	fa93 f3a3 	rbit	r3, r3
 80020ac:	647b      	str	r3, [r7, #68]	; 0x44
 80020ae:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80020b2:	643b      	str	r3, [r7, #64]	; 0x40
 80020b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80020b6:	fa93 f3a3 	rbit	r3, r3
 80020ba:	63fb      	str	r3, [r7, #60]	; 0x3c
 80020bc:	4b46      	ldr	r3, [pc, #280]	; (80021d8 <HAL_RCC_ClockConfig+0x260>)
 80020be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020c0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80020c4:	63ba      	str	r2, [r7, #56]	; 0x38
 80020c6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80020c8:	fa92 f2a2 	rbit	r2, r2
 80020cc:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80020ce:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80020d0:	fab2 f282 	clz	r2, r2
 80020d4:	b2d2      	uxtb	r2, r2
 80020d6:	f042 0220 	orr.w	r2, r2, #32
 80020da:	b2d2      	uxtb	r2, r2
 80020dc:	f002 021f 	and.w	r2, r2, #31
 80020e0:	2101      	movs	r1, #1
 80020e2:	fa01 f202 	lsl.w	r2, r1, r2
 80020e6:	4013      	ands	r3, r2
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d13a      	bne.n	8002162 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80020ec:	2301      	movs	r3, #1
 80020ee:	e0b2      	b.n	8002256 <HAL_RCC_ClockConfig+0x2de>
 80020f0:	2302      	movs	r3, #2
 80020f2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020f6:	fa93 f3a3 	rbit	r3, r3
 80020fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80020fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020fe:	fab3 f383 	clz	r3, r3
 8002102:	b2db      	uxtb	r3, r3
 8002104:	095b      	lsrs	r3, r3, #5
 8002106:	b2db      	uxtb	r3, r3
 8002108:	f043 0301 	orr.w	r3, r3, #1
 800210c:	b2db      	uxtb	r3, r3
 800210e:	2b01      	cmp	r3, #1
 8002110:	d102      	bne.n	8002118 <HAL_RCC_ClockConfig+0x1a0>
 8002112:	4b31      	ldr	r3, [pc, #196]	; (80021d8 <HAL_RCC_ClockConfig+0x260>)
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	e00d      	b.n	8002134 <HAL_RCC_ClockConfig+0x1bc>
 8002118:	2302      	movs	r3, #2
 800211a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800211c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800211e:	fa93 f3a3 	rbit	r3, r3
 8002122:	627b      	str	r3, [r7, #36]	; 0x24
 8002124:	2302      	movs	r3, #2
 8002126:	623b      	str	r3, [r7, #32]
 8002128:	6a3b      	ldr	r3, [r7, #32]
 800212a:	fa93 f3a3 	rbit	r3, r3
 800212e:	61fb      	str	r3, [r7, #28]
 8002130:	4b29      	ldr	r3, [pc, #164]	; (80021d8 <HAL_RCC_ClockConfig+0x260>)
 8002132:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002134:	2202      	movs	r2, #2
 8002136:	61ba      	str	r2, [r7, #24]
 8002138:	69ba      	ldr	r2, [r7, #24]
 800213a:	fa92 f2a2 	rbit	r2, r2
 800213e:	617a      	str	r2, [r7, #20]
  return result;
 8002140:	697a      	ldr	r2, [r7, #20]
 8002142:	fab2 f282 	clz	r2, r2
 8002146:	b2d2      	uxtb	r2, r2
 8002148:	f042 0220 	orr.w	r2, r2, #32
 800214c:	b2d2      	uxtb	r2, r2
 800214e:	f002 021f 	and.w	r2, r2, #31
 8002152:	2101      	movs	r1, #1
 8002154:	fa01 f202 	lsl.w	r2, r1, r2
 8002158:	4013      	ands	r3, r2
 800215a:	2b00      	cmp	r3, #0
 800215c:	d101      	bne.n	8002162 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800215e:	2301      	movs	r3, #1
 8002160:	e079      	b.n	8002256 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002162:	4b1d      	ldr	r3, [pc, #116]	; (80021d8 <HAL_RCC_ClockConfig+0x260>)
 8002164:	685b      	ldr	r3, [r3, #4]
 8002166:	f023 0203 	bic.w	r2, r3, #3
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	685b      	ldr	r3, [r3, #4]
 800216e:	491a      	ldr	r1, [pc, #104]	; (80021d8 <HAL_RCC_ClockConfig+0x260>)
 8002170:	4313      	orrs	r3, r2
 8002172:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002174:	f7fe fc10 	bl	8000998 <HAL_GetTick>
 8002178:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800217a:	e00a      	b.n	8002192 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800217c:	f7fe fc0c 	bl	8000998 <HAL_GetTick>
 8002180:	4602      	mov	r2, r0
 8002182:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002184:	1ad3      	subs	r3, r2, r3
 8002186:	f241 3288 	movw	r2, #5000	; 0x1388
 800218a:	4293      	cmp	r3, r2
 800218c:	d901      	bls.n	8002192 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800218e:	2303      	movs	r3, #3
 8002190:	e061      	b.n	8002256 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002192:	4b11      	ldr	r3, [pc, #68]	; (80021d8 <HAL_RCC_ClockConfig+0x260>)
 8002194:	685b      	ldr	r3, [r3, #4]
 8002196:	f003 020c 	and.w	r2, r3, #12
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	685b      	ldr	r3, [r3, #4]
 800219e:	009b      	lsls	r3, r3, #2
 80021a0:	429a      	cmp	r2, r3
 80021a2:	d1eb      	bne.n	800217c <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80021a4:	4b0b      	ldr	r3, [pc, #44]	; (80021d4 <HAL_RCC_ClockConfig+0x25c>)
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f003 0307 	and.w	r3, r3, #7
 80021ac:	683a      	ldr	r2, [r7, #0]
 80021ae:	429a      	cmp	r2, r3
 80021b0:	d214      	bcs.n	80021dc <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021b2:	4b08      	ldr	r3, [pc, #32]	; (80021d4 <HAL_RCC_ClockConfig+0x25c>)
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f023 0207 	bic.w	r2, r3, #7
 80021ba:	4906      	ldr	r1, [pc, #24]	; (80021d4 <HAL_RCC_ClockConfig+0x25c>)
 80021bc:	683b      	ldr	r3, [r7, #0]
 80021be:	4313      	orrs	r3, r2
 80021c0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80021c2:	4b04      	ldr	r3, [pc, #16]	; (80021d4 <HAL_RCC_ClockConfig+0x25c>)
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f003 0307 	and.w	r3, r3, #7
 80021ca:	683a      	ldr	r2, [r7, #0]
 80021cc:	429a      	cmp	r2, r3
 80021ce:	d005      	beq.n	80021dc <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80021d0:	2301      	movs	r3, #1
 80021d2:	e040      	b.n	8002256 <HAL_RCC_ClockConfig+0x2de>
 80021d4:	40022000 	.word	0x40022000
 80021d8:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f003 0304 	and.w	r3, r3, #4
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d008      	beq.n	80021fa <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80021e8:	4b1d      	ldr	r3, [pc, #116]	; (8002260 <HAL_RCC_ClockConfig+0x2e8>)
 80021ea:	685b      	ldr	r3, [r3, #4]
 80021ec:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	68db      	ldr	r3, [r3, #12]
 80021f4:	491a      	ldr	r1, [pc, #104]	; (8002260 <HAL_RCC_ClockConfig+0x2e8>)
 80021f6:	4313      	orrs	r3, r2
 80021f8:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f003 0308 	and.w	r3, r3, #8
 8002202:	2b00      	cmp	r3, #0
 8002204:	d009      	beq.n	800221a <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002206:	4b16      	ldr	r3, [pc, #88]	; (8002260 <HAL_RCC_ClockConfig+0x2e8>)
 8002208:	685b      	ldr	r3, [r3, #4]
 800220a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	691b      	ldr	r3, [r3, #16]
 8002212:	00db      	lsls	r3, r3, #3
 8002214:	4912      	ldr	r1, [pc, #72]	; (8002260 <HAL_RCC_ClockConfig+0x2e8>)
 8002216:	4313      	orrs	r3, r2
 8002218:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800221a:	f000 f829 	bl	8002270 <HAL_RCC_GetSysClockFreq>
 800221e:	4601      	mov	r1, r0
 8002220:	4b0f      	ldr	r3, [pc, #60]	; (8002260 <HAL_RCC_ClockConfig+0x2e8>)
 8002222:	685b      	ldr	r3, [r3, #4]
 8002224:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002228:	22f0      	movs	r2, #240	; 0xf0
 800222a:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800222c:	693a      	ldr	r2, [r7, #16]
 800222e:	fa92 f2a2 	rbit	r2, r2
 8002232:	60fa      	str	r2, [r7, #12]
  return result;
 8002234:	68fa      	ldr	r2, [r7, #12]
 8002236:	fab2 f282 	clz	r2, r2
 800223a:	b2d2      	uxtb	r2, r2
 800223c:	40d3      	lsrs	r3, r2
 800223e:	4a09      	ldr	r2, [pc, #36]	; (8002264 <HAL_RCC_ClockConfig+0x2ec>)
 8002240:	5cd3      	ldrb	r3, [r2, r3]
 8002242:	fa21 f303 	lsr.w	r3, r1, r3
 8002246:	4a08      	ldr	r2, [pc, #32]	; (8002268 <HAL_RCC_ClockConfig+0x2f0>)
 8002248:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800224a:	4b08      	ldr	r3, [pc, #32]	; (800226c <HAL_RCC_ClockConfig+0x2f4>)
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	4618      	mov	r0, r3
 8002250:	f7fe faa2 	bl	8000798 <HAL_InitTick>
  
  return HAL_OK;
 8002254:	2300      	movs	r3, #0
}
 8002256:	4618      	mov	r0, r3
 8002258:	3778      	adds	r7, #120	; 0x78
 800225a:	46bd      	mov	sp, r7
 800225c:	bd80      	pop	{r7, pc}
 800225e:	bf00      	nop
 8002260:	40021000 	.word	0x40021000
 8002264:	080078c8 	.word	0x080078c8
 8002268:	20000000 	.word	0x20000000
 800226c:	20000004 	.word	0x20000004

08002270 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002270:	b480      	push	{r7}
 8002272:	b08b      	sub	sp, #44	; 0x2c
 8002274:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002276:	2300      	movs	r3, #0
 8002278:	61fb      	str	r3, [r7, #28]
 800227a:	2300      	movs	r3, #0
 800227c:	61bb      	str	r3, [r7, #24]
 800227e:	2300      	movs	r3, #0
 8002280:	627b      	str	r3, [r7, #36]	; 0x24
 8002282:	2300      	movs	r3, #0
 8002284:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002286:	2300      	movs	r3, #0
 8002288:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 800228a:	4b29      	ldr	r3, [pc, #164]	; (8002330 <HAL_RCC_GetSysClockFreq+0xc0>)
 800228c:	685b      	ldr	r3, [r3, #4]
 800228e:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002290:	69fb      	ldr	r3, [r7, #28]
 8002292:	f003 030c 	and.w	r3, r3, #12
 8002296:	2b04      	cmp	r3, #4
 8002298:	d002      	beq.n	80022a0 <HAL_RCC_GetSysClockFreq+0x30>
 800229a:	2b08      	cmp	r3, #8
 800229c:	d003      	beq.n	80022a6 <HAL_RCC_GetSysClockFreq+0x36>
 800229e:	e03c      	b.n	800231a <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80022a0:	4b24      	ldr	r3, [pc, #144]	; (8002334 <HAL_RCC_GetSysClockFreq+0xc4>)
 80022a2:	623b      	str	r3, [r7, #32]
      break;
 80022a4:	e03c      	b.n	8002320 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80022a6:	69fb      	ldr	r3, [r7, #28]
 80022a8:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80022ac:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80022b0:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022b2:	68ba      	ldr	r2, [r7, #8]
 80022b4:	fa92 f2a2 	rbit	r2, r2
 80022b8:	607a      	str	r2, [r7, #4]
  return result;
 80022ba:	687a      	ldr	r2, [r7, #4]
 80022bc:	fab2 f282 	clz	r2, r2
 80022c0:	b2d2      	uxtb	r2, r2
 80022c2:	40d3      	lsrs	r3, r2
 80022c4:	4a1c      	ldr	r2, [pc, #112]	; (8002338 <HAL_RCC_GetSysClockFreq+0xc8>)
 80022c6:	5cd3      	ldrb	r3, [r2, r3]
 80022c8:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80022ca:	4b19      	ldr	r3, [pc, #100]	; (8002330 <HAL_RCC_GetSysClockFreq+0xc0>)
 80022cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022ce:	f003 030f 	and.w	r3, r3, #15
 80022d2:	220f      	movs	r2, #15
 80022d4:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022d6:	693a      	ldr	r2, [r7, #16]
 80022d8:	fa92 f2a2 	rbit	r2, r2
 80022dc:	60fa      	str	r2, [r7, #12]
  return result;
 80022de:	68fa      	ldr	r2, [r7, #12]
 80022e0:	fab2 f282 	clz	r2, r2
 80022e4:	b2d2      	uxtb	r2, r2
 80022e6:	40d3      	lsrs	r3, r2
 80022e8:	4a14      	ldr	r2, [pc, #80]	; (800233c <HAL_RCC_GetSysClockFreq+0xcc>)
 80022ea:	5cd3      	ldrb	r3, [r2, r3]
 80022ec:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80022ee:	69fb      	ldr	r3, [r7, #28]
 80022f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d008      	beq.n	800230a <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80022f8:	4a0e      	ldr	r2, [pc, #56]	; (8002334 <HAL_RCC_GetSysClockFreq+0xc4>)
 80022fa:	69bb      	ldr	r3, [r7, #24]
 80022fc:	fbb2 f2f3 	udiv	r2, r2, r3
 8002300:	697b      	ldr	r3, [r7, #20]
 8002302:	fb02 f303 	mul.w	r3, r2, r3
 8002306:	627b      	str	r3, [r7, #36]	; 0x24
 8002308:	e004      	b.n	8002314 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800230a:	697b      	ldr	r3, [r7, #20]
 800230c:	4a0c      	ldr	r2, [pc, #48]	; (8002340 <HAL_RCC_GetSysClockFreq+0xd0>)
 800230e:	fb02 f303 	mul.w	r3, r2, r3
 8002312:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002316:	623b      	str	r3, [r7, #32]
      break;
 8002318:	e002      	b.n	8002320 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800231a:	4b06      	ldr	r3, [pc, #24]	; (8002334 <HAL_RCC_GetSysClockFreq+0xc4>)
 800231c:	623b      	str	r3, [r7, #32]
      break;
 800231e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002320:	6a3b      	ldr	r3, [r7, #32]
}
 8002322:	4618      	mov	r0, r3
 8002324:	372c      	adds	r7, #44	; 0x2c
 8002326:	46bd      	mov	sp, r7
 8002328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232c:	4770      	bx	lr
 800232e:	bf00      	nop
 8002330:	40021000 	.word	0x40021000
 8002334:	007a1200 	.word	0x007a1200
 8002338:	080078e0 	.word	0x080078e0
 800233c:	080078f0 	.word	0x080078f0
 8002340:	003d0900 	.word	0x003d0900

08002344 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002344:	b480      	push	{r7}
 8002346:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002348:	4b03      	ldr	r3, [pc, #12]	; (8002358 <HAL_RCC_GetHCLKFreq+0x14>)
 800234a:	681b      	ldr	r3, [r3, #0]
}
 800234c:	4618      	mov	r0, r3
 800234e:	46bd      	mov	sp, r7
 8002350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002354:	4770      	bx	lr
 8002356:	bf00      	nop
 8002358:	20000000 	.word	0x20000000

0800235c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	b082      	sub	sp, #8
 8002360:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8002362:	f7ff ffef 	bl	8002344 <HAL_RCC_GetHCLKFreq>
 8002366:	4601      	mov	r1, r0
 8002368:	4b0b      	ldr	r3, [pc, #44]	; (8002398 <HAL_RCC_GetPCLK1Freq+0x3c>)
 800236a:	685b      	ldr	r3, [r3, #4]
 800236c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002370:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002374:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002376:	687a      	ldr	r2, [r7, #4]
 8002378:	fa92 f2a2 	rbit	r2, r2
 800237c:	603a      	str	r2, [r7, #0]
  return result;
 800237e:	683a      	ldr	r2, [r7, #0]
 8002380:	fab2 f282 	clz	r2, r2
 8002384:	b2d2      	uxtb	r2, r2
 8002386:	40d3      	lsrs	r3, r2
 8002388:	4a04      	ldr	r2, [pc, #16]	; (800239c <HAL_RCC_GetPCLK1Freq+0x40>)
 800238a:	5cd3      	ldrb	r3, [r2, r3]
 800238c:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002390:	4618      	mov	r0, r3
 8002392:	3708      	adds	r7, #8
 8002394:	46bd      	mov	sp, r7
 8002396:	bd80      	pop	{r7, pc}
 8002398:	40021000 	.word	0x40021000
 800239c:	080078d8 	.word	0x080078d8

080023a0 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80023a0:	b480      	push	{r7}
 80023a2:	b083      	sub	sp, #12
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
 80023a8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	220f      	movs	r2, #15
 80023ae:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80023b0:	4b12      	ldr	r3, [pc, #72]	; (80023fc <HAL_RCC_GetClockConfig+0x5c>)
 80023b2:	685b      	ldr	r3, [r3, #4]
 80023b4:	f003 0203 	and.w	r2, r3, #3
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 80023bc:	4b0f      	ldr	r3, [pc, #60]	; (80023fc <HAL_RCC_GetClockConfig+0x5c>)
 80023be:	685b      	ldr	r3, [r3, #4]
 80023c0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 80023c8:	4b0c      	ldr	r3, [pc, #48]	; (80023fc <HAL_RCC_GetClockConfig+0x5c>)
 80023ca:	685b      	ldr	r3, [r3, #4]
 80023cc:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	60da      	str	r2, [r3, #12]
  
  /* Get the APB2 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80023d4:	4b09      	ldr	r3, [pc, #36]	; (80023fc <HAL_RCC_GetClockConfig+0x5c>)
 80023d6:	685b      	ldr	r3, [r3, #4]
 80023d8:	08db      	lsrs	r3, r3, #3
 80023da:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	611a      	str	r2, [r3, #16]
  
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 80023e2:	4b07      	ldr	r3, [pc, #28]	; (8002400 <HAL_RCC_GetClockConfig+0x60>)
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f003 0207 	and.w	r2, r3, #7
 80023ea:	683b      	ldr	r3, [r7, #0]
 80023ec:	601a      	str	r2, [r3, #0]
}
 80023ee:	bf00      	nop
 80023f0:	370c      	adds	r7, #12
 80023f2:	46bd      	mov	sp, r7
 80023f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f8:	4770      	bx	lr
 80023fa:	bf00      	nop
 80023fc:	40021000 	.word	0x40021000
 8002400:	40022000 	.word	0x40022000

08002404 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	b082      	sub	sp, #8
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	2b00      	cmp	r3, #0
 8002410:	d101      	bne.n	8002416 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002412:	2301      	movs	r3, #1
 8002414:	e049      	b.n	80024aa <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800241c:	b2db      	uxtb	r3, r3
 800241e:	2b00      	cmp	r3, #0
 8002420:	d106      	bne.n	8002430 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	2200      	movs	r2, #0
 8002426:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800242a:	6878      	ldr	r0, [r7, #4]
 800242c:	f000 f841 	bl	80024b2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	2202      	movs	r2, #2
 8002434:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681a      	ldr	r2, [r3, #0]
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	3304      	adds	r3, #4
 8002440:	4619      	mov	r1, r3
 8002442:	4610      	mov	r0, r2
 8002444:	f000 f9f2 	bl	800282c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	2201      	movs	r2, #1
 800244c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	2201      	movs	r2, #1
 8002454:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	2201      	movs	r2, #1
 800245c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	2201      	movs	r2, #1
 8002464:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	2201      	movs	r2, #1
 800246c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	2201      	movs	r2, #1
 8002474:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	2201      	movs	r2, #1
 800247c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	2201      	movs	r2, #1
 8002484:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	2201      	movs	r2, #1
 800248c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	2201      	movs	r2, #1
 8002494:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	2201      	movs	r2, #1
 800249c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	2201      	movs	r2, #1
 80024a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80024a8:	2300      	movs	r3, #0
}
 80024aa:	4618      	mov	r0, r3
 80024ac:	3708      	adds	r7, #8
 80024ae:	46bd      	mov	sp, r7
 80024b0:	bd80      	pop	{r7, pc}

080024b2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80024b2:	b480      	push	{r7}
 80024b4:	b083      	sub	sp, #12
 80024b6:	af00      	add	r7, sp, #0
 80024b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80024ba:	bf00      	nop
 80024bc:	370c      	adds	r7, #12
 80024be:	46bd      	mov	sp, r7
 80024c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c4:	4770      	bx	lr
	...

080024c8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80024c8:	b480      	push	{r7}
 80024ca:	b085      	sub	sp, #20
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80024d6:	b2db      	uxtb	r3, r3
 80024d8:	2b01      	cmp	r3, #1
 80024da:	d001      	beq.n	80024e0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80024dc:	2301      	movs	r3, #1
 80024de:	e04a      	b.n	8002576 <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	2202      	movs	r2, #2
 80024e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	68da      	ldr	r2, [r3, #12]
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f042 0201 	orr.w	r2, r2, #1
 80024f6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	4a21      	ldr	r2, [pc, #132]	; (8002584 <HAL_TIM_Base_Start_IT+0xbc>)
 80024fe:	4293      	cmp	r3, r2
 8002500:	d018      	beq.n	8002534 <HAL_TIM_Base_Start_IT+0x6c>
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800250a:	d013      	beq.n	8002534 <HAL_TIM_Base_Start_IT+0x6c>
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	4a1d      	ldr	r2, [pc, #116]	; (8002588 <HAL_TIM_Base_Start_IT+0xc0>)
 8002512:	4293      	cmp	r3, r2
 8002514:	d00e      	beq.n	8002534 <HAL_TIM_Base_Start_IT+0x6c>
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	4a1c      	ldr	r2, [pc, #112]	; (800258c <HAL_TIM_Base_Start_IT+0xc4>)
 800251c:	4293      	cmp	r3, r2
 800251e:	d009      	beq.n	8002534 <HAL_TIM_Base_Start_IT+0x6c>
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	4a1a      	ldr	r2, [pc, #104]	; (8002590 <HAL_TIM_Base_Start_IT+0xc8>)
 8002526:	4293      	cmp	r3, r2
 8002528:	d004      	beq.n	8002534 <HAL_TIM_Base_Start_IT+0x6c>
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	4a19      	ldr	r2, [pc, #100]	; (8002594 <HAL_TIM_Base_Start_IT+0xcc>)
 8002530:	4293      	cmp	r3, r2
 8002532:	d115      	bne.n	8002560 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	689a      	ldr	r2, [r3, #8]
 800253a:	4b17      	ldr	r3, [pc, #92]	; (8002598 <HAL_TIM_Base_Start_IT+0xd0>)
 800253c:	4013      	ands	r3, r2
 800253e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	2b06      	cmp	r3, #6
 8002544:	d015      	beq.n	8002572 <HAL_TIM_Base_Start_IT+0xaa>
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800254c:	d011      	beq.n	8002572 <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	681a      	ldr	r2, [r3, #0]
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f042 0201 	orr.w	r2, r2, #1
 800255c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800255e:	e008      	b.n	8002572 <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	681a      	ldr	r2, [r3, #0]
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f042 0201 	orr.w	r2, r2, #1
 800256e:	601a      	str	r2, [r3, #0]
 8002570:	e000      	b.n	8002574 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002572:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002574:	2300      	movs	r3, #0
}
 8002576:	4618      	mov	r0, r3
 8002578:	3714      	adds	r7, #20
 800257a:	46bd      	mov	sp, r7
 800257c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002580:	4770      	bx	lr
 8002582:	bf00      	nop
 8002584:	40012c00 	.word	0x40012c00
 8002588:	40000400 	.word	0x40000400
 800258c:	40000800 	.word	0x40000800
 8002590:	40013400 	.word	0x40013400
 8002594:	40014000 	.word	0x40014000
 8002598:	00010007 	.word	0x00010007

0800259c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	b082      	sub	sp, #8
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	691b      	ldr	r3, [r3, #16]
 80025aa:	f003 0302 	and.w	r3, r3, #2
 80025ae:	2b02      	cmp	r3, #2
 80025b0:	d122      	bne.n	80025f8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	68db      	ldr	r3, [r3, #12]
 80025b8:	f003 0302 	and.w	r3, r3, #2
 80025bc:	2b02      	cmp	r3, #2
 80025be:	d11b      	bne.n	80025f8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f06f 0202 	mvn.w	r2, #2
 80025c8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	2201      	movs	r2, #1
 80025ce:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	699b      	ldr	r3, [r3, #24]
 80025d6:	f003 0303 	and.w	r3, r3, #3
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d003      	beq.n	80025e6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80025de:	6878      	ldr	r0, [r7, #4]
 80025e0:	f000 f905 	bl	80027ee <HAL_TIM_IC_CaptureCallback>
 80025e4:	e005      	b.n	80025f2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80025e6:	6878      	ldr	r0, [r7, #4]
 80025e8:	f000 f8f7 	bl	80027da <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80025ec:	6878      	ldr	r0, [r7, #4]
 80025ee:	f000 f908 	bl	8002802 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	2200      	movs	r2, #0
 80025f6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	691b      	ldr	r3, [r3, #16]
 80025fe:	f003 0304 	and.w	r3, r3, #4
 8002602:	2b04      	cmp	r3, #4
 8002604:	d122      	bne.n	800264c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	68db      	ldr	r3, [r3, #12]
 800260c:	f003 0304 	and.w	r3, r3, #4
 8002610:	2b04      	cmp	r3, #4
 8002612:	d11b      	bne.n	800264c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f06f 0204 	mvn.w	r2, #4
 800261c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	2202      	movs	r2, #2
 8002622:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	699b      	ldr	r3, [r3, #24]
 800262a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800262e:	2b00      	cmp	r3, #0
 8002630:	d003      	beq.n	800263a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002632:	6878      	ldr	r0, [r7, #4]
 8002634:	f000 f8db 	bl	80027ee <HAL_TIM_IC_CaptureCallback>
 8002638:	e005      	b.n	8002646 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800263a:	6878      	ldr	r0, [r7, #4]
 800263c:	f000 f8cd 	bl	80027da <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002640:	6878      	ldr	r0, [r7, #4]
 8002642:	f000 f8de 	bl	8002802 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	2200      	movs	r2, #0
 800264a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	691b      	ldr	r3, [r3, #16]
 8002652:	f003 0308 	and.w	r3, r3, #8
 8002656:	2b08      	cmp	r3, #8
 8002658:	d122      	bne.n	80026a0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	68db      	ldr	r3, [r3, #12]
 8002660:	f003 0308 	and.w	r3, r3, #8
 8002664:	2b08      	cmp	r3, #8
 8002666:	d11b      	bne.n	80026a0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f06f 0208 	mvn.w	r2, #8
 8002670:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	2204      	movs	r2, #4
 8002676:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	69db      	ldr	r3, [r3, #28]
 800267e:	f003 0303 	and.w	r3, r3, #3
 8002682:	2b00      	cmp	r3, #0
 8002684:	d003      	beq.n	800268e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002686:	6878      	ldr	r0, [r7, #4]
 8002688:	f000 f8b1 	bl	80027ee <HAL_TIM_IC_CaptureCallback>
 800268c:	e005      	b.n	800269a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800268e:	6878      	ldr	r0, [r7, #4]
 8002690:	f000 f8a3 	bl	80027da <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002694:	6878      	ldr	r0, [r7, #4]
 8002696:	f000 f8b4 	bl	8002802 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	2200      	movs	r2, #0
 800269e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	691b      	ldr	r3, [r3, #16]
 80026a6:	f003 0310 	and.w	r3, r3, #16
 80026aa:	2b10      	cmp	r3, #16
 80026ac:	d122      	bne.n	80026f4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	68db      	ldr	r3, [r3, #12]
 80026b4:	f003 0310 	and.w	r3, r3, #16
 80026b8:	2b10      	cmp	r3, #16
 80026ba:	d11b      	bne.n	80026f4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f06f 0210 	mvn.w	r2, #16
 80026c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	2208      	movs	r2, #8
 80026ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	69db      	ldr	r3, [r3, #28]
 80026d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d003      	beq.n	80026e2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80026da:	6878      	ldr	r0, [r7, #4]
 80026dc:	f000 f887 	bl	80027ee <HAL_TIM_IC_CaptureCallback>
 80026e0:	e005      	b.n	80026ee <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80026e2:	6878      	ldr	r0, [r7, #4]
 80026e4:	f000 f879 	bl	80027da <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80026e8:	6878      	ldr	r0, [r7, #4]
 80026ea:	f000 f88a 	bl	8002802 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	2200      	movs	r2, #0
 80026f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	691b      	ldr	r3, [r3, #16]
 80026fa:	f003 0301 	and.w	r3, r3, #1
 80026fe:	2b01      	cmp	r3, #1
 8002700:	d10e      	bne.n	8002720 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	68db      	ldr	r3, [r3, #12]
 8002708:	f003 0301 	and.w	r3, r3, #1
 800270c:	2b01      	cmp	r3, #1
 800270e:	d107      	bne.n	8002720 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f06f 0201 	mvn.w	r2, #1
 8002718:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800271a:	6878      	ldr	r0, [r7, #4]
 800271c:	f7fe f800 	bl	8000720 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	691b      	ldr	r3, [r3, #16]
 8002726:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800272a:	2b80      	cmp	r3, #128	; 0x80
 800272c:	d10e      	bne.n	800274c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	68db      	ldr	r3, [r3, #12]
 8002734:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002738:	2b80      	cmp	r3, #128	; 0x80
 800273a:	d107      	bne.n	800274c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002744:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002746:	6878      	ldr	r0, [r7, #4]
 8002748:	f000 f90a 	bl	8002960 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	691b      	ldr	r3, [r3, #16]
 8002752:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002756:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800275a:	d10e      	bne.n	800277a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	68db      	ldr	r3, [r3, #12]
 8002762:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002766:	2b80      	cmp	r3, #128	; 0x80
 8002768:	d107      	bne.n	800277a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002772:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002774:	6878      	ldr	r0, [r7, #4]
 8002776:	f000 f8fd 	bl	8002974 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	691b      	ldr	r3, [r3, #16]
 8002780:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002784:	2b40      	cmp	r3, #64	; 0x40
 8002786:	d10e      	bne.n	80027a6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	68db      	ldr	r3, [r3, #12]
 800278e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002792:	2b40      	cmp	r3, #64	; 0x40
 8002794:	d107      	bne.n	80027a6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800279e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80027a0:	6878      	ldr	r0, [r7, #4]
 80027a2:	f000 f838 	bl	8002816 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	691b      	ldr	r3, [r3, #16]
 80027ac:	f003 0320 	and.w	r3, r3, #32
 80027b0:	2b20      	cmp	r3, #32
 80027b2:	d10e      	bne.n	80027d2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	68db      	ldr	r3, [r3, #12]
 80027ba:	f003 0320 	and.w	r3, r3, #32
 80027be:	2b20      	cmp	r3, #32
 80027c0:	d107      	bne.n	80027d2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f06f 0220 	mvn.w	r2, #32
 80027ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80027cc:	6878      	ldr	r0, [r7, #4]
 80027ce:	f000 f8bd 	bl	800294c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80027d2:	bf00      	nop
 80027d4:	3708      	adds	r7, #8
 80027d6:	46bd      	mov	sp, r7
 80027d8:	bd80      	pop	{r7, pc}

080027da <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80027da:	b480      	push	{r7}
 80027dc:	b083      	sub	sp, #12
 80027de:	af00      	add	r7, sp, #0
 80027e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80027e2:	bf00      	nop
 80027e4:	370c      	adds	r7, #12
 80027e6:	46bd      	mov	sp, r7
 80027e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ec:	4770      	bx	lr

080027ee <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80027ee:	b480      	push	{r7}
 80027f0:	b083      	sub	sp, #12
 80027f2:	af00      	add	r7, sp, #0
 80027f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80027f6:	bf00      	nop
 80027f8:	370c      	adds	r7, #12
 80027fa:	46bd      	mov	sp, r7
 80027fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002800:	4770      	bx	lr

08002802 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002802:	b480      	push	{r7}
 8002804:	b083      	sub	sp, #12
 8002806:	af00      	add	r7, sp, #0
 8002808:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800280a:	bf00      	nop
 800280c:	370c      	adds	r7, #12
 800280e:	46bd      	mov	sp, r7
 8002810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002814:	4770      	bx	lr

08002816 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002816:	b480      	push	{r7}
 8002818:	b083      	sub	sp, #12
 800281a:	af00      	add	r7, sp, #0
 800281c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800281e:	bf00      	nop
 8002820:	370c      	adds	r7, #12
 8002822:	46bd      	mov	sp, r7
 8002824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002828:	4770      	bx	lr
	...

0800282c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800282c:	b480      	push	{r7}
 800282e:	b085      	sub	sp, #20
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]
 8002834:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	4a3c      	ldr	r2, [pc, #240]	; (8002930 <TIM_Base_SetConfig+0x104>)
 8002840:	4293      	cmp	r3, r2
 8002842:	d00f      	beq.n	8002864 <TIM_Base_SetConfig+0x38>
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800284a:	d00b      	beq.n	8002864 <TIM_Base_SetConfig+0x38>
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	4a39      	ldr	r2, [pc, #228]	; (8002934 <TIM_Base_SetConfig+0x108>)
 8002850:	4293      	cmp	r3, r2
 8002852:	d007      	beq.n	8002864 <TIM_Base_SetConfig+0x38>
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	4a38      	ldr	r2, [pc, #224]	; (8002938 <TIM_Base_SetConfig+0x10c>)
 8002858:	4293      	cmp	r3, r2
 800285a:	d003      	beq.n	8002864 <TIM_Base_SetConfig+0x38>
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	4a37      	ldr	r2, [pc, #220]	; (800293c <TIM_Base_SetConfig+0x110>)
 8002860:	4293      	cmp	r3, r2
 8002862:	d108      	bne.n	8002876 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800286a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800286c:	683b      	ldr	r3, [r7, #0]
 800286e:	685b      	ldr	r3, [r3, #4]
 8002870:	68fa      	ldr	r2, [r7, #12]
 8002872:	4313      	orrs	r3, r2
 8002874:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	4a2d      	ldr	r2, [pc, #180]	; (8002930 <TIM_Base_SetConfig+0x104>)
 800287a:	4293      	cmp	r3, r2
 800287c:	d01b      	beq.n	80028b6 <TIM_Base_SetConfig+0x8a>
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002884:	d017      	beq.n	80028b6 <TIM_Base_SetConfig+0x8a>
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	4a2a      	ldr	r2, [pc, #168]	; (8002934 <TIM_Base_SetConfig+0x108>)
 800288a:	4293      	cmp	r3, r2
 800288c:	d013      	beq.n	80028b6 <TIM_Base_SetConfig+0x8a>
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	4a29      	ldr	r2, [pc, #164]	; (8002938 <TIM_Base_SetConfig+0x10c>)
 8002892:	4293      	cmp	r3, r2
 8002894:	d00f      	beq.n	80028b6 <TIM_Base_SetConfig+0x8a>
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	4a28      	ldr	r2, [pc, #160]	; (800293c <TIM_Base_SetConfig+0x110>)
 800289a:	4293      	cmp	r3, r2
 800289c:	d00b      	beq.n	80028b6 <TIM_Base_SetConfig+0x8a>
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	4a27      	ldr	r2, [pc, #156]	; (8002940 <TIM_Base_SetConfig+0x114>)
 80028a2:	4293      	cmp	r3, r2
 80028a4:	d007      	beq.n	80028b6 <TIM_Base_SetConfig+0x8a>
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	4a26      	ldr	r2, [pc, #152]	; (8002944 <TIM_Base_SetConfig+0x118>)
 80028aa:	4293      	cmp	r3, r2
 80028ac:	d003      	beq.n	80028b6 <TIM_Base_SetConfig+0x8a>
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	4a25      	ldr	r2, [pc, #148]	; (8002948 <TIM_Base_SetConfig+0x11c>)
 80028b2:	4293      	cmp	r3, r2
 80028b4:	d108      	bne.n	80028c8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80028bc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80028be:	683b      	ldr	r3, [r7, #0]
 80028c0:	68db      	ldr	r3, [r3, #12]
 80028c2:	68fa      	ldr	r2, [r7, #12]
 80028c4:	4313      	orrs	r3, r2
 80028c6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80028ce:	683b      	ldr	r3, [r7, #0]
 80028d0:	695b      	ldr	r3, [r3, #20]
 80028d2:	4313      	orrs	r3, r2
 80028d4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	68fa      	ldr	r2, [r7, #12]
 80028da:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	689a      	ldr	r2, [r3, #8]
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80028e4:	683b      	ldr	r3, [r7, #0]
 80028e6:	681a      	ldr	r2, [r3, #0]
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	4a10      	ldr	r2, [pc, #64]	; (8002930 <TIM_Base_SetConfig+0x104>)
 80028f0:	4293      	cmp	r3, r2
 80028f2:	d00f      	beq.n	8002914 <TIM_Base_SetConfig+0xe8>
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	4a11      	ldr	r2, [pc, #68]	; (800293c <TIM_Base_SetConfig+0x110>)
 80028f8:	4293      	cmp	r3, r2
 80028fa:	d00b      	beq.n	8002914 <TIM_Base_SetConfig+0xe8>
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	4a10      	ldr	r2, [pc, #64]	; (8002940 <TIM_Base_SetConfig+0x114>)
 8002900:	4293      	cmp	r3, r2
 8002902:	d007      	beq.n	8002914 <TIM_Base_SetConfig+0xe8>
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	4a0f      	ldr	r2, [pc, #60]	; (8002944 <TIM_Base_SetConfig+0x118>)
 8002908:	4293      	cmp	r3, r2
 800290a:	d003      	beq.n	8002914 <TIM_Base_SetConfig+0xe8>
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	4a0e      	ldr	r2, [pc, #56]	; (8002948 <TIM_Base_SetConfig+0x11c>)
 8002910:	4293      	cmp	r3, r2
 8002912:	d103      	bne.n	800291c <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	691a      	ldr	r2, [r3, #16]
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	2201      	movs	r2, #1
 8002920:	615a      	str	r2, [r3, #20]
}
 8002922:	bf00      	nop
 8002924:	3714      	adds	r7, #20
 8002926:	46bd      	mov	sp, r7
 8002928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292c:	4770      	bx	lr
 800292e:	bf00      	nop
 8002930:	40012c00 	.word	0x40012c00
 8002934:	40000400 	.word	0x40000400
 8002938:	40000800 	.word	0x40000800
 800293c:	40013400 	.word	0x40013400
 8002940:	40014000 	.word	0x40014000
 8002944:	40014400 	.word	0x40014400
 8002948:	40014800 	.word	0x40014800

0800294c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800294c:	b480      	push	{r7}
 800294e:	b083      	sub	sp, #12
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002954:	bf00      	nop
 8002956:	370c      	adds	r7, #12
 8002958:	46bd      	mov	sp, r7
 800295a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295e:	4770      	bx	lr

08002960 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002960:	b480      	push	{r7}
 8002962:	b083      	sub	sp, #12
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002968:	bf00      	nop
 800296a:	370c      	adds	r7, #12
 800296c:	46bd      	mov	sp, r7
 800296e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002972:	4770      	bx	lr

08002974 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002974:	b480      	push	{r7}
 8002976:	b083      	sub	sp, #12
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800297c:	bf00      	nop
 800297e:	370c      	adds	r7, #12
 8002980:	46bd      	mov	sp, r7
 8002982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002986:	4770      	bx	lr

08002988 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002988:	b480      	push	{r7}
 800298a:	b083      	sub	sp, #12
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	f103 0208 	add.w	r2, r3, #8
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80029a0:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	f103 0208 	add.w	r2, r3, #8
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	f103 0208 	add.w	r2, r3, #8
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	2200      	movs	r2, #0
 80029ba:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80029bc:	bf00      	nop
 80029be:	370c      	adds	r7, #12
 80029c0:	46bd      	mov	sp, r7
 80029c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c6:	4770      	bx	lr

080029c8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80029c8:	b480      	push	{r7}
 80029ca:	b083      	sub	sp, #12
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	2200      	movs	r2, #0
 80029d4:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80029d6:	bf00      	nop
 80029d8:	370c      	adds	r7, #12
 80029da:	46bd      	mov	sp, r7
 80029dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e0:	4770      	bx	lr

080029e2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 80029e2:	b480      	push	{r7}
 80029e4:	b085      	sub	sp, #20
 80029e6:	af00      	add	r7, sp, #0
 80029e8:	6078      	str	r0, [r7, #4]
 80029ea:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	685b      	ldr	r3, [r3, #4]
 80029f0:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 80029f2:	683b      	ldr	r3, [r7, #0]
 80029f4:	68fa      	ldr	r2, [r7, #12]
 80029f6:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	689a      	ldr	r2, [r3, #8]
 80029fc:	683b      	ldr	r3, [r7, #0]
 80029fe:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	689b      	ldr	r3, [r3, #8]
 8002a04:	683a      	ldr	r2, [r7, #0]
 8002a06:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	683a      	ldr	r2, [r7, #0]
 8002a0c:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 8002a0e:	683b      	ldr	r3, [r7, #0]
 8002a10:	687a      	ldr	r2, [r7, #4]
 8002a12:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	1c5a      	adds	r2, r3, #1
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	601a      	str	r2, [r3, #0]
}
 8002a1e:	bf00      	nop
 8002a20:	3714      	adds	r7, #20
 8002a22:	46bd      	mov	sp, r7
 8002a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a28:	4770      	bx	lr

08002a2a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8002a2a:	b480      	push	{r7}
 8002a2c:	b085      	sub	sp, #20
 8002a2e:	af00      	add	r7, sp, #0
 8002a30:	6078      	str	r0, [r7, #4]
 8002a32:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002a34:	683b      	ldr	r3, [r7, #0]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8002a3a:	68bb      	ldr	r3, [r7, #8]
 8002a3c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002a40:	d103      	bne.n	8002a4a <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	691b      	ldr	r3, [r3, #16]
 8002a46:	60fb      	str	r3, [r7, #12]
 8002a48:	e00c      	b.n	8002a64 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	3308      	adds	r3, #8
 8002a4e:	60fb      	str	r3, [r7, #12]
 8002a50:	e002      	b.n	8002a58 <vListInsert+0x2e>
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	685b      	ldr	r3, [r3, #4]
 8002a56:	60fb      	str	r3, [r7, #12]
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	685b      	ldr	r3, [r3, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	68ba      	ldr	r2, [r7, #8]
 8002a60:	429a      	cmp	r2, r3
 8002a62:	d2f6      	bcs.n	8002a52 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	685a      	ldr	r2, [r3, #4]
 8002a68:	683b      	ldr	r3, [r7, #0]
 8002a6a:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002a6c:	683b      	ldr	r3, [r7, #0]
 8002a6e:	685b      	ldr	r3, [r3, #4]
 8002a70:	683a      	ldr	r2, [r7, #0]
 8002a72:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8002a74:	683b      	ldr	r3, [r7, #0]
 8002a76:	68fa      	ldr	r2, [r7, #12]
 8002a78:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	683a      	ldr	r2, [r7, #0]
 8002a7e:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8002a80:	683b      	ldr	r3, [r7, #0]
 8002a82:	687a      	ldr	r2, [r7, #4]
 8002a84:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	1c5a      	adds	r2, r3, #1
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	601a      	str	r2, [r3, #0]
}
 8002a90:	bf00      	nop
 8002a92:	3714      	adds	r7, #20
 8002a94:	46bd      	mov	sp, r7
 8002a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9a:	4770      	bx	lr

08002a9c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002a9c:	b480      	push	{r7}
 8002a9e:	b085      	sub	sp, #20
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	691b      	ldr	r3, [r3, #16]
 8002aa8:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	685b      	ldr	r3, [r3, #4]
 8002aae:	687a      	ldr	r2, [r7, #4]
 8002ab0:	6892      	ldr	r2, [r2, #8]
 8002ab2:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	689b      	ldr	r3, [r3, #8]
 8002ab8:	687a      	ldr	r2, [r7, #4]
 8002aba:	6852      	ldr	r2, [r2, #4]
 8002abc:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	685b      	ldr	r3, [r3, #4]
 8002ac2:	687a      	ldr	r2, [r7, #4]
 8002ac4:	429a      	cmp	r2, r3
 8002ac6:	d103      	bne.n	8002ad0 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	689a      	ldr	r2, [r3, #8]
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	1e5a      	subs	r2, r3, #1
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	681b      	ldr	r3, [r3, #0]
}
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	3714      	adds	r7, #20
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aee:	4770      	bx	lr

08002af0 <xQueueGenericReset>:
    }
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	b086      	sub	sp, #24
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6078      	str	r0, [r7, #4]
 8002af8:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 8002afa:	2301      	movs	r3, #1
 8002afc:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 8002b02:	693b      	ldr	r3, [r7, #16]
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d10a      	bne.n	8002b1e <xQueueGenericReset+0x2e>
        __asm volatile
 8002b08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b0c:	f383 8811 	msr	BASEPRI, r3
 8002b10:	f3bf 8f6f 	isb	sy
 8002b14:	f3bf 8f4f 	dsb	sy
 8002b18:	60fb      	str	r3, [r7, #12]
    }
 8002b1a:	bf00      	nop
 8002b1c:	e7fe      	b.n	8002b1c <xQueueGenericReset+0x2c>

    if( ( pxQueue != NULL ) &&
 8002b1e:	693b      	ldr	r3, [r7, #16]
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d05d      	beq.n	8002be0 <xQueueGenericReset+0xf0>
        ( pxQueue->uxLength >= 1U ) &&
 8002b24:	693b      	ldr	r3, [r7, #16]
 8002b26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    if( ( pxQueue != NULL ) &&
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d059      	beq.n	8002be0 <xQueueGenericReset+0xf0>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 8002b2c:	693b      	ldr	r3, [r7, #16]
 8002b2e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002b30:	693b      	ldr	r3, [r7, #16]
 8002b32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b34:	2100      	movs	r1, #0
 8002b36:	fba3 2302 	umull	r2, r3, r3, r2
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d000      	beq.n	8002b40 <xQueueGenericReset+0x50>
 8002b3e:	2101      	movs	r1, #1
 8002b40:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d14c      	bne.n	8002be0 <xQueueGenericReset+0xf0>
    {
        taskENTER_CRITICAL();
 8002b46:	f002 f98d 	bl	8004e64 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002b4a:	693b      	ldr	r3, [r7, #16]
 8002b4c:	681a      	ldr	r2, [r3, #0]
 8002b4e:	693b      	ldr	r3, [r7, #16]
 8002b50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b52:	6939      	ldr	r1, [r7, #16]
 8002b54:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002b56:	fb01 f303 	mul.w	r3, r1, r3
 8002b5a:	441a      	add	r2, r3
 8002b5c:	693b      	ldr	r3, [r7, #16]
 8002b5e:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002b60:	693b      	ldr	r3, [r7, #16]
 8002b62:	2200      	movs	r2, #0
 8002b64:	639a      	str	r2, [r3, #56]	; 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8002b66:	693b      	ldr	r3, [r7, #16]
 8002b68:	681a      	ldr	r2, [r3, #0]
 8002b6a:	693b      	ldr	r3, [r7, #16]
 8002b6c:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002b6e:	693b      	ldr	r3, [r7, #16]
 8002b70:	681a      	ldr	r2, [r3, #0]
 8002b72:	693b      	ldr	r3, [r7, #16]
 8002b74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b76:	3b01      	subs	r3, #1
 8002b78:	6939      	ldr	r1, [r7, #16]
 8002b7a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002b7c:	fb01 f303 	mul.w	r3, r1, r3
 8002b80:	441a      	add	r2, r3
 8002b82:	693b      	ldr	r3, [r7, #16]
 8002b84:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 8002b86:	693b      	ldr	r3, [r7, #16]
 8002b88:	22ff      	movs	r2, #255	; 0xff
 8002b8a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 8002b8e:	693b      	ldr	r3, [r7, #16]
 8002b90:	22ff      	movs	r2, #255	; 0xff
 8002b92:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

            if( xNewQueue == pdFALSE )
 8002b96:	683b      	ldr	r3, [r7, #0]
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d114      	bne.n	8002bc6 <xQueueGenericReset+0xd6>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002b9c:	693b      	ldr	r3, [r7, #16]
 8002b9e:	691b      	ldr	r3, [r3, #16]
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d01a      	beq.n	8002bda <xQueueGenericReset+0xea>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002ba4:	693b      	ldr	r3, [r7, #16]
 8002ba6:	3310      	adds	r3, #16
 8002ba8:	4618      	mov	r0, r3
 8002baa:	f001 f8c1 	bl	8003d30 <xTaskRemoveFromEventList>
 8002bae:	4603      	mov	r3, r0
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d012      	beq.n	8002bda <xQueueGenericReset+0xea>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8002bb4:	4b15      	ldr	r3, [pc, #84]	; (8002c0c <xQueueGenericReset+0x11c>)
 8002bb6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002bba:	601a      	str	r2, [r3, #0]
 8002bbc:	f3bf 8f4f 	dsb	sy
 8002bc0:	f3bf 8f6f 	isb	sy
 8002bc4:	e009      	b.n	8002bda <xQueueGenericReset+0xea>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002bc6:	693b      	ldr	r3, [r7, #16]
 8002bc8:	3310      	adds	r3, #16
 8002bca:	4618      	mov	r0, r3
 8002bcc:	f7ff fedc 	bl	8002988 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002bd0:	693b      	ldr	r3, [r7, #16]
 8002bd2:	3324      	adds	r3, #36	; 0x24
 8002bd4:	4618      	mov	r0, r3
 8002bd6:	f7ff fed7 	bl	8002988 <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 8002bda:	f002 f973 	bl	8004ec4 <vPortExitCritical>
 8002bde:	e001      	b.n	8002be4 <xQueueGenericReset+0xf4>
    }
    else
    {
        xReturn = pdFAIL;
 8002be0:	2300      	movs	r3, #0
 8002be2:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 8002be4:	697b      	ldr	r3, [r7, #20]
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d10a      	bne.n	8002c00 <xQueueGenericReset+0x110>
        __asm volatile
 8002bea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bee:	f383 8811 	msr	BASEPRI, r3
 8002bf2:	f3bf 8f6f 	isb	sy
 8002bf6:	f3bf 8f4f 	dsb	sy
 8002bfa:	60bb      	str	r3, [r7, #8]
    }
 8002bfc:	bf00      	nop
 8002bfe:	e7fe      	b.n	8002bfe <xQueueGenericReset+0x10e>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 8002c00:	697b      	ldr	r3, [r7, #20]
}
 8002c02:	4618      	mov	r0, r3
 8002c04:	3718      	adds	r7, #24
 8002c06:	46bd      	mov	sp, r7
 8002c08:	bd80      	pop	{r7, pc}
 8002c0a:	bf00      	nop
 8002c0c:	e000ed04 	.word	0xe000ed04

08002c10 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8002c10:	b580      	push	{r7, lr}
 8002c12:	b08a      	sub	sp, #40	; 0x28
 8002c14:	af02      	add	r7, sp, #8
 8002c16:	60f8      	str	r0, [r7, #12]
 8002c18:	60b9      	str	r1, [r7, #8]
 8002c1a:	4613      	mov	r3, r2
 8002c1c:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 8002c1e:	2300      	movs	r3, #0
 8002c20:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d02e      	beq.n	8002c86 <xQueueGenericCreate+0x76>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8002c28:	2100      	movs	r1, #0
 8002c2a:	68ba      	ldr	r2, [r7, #8]
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	fba3 2302 	umull	r2, r3, r3, r2
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d000      	beq.n	8002c38 <xQueueGenericCreate+0x28>
 8002c36:	2101      	movs	r1, #1
 8002c38:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d123      	bne.n	8002c86 <xQueueGenericCreate+0x76>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	68ba      	ldr	r2, [r7, #8]
 8002c42:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8002c46:	f113 0f51 	cmn.w	r3, #81	; 0x51
 8002c4a:	d81c      	bhi.n	8002c86 <xQueueGenericCreate+0x76>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	68ba      	ldr	r2, [r7, #8]
 8002c50:	fb02 f303 	mul.w	r3, r2, r3
 8002c54:	61bb      	str	r3, [r7, #24]
             * alignment requirements of the Queue_t structure - which in this case
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
             * are greater than or equal to the pointer to char requirements the cast
             * is safe.  In other cases alignment requirements are not strict (one or
             * two bytes). */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8002c56:	69bb      	ldr	r3, [r7, #24]
 8002c58:	3350      	adds	r3, #80	; 0x50
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	f002 fa2e 	bl	80050bc <pvPortMalloc>
 8002c60:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 8002c62:	69fb      	ldr	r3, [r7, #28]
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d01c      	beq.n	8002ca2 <xQueueGenericCreate+0x92>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8002c68:	69fb      	ldr	r3, [r7, #28]
 8002c6a:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002c6c:	697b      	ldr	r3, [r7, #20]
 8002c6e:	3350      	adds	r3, #80	; 0x50
 8002c70:	617b      	str	r3, [r7, #20]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002c72:	79fa      	ldrb	r2, [r7, #7]
 8002c74:	69fb      	ldr	r3, [r7, #28]
 8002c76:	9300      	str	r3, [sp, #0]
 8002c78:	4613      	mov	r3, r2
 8002c7a:	697a      	ldr	r2, [r7, #20]
 8002c7c:	68b9      	ldr	r1, [r7, #8]
 8002c7e:	68f8      	ldr	r0, [r7, #12]
 8002c80:	f000 f814 	bl	8002cac <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 8002c84:	e00d      	b.n	8002ca2 <xQueueGenericCreate+0x92>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 8002c86:	69fb      	ldr	r3, [r7, #28]
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d10a      	bne.n	8002ca2 <xQueueGenericCreate+0x92>
        __asm volatile
 8002c8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c90:	f383 8811 	msr	BASEPRI, r3
 8002c94:	f3bf 8f6f 	isb	sy
 8002c98:	f3bf 8f4f 	dsb	sy
 8002c9c:	613b      	str	r3, [r7, #16]
    }
 8002c9e:	bf00      	nop
 8002ca0:	e7fe      	b.n	8002ca0 <xQueueGenericCreate+0x90>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8002ca2:	69fb      	ldr	r3, [r7, #28]
    }
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	3720      	adds	r7, #32
 8002ca8:	46bd      	mov	sp, r7
 8002caa:	bd80      	pop	{r7, pc}

08002cac <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b084      	sub	sp, #16
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	60f8      	str	r0, [r7, #12]
 8002cb4:	60b9      	str	r1, [r7, #8]
 8002cb6:	607a      	str	r2, [r7, #4]
 8002cb8:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8002cba:	68bb      	ldr	r3, [r7, #8]
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d103      	bne.n	8002cc8 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002cc0:	69bb      	ldr	r3, [r7, #24]
 8002cc2:	69ba      	ldr	r2, [r7, #24]
 8002cc4:	601a      	str	r2, [r3, #0]
 8002cc6:	e002      	b.n	8002cce <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002cc8:	69bb      	ldr	r3, [r7, #24]
 8002cca:	687a      	ldr	r2, [r7, #4]
 8002ccc:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8002cce:	69bb      	ldr	r3, [r7, #24]
 8002cd0:	68fa      	ldr	r2, [r7, #12]
 8002cd2:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8002cd4:	69bb      	ldr	r3, [r7, #24]
 8002cd6:	68ba      	ldr	r2, [r7, #8]
 8002cd8:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002cda:	2101      	movs	r1, #1
 8002cdc:	69b8      	ldr	r0, [r7, #24]
 8002cde:	f7ff ff07 	bl	8002af0 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
    {
        pxNewQueue->ucQueueType = ucQueueType;
 8002ce2:	69bb      	ldr	r3, [r7, #24]
 8002ce4:	78fa      	ldrb	r2, [r7, #3]
 8002ce6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    {
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
 8002cea:	78fb      	ldrb	r3, [r7, #3]
 8002cec:	68ba      	ldr	r2, [r7, #8]
 8002cee:	68f9      	ldr	r1, [r7, #12]
 8002cf0:	2073      	movs	r0, #115	; 0x73
 8002cf2:	f003 fe3b 	bl	800696c <SEGGER_SYSVIEW_RecordU32x3>
}
 8002cf6:	bf00      	nop
 8002cf8:	3710      	adds	r7, #16
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	bd80      	pop	{r7, pc}
	...

08002d00 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8002d00:	b590      	push	{r4, r7, lr}
 8002d02:	b08f      	sub	sp, #60	; 0x3c
 8002d04:	af02      	add	r7, sp, #8
 8002d06:	60f8      	str	r0, [r7, #12]
 8002d08:	60b9      	str	r1, [r7, #8]
 8002d0a:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8002d0c:	2300      	movs	r3, #0
 8002d0e:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8002d14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d10a      	bne.n	8002d30 <xQueueReceive+0x30>
        __asm volatile
 8002d1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d1e:	f383 8811 	msr	BASEPRI, r3
 8002d22:	f3bf 8f6f 	isb	sy
 8002d26:	f3bf 8f4f 	dsb	sy
 8002d2a:	623b      	str	r3, [r7, #32]
    }
 8002d2c:	bf00      	nop
 8002d2e:	e7fe      	b.n	8002d2e <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002d30:	68bb      	ldr	r3, [r7, #8]
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d103      	bne.n	8002d3e <xQueueReceive+0x3e>
 8002d36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d101      	bne.n	8002d42 <xQueueReceive+0x42>
 8002d3e:	2301      	movs	r3, #1
 8002d40:	e000      	b.n	8002d44 <xQueueReceive+0x44>
 8002d42:	2300      	movs	r3, #0
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d10a      	bne.n	8002d5e <xQueueReceive+0x5e>
        __asm volatile
 8002d48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d4c:	f383 8811 	msr	BASEPRI, r3
 8002d50:	f3bf 8f6f 	isb	sy
 8002d54:	f3bf 8f4f 	dsb	sy
 8002d58:	61fb      	str	r3, [r7, #28]
    }
 8002d5a:	bf00      	nop
 8002d5c:	e7fe      	b.n	8002d5c <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002d5e:	f001 f9f9 	bl	8004154 <xTaskGetSchedulerState>
 8002d62:	4603      	mov	r3, r0
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d102      	bne.n	8002d6e <xQueueReceive+0x6e>
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d101      	bne.n	8002d72 <xQueueReceive+0x72>
 8002d6e:	2301      	movs	r3, #1
 8002d70:	e000      	b.n	8002d74 <xQueueReceive+0x74>
 8002d72:	2300      	movs	r3, #0
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d10a      	bne.n	8002d8e <xQueueReceive+0x8e>
        __asm volatile
 8002d78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d7c:	f383 8811 	msr	BASEPRI, r3
 8002d80:	f3bf 8f6f 	isb	sy
 8002d84:	f3bf 8f4f 	dsb	sy
 8002d88:	61bb      	str	r3, [r7, #24]
    }
 8002d8a:	bf00      	nop
 8002d8c:	e7fe      	b.n	8002d8c <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8002d8e:	f002 f869 	bl	8004e64 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002d92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d96:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002d98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d02f      	beq.n	8002dfe <xQueueReceive+0xfe>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002d9e:	68b9      	ldr	r1, [r7, #8]
 8002da0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002da2:	f000 f8bd 	bl	8002f20 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
 8002da6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002da8:	4618      	mov	r0, r3
 8002daa:	f004 fb0b 	bl	80073c4 <SEGGER_SYSVIEW_ShrinkId>
 8002dae:	4604      	mov	r4, r0
 8002db0:	2000      	movs	r0, #0
 8002db2:	f004 fb07 	bl	80073c4 <SEGGER_SYSVIEW_ShrinkId>
 8002db6:	4602      	mov	r2, r0
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	2101      	movs	r1, #1
 8002dbc:	9100      	str	r1, [sp, #0]
 8002dbe:	4621      	mov	r1, r4
 8002dc0:	205c      	movs	r0, #92	; 0x5c
 8002dc2:	f003 fe49 	bl	8006a58 <SEGGER_SYSVIEW_RecordU32x4>
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002dc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dc8:	1e5a      	subs	r2, r3, #1
 8002dca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dcc:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002dce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dd0:	691b      	ldr	r3, [r3, #16]
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d00f      	beq.n	8002df6 <xQueueReceive+0xf6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002dd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dd8:	3310      	adds	r3, #16
 8002dda:	4618      	mov	r0, r3
 8002ddc:	f000 ffa8 	bl	8003d30 <xTaskRemoveFromEventList>
 8002de0:	4603      	mov	r3, r0
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d007      	beq.n	8002df6 <xQueueReceive+0xf6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8002de6:	4b4d      	ldr	r3, [pc, #308]	; (8002f1c <xQueueReceive+0x21c>)
 8002de8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002dec:	601a      	str	r2, [r3, #0]
 8002dee:	f3bf 8f4f 	dsb	sy
 8002df2:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8002df6:	f002 f865 	bl	8004ec4 <vPortExitCritical>
                return pdPASS;
 8002dfa:	2301      	movs	r3, #1
 8002dfc:	e08a      	b.n	8002f14 <xQueueReceive+0x214>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d113      	bne.n	8002e2c <xQueueReceive+0x12c>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8002e04:	f002 f85e 	bl	8004ec4 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
 8002e08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	f004 fada 	bl	80073c4 <SEGGER_SYSVIEW_ShrinkId>
 8002e10:	4604      	mov	r4, r0
 8002e12:	2000      	movs	r0, #0
 8002e14:	f004 fad6 	bl	80073c4 <SEGGER_SYSVIEW_ShrinkId>
 8002e18:	4602      	mov	r2, r0
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	2101      	movs	r1, #1
 8002e1e:	9100      	str	r1, [sp, #0]
 8002e20:	4621      	mov	r1, r4
 8002e22:	205c      	movs	r0, #92	; 0x5c
 8002e24:	f003 fe18 	bl	8006a58 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_EMPTY;
 8002e28:	2300      	movs	r3, #0
 8002e2a:	e073      	b.n	8002f14 <xQueueReceive+0x214>
                }
                else if( xEntryTimeSet == pdFALSE )
 8002e2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d106      	bne.n	8002e40 <xQueueReceive+0x140>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8002e32:	f107 0310 	add.w	r3, r7, #16
 8002e36:	4618      	mov	r0, r3
 8002e38:	f001 f852 	bl	8003ee0 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8002e3c:	2301      	movs	r3, #1
 8002e3e:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8002e40:	f002 f840 	bl	8004ec4 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8002e44:	f000 fc54 	bl	80036f0 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8002e48:	f002 f80c 	bl	8004e64 <vPortEnterCritical>
 8002e4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e4e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002e52:	b25b      	sxtb	r3, r3
 8002e54:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002e58:	d103      	bne.n	8002e62 <xQueueReceive+0x162>
 8002e5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002e62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e64:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002e68:	b25b      	sxtb	r3, r3
 8002e6a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002e6e:	d103      	bne.n	8002e78 <xQueueReceive+0x178>
 8002e70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e72:	2200      	movs	r2, #0
 8002e74:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002e78:	f002 f824 	bl	8004ec4 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002e7c:	1d3a      	adds	r2, r7, #4
 8002e7e:	f107 0310 	add.w	r3, r7, #16
 8002e82:	4611      	mov	r1, r2
 8002e84:	4618      	mov	r0, r3
 8002e86:	f001 f841 	bl	8003f0c <xTaskCheckForTimeOut>
 8002e8a:	4603      	mov	r3, r0
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d124      	bne.n	8002eda <xQueueReceive+0x1da>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002e90:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002e92:	f000 f8bd 	bl	8003010 <prvIsQueueEmpty>
 8002e96:	4603      	mov	r3, r0
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d018      	beq.n	8002ece <xQueueReceive+0x1ce>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002e9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e9e:	3324      	adds	r3, #36	; 0x24
 8002ea0:	687a      	ldr	r2, [r7, #4]
 8002ea2:	4611      	mov	r1, r2
 8002ea4:	4618      	mov	r0, r3
 8002ea6:	f000 fed7 	bl	8003c58 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8002eaa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002eac:	f000 f85e 	bl	8002f6c <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8002eb0:	f000 fc2c 	bl	800370c <xTaskResumeAll>
 8002eb4:	4603      	mov	r3, r0
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	f47f af69 	bne.w	8002d8e <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 8002ebc:	4b17      	ldr	r3, [pc, #92]	; (8002f1c <xQueueReceive+0x21c>)
 8002ebe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002ec2:	601a      	str	r2, [r3, #0]
 8002ec4:	f3bf 8f4f 	dsb	sy
 8002ec8:	f3bf 8f6f 	isb	sy
 8002ecc:	e75f      	b.n	8002d8e <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8002ece:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002ed0:	f000 f84c 	bl	8002f6c <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8002ed4:	f000 fc1a 	bl	800370c <xTaskResumeAll>
 8002ed8:	e759      	b.n	8002d8e <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8002eda:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002edc:	f000 f846 	bl	8002f6c <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8002ee0:	f000 fc14 	bl	800370c <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002ee4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002ee6:	f000 f893 	bl	8003010 <prvIsQueueEmpty>
 8002eea:	4603      	mov	r3, r0
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	f43f af4e 	beq.w	8002d8e <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
 8002ef2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	f004 fa65 	bl	80073c4 <SEGGER_SYSVIEW_ShrinkId>
 8002efa:	4604      	mov	r4, r0
 8002efc:	2000      	movs	r0, #0
 8002efe:	f004 fa61 	bl	80073c4 <SEGGER_SYSVIEW_ShrinkId>
 8002f02:	4602      	mov	r2, r0
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2101      	movs	r1, #1
 8002f08:	9100      	str	r1, [sp, #0]
 8002f0a:	4621      	mov	r1, r4
 8002f0c:	205c      	movs	r0, #92	; 0x5c
 8002f0e:	f003 fda3 	bl	8006a58 <SEGGER_SYSVIEW_RecordU32x4>
                return errQUEUE_EMPTY;
 8002f12:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8002f14:	4618      	mov	r0, r3
 8002f16:	3734      	adds	r7, #52	; 0x34
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	bd90      	pop	{r4, r7, pc}
 8002f1c:	e000ed04 	.word	0xe000ed04

08002f20 <prvCopyDataFromQueue>:
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8002f20:	b580      	push	{r7, lr}
 8002f22:	b082      	sub	sp, #8
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	6078      	str	r0, [r7, #4]
 8002f28:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d018      	beq.n	8002f64 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	68da      	ldr	r2, [r3, #12]
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f3a:	441a      	add	r2, r3
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	68da      	ldr	r2, [r3, #12]
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	689b      	ldr	r3, [r3, #8]
 8002f48:	429a      	cmp	r2, r3
 8002f4a:	d303      	bcc.n	8002f54 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681a      	ldr	r2, [r3, #0]
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	68d9      	ldr	r1, [r3, #12]
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f5c:	461a      	mov	r2, r3
 8002f5e:	6838      	ldr	r0, [r7, #0]
 8002f60:	f004 fbc8 	bl	80076f4 <memcpy>
    }
}
 8002f64:	bf00      	nop
 8002f66:	3708      	adds	r7, #8
 8002f68:	46bd      	mov	sp, r7
 8002f6a:	bd80      	pop	{r7, pc}

08002f6c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	b084      	sub	sp, #16
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8002f74:	f001 ff76 	bl	8004e64 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002f7e:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8002f80:	e011      	b.n	8002fa6 <prvUnlockQueue+0x3a>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d012      	beq.n	8002fb0 <prvUnlockQueue+0x44>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	3324      	adds	r3, #36	; 0x24
 8002f8e:	4618      	mov	r0, r3
 8002f90:	f000 fece 	bl	8003d30 <xTaskRemoveFromEventList>
 8002f94:	4603      	mov	r3, r0
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d001      	beq.n	8002f9e <prvUnlockQueue+0x32>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 8002f9a:	f001 f81d 	bl	8003fd8 <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8002f9e:	7bfb      	ldrb	r3, [r7, #15]
 8002fa0:	3b01      	subs	r3, #1
 8002fa2:	b2db      	uxtb	r3, r3
 8002fa4:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8002fa6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	dce9      	bgt.n	8002f82 <prvUnlockQueue+0x16>
 8002fae:	e000      	b.n	8002fb2 <prvUnlockQueue+0x46>
                    break;
 8002fb0:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	22ff      	movs	r2, #255	; 0xff
 8002fb6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 8002fba:	f001 ff83 	bl	8004ec4 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8002fbe:	f001 ff51 	bl	8004e64 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002fc8:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002fca:	e011      	b.n	8002ff0 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	691b      	ldr	r3, [r3, #16]
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d012      	beq.n	8002ffa <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	3310      	adds	r3, #16
 8002fd8:	4618      	mov	r0, r3
 8002fda:	f000 fea9 	bl	8003d30 <xTaskRemoveFromEventList>
 8002fde:	4603      	mov	r3, r0
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d001      	beq.n	8002fe8 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8002fe4:	f000 fff8 	bl	8003fd8 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8002fe8:	7bbb      	ldrb	r3, [r7, #14]
 8002fea:	3b01      	subs	r3, #1
 8002fec:	b2db      	uxtb	r3, r3
 8002fee:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002ff0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	dce9      	bgt.n	8002fcc <prvUnlockQueue+0x60>
 8002ff8:	e000      	b.n	8002ffc <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8002ffa:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	22ff      	movs	r2, #255	; 0xff
 8003000:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 8003004:	f001 ff5e 	bl	8004ec4 <vPortExitCritical>
}
 8003008:	bf00      	nop
 800300a:	3710      	adds	r7, #16
 800300c:	46bd      	mov	sp, r7
 800300e:	bd80      	pop	{r7, pc}

08003010 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8003010:	b580      	push	{r7, lr}
 8003012:	b084      	sub	sp, #16
 8003014:	af00      	add	r7, sp, #0
 8003016:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8003018:	f001 ff24 	bl	8004e64 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003020:	2b00      	cmp	r3, #0
 8003022:	d102      	bne.n	800302a <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8003024:	2301      	movs	r3, #1
 8003026:	60fb      	str	r3, [r7, #12]
 8003028:	e001      	b.n	800302e <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 800302a:	2300      	movs	r3, #0
 800302c:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 800302e:	f001 ff49 	bl	8004ec4 <vPortExitCritical>

    return xReturn;
 8003032:	68fb      	ldr	r3, [r7, #12]
}
 8003034:	4618      	mov	r0, r3
 8003036:	3710      	adds	r7, #16
 8003038:	46bd      	mov	sp, r7
 800303a:	bd80      	pop	{r7, pc}

0800303c <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 800303c:	b580      	push	{r7, lr}
 800303e:	b086      	sub	sp, #24
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
 8003044:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;
        QueueRegistryItem_t * pxEntryToWrite = NULL;
 8003046:	2300      	movs	r3, #0
 8003048:	613b      	str	r3, [r7, #16]

        configASSERT( xQueue );
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	2b00      	cmp	r3, #0
 800304e:	d10a      	bne.n	8003066 <vQueueAddToRegistry+0x2a>
        __asm volatile
 8003050:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003054:	f383 8811 	msr	BASEPRI, r3
 8003058:	f3bf 8f6f 	isb	sy
 800305c:	f3bf 8f4f 	dsb	sy
 8003060:	60fb      	str	r3, [r7, #12]
    }
 8003062:	bf00      	nop
 8003064:	e7fe      	b.n	8003064 <vQueueAddToRegistry+0x28>

        if( pcQueueName != NULL )
 8003066:	683b      	ldr	r3, [r7, #0]
 8003068:	2b00      	cmp	r3, #0
 800306a:	d024      	beq.n	80030b6 <vQueueAddToRegistry+0x7a>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800306c:	2300      	movs	r3, #0
 800306e:	617b      	str	r3, [r7, #20]
 8003070:	e01e      	b.n	80030b0 <vQueueAddToRegistry+0x74>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 8003072:	4a1c      	ldr	r2, [pc, #112]	; (80030e4 <vQueueAddToRegistry+0xa8>)
 8003074:	697b      	ldr	r3, [r7, #20]
 8003076:	00db      	lsls	r3, r3, #3
 8003078:	4413      	add	r3, r2
 800307a:	685b      	ldr	r3, [r3, #4]
 800307c:	687a      	ldr	r2, [r7, #4]
 800307e:	429a      	cmp	r2, r3
 8003080:	d105      	bne.n	800308e <vQueueAddToRegistry+0x52>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8003082:	697b      	ldr	r3, [r7, #20]
 8003084:	00db      	lsls	r3, r3, #3
 8003086:	4a17      	ldr	r2, [pc, #92]	; (80030e4 <vQueueAddToRegistry+0xa8>)
 8003088:	4413      	add	r3, r2
 800308a:	613b      	str	r3, [r7, #16]
                    break;
 800308c:	e013      	b.n	80030b6 <vQueueAddToRegistry+0x7a>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 800308e:	693b      	ldr	r3, [r7, #16]
 8003090:	2b00      	cmp	r3, #0
 8003092:	d10a      	bne.n	80030aa <vQueueAddToRegistry+0x6e>
 8003094:	4a13      	ldr	r2, [pc, #76]	; (80030e4 <vQueueAddToRegistry+0xa8>)
 8003096:	697b      	ldr	r3, [r7, #20]
 8003098:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800309c:	2b00      	cmp	r3, #0
 800309e:	d104      	bne.n	80030aa <vQueueAddToRegistry+0x6e>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 80030a0:	697b      	ldr	r3, [r7, #20]
 80030a2:	00db      	lsls	r3, r3, #3
 80030a4:	4a0f      	ldr	r2, [pc, #60]	; (80030e4 <vQueueAddToRegistry+0xa8>)
 80030a6:	4413      	add	r3, r2
 80030a8:	613b      	str	r3, [r7, #16]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80030aa:	697b      	ldr	r3, [r7, #20]
 80030ac:	3301      	adds	r3, #1
 80030ae:	617b      	str	r3, [r7, #20]
 80030b0:	697b      	ldr	r3, [r7, #20]
 80030b2:	2b07      	cmp	r3, #7
 80030b4:	d9dd      	bls.n	8003072 <vQueueAddToRegistry+0x36>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 80030b6:	693b      	ldr	r3, [r7, #16]
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d00f      	beq.n	80030dc <vQueueAddToRegistry+0xa0>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 80030bc:	693b      	ldr	r3, [r7, #16]
 80030be:	683a      	ldr	r2, [r7, #0]
 80030c0:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 80030c2:	693b      	ldr	r3, [r7, #16]
 80030c4:	687a      	ldr	r2, [r7, #4]
 80030c6:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	4618      	mov	r0, r3
 80030cc:	f004 f97a 	bl	80073c4 <SEGGER_SYSVIEW_ShrinkId>
 80030d0:	4601      	mov	r1, r0
 80030d2:	683b      	ldr	r3, [r7, #0]
 80030d4:	461a      	mov	r2, r3
 80030d6:	2071      	movs	r0, #113	; 0x71
 80030d8:	f003 fbee 	bl	80068b8 <SEGGER_SYSVIEW_RecordU32x2>
        }
    }
 80030dc:	bf00      	nop
 80030de:	3718      	adds	r7, #24
 80030e0:	46bd      	mov	sp, r7
 80030e2:	bd80      	pop	{r7, pc}
 80030e4:	20000094 	.word	0x20000094

080030e8 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 80030e8:	b580      	push	{r7, lr}
 80030ea:	b086      	sub	sp, #24
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	60f8      	str	r0, [r7, #12]
 80030f0:	60b9      	str	r1, [r7, #8]
 80030f2:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 80030f8:	f001 feb4 	bl	8004e64 <vPortEnterCritical>
 80030fc:	697b      	ldr	r3, [r7, #20]
 80030fe:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003102:	b25b      	sxtb	r3, r3
 8003104:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003108:	d103      	bne.n	8003112 <vQueueWaitForMessageRestricted+0x2a>
 800310a:	697b      	ldr	r3, [r7, #20]
 800310c:	2200      	movs	r2, #0
 800310e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003112:	697b      	ldr	r3, [r7, #20]
 8003114:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003118:	b25b      	sxtb	r3, r3
 800311a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800311e:	d103      	bne.n	8003128 <vQueueWaitForMessageRestricted+0x40>
 8003120:	697b      	ldr	r3, [r7, #20]
 8003122:	2200      	movs	r2, #0
 8003124:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003128:	f001 fecc 	bl	8004ec4 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800312c:	697b      	ldr	r3, [r7, #20]
 800312e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003130:	2b00      	cmp	r3, #0
 8003132:	d106      	bne.n	8003142 <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003134:	697b      	ldr	r3, [r7, #20]
 8003136:	3324      	adds	r3, #36	; 0x24
 8003138:	687a      	ldr	r2, [r7, #4]
 800313a:	68b9      	ldr	r1, [r7, #8]
 800313c:	4618      	mov	r0, r3
 800313e:	f000 fdaf 	bl	8003ca0 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8003142:	6978      	ldr	r0, [r7, #20]
 8003144:	f7ff ff12 	bl	8002f6c <prvUnlockQueue>
    }
 8003148:	bf00      	nop
 800314a:	3718      	adds	r7, #24
 800314c:	46bd      	mov	sp, r7
 800314e:	bd80      	pop	{r7, pc}

08003150 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8003150:	b580      	push	{r7, lr}
 8003152:	b08c      	sub	sp, #48	; 0x30
 8003154:	af04      	add	r7, sp, #16
 8003156:	60f8      	str	r0, [r7, #12]
 8003158:	60b9      	str	r1, [r7, #8]
 800315a:	603b      	str	r3, [r7, #0]
 800315c:	4613      	mov	r3, r2
 800315e:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
        {
            StackType_t * pxStack;

            /* Allocate space for the stack used by the task being created. */
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003160:	88fb      	ldrh	r3, [r7, #6]
 8003162:	009b      	lsls	r3, r3, #2
 8003164:	4618      	mov	r0, r3
 8003166:	f001 ffa9 	bl	80050bc <pvPortMalloc>
 800316a:	6178      	str	r0, [r7, #20]

            if( pxStack != NULL )
 800316c:	697b      	ldr	r3, [r7, #20]
 800316e:	2b00      	cmp	r3, #0
 8003170:	d013      	beq.n	800319a <xTaskCreate+0x4a>
            {
                /* Allocate space for the TCB. */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003172:	2058      	movs	r0, #88	; 0x58
 8003174:	f001 ffa2 	bl	80050bc <pvPortMalloc>
 8003178:	61f8      	str	r0, [r7, #28]

                if( pxNewTCB != NULL )
 800317a:	69fb      	ldr	r3, [r7, #28]
 800317c:	2b00      	cmp	r3, #0
 800317e:	d008      	beq.n	8003192 <xTaskCreate+0x42>
                {
                    memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 8003180:	2258      	movs	r2, #88	; 0x58
 8003182:	2100      	movs	r1, #0
 8003184:	69f8      	ldr	r0, [r7, #28]
 8003186:	f004 fa89 	bl	800769c <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 800318a:	69fb      	ldr	r3, [r7, #28]
 800318c:	697a      	ldr	r2, [r7, #20]
 800318e:	631a      	str	r2, [r3, #48]	; 0x30
 8003190:	e005      	b.n	800319e <xTaskCreate+0x4e>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 8003192:	6978      	ldr	r0, [r7, #20]
 8003194:	f002 f84c 	bl	8005230 <vPortFree>
 8003198:	e001      	b.n	800319e <xTaskCreate+0x4e>
                }
            }
            else
            {
                pxNewTCB = NULL;
 800319a:	2300      	movs	r3, #0
 800319c:	61fb      	str	r3, [r7, #28]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 800319e:	69fb      	ldr	r3, [r7, #28]
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d013      	beq.n	80031cc <xTaskCreate+0x7c>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80031a4:	88fa      	ldrh	r2, [r7, #6]
 80031a6:	2300      	movs	r3, #0
 80031a8:	9303      	str	r3, [sp, #12]
 80031aa:	69fb      	ldr	r3, [r7, #28]
 80031ac:	9302      	str	r3, [sp, #8]
 80031ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031b0:	9301      	str	r3, [sp, #4]
 80031b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031b4:	9300      	str	r3, [sp, #0]
 80031b6:	683b      	ldr	r3, [r7, #0]
 80031b8:	68b9      	ldr	r1, [r7, #8]
 80031ba:	68f8      	ldr	r0, [r7, #12]
 80031bc:	f000 f80e 	bl	80031dc <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 80031c0:	69f8      	ldr	r0, [r7, #28]
 80031c2:	f000 f899 	bl	80032f8 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 80031c6:	2301      	movs	r3, #1
 80031c8:	61bb      	str	r3, [r7, #24]
 80031ca:	e002      	b.n	80031d2 <xTaskCreate+0x82>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80031cc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80031d0:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 80031d2:	69bb      	ldr	r3, [r7, #24]
    }
 80031d4:	4618      	mov	r0, r3
 80031d6:	3720      	adds	r7, #32
 80031d8:	46bd      	mov	sp, r7
 80031da:	bd80      	pop	{r7, pc}

080031dc <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 80031dc:	b580      	push	{r7, lr}
 80031de:	b088      	sub	sp, #32
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	60f8      	str	r0, [r7, #12]
 80031e4:	60b9      	str	r1, [r7, #8]
 80031e6:	607a      	str	r2, [r7, #4]
 80031e8:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80031ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031ec:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	009b      	lsls	r3, r3, #2
 80031f2:	461a      	mov	r2, r3
 80031f4:	21a5      	movs	r1, #165	; 0xa5
 80031f6:	f004 fa51 	bl	800769c <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80031fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031fc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003204:	3b01      	subs	r3, #1
 8003206:	009b      	lsls	r3, r3, #2
 8003208:	4413      	add	r3, r2
 800320a:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800320c:	69bb      	ldr	r3, [r7, #24]
 800320e:	f023 0307 	bic.w	r3, r3, #7
 8003212:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003214:	69bb      	ldr	r3, [r7, #24]
 8003216:	f003 0307 	and.w	r3, r3, #7
 800321a:	2b00      	cmp	r3, #0
 800321c:	d00a      	beq.n	8003234 <prvInitialiseNewTask+0x58>
        __asm volatile
 800321e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003222:	f383 8811 	msr	BASEPRI, r3
 8003226:	f3bf 8f6f 	isb	sy
 800322a:	f3bf 8f4f 	dsb	sy
 800322e:	617b      	str	r3, [r7, #20]
    }
 8003230:	bf00      	nop
 8003232:	e7fe      	b.n	8003232 <prvInitialiseNewTask+0x56>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8003234:	68bb      	ldr	r3, [r7, #8]
 8003236:	2b00      	cmp	r3, #0
 8003238:	d01e      	beq.n	8003278 <prvInitialiseNewTask+0x9c>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800323a:	2300      	movs	r3, #0
 800323c:	61fb      	str	r3, [r7, #28]
 800323e:	e012      	b.n	8003266 <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003240:	68ba      	ldr	r2, [r7, #8]
 8003242:	69fb      	ldr	r3, [r7, #28]
 8003244:	4413      	add	r3, r2
 8003246:	7819      	ldrb	r1, [r3, #0]
 8003248:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800324a:	69fb      	ldr	r3, [r7, #28]
 800324c:	4413      	add	r3, r2
 800324e:	3334      	adds	r3, #52	; 0x34
 8003250:	460a      	mov	r2, r1
 8003252:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8003254:	68ba      	ldr	r2, [r7, #8]
 8003256:	69fb      	ldr	r3, [r7, #28]
 8003258:	4413      	add	r3, r2
 800325a:	781b      	ldrb	r3, [r3, #0]
 800325c:	2b00      	cmp	r3, #0
 800325e:	d006      	beq.n	800326e <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003260:	69fb      	ldr	r3, [r7, #28]
 8003262:	3301      	adds	r3, #1
 8003264:	61fb      	str	r3, [r7, #28]
 8003266:	69fb      	ldr	r3, [r7, #28]
 8003268:	2b09      	cmp	r3, #9
 800326a:	d9e9      	bls.n	8003240 <prvInitialiseNewTask+0x64>
 800326c:	e000      	b.n	8003270 <prvInitialiseNewTask+0x94>
            {
                break;
 800326e:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003270:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003272:	2200      	movs	r2, #0
 8003274:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 8003278:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800327a:	2b07      	cmp	r3, #7
 800327c:	d90a      	bls.n	8003294 <prvInitialiseNewTask+0xb8>
        __asm volatile
 800327e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003282:	f383 8811 	msr	BASEPRI, r3
 8003286:	f3bf 8f6f 	isb	sy
 800328a:	f3bf 8f4f 	dsb	sy
 800328e:	613b      	str	r3, [r7, #16]
    }
 8003290:	bf00      	nop
 8003292:	e7fe      	b.n	8003292 <prvInitialiseNewTask+0xb6>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003294:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003296:	2b07      	cmp	r3, #7
 8003298:	d901      	bls.n	800329e <prvInitialiseNewTask+0xc2>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800329a:	2307      	movs	r3, #7
 800329c:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 800329e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032a0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80032a2:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 80032a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032a6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80032a8:	649a      	str	r2, [r3, #72]	; 0x48
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80032aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032ac:	3304      	adds	r3, #4
 80032ae:	4618      	mov	r0, r3
 80032b0:	f7ff fb8a 	bl	80029c8 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80032b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032b6:	3318      	adds	r3, #24
 80032b8:	4618      	mov	r0, r3
 80032ba:	f7ff fb85 	bl	80029c8 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80032be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80032c2:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80032c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032c6:	f1c3 0208 	rsb	r2, r3, #8
 80032ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032cc:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80032ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80032d2:	625a      	str	r2, [r3, #36]	; 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80032d4:	683a      	ldr	r2, [r7, #0]
 80032d6:	68f9      	ldr	r1, [r7, #12]
 80032d8:	69b8      	ldr	r0, [r7, #24]
 80032da:	f001 fc19 	bl	8004b10 <pxPortInitialiseStack>
 80032de:	4602      	mov	r2, r0
 80032e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032e2:	601a      	str	r2, [r3, #0]
        }
        #endif /* portHAS_STACK_OVERFLOW_CHECKING */
    }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 80032e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d002      	beq.n	80032f0 <prvInitialiseNewTask+0x114>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80032ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80032ee:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80032f0:	bf00      	nop
 80032f2:	3720      	adds	r7, #32
 80032f4:	46bd      	mov	sp, r7
 80032f6:	bd80      	pop	{r7, pc}

080032f8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 80032f8:	b5b0      	push	{r4, r5, r7, lr}
 80032fa:	b086      	sub	sp, #24
 80032fc:	af02      	add	r7, sp, #8
 80032fe:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8003300:	f001 fdb0 	bl	8004e64 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8003304:	4b4f      	ldr	r3, [pc, #316]	; (8003444 <prvAddNewTaskToReadyList+0x14c>)
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	3301      	adds	r3, #1
 800330a:	4a4e      	ldr	r2, [pc, #312]	; (8003444 <prvAddNewTaskToReadyList+0x14c>)
 800330c:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 800330e:	4b4e      	ldr	r3, [pc, #312]	; (8003448 <prvAddNewTaskToReadyList+0x150>)
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	2b00      	cmp	r3, #0
 8003314:	d109      	bne.n	800332a <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8003316:	4a4c      	ldr	r2, [pc, #304]	; (8003448 <prvAddNewTaskToReadyList+0x150>)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800331c:	4b49      	ldr	r3, [pc, #292]	; (8003444 <prvAddNewTaskToReadyList+0x14c>)
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	2b01      	cmp	r3, #1
 8003322:	d110      	bne.n	8003346 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8003324:	f000 fe7c 	bl	8004020 <prvInitialiseTaskLists>
 8003328:	e00d      	b.n	8003346 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 800332a:	4b48      	ldr	r3, [pc, #288]	; (800344c <prvAddNewTaskToReadyList+0x154>)
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	2b00      	cmp	r3, #0
 8003330:	d109      	bne.n	8003346 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003332:	4b45      	ldr	r3, [pc, #276]	; (8003448 <prvAddNewTaskToReadyList+0x150>)
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800333c:	429a      	cmp	r2, r3
 800333e:	d802      	bhi.n	8003346 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8003340:	4a41      	ldr	r2, [pc, #260]	; (8003448 <prvAddNewTaskToReadyList+0x150>)
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8003346:	4b42      	ldr	r3, [pc, #264]	; (8003450 <prvAddNewTaskToReadyList+0x158>)
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	3301      	adds	r3, #1
 800334c:	4a40      	ldr	r2, [pc, #256]	; (8003450 <prvAddNewTaskToReadyList+0x158>)
 800334e:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
        {
            /* Add a counter into the TCB for tracing only. */
            pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003350:	4b3f      	ldr	r3, [pc, #252]	; (8003450 <prvAddNewTaskToReadyList+0x158>)
 8003352:	681a      	ldr	r2, [r3, #0]
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	641a      	str	r2, [r3, #64]	; 0x40
        }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	2b00      	cmp	r3, #0
 800335c:	d016      	beq.n	800338c <prvAddNewTaskToReadyList+0x94>
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	4618      	mov	r0, r3
 8003362:	f003 ff69 	bl	8007238 <SEGGER_SYSVIEW_OnTaskCreate>
 8003366:	6878      	ldr	r0, [r7, #4]
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003376:	461d      	mov	r5, r3
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	461c      	mov	r4, r3
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003382:	1ae3      	subs	r3, r4, r3
 8003384:	9300      	str	r3, [sp, #0]
 8003386:	462b      	mov	r3, r5
 8003388:	f002 f914 	bl	80055b4 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	4618      	mov	r0, r3
 8003390:	f003 ffd6 	bl	8007340 <SEGGER_SYSVIEW_OnTaskStartReady>
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003398:	2201      	movs	r2, #1
 800339a:	409a      	lsls	r2, r3
 800339c:	4b2d      	ldr	r3, [pc, #180]	; (8003454 <prvAddNewTaskToReadyList+0x15c>)
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	4313      	orrs	r3, r2
 80033a2:	4a2c      	ldr	r2, [pc, #176]	; (8003454 <prvAddNewTaskToReadyList+0x15c>)
 80033a4:	6013      	str	r3, [r2, #0]
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033aa:	492b      	ldr	r1, [pc, #172]	; (8003458 <prvAddNewTaskToReadyList+0x160>)
 80033ac:	4613      	mov	r3, r2
 80033ae:	009b      	lsls	r3, r3, #2
 80033b0:	4413      	add	r3, r2
 80033b2:	009b      	lsls	r3, r3, #2
 80033b4:	440b      	add	r3, r1
 80033b6:	3304      	adds	r3, #4
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	60fb      	str	r3, [r7, #12]
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	68fa      	ldr	r2, [r7, #12]
 80033c0:	609a      	str	r2, [r3, #8]
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	689a      	ldr	r2, [r3, #8]
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	60da      	str	r2, [r3, #12]
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	689b      	ldr	r3, [r3, #8]
 80033ce:	687a      	ldr	r2, [r7, #4]
 80033d0:	3204      	adds	r2, #4
 80033d2:	605a      	str	r2, [r3, #4]
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	1d1a      	adds	r2, r3, #4
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	609a      	str	r2, [r3, #8]
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033e0:	4613      	mov	r3, r2
 80033e2:	009b      	lsls	r3, r3, #2
 80033e4:	4413      	add	r3, r2
 80033e6:	009b      	lsls	r3, r3, #2
 80033e8:	4a1b      	ldr	r2, [pc, #108]	; (8003458 <prvAddNewTaskToReadyList+0x160>)
 80033ea:	441a      	add	r2, r3
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	615a      	str	r2, [r3, #20]
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033f4:	4918      	ldr	r1, [pc, #96]	; (8003458 <prvAddNewTaskToReadyList+0x160>)
 80033f6:	4613      	mov	r3, r2
 80033f8:	009b      	lsls	r3, r3, #2
 80033fa:	4413      	add	r3, r2
 80033fc:	009b      	lsls	r3, r3, #2
 80033fe:	440b      	add	r3, r1
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	1c59      	adds	r1, r3, #1
 8003404:	4814      	ldr	r0, [pc, #80]	; (8003458 <prvAddNewTaskToReadyList+0x160>)
 8003406:	4613      	mov	r3, r2
 8003408:	009b      	lsls	r3, r3, #2
 800340a:	4413      	add	r3, r2
 800340c:	009b      	lsls	r3, r3, #2
 800340e:	4403      	add	r3, r0
 8003410:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8003412:	f001 fd57 	bl	8004ec4 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8003416:	4b0d      	ldr	r3, [pc, #52]	; (800344c <prvAddNewTaskToReadyList+0x154>)
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	2b00      	cmp	r3, #0
 800341c:	d00e      	beq.n	800343c <prvAddNewTaskToReadyList+0x144>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800341e:	4b0a      	ldr	r3, [pc, #40]	; (8003448 <prvAddNewTaskToReadyList+0x150>)
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003428:	429a      	cmp	r2, r3
 800342a:	d207      	bcs.n	800343c <prvAddNewTaskToReadyList+0x144>
        {
            taskYIELD_IF_USING_PREEMPTION();
 800342c:	4b0b      	ldr	r3, [pc, #44]	; (800345c <prvAddNewTaskToReadyList+0x164>)
 800342e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003432:	601a      	str	r2, [r3, #0]
 8003434:	f3bf 8f4f 	dsb	sy
 8003438:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800343c:	bf00      	nop
 800343e:	3710      	adds	r7, #16
 8003440:	46bd      	mov	sp, r7
 8003442:	bdb0      	pop	{r4, r5, r7, pc}
 8003444:	200001e8 	.word	0x200001e8
 8003448:	200000d4 	.word	0x200000d4
 800344c:	200001f4 	.word	0x200001f4
 8003450:	20000204 	.word	0x20000204
 8003454:	200001f0 	.word	0x200001f0
 8003458:	200000d8 	.word	0x200000d8
 800345c:	e000ed04 	.word	0xe000ed04

08003460 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    void vTaskDelete( TaskHandle_t xTaskToDelete )
    {
 8003460:	b580      	push	{r7, lr}
 8003462:	b084      	sub	sp, #16
 8003464:	af00      	add	r7, sp, #0
 8003466:	6078      	str	r0, [r7, #4]
        TCB_t * pxTCB;

        taskENTER_CRITICAL();
 8003468:	f001 fcfc 	bl	8004e64 <vPortEnterCritical>
        {
            /* If null is passed in here then it is the calling task that is
             * being deleted. */
            pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2b00      	cmp	r3, #0
 8003470:	d102      	bne.n	8003478 <vTaskDelete+0x18>
 8003472:	4b48      	ldr	r3, [pc, #288]	; (8003594 <vTaskDelete+0x134>)
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	e000      	b.n	800347a <vTaskDelete+0x1a>
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	60fb      	str	r3, [r7, #12]

            /* Remove task from the ready/delayed list. */
            if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	3304      	adds	r3, #4
 8003480:	4618      	mov	r0, r3
 8003482:	f7ff fb0b 	bl	8002a9c <uxListRemove>
 8003486:	4603      	mov	r3, r0
 8003488:	2b00      	cmp	r3, #0
 800348a:	d115      	bne.n	80034b8 <vTaskDelete+0x58>
            {
                taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003490:	4941      	ldr	r1, [pc, #260]	; (8003598 <vTaskDelete+0x138>)
 8003492:	4613      	mov	r3, r2
 8003494:	009b      	lsls	r3, r3, #2
 8003496:	4413      	add	r3, r2
 8003498:	009b      	lsls	r3, r3, #2
 800349a:	440b      	add	r3, r1
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d10a      	bne.n	80034b8 <vTaskDelete+0x58>
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034a6:	2201      	movs	r2, #1
 80034a8:	fa02 f303 	lsl.w	r3, r2, r3
 80034ac:	43da      	mvns	r2, r3
 80034ae:	4b3b      	ldr	r3, [pc, #236]	; (800359c <vTaskDelete+0x13c>)
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	4013      	ands	r3, r2
 80034b4:	4a39      	ldr	r2, [pc, #228]	; (800359c <vTaskDelete+0x13c>)
 80034b6:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }

            /* Is the task waiting on an event also? */
            if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d004      	beq.n	80034ca <vTaskDelete+0x6a>
            {
                ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	3318      	adds	r3, #24
 80034c4:	4618      	mov	r0, r3
 80034c6:	f7ff fae9 	bl	8002a9c <uxListRemove>

            /* Increment the uxTaskNumber also so kernel aware debuggers can
             * detect that the task lists need re-generating.  This is done before
             * portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
             * not return. */
            uxTaskNumber++;
 80034ca:	4b35      	ldr	r3, [pc, #212]	; (80035a0 <vTaskDelete+0x140>)
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	3301      	adds	r3, #1
 80034d0:	4a33      	ldr	r2, [pc, #204]	; (80035a0 <vTaskDelete+0x140>)
 80034d2:	6013      	str	r3, [r2, #0]

            if( pxTCB == pxCurrentTCB )
 80034d4:	4b2f      	ldr	r3, [pc, #188]	; (8003594 <vTaskDelete+0x134>)
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	68fa      	ldr	r2, [r7, #12]
 80034da:	429a      	cmp	r2, r3
 80034dc:	d118      	bne.n	8003510 <vTaskDelete+0xb0>
                /* A task is deleting itself.  This cannot complete within the
                 * task itself, as a context switch to another task is required.
                 * Place the task in the termination list.  The idle task will
                 * check the termination list and free up any memory allocated by
                 * the scheduler for the TCB and stack of the deleted task. */
                vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	3304      	adds	r3, #4
 80034e2:	4619      	mov	r1, r3
 80034e4:	482f      	ldr	r0, [pc, #188]	; (80035a4 <vTaskDelete+0x144>)
 80034e6:	f7ff fa7c 	bl	80029e2 <vListInsertEnd>

                /* Increment the ucTasksDeleted variable so the idle task knows
                 * there is a task that has been deleted and that it should therefore
                 * check the xTasksWaitingTermination list. */
                ++uxDeletedTasksWaitingCleanUp;
 80034ea:	4b2f      	ldr	r3, [pc, #188]	; (80035a8 <vTaskDelete+0x148>)
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	3301      	adds	r3, #1
 80034f0:	4a2d      	ldr	r2, [pc, #180]	; (80035a8 <vTaskDelete+0x148>)
 80034f2:	6013      	str	r3, [r2, #0]

                /* Call the delete hook before portPRE_TASK_DELETE_HOOK() as
                 * portPRE_TASK_DELETE_HOOK() does not return in the Win32 port. */
                traceTASK_DELETE( pxTCB );
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	4618      	mov	r0, r3
 80034f8:	f003 ff64 	bl	80073c4 <SEGGER_SYSVIEW_ShrinkId>
 80034fc:	4603      	mov	r3, r0
 80034fe:	4619      	mov	r1, r3
 8003500:	2022      	movs	r0, #34	; 0x22
 8003502:	f003 f99d 	bl	8006840 <SEGGER_SYSVIEW_RecordU32>
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	4618      	mov	r0, r3
 800350a:	f002 f8bb 	bl	8005684 <SYSVIEW_DeleteTask>
 800350e:	e013      	b.n	8003538 <vTaskDelete+0xd8>
                 * required. */
                portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
            }
            else
            {
                --uxCurrentNumberOfTasks;
 8003510:	4b26      	ldr	r3, [pc, #152]	; (80035ac <vTaskDelete+0x14c>)
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	3b01      	subs	r3, #1
 8003516:	4a25      	ldr	r2, [pc, #148]	; (80035ac <vTaskDelete+0x14c>)
 8003518:	6013      	str	r3, [r2, #0]
                traceTASK_DELETE( pxTCB );
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	4618      	mov	r0, r3
 800351e:	f003 ff51 	bl	80073c4 <SEGGER_SYSVIEW_ShrinkId>
 8003522:	4603      	mov	r3, r0
 8003524:	4619      	mov	r1, r3
 8003526:	2022      	movs	r0, #34	; 0x22
 8003528:	f003 f98a 	bl	8006840 <SEGGER_SYSVIEW_RecordU32>
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	4618      	mov	r0, r3
 8003530:	f002 f8a8 	bl	8005684 <SYSVIEW_DeleteTask>

                /* Reset the next expected unblock time in case it referred to
                 * the task that has just been deleted. */
                prvResetNextTaskUnblockTime();
 8003534:	f000 fdf2 	bl	800411c <prvResetNextTaskUnblockTime>
            }
        }
        taskEXIT_CRITICAL();
 8003538:	f001 fcc4 	bl	8004ec4 <vPortExitCritical>

        /* If the task is not deleting itself, call prvDeleteTCB from outside of
         * critical section. If a task deletes itself, prvDeleteTCB is called
         * from prvCheckTasksWaitingTermination which is called from Idle task. */
        if( pxTCB != pxCurrentTCB )
 800353c:	4b15      	ldr	r3, [pc, #84]	; (8003594 <vTaskDelete+0x134>)
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	68fa      	ldr	r2, [r7, #12]
 8003542:	429a      	cmp	r2, r3
 8003544:	d002      	beq.n	800354c <vTaskDelete+0xec>
        {
            prvDeleteTCB( pxTCB );
 8003546:	68f8      	ldr	r0, [r7, #12]
 8003548:	f000 fdd8 	bl	80040fc <prvDeleteTCB>
        }

        /* Force a reschedule if it is the currently running task that has just
         * been deleted. */
        if( xSchedulerRunning != pdFALSE )
 800354c:	4b18      	ldr	r3, [pc, #96]	; (80035b0 <vTaskDelete+0x150>)
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	2b00      	cmp	r3, #0
 8003552:	d01b      	beq.n	800358c <vTaskDelete+0x12c>
        {
            if( pxTCB == pxCurrentTCB )
 8003554:	4b0f      	ldr	r3, [pc, #60]	; (8003594 <vTaskDelete+0x134>)
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	68fa      	ldr	r2, [r7, #12]
 800355a:	429a      	cmp	r2, r3
 800355c:	d116      	bne.n	800358c <vTaskDelete+0x12c>
            {
                configASSERT( uxSchedulerSuspended == 0 );
 800355e:	4b15      	ldr	r3, [pc, #84]	; (80035b4 <vTaskDelete+0x154>)
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	2b00      	cmp	r3, #0
 8003564:	d00a      	beq.n	800357c <vTaskDelete+0x11c>
        __asm volatile
 8003566:	f04f 0350 	mov.w	r3, #80	; 0x50
 800356a:	f383 8811 	msr	BASEPRI, r3
 800356e:	f3bf 8f6f 	isb	sy
 8003572:	f3bf 8f4f 	dsb	sy
 8003576:	60bb      	str	r3, [r7, #8]
    }
 8003578:	bf00      	nop
 800357a:	e7fe      	b.n	800357a <vTaskDelete+0x11a>
                portYIELD_WITHIN_API();
 800357c:	4b0e      	ldr	r3, [pc, #56]	; (80035b8 <vTaskDelete+0x158>)
 800357e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003582:	601a      	str	r2, [r3, #0]
 8003584:	f3bf 8f4f 	dsb	sy
 8003588:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 800358c:	bf00      	nop
 800358e:	3710      	adds	r7, #16
 8003590:	46bd      	mov	sp, r7
 8003592:	bd80      	pop	{r7, pc}
 8003594:	200000d4 	.word	0x200000d4
 8003598:	200000d8 	.word	0x200000d8
 800359c:	200001f0 	.word	0x200001f0
 80035a0:	20000204 	.word	0x20000204
 80035a4:	200001bc 	.word	0x200001bc
 80035a8:	200001d0 	.word	0x200001d0
 80035ac:	200001e8 	.word	0x200001e8
 80035b0:	200001f4 	.word	0x200001f4
 80035b4:	20000210 	.word	0x20000210
 80035b8:	e000ed04 	.word	0xe000ed04

080035bc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 80035bc:	b580      	push	{r7, lr}
 80035be:	b084      	sub	sp, #16
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 80035c4:	2300      	movs	r3, #0
 80035c6:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d01b      	beq.n	8003606 <vTaskDelay+0x4a>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 80035ce:	4b15      	ldr	r3, [pc, #84]	; (8003624 <vTaskDelay+0x68>)
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d00a      	beq.n	80035ec <vTaskDelay+0x30>
        __asm volatile
 80035d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035da:	f383 8811 	msr	BASEPRI, r3
 80035de:	f3bf 8f6f 	isb	sy
 80035e2:	f3bf 8f4f 	dsb	sy
 80035e6:	60bb      	str	r3, [r7, #8]
    }
 80035e8:	bf00      	nop
 80035ea:	e7fe      	b.n	80035ea <vTaskDelay+0x2e>
            vTaskSuspendAll();
 80035ec:	f000 f880 	bl	80036f0 <vTaskSuspendAll>
            {
                traceTASK_DELAY();
 80035f0:	6879      	ldr	r1, [r7, #4]
 80035f2:	2023      	movs	r0, #35	; 0x23
 80035f4:	f003 f924 	bl	8006840 <SEGGER_SYSVIEW_RecordU32>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80035f8:	2100      	movs	r1, #0
 80035fa:	6878      	ldr	r0, [r7, #4]
 80035fc:	f000 ff84 	bl	8004508 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 8003600:	f000 f884 	bl	800370c <xTaskResumeAll>
 8003604:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	2b00      	cmp	r3, #0
 800360a:	d107      	bne.n	800361c <vTaskDelay+0x60>
        {
            portYIELD_WITHIN_API();
 800360c:	4b06      	ldr	r3, [pc, #24]	; (8003628 <vTaskDelay+0x6c>)
 800360e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003612:	601a      	str	r2, [r3, #0]
 8003614:	f3bf 8f4f 	dsb	sy
 8003618:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 800361c:	bf00      	nop
 800361e:	3710      	adds	r7, #16
 8003620:	46bd      	mov	sp, r7
 8003622:	bd80      	pop	{r7, pc}
 8003624:	20000210 	.word	0x20000210
 8003628:	e000ed04 	.word	0xe000ed04

0800362c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800362c:	b580      	push	{r7, lr}
 800362e:	b086      	sub	sp, #24
 8003630:	af02      	add	r7, sp, #8
        }
    }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
    {
        /* The Idle task is being created using dynamically allocated RAM. */
        xReturn = xTaskCreate( prvIdleTask,
 8003632:	4b27      	ldr	r3, [pc, #156]	; (80036d0 <vTaskStartScheduler+0xa4>)
 8003634:	9301      	str	r3, [sp, #4]
 8003636:	2300      	movs	r3, #0
 8003638:	9300      	str	r3, [sp, #0]
 800363a:	2300      	movs	r3, #0
 800363c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003640:	4924      	ldr	r1, [pc, #144]	; (80036d4 <vTaskStartScheduler+0xa8>)
 8003642:	4825      	ldr	r0, [pc, #148]	; (80036d8 <vTaskStartScheduler+0xac>)
 8003644:	f7ff fd84 	bl	8003150 <xTaskCreate>
 8003648:	60f8      	str	r0, [r7, #12]
    }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	2b01      	cmp	r3, #1
 800364e:	d102      	bne.n	8003656 <vTaskStartScheduler+0x2a>
        {
            xReturn = xTimerCreateTimerTask();
 8003650:	f000 ffda 	bl	8004608 <xTimerCreateTimerTask>
 8003654:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	2b01      	cmp	r3, #1
 800365a:	d124      	bne.n	80036a6 <vTaskStartScheduler+0x7a>
        __asm volatile
 800365c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003660:	f383 8811 	msr	BASEPRI, r3
 8003664:	f3bf 8f6f 	isb	sy
 8003668:	f3bf 8f4f 	dsb	sy
 800366c:	60bb      	str	r3, [r7, #8]
    }
 800366e:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 8003670:	4b1a      	ldr	r3, [pc, #104]	; (80036dc <vTaskStartScheduler+0xb0>)
 8003672:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003676:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8003678:	4b19      	ldr	r3, [pc, #100]	; (80036e0 <vTaskStartScheduler+0xb4>)
 800367a:	2201      	movs	r2, #1
 800367c:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800367e:	4b19      	ldr	r3, [pc, #100]	; (80036e4 <vTaskStartScheduler+0xb8>)
 8003680:	2200      	movs	r2, #0
 8003682:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 8003684:	4b18      	ldr	r3, [pc, #96]	; (80036e8 <vTaskStartScheduler+0xbc>)
 8003686:	681a      	ldr	r2, [r3, #0]
 8003688:	4b11      	ldr	r3, [pc, #68]	; (80036d0 <vTaskStartScheduler+0xa4>)
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	429a      	cmp	r2, r3
 800368e:	d102      	bne.n	8003696 <vTaskStartScheduler+0x6a>
 8003690:	f003 fdb6 	bl	8007200 <SEGGER_SYSVIEW_OnIdle>
 8003694:	e004      	b.n	80036a0 <vTaskStartScheduler+0x74>
 8003696:	4b14      	ldr	r3, [pc, #80]	; (80036e8 <vTaskStartScheduler+0xbc>)
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	4618      	mov	r0, r3
 800369c:	f003 fe0e 	bl	80072bc <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        xPortStartScheduler();
 80036a0:	f001 fac0 	bl	8004c24 <xPortStartScheduler>
 80036a4:	e00e      	b.n	80036c4 <vTaskStartScheduler+0x98>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80036ac:	d10a      	bne.n	80036c4 <vTaskStartScheduler+0x98>
        __asm volatile
 80036ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036b2:	f383 8811 	msr	BASEPRI, r3
 80036b6:	f3bf 8f6f 	isb	sy
 80036ba:	f3bf 8f4f 	dsb	sy
 80036be:	607b      	str	r3, [r7, #4]
    }
 80036c0:	bf00      	nop
 80036c2:	e7fe      	b.n	80036c2 <vTaskStartScheduler+0x96>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 80036c4:	4b09      	ldr	r3, [pc, #36]	; (80036ec <vTaskStartScheduler+0xc0>)
 80036c6:	681b      	ldr	r3, [r3, #0]
}
 80036c8:	bf00      	nop
 80036ca:	3710      	adds	r7, #16
 80036cc:	46bd      	mov	sp, r7
 80036ce:	bd80      	pop	{r7, pc}
 80036d0:	2000020c 	.word	0x2000020c
 80036d4:	080077ec 	.word	0x080077ec
 80036d8:	08003ff1 	.word	0x08003ff1
 80036dc:	20000208 	.word	0x20000208
 80036e0:	200001f4 	.word	0x200001f4
 80036e4:	200001ec 	.word	0x200001ec
 80036e8:	200000d4 	.word	0x200000d4
 80036ec:	2000000c 	.word	0x2000000c

080036f0 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80036f0:	b480      	push	{r7}
 80036f2:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 80036f4:	4b04      	ldr	r3, [pc, #16]	; (8003708 <vTaskSuspendAll+0x18>)
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	3301      	adds	r3, #1
 80036fa:	4a03      	ldr	r2, [pc, #12]	; (8003708 <vTaskSuspendAll+0x18>)
 80036fc:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 80036fe:	bf00      	nop
 8003700:	46bd      	mov	sp, r7
 8003702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003706:	4770      	bx	lr
 8003708:	20000210 	.word	0x20000210

0800370c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800370c:	b580      	push	{r7, lr}
 800370e:	b088      	sub	sp, #32
 8003710:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8003712:	2300      	movs	r3, #0
 8003714:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 8003716:	2300      	movs	r3, #0
 8003718:	61bb      	str	r3, [r7, #24]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 800371a:	4b73      	ldr	r3, [pc, #460]	; (80038e8 <xTaskResumeAll+0x1dc>)
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	2b00      	cmp	r3, #0
 8003720:	d10a      	bne.n	8003738 <xTaskResumeAll+0x2c>
        __asm volatile
 8003722:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003726:	f383 8811 	msr	BASEPRI, r3
 800372a:	f3bf 8f6f 	isb	sy
 800372e:	f3bf 8f4f 	dsb	sy
 8003732:	607b      	str	r3, [r7, #4]
    }
 8003734:	bf00      	nop
 8003736:	e7fe      	b.n	8003736 <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8003738:	f001 fb94 	bl	8004e64 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 800373c:	4b6a      	ldr	r3, [pc, #424]	; (80038e8 <xTaskResumeAll+0x1dc>)
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	3b01      	subs	r3, #1
 8003742:	4a69      	ldr	r2, [pc, #420]	; (80038e8 <xTaskResumeAll+0x1dc>)
 8003744:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003746:	4b68      	ldr	r3, [pc, #416]	; (80038e8 <xTaskResumeAll+0x1dc>)
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	2b00      	cmp	r3, #0
 800374c:	f040 80c4 	bne.w	80038d8 <xTaskResumeAll+0x1cc>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003750:	4b66      	ldr	r3, [pc, #408]	; (80038ec <xTaskResumeAll+0x1e0>)
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	2b00      	cmp	r3, #0
 8003756:	f000 80bf 	beq.w	80038d8 <xTaskResumeAll+0x1cc>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800375a:	e08e      	b.n	800387a <xTaskResumeAll+0x16e>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800375c:	4b64      	ldr	r3, [pc, #400]	; (80038f0 <xTaskResumeAll+0x1e4>)
 800375e:	68db      	ldr	r3, [r3, #12]
 8003760:	68db      	ldr	r3, [r3, #12]
 8003762:	61fb      	str	r3, [r7, #28]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8003764:	69fb      	ldr	r3, [r7, #28]
 8003766:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003768:	613b      	str	r3, [r7, #16]
 800376a:	69fb      	ldr	r3, [r7, #28]
 800376c:	69db      	ldr	r3, [r3, #28]
 800376e:	69fa      	ldr	r2, [r7, #28]
 8003770:	6a12      	ldr	r2, [r2, #32]
 8003772:	609a      	str	r2, [r3, #8]
 8003774:	69fb      	ldr	r3, [r7, #28]
 8003776:	6a1b      	ldr	r3, [r3, #32]
 8003778:	69fa      	ldr	r2, [r7, #28]
 800377a:	69d2      	ldr	r2, [r2, #28]
 800377c:	605a      	str	r2, [r3, #4]
 800377e:	693b      	ldr	r3, [r7, #16]
 8003780:	685a      	ldr	r2, [r3, #4]
 8003782:	69fb      	ldr	r3, [r7, #28]
 8003784:	3318      	adds	r3, #24
 8003786:	429a      	cmp	r2, r3
 8003788:	d103      	bne.n	8003792 <xTaskResumeAll+0x86>
 800378a:	69fb      	ldr	r3, [r7, #28]
 800378c:	6a1a      	ldr	r2, [r3, #32]
 800378e:	693b      	ldr	r3, [r7, #16]
 8003790:	605a      	str	r2, [r3, #4]
 8003792:	69fb      	ldr	r3, [r7, #28]
 8003794:	2200      	movs	r2, #0
 8003796:	629a      	str	r2, [r3, #40]	; 0x28
 8003798:	693b      	ldr	r3, [r7, #16]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	1e5a      	subs	r2, r3, #1
 800379e:	693b      	ldr	r3, [r7, #16]
 80037a0:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 80037a2:	69fb      	ldr	r3, [r7, #28]
 80037a4:	695b      	ldr	r3, [r3, #20]
 80037a6:	60fb      	str	r3, [r7, #12]
 80037a8:	69fb      	ldr	r3, [r7, #28]
 80037aa:	689b      	ldr	r3, [r3, #8]
 80037ac:	69fa      	ldr	r2, [r7, #28]
 80037ae:	68d2      	ldr	r2, [r2, #12]
 80037b0:	609a      	str	r2, [r3, #8]
 80037b2:	69fb      	ldr	r3, [r7, #28]
 80037b4:	68db      	ldr	r3, [r3, #12]
 80037b6:	69fa      	ldr	r2, [r7, #28]
 80037b8:	6892      	ldr	r2, [r2, #8]
 80037ba:	605a      	str	r2, [r3, #4]
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	685a      	ldr	r2, [r3, #4]
 80037c0:	69fb      	ldr	r3, [r7, #28]
 80037c2:	3304      	adds	r3, #4
 80037c4:	429a      	cmp	r2, r3
 80037c6:	d103      	bne.n	80037d0 <xTaskResumeAll+0xc4>
 80037c8:	69fb      	ldr	r3, [r7, #28]
 80037ca:	68da      	ldr	r2, [r3, #12]
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	605a      	str	r2, [r3, #4]
 80037d0:	69fb      	ldr	r3, [r7, #28]
 80037d2:	2200      	movs	r2, #0
 80037d4:	615a      	str	r2, [r3, #20]
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	1e5a      	subs	r2, r3, #1
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 80037e0:	69fb      	ldr	r3, [r7, #28]
 80037e2:	4618      	mov	r0, r3
 80037e4:	f003 fdac 	bl	8007340 <SEGGER_SYSVIEW_OnTaskStartReady>
 80037e8:	69fb      	ldr	r3, [r7, #28]
 80037ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037ec:	2201      	movs	r2, #1
 80037ee:	409a      	lsls	r2, r3
 80037f0:	4b40      	ldr	r3, [pc, #256]	; (80038f4 <xTaskResumeAll+0x1e8>)
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	4313      	orrs	r3, r2
 80037f6:	4a3f      	ldr	r2, [pc, #252]	; (80038f4 <xTaskResumeAll+0x1e8>)
 80037f8:	6013      	str	r3, [r2, #0]
 80037fa:	69fb      	ldr	r3, [r7, #28]
 80037fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037fe:	493e      	ldr	r1, [pc, #248]	; (80038f8 <xTaskResumeAll+0x1ec>)
 8003800:	4613      	mov	r3, r2
 8003802:	009b      	lsls	r3, r3, #2
 8003804:	4413      	add	r3, r2
 8003806:	009b      	lsls	r3, r3, #2
 8003808:	440b      	add	r3, r1
 800380a:	3304      	adds	r3, #4
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	60bb      	str	r3, [r7, #8]
 8003810:	69fb      	ldr	r3, [r7, #28]
 8003812:	68ba      	ldr	r2, [r7, #8]
 8003814:	609a      	str	r2, [r3, #8]
 8003816:	68bb      	ldr	r3, [r7, #8]
 8003818:	689a      	ldr	r2, [r3, #8]
 800381a:	69fb      	ldr	r3, [r7, #28]
 800381c:	60da      	str	r2, [r3, #12]
 800381e:	68bb      	ldr	r3, [r7, #8]
 8003820:	689b      	ldr	r3, [r3, #8]
 8003822:	69fa      	ldr	r2, [r7, #28]
 8003824:	3204      	adds	r2, #4
 8003826:	605a      	str	r2, [r3, #4]
 8003828:	69fb      	ldr	r3, [r7, #28]
 800382a:	1d1a      	adds	r2, r3, #4
 800382c:	68bb      	ldr	r3, [r7, #8]
 800382e:	609a      	str	r2, [r3, #8]
 8003830:	69fb      	ldr	r3, [r7, #28]
 8003832:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003834:	4613      	mov	r3, r2
 8003836:	009b      	lsls	r3, r3, #2
 8003838:	4413      	add	r3, r2
 800383a:	009b      	lsls	r3, r3, #2
 800383c:	4a2e      	ldr	r2, [pc, #184]	; (80038f8 <xTaskResumeAll+0x1ec>)
 800383e:	441a      	add	r2, r3
 8003840:	69fb      	ldr	r3, [r7, #28]
 8003842:	615a      	str	r2, [r3, #20]
 8003844:	69fb      	ldr	r3, [r7, #28]
 8003846:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003848:	492b      	ldr	r1, [pc, #172]	; (80038f8 <xTaskResumeAll+0x1ec>)
 800384a:	4613      	mov	r3, r2
 800384c:	009b      	lsls	r3, r3, #2
 800384e:	4413      	add	r3, r2
 8003850:	009b      	lsls	r3, r3, #2
 8003852:	440b      	add	r3, r1
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	1c59      	adds	r1, r3, #1
 8003858:	4827      	ldr	r0, [pc, #156]	; (80038f8 <xTaskResumeAll+0x1ec>)
 800385a:	4613      	mov	r3, r2
 800385c:	009b      	lsls	r3, r3, #2
 800385e:	4413      	add	r3, r2
 8003860:	009b      	lsls	r3, r3, #2
 8003862:	4403      	add	r3, r0
 8003864:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003866:	69fb      	ldr	r3, [r7, #28]
 8003868:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800386a:	4b24      	ldr	r3, [pc, #144]	; (80038fc <xTaskResumeAll+0x1f0>)
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003870:	429a      	cmp	r2, r3
 8003872:	d302      	bcc.n	800387a <xTaskResumeAll+0x16e>
                    {
                        xYieldPending = pdTRUE;
 8003874:	4b22      	ldr	r3, [pc, #136]	; (8003900 <xTaskResumeAll+0x1f4>)
 8003876:	2201      	movs	r2, #1
 8003878:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800387a:	4b1d      	ldr	r3, [pc, #116]	; (80038f0 <xTaskResumeAll+0x1e4>)
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	2b00      	cmp	r3, #0
 8003880:	f47f af6c 	bne.w	800375c <xTaskResumeAll+0x50>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8003884:	69fb      	ldr	r3, [r7, #28]
 8003886:	2b00      	cmp	r3, #0
 8003888:	d001      	beq.n	800388e <xTaskResumeAll+0x182>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 800388a:	f000 fc47 	bl	800411c <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800388e:	4b1d      	ldr	r3, [pc, #116]	; (8003904 <xTaskResumeAll+0x1f8>)
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	617b      	str	r3, [r7, #20]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8003894:	697b      	ldr	r3, [r7, #20]
 8003896:	2b00      	cmp	r3, #0
 8003898:	d010      	beq.n	80038bc <xTaskResumeAll+0x1b0>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 800389a:	f000 f859 	bl	8003950 <xTaskIncrementTick>
 800389e:	4603      	mov	r3, r0
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d002      	beq.n	80038aa <xTaskResumeAll+0x19e>
                            {
                                xYieldPending = pdTRUE;
 80038a4:	4b16      	ldr	r3, [pc, #88]	; (8003900 <xTaskResumeAll+0x1f4>)
 80038a6:	2201      	movs	r2, #1
 80038a8:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 80038aa:	697b      	ldr	r3, [r7, #20]
 80038ac:	3b01      	subs	r3, #1
 80038ae:	617b      	str	r3, [r7, #20]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 80038b0:	697b      	ldr	r3, [r7, #20]
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d1f1      	bne.n	800389a <xTaskResumeAll+0x18e>

                        xPendedTicks = 0;
 80038b6:	4b13      	ldr	r3, [pc, #76]	; (8003904 <xTaskResumeAll+0x1f8>)
 80038b8:	2200      	movs	r2, #0
 80038ba:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 80038bc:	4b10      	ldr	r3, [pc, #64]	; (8003900 <xTaskResumeAll+0x1f4>)
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d009      	beq.n	80038d8 <xTaskResumeAll+0x1cc>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                    {
                        xAlreadyYielded = pdTRUE;
 80038c4:	2301      	movs	r3, #1
 80038c6:	61bb      	str	r3, [r7, #24]
                    }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 80038c8:	4b0f      	ldr	r3, [pc, #60]	; (8003908 <xTaskResumeAll+0x1fc>)
 80038ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80038ce:	601a      	str	r2, [r3, #0]
 80038d0:	f3bf 8f4f 	dsb	sy
 80038d4:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 80038d8:	f001 faf4 	bl	8004ec4 <vPortExitCritical>

    return xAlreadyYielded;
 80038dc:	69bb      	ldr	r3, [r7, #24]
}
 80038de:	4618      	mov	r0, r3
 80038e0:	3720      	adds	r7, #32
 80038e2:	46bd      	mov	sp, r7
 80038e4:	bd80      	pop	{r7, pc}
 80038e6:	bf00      	nop
 80038e8:	20000210 	.word	0x20000210
 80038ec:	200001e8 	.word	0x200001e8
 80038f0:	200001a8 	.word	0x200001a8
 80038f4:	200001f0 	.word	0x200001f0
 80038f8:	200000d8 	.word	0x200000d8
 80038fc:	200000d4 	.word	0x200000d4
 8003900:	200001fc 	.word	0x200001fc
 8003904:	200001f8 	.word	0x200001f8
 8003908:	e000ed04 	.word	0xe000ed04

0800390c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800390c:	b480      	push	{r7}
 800390e:	b083      	sub	sp, #12
 8003910:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8003912:	4b05      	ldr	r3, [pc, #20]	; (8003928 <xTaskGetTickCount+0x1c>)
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8003918:	687b      	ldr	r3, [r7, #4]
}
 800391a:	4618      	mov	r0, r3
 800391c:	370c      	adds	r7, #12
 800391e:	46bd      	mov	sp, r7
 8003920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003924:	4770      	bx	lr
 8003926:	bf00      	nop
 8003928:	200001ec 	.word	0x200001ec

0800392c <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800392c:	b580      	push	{r7, lr}
 800392e:	b082      	sub	sp, #8
 8003930:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003932:	f001 fb83 	bl	800503c <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8003936:	2300      	movs	r3, #0
 8003938:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 800393a:	4b04      	ldr	r3, [pc, #16]	; (800394c <xTaskGetTickCountFromISR+0x20>)
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8003940:	683b      	ldr	r3, [r7, #0]
}
 8003942:	4618      	mov	r0, r3
 8003944:	3708      	adds	r7, #8
 8003946:	46bd      	mov	sp, r7
 8003948:	bd80      	pop	{r7, pc}
 800394a:	bf00      	nop
 800394c:	200001ec 	.word	0x200001ec

08003950 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003950:	b580      	push	{r7, lr}
 8003952:	b08a      	sub	sp, #40	; 0x28
 8003954:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8003956:	2300      	movs	r3, #0
 8003958:	627b      	str	r3, [r7, #36]	; 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800395a:	4b7f      	ldr	r3, [pc, #508]	; (8003b58 <xTaskIncrementTick+0x208>)
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	2b00      	cmp	r3, #0
 8003960:	f040 80f0 	bne.w	8003b44 <xTaskIncrementTick+0x1f4>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003964:	4b7d      	ldr	r3, [pc, #500]	; (8003b5c <xTaskIncrementTick+0x20c>)
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	3301      	adds	r3, #1
 800396a:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 800396c:	4a7b      	ldr	r2, [pc, #492]	; (8003b5c <xTaskIncrementTick+0x20c>)
 800396e:	6a3b      	ldr	r3, [r7, #32]
 8003970:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003972:	6a3b      	ldr	r3, [r7, #32]
 8003974:	2b00      	cmp	r3, #0
 8003976:	d120      	bne.n	80039ba <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 8003978:	4b79      	ldr	r3, [pc, #484]	; (8003b60 <xTaskIncrementTick+0x210>)
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	2b00      	cmp	r3, #0
 8003980:	d00a      	beq.n	8003998 <xTaskIncrementTick+0x48>
        __asm volatile
 8003982:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003986:	f383 8811 	msr	BASEPRI, r3
 800398a:	f3bf 8f6f 	isb	sy
 800398e:	f3bf 8f4f 	dsb	sy
 8003992:	607b      	str	r3, [r7, #4]
    }
 8003994:	bf00      	nop
 8003996:	e7fe      	b.n	8003996 <xTaskIncrementTick+0x46>
 8003998:	4b71      	ldr	r3, [pc, #452]	; (8003b60 <xTaskIncrementTick+0x210>)
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	61fb      	str	r3, [r7, #28]
 800399e:	4b71      	ldr	r3, [pc, #452]	; (8003b64 <xTaskIncrementTick+0x214>)
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	4a6f      	ldr	r2, [pc, #444]	; (8003b60 <xTaskIncrementTick+0x210>)
 80039a4:	6013      	str	r3, [r2, #0]
 80039a6:	4a6f      	ldr	r2, [pc, #444]	; (8003b64 <xTaskIncrementTick+0x214>)
 80039a8:	69fb      	ldr	r3, [r7, #28]
 80039aa:	6013      	str	r3, [r2, #0]
 80039ac:	4b6e      	ldr	r3, [pc, #440]	; (8003b68 <xTaskIncrementTick+0x218>)
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	3301      	adds	r3, #1
 80039b2:	4a6d      	ldr	r2, [pc, #436]	; (8003b68 <xTaskIncrementTick+0x218>)
 80039b4:	6013      	str	r3, [r2, #0]
 80039b6:	f000 fbb1 	bl	800411c <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 80039ba:	4b6c      	ldr	r3, [pc, #432]	; (8003b6c <xTaskIncrementTick+0x21c>)
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	6a3a      	ldr	r2, [r7, #32]
 80039c0:	429a      	cmp	r2, r3
 80039c2:	f0c0 80aa 	bcc.w	8003b1a <xTaskIncrementTick+0x1ca>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80039c6:	4b66      	ldr	r3, [pc, #408]	; (8003b60 <xTaskIncrementTick+0x210>)
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d104      	bne.n	80039da <xTaskIncrementTick+0x8a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80039d0:	4b66      	ldr	r3, [pc, #408]	; (8003b6c <xTaskIncrementTick+0x21c>)
 80039d2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80039d6:	601a      	str	r2, [r3, #0]
                    break;
 80039d8:	e09f      	b.n	8003b1a <xTaskIncrementTick+0x1ca>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80039da:	4b61      	ldr	r3, [pc, #388]	; (8003b60 <xTaskIncrementTick+0x210>)
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	68db      	ldr	r3, [r3, #12]
 80039e0:	68db      	ldr	r3, [r3, #12]
 80039e2:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80039e4:	69bb      	ldr	r3, [r7, #24]
 80039e6:	685b      	ldr	r3, [r3, #4]
 80039e8:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 80039ea:	6a3a      	ldr	r2, [r7, #32]
 80039ec:	697b      	ldr	r3, [r7, #20]
 80039ee:	429a      	cmp	r2, r3
 80039f0:	d203      	bcs.n	80039fa <xTaskIncrementTick+0xaa>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 80039f2:	4a5e      	ldr	r2, [pc, #376]	; (8003b6c <xTaskIncrementTick+0x21c>)
 80039f4:	697b      	ldr	r3, [r7, #20]
 80039f6:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 80039f8:	e08f      	b.n	8003b1a <xTaskIncrementTick+0x1ca>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 80039fa:	69bb      	ldr	r3, [r7, #24]
 80039fc:	695b      	ldr	r3, [r3, #20]
 80039fe:	613b      	str	r3, [r7, #16]
 8003a00:	69bb      	ldr	r3, [r7, #24]
 8003a02:	689b      	ldr	r3, [r3, #8]
 8003a04:	69ba      	ldr	r2, [r7, #24]
 8003a06:	68d2      	ldr	r2, [r2, #12]
 8003a08:	609a      	str	r2, [r3, #8]
 8003a0a:	69bb      	ldr	r3, [r7, #24]
 8003a0c:	68db      	ldr	r3, [r3, #12]
 8003a0e:	69ba      	ldr	r2, [r7, #24]
 8003a10:	6892      	ldr	r2, [r2, #8]
 8003a12:	605a      	str	r2, [r3, #4]
 8003a14:	693b      	ldr	r3, [r7, #16]
 8003a16:	685a      	ldr	r2, [r3, #4]
 8003a18:	69bb      	ldr	r3, [r7, #24]
 8003a1a:	3304      	adds	r3, #4
 8003a1c:	429a      	cmp	r2, r3
 8003a1e:	d103      	bne.n	8003a28 <xTaskIncrementTick+0xd8>
 8003a20:	69bb      	ldr	r3, [r7, #24]
 8003a22:	68da      	ldr	r2, [r3, #12]
 8003a24:	693b      	ldr	r3, [r7, #16]
 8003a26:	605a      	str	r2, [r3, #4]
 8003a28:	69bb      	ldr	r3, [r7, #24]
 8003a2a:	2200      	movs	r2, #0
 8003a2c:	615a      	str	r2, [r3, #20]
 8003a2e:	693b      	ldr	r3, [r7, #16]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	1e5a      	subs	r2, r3, #1
 8003a34:	693b      	ldr	r3, [r7, #16]
 8003a36:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003a38:	69bb      	ldr	r3, [r7, #24]
 8003a3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d01e      	beq.n	8003a7e <xTaskIncrementTick+0x12e>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8003a40:	69bb      	ldr	r3, [r7, #24]
 8003a42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a44:	60fb      	str	r3, [r7, #12]
 8003a46:	69bb      	ldr	r3, [r7, #24]
 8003a48:	69db      	ldr	r3, [r3, #28]
 8003a4a:	69ba      	ldr	r2, [r7, #24]
 8003a4c:	6a12      	ldr	r2, [r2, #32]
 8003a4e:	609a      	str	r2, [r3, #8]
 8003a50:	69bb      	ldr	r3, [r7, #24]
 8003a52:	6a1b      	ldr	r3, [r3, #32]
 8003a54:	69ba      	ldr	r2, [r7, #24]
 8003a56:	69d2      	ldr	r2, [r2, #28]
 8003a58:	605a      	str	r2, [r3, #4]
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	685a      	ldr	r2, [r3, #4]
 8003a5e:	69bb      	ldr	r3, [r7, #24]
 8003a60:	3318      	adds	r3, #24
 8003a62:	429a      	cmp	r2, r3
 8003a64:	d103      	bne.n	8003a6e <xTaskIncrementTick+0x11e>
 8003a66:	69bb      	ldr	r3, [r7, #24]
 8003a68:	6a1a      	ldr	r2, [r3, #32]
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	605a      	str	r2, [r3, #4]
 8003a6e:	69bb      	ldr	r3, [r7, #24]
 8003a70:	2200      	movs	r2, #0
 8003a72:	629a      	str	r2, [r3, #40]	; 0x28
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	1e5a      	subs	r2, r3, #1
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8003a7e:	69bb      	ldr	r3, [r7, #24]
 8003a80:	4618      	mov	r0, r3
 8003a82:	f003 fc5d 	bl	8007340 <SEGGER_SYSVIEW_OnTaskStartReady>
 8003a86:	69bb      	ldr	r3, [r7, #24]
 8003a88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a8a:	2201      	movs	r2, #1
 8003a8c:	409a      	lsls	r2, r3
 8003a8e:	4b38      	ldr	r3, [pc, #224]	; (8003b70 <xTaskIncrementTick+0x220>)
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	4313      	orrs	r3, r2
 8003a94:	4a36      	ldr	r2, [pc, #216]	; (8003b70 <xTaskIncrementTick+0x220>)
 8003a96:	6013      	str	r3, [r2, #0]
 8003a98:	69bb      	ldr	r3, [r7, #24]
 8003a9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a9c:	4935      	ldr	r1, [pc, #212]	; (8003b74 <xTaskIncrementTick+0x224>)
 8003a9e:	4613      	mov	r3, r2
 8003aa0:	009b      	lsls	r3, r3, #2
 8003aa2:	4413      	add	r3, r2
 8003aa4:	009b      	lsls	r3, r3, #2
 8003aa6:	440b      	add	r3, r1
 8003aa8:	3304      	adds	r3, #4
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	60bb      	str	r3, [r7, #8]
 8003aae:	69bb      	ldr	r3, [r7, #24]
 8003ab0:	68ba      	ldr	r2, [r7, #8]
 8003ab2:	609a      	str	r2, [r3, #8]
 8003ab4:	68bb      	ldr	r3, [r7, #8]
 8003ab6:	689a      	ldr	r2, [r3, #8]
 8003ab8:	69bb      	ldr	r3, [r7, #24]
 8003aba:	60da      	str	r2, [r3, #12]
 8003abc:	68bb      	ldr	r3, [r7, #8]
 8003abe:	689b      	ldr	r3, [r3, #8]
 8003ac0:	69ba      	ldr	r2, [r7, #24]
 8003ac2:	3204      	adds	r2, #4
 8003ac4:	605a      	str	r2, [r3, #4]
 8003ac6:	69bb      	ldr	r3, [r7, #24]
 8003ac8:	1d1a      	adds	r2, r3, #4
 8003aca:	68bb      	ldr	r3, [r7, #8]
 8003acc:	609a      	str	r2, [r3, #8]
 8003ace:	69bb      	ldr	r3, [r7, #24]
 8003ad0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ad2:	4613      	mov	r3, r2
 8003ad4:	009b      	lsls	r3, r3, #2
 8003ad6:	4413      	add	r3, r2
 8003ad8:	009b      	lsls	r3, r3, #2
 8003ada:	4a26      	ldr	r2, [pc, #152]	; (8003b74 <xTaskIncrementTick+0x224>)
 8003adc:	441a      	add	r2, r3
 8003ade:	69bb      	ldr	r3, [r7, #24]
 8003ae0:	615a      	str	r2, [r3, #20]
 8003ae2:	69bb      	ldr	r3, [r7, #24]
 8003ae4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ae6:	4923      	ldr	r1, [pc, #140]	; (8003b74 <xTaskIncrementTick+0x224>)
 8003ae8:	4613      	mov	r3, r2
 8003aea:	009b      	lsls	r3, r3, #2
 8003aec:	4413      	add	r3, r2
 8003aee:	009b      	lsls	r3, r3, #2
 8003af0:	440b      	add	r3, r1
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	1c59      	adds	r1, r3, #1
 8003af6:	481f      	ldr	r0, [pc, #124]	; (8003b74 <xTaskIncrementTick+0x224>)
 8003af8:	4613      	mov	r3, r2
 8003afa:	009b      	lsls	r3, r3, #2
 8003afc:	4413      	add	r3, r2
 8003afe:	009b      	lsls	r3, r3, #2
 8003b00:	4403      	add	r3, r0
 8003b02:	6019      	str	r1, [r3, #0]
                         * task.
                         * The case of equal priority tasks sharing
                         * processing time (which happens when both
                         * preemption and time slicing are on) is
                         * handled below.*/
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003b04:	69bb      	ldr	r3, [r7, #24]
 8003b06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b08:	4b1b      	ldr	r3, [pc, #108]	; (8003b78 <xTaskIncrementTick+0x228>)
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b0e:	429a      	cmp	r2, r3
 8003b10:	f67f af59 	bls.w	80039c6 <xTaskIncrementTick+0x76>
                        {
                            xSwitchRequired = pdTRUE;
 8003b14:	2301      	movs	r3, #1
 8003b16:	627b      	str	r3, [r7, #36]	; 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003b18:	e755      	b.n	80039c6 <xTaskIncrementTick+0x76>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003b1a:	4b17      	ldr	r3, [pc, #92]	; (8003b78 <xTaskIncrementTick+0x228>)
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b20:	4914      	ldr	r1, [pc, #80]	; (8003b74 <xTaskIncrementTick+0x224>)
 8003b22:	4613      	mov	r3, r2
 8003b24:	009b      	lsls	r3, r3, #2
 8003b26:	4413      	add	r3, r2
 8003b28:	009b      	lsls	r3, r3, #2
 8003b2a:	440b      	add	r3, r1
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	2b01      	cmp	r3, #1
 8003b30:	d901      	bls.n	8003b36 <xTaskIncrementTick+0x1e6>
            {
                xSwitchRequired = pdTRUE;
 8003b32:	2301      	movs	r3, #1
 8003b34:	627b      	str	r3, [r7, #36]	; 0x24
        }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
        {
            if( xYieldPending != pdFALSE )
 8003b36:	4b11      	ldr	r3, [pc, #68]	; (8003b7c <xTaskIncrementTick+0x22c>)
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d007      	beq.n	8003b4e <xTaskIncrementTick+0x1fe>
            {
                xSwitchRequired = pdTRUE;
 8003b3e:	2301      	movs	r3, #1
 8003b40:	627b      	str	r3, [r7, #36]	; 0x24
 8003b42:	e004      	b.n	8003b4e <xTaskIncrementTick+0x1fe>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8003b44:	4b0e      	ldr	r3, [pc, #56]	; (8003b80 <xTaskIncrementTick+0x230>)
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	3301      	adds	r3, #1
 8003b4a:	4a0d      	ldr	r2, [pc, #52]	; (8003b80 <xTaskIncrementTick+0x230>)
 8003b4c:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 8003b4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003b50:	4618      	mov	r0, r3
 8003b52:	3728      	adds	r7, #40	; 0x28
 8003b54:	46bd      	mov	sp, r7
 8003b56:	bd80      	pop	{r7, pc}
 8003b58:	20000210 	.word	0x20000210
 8003b5c:	200001ec 	.word	0x200001ec
 8003b60:	200001a0 	.word	0x200001a0
 8003b64:	200001a4 	.word	0x200001a4
 8003b68:	20000200 	.word	0x20000200
 8003b6c:	20000208 	.word	0x20000208
 8003b70:	200001f0 	.word	0x200001f0
 8003b74:	200000d8 	.word	0x200000d8
 8003b78:	200000d4 	.word	0x200000d4
 8003b7c:	200001fc 	.word	0x200001fc
 8003b80:	200001f8 	.word	0x200001f8

08003b84 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003b84:	b580      	push	{r7, lr}
 8003b86:	b086      	sub	sp, #24
 8003b88:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003b8a:	4b2d      	ldr	r3, [pc, #180]	; (8003c40 <vTaskSwitchContext+0xbc>)
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d003      	beq.n	8003b9a <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8003b92:	4b2c      	ldr	r3, [pc, #176]	; (8003c44 <vTaskSwitchContext+0xc0>)
 8003b94:	2201      	movs	r2, #1
 8003b96:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 8003b98:	e04d      	b.n	8003c36 <vTaskSwitchContext+0xb2>
        xYieldPending = pdFALSE;
 8003b9a:	4b2a      	ldr	r3, [pc, #168]	; (8003c44 <vTaskSwitchContext+0xc0>)
 8003b9c:	2200      	movs	r2, #0
 8003b9e:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003ba0:	4b29      	ldr	r3, [pc, #164]	; (8003c48 <vTaskSwitchContext+0xc4>)
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	fab3 f383 	clz	r3, r3
 8003bac:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8003bae:	7afb      	ldrb	r3, [r7, #11]
 8003bb0:	f1c3 031f 	rsb	r3, r3, #31
 8003bb4:	617b      	str	r3, [r7, #20]
 8003bb6:	4925      	ldr	r1, [pc, #148]	; (8003c4c <vTaskSwitchContext+0xc8>)
 8003bb8:	697a      	ldr	r2, [r7, #20]
 8003bba:	4613      	mov	r3, r2
 8003bbc:	009b      	lsls	r3, r3, #2
 8003bbe:	4413      	add	r3, r2
 8003bc0:	009b      	lsls	r3, r3, #2
 8003bc2:	440b      	add	r3, r1
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d10a      	bne.n	8003be0 <vTaskSwitchContext+0x5c>
        __asm volatile
 8003bca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bce:	f383 8811 	msr	BASEPRI, r3
 8003bd2:	f3bf 8f6f 	isb	sy
 8003bd6:	f3bf 8f4f 	dsb	sy
 8003bda:	607b      	str	r3, [r7, #4]
    }
 8003bdc:	bf00      	nop
 8003bde:	e7fe      	b.n	8003bde <vTaskSwitchContext+0x5a>
 8003be0:	697a      	ldr	r2, [r7, #20]
 8003be2:	4613      	mov	r3, r2
 8003be4:	009b      	lsls	r3, r3, #2
 8003be6:	4413      	add	r3, r2
 8003be8:	009b      	lsls	r3, r3, #2
 8003bea:	4a18      	ldr	r2, [pc, #96]	; (8003c4c <vTaskSwitchContext+0xc8>)
 8003bec:	4413      	add	r3, r2
 8003bee:	613b      	str	r3, [r7, #16]
 8003bf0:	693b      	ldr	r3, [r7, #16]
 8003bf2:	685b      	ldr	r3, [r3, #4]
 8003bf4:	685a      	ldr	r2, [r3, #4]
 8003bf6:	693b      	ldr	r3, [r7, #16]
 8003bf8:	605a      	str	r2, [r3, #4]
 8003bfa:	693b      	ldr	r3, [r7, #16]
 8003bfc:	685a      	ldr	r2, [r3, #4]
 8003bfe:	693b      	ldr	r3, [r7, #16]
 8003c00:	3308      	adds	r3, #8
 8003c02:	429a      	cmp	r2, r3
 8003c04:	d104      	bne.n	8003c10 <vTaskSwitchContext+0x8c>
 8003c06:	693b      	ldr	r3, [r7, #16]
 8003c08:	685b      	ldr	r3, [r3, #4]
 8003c0a:	685a      	ldr	r2, [r3, #4]
 8003c0c:	693b      	ldr	r3, [r7, #16]
 8003c0e:	605a      	str	r2, [r3, #4]
 8003c10:	693b      	ldr	r3, [r7, #16]
 8003c12:	685b      	ldr	r3, [r3, #4]
 8003c14:	68db      	ldr	r3, [r3, #12]
 8003c16:	4a0e      	ldr	r2, [pc, #56]	; (8003c50 <vTaskSwitchContext+0xcc>)
 8003c18:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 8003c1a:	4b0d      	ldr	r3, [pc, #52]	; (8003c50 <vTaskSwitchContext+0xcc>)
 8003c1c:	681a      	ldr	r2, [r3, #0]
 8003c1e:	4b0d      	ldr	r3, [pc, #52]	; (8003c54 <vTaskSwitchContext+0xd0>)
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	429a      	cmp	r2, r3
 8003c24:	d102      	bne.n	8003c2c <vTaskSwitchContext+0xa8>
 8003c26:	f003 faeb 	bl	8007200 <SEGGER_SYSVIEW_OnIdle>
}
 8003c2a:	e004      	b.n	8003c36 <vTaskSwitchContext+0xb2>
        traceTASK_SWITCHED_IN();
 8003c2c:	4b08      	ldr	r3, [pc, #32]	; (8003c50 <vTaskSwitchContext+0xcc>)
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	4618      	mov	r0, r3
 8003c32:	f003 fb43 	bl	80072bc <SEGGER_SYSVIEW_OnTaskStartExec>
}
 8003c36:	bf00      	nop
 8003c38:	3718      	adds	r7, #24
 8003c3a:	46bd      	mov	sp, r7
 8003c3c:	bd80      	pop	{r7, pc}
 8003c3e:	bf00      	nop
 8003c40:	20000210 	.word	0x20000210
 8003c44:	200001fc 	.word	0x200001fc
 8003c48:	200001f0 	.word	0x200001f0
 8003c4c:	200000d8 	.word	0x200000d8
 8003c50:	200000d4 	.word	0x200000d4
 8003c54:	2000020c 	.word	0x2000020c

08003c58 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8003c58:	b580      	push	{r7, lr}
 8003c5a:	b084      	sub	sp, #16
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	6078      	str	r0, [r7, #4]
 8003c60:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d10a      	bne.n	8003c7e <vTaskPlaceOnEventList+0x26>
        __asm volatile
 8003c68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c6c:	f383 8811 	msr	BASEPRI, r3
 8003c70:	f3bf 8f6f 	isb	sy
 8003c74:	f3bf 8f4f 	dsb	sy
 8003c78:	60fb      	str	r3, [r7, #12]
    }
 8003c7a:	bf00      	nop
 8003c7c:	e7fe      	b.n	8003c7c <vTaskPlaceOnEventList+0x24>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003c7e:	4b07      	ldr	r3, [pc, #28]	; (8003c9c <vTaskPlaceOnEventList+0x44>)
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	3318      	adds	r3, #24
 8003c84:	4619      	mov	r1, r3
 8003c86:	6878      	ldr	r0, [r7, #4]
 8003c88:	f7fe fecf 	bl	8002a2a <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003c8c:	2101      	movs	r1, #1
 8003c8e:	6838      	ldr	r0, [r7, #0]
 8003c90:	f000 fc3a 	bl	8004508 <prvAddCurrentTaskToDelayedList>
}
 8003c94:	bf00      	nop
 8003c96:	3710      	adds	r7, #16
 8003c98:	46bd      	mov	sp, r7
 8003c9a:	bd80      	pop	{r7, pc}
 8003c9c:	200000d4 	.word	0x200000d4

08003ca0 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8003ca0:	b580      	push	{r7, lr}
 8003ca2:	b086      	sub	sp, #24
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	60f8      	str	r0, [r7, #12]
 8003ca8:	60b9      	str	r1, [r7, #8]
 8003caa:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d10a      	bne.n	8003cc8 <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 8003cb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cb6:	f383 8811 	msr	BASEPRI, r3
 8003cba:	f3bf 8f6f 	isb	sy
 8003cbe:	f3bf 8f4f 	dsb	sy
 8003cc2:	613b      	str	r3, [r7, #16]
    }
 8003cc4:	bf00      	nop
 8003cc6:	e7fe      	b.n	8003cc6 <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	685b      	ldr	r3, [r3, #4]
 8003ccc:	617b      	str	r3, [r7, #20]
 8003cce:	4b17      	ldr	r3, [pc, #92]	; (8003d2c <vTaskPlaceOnEventListRestricted+0x8c>)
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	697a      	ldr	r2, [r7, #20]
 8003cd4:	61da      	str	r2, [r3, #28]
 8003cd6:	4b15      	ldr	r3, [pc, #84]	; (8003d2c <vTaskPlaceOnEventListRestricted+0x8c>)
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	697a      	ldr	r2, [r7, #20]
 8003cdc:	6892      	ldr	r2, [r2, #8]
 8003cde:	621a      	str	r2, [r3, #32]
 8003ce0:	4b12      	ldr	r3, [pc, #72]	; (8003d2c <vTaskPlaceOnEventListRestricted+0x8c>)
 8003ce2:	681a      	ldr	r2, [r3, #0]
 8003ce4:	697b      	ldr	r3, [r7, #20]
 8003ce6:	689b      	ldr	r3, [r3, #8]
 8003ce8:	3218      	adds	r2, #24
 8003cea:	605a      	str	r2, [r3, #4]
 8003cec:	4b0f      	ldr	r3, [pc, #60]	; (8003d2c <vTaskPlaceOnEventListRestricted+0x8c>)
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	f103 0218 	add.w	r2, r3, #24
 8003cf4:	697b      	ldr	r3, [r7, #20]
 8003cf6:	609a      	str	r2, [r3, #8]
 8003cf8:	4b0c      	ldr	r3, [pc, #48]	; (8003d2c <vTaskPlaceOnEventListRestricted+0x8c>)
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	68fa      	ldr	r2, [r7, #12]
 8003cfe:	629a      	str	r2, [r3, #40]	; 0x28
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	1c5a      	adds	r2, r3, #1
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d002      	beq.n	8003d16 <vTaskPlaceOnEventListRestricted+0x76>
        {
            xTicksToWait = portMAX_DELAY;
 8003d10:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003d14:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 8003d16:	2024      	movs	r0, #36	; 0x24
 8003d18:	f002 fd74 	bl	8006804 <SEGGER_SYSVIEW_RecordVoid>
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003d1c:	6879      	ldr	r1, [r7, #4]
 8003d1e:	68b8      	ldr	r0, [r7, #8]
 8003d20:	f000 fbf2 	bl	8004508 <prvAddCurrentTaskToDelayedList>
    }
 8003d24:	bf00      	nop
 8003d26:	3718      	adds	r7, #24
 8003d28:	46bd      	mov	sp, r7
 8003d2a:	bd80      	pop	{r7, pc}
 8003d2c:	200000d4 	.word	0x200000d4

08003d30 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003d30:	b580      	push	{r7, lr}
 8003d32:	b08a      	sub	sp, #40	; 0x28
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	68db      	ldr	r3, [r3, #12]
 8003d3c:	68db      	ldr	r3, [r3, #12]
 8003d3e:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
 8003d40:	6a3b      	ldr	r3, [r7, #32]
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d10a      	bne.n	8003d5c <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 8003d46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d4a:	f383 8811 	msr	BASEPRI, r3
 8003d4e:	f3bf 8f6f 	isb	sy
 8003d52:	f3bf 8f4f 	dsb	sy
 8003d56:	60fb      	str	r3, [r7, #12]
    }
 8003d58:	bf00      	nop
 8003d5a:	e7fe      	b.n	8003d5a <xTaskRemoveFromEventList+0x2a>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 8003d5c:	6a3b      	ldr	r3, [r7, #32]
 8003d5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d60:	61fb      	str	r3, [r7, #28]
 8003d62:	6a3b      	ldr	r3, [r7, #32]
 8003d64:	69db      	ldr	r3, [r3, #28]
 8003d66:	6a3a      	ldr	r2, [r7, #32]
 8003d68:	6a12      	ldr	r2, [r2, #32]
 8003d6a:	609a      	str	r2, [r3, #8]
 8003d6c:	6a3b      	ldr	r3, [r7, #32]
 8003d6e:	6a1b      	ldr	r3, [r3, #32]
 8003d70:	6a3a      	ldr	r2, [r7, #32]
 8003d72:	69d2      	ldr	r2, [r2, #28]
 8003d74:	605a      	str	r2, [r3, #4]
 8003d76:	69fb      	ldr	r3, [r7, #28]
 8003d78:	685a      	ldr	r2, [r3, #4]
 8003d7a:	6a3b      	ldr	r3, [r7, #32]
 8003d7c:	3318      	adds	r3, #24
 8003d7e:	429a      	cmp	r2, r3
 8003d80:	d103      	bne.n	8003d8a <xTaskRemoveFromEventList+0x5a>
 8003d82:	6a3b      	ldr	r3, [r7, #32]
 8003d84:	6a1a      	ldr	r2, [r3, #32]
 8003d86:	69fb      	ldr	r3, [r7, #28]
 8003d88:	605a      	str	r2, [r3, #4]
 8003d8a:	6a3b      	ldr	r3, [r7, #32]
 8003d8c:	2200      	movs	r2, #0
 8003d8e:	629a      	str	r2, [r3, #40]	; 0x28
 8003d90:	69fb      	ldr	r3, [r7, #28]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	1e5a      	subs	r2, r3, #1
 8003d96:	69fb      	ldr	r3, [r7, #28]
 8003d98:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003d9a:	4b4b      	ldr	r3, [pc, #300]	; (8003ec8 <xTaskRemoveFromEventList+0x198>)
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d162      	bne.n	8003e68 <xTaskRemoveFromEventList+0x138>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 8003da2:	6a3b      	ldr	r3, [r7, #32]
 8003da4:	695b      	ldr	r3, [r3, #20]
 8003da6:	617b      	str	r3, [r7, #20]
 8003da8:	6a3b      	ldr	r3, [r7, #32]
 8003daa:	689b      	ldr	r3, [r3, #8]
 8003dac:	6a3a      	ldr	r2, [r7, #32]
 8003dae:	68d2      	ldr	r2, [r2, #12]
 8003db0:	609a      	str	r2, [r3, #8]
 8003db2:	6a3b      	ldr	r3, [r7, #32]
 8003db4:	68db      	ldr	r3, [r3, #12]
 8003db6:	6a3a      	ldr	r2, [r7, #32]
 8003db8:	6892      	ldr	r2, [r2, #8]
 8003dba:	605a      	str	r2, [r3, #4]
 8003dbc:	697b      	ldr	r3, [r7, #20]
 8003dbe:	685a      	ldr	r2, [r3, #4]
 8003dc0:	6a3b      	ldr	r3, [r7, #32]
 8003dc2:	3304      	adds	r3, #4
 8003dc4:	429a      	cmp	r2, r3
 8003dc6:	d103      	bne.n	8003dd0 <xTaskRemoveFromEventList+0xa0>
 8003dc8:	6a3b      	ldr	r3, [r7, #32]
 8003dca:	68da      	ldr	r2, [r3, #12]
 8003dcc:	697b      	ldr	r3, [r7, #20]
 8003dce:	605a      	str	r2, [r3, #4]
 8003dd0:	6a3b      	ldr	r3, [r7, #32]
 8003dd2:	2200      	movs	r2, #0
 8003dd4:	615a      	str	r2, [r3, #20]
 8003dd6:	697b      	ldr	r3, [r7, #20]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	1e5a      	subs	r2, r3, #1
 8003ddc:	697b      	ldr	r3, [r7, #20]
 8003dde:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 8003de0:	6a3b      	ldr	r3, [r7, #32]
 8003de2:	4618      	mov	r0, r3
 8003de4:	f003 faac 	bl	8007340 <SEGGER_SYSVIEW_OnTaskStartReady>
 8003de8:	6a3b      	ldr	r3, [r7, #32]
 8003dea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dec:	2201      	movs	r2, #1
 8003dee:	409a      	lsls	r2, r3
 8003df0:	4b36      	ldr	r3, [pc, #216]	; (8003ecc <xTaskRemoveFromEventList+0x19c>)
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	4313      	orrs	r3, r2
 8003df6:	4a35      	ldr	r2, [pc, #212]	; (8003ecc <xTaskRemoveFromEventList+0x19c>)
 8003df8:	6013      	str	r3, [r2, #0]
 8003dfa:	6a3b      	ldr	r3, [r7, #32]
 8003dfc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003dfe:	4934      	ldr	r1, [pc, #208]	; (8003ed0 <xTaskRemoveFromEventList+0x1a0>)
 8003e00:	4613      	mov	r3, r2
 8003e02:	009b      	lsls	r3, r3, #2
 8003e04:	4413      	add	r3, r2
 8003e06:	009b      	lsls	r3, r3, #2
 8003e08:	440b      	add	r3, r1
 8003e0a:	3304      	adds	r3, #4
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	613b      	str	r3, [r7, #16]
 8003e10:	6a3b      	ldr	r3, [r7, #32]
 8003e12:	693a      	ldr	r2, [r7, #16]
 8003e14:	609a      	str	r2, [r3, #8]
 8003e16:	693b      	ldr	r3, [r7, #16]
 8003e18:	689a      	ldr	r2, [r3, #8]
 8003e1a:	6a3b      	ldr	r3, [r7, #32]
 8003e1c:	60da      	str	r2, [r3, #12]
 8003e1e:	693b      	ldr	r3, [r7, #16]
 8003e20:	689b      	ldr	r3, [r3, #8]
 8003e22:	6a3a      	ldr	r2, [r7, #32]
 8003e24:	3204      	adds	r2, #4
 8003e26:	605a      	str	r2, [r3, #4]
 8003e28:	6a3b      	ldr	r3, [r7, #32]
 8003e2a:	1d1a      	adds	r2, r3, #4
 8003e2c:	693b      	ldr	r3, [r7, #16]
 8003e2e:	609a      	str	r2, [r3, #8]
 8003e30:	6a3b      	ldr	r3, [r7, #32]
 8003e32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e34:	4613      	mov	r3, r2
 8003e36:	009b      	lsls	r3, r3, #2
 8003e38:	4413      	add	r3, r2
 8003e3a:	009b      	lsls	r3, r3, #2
 8003e3c:	4a24      	ldr	r2, [pc, #144]	; (8003ed0 <xTaskRemoveFromEventList+0x1a0>)
 8003e3e:	441a      	add	r2, r3
 8003e40:	6a3b      	ldr	r3, [r7, #32]
 8003e42:	615a      	str	r2, [r3, #20]
 8003e44:	6a3b      	ldr	r3, [r7, #32]
 8003e46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e48:	4921      	ldr	r1, [pc, #132]	; (8003ed0 <xTaskRemoveFromEventList+0x1a0>)
 8003e4a:	4613      	mov	r3, r2
 8003e4c:	009b      	lsls	r3, r3, #2
 8003e4e:	4413      	add	r3, r2
 8003e50:	009b      	lsls	r3, r3, #2
 8003e52:	440b      	add	r3, r1
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	1c59      	adds	r1, r3, #1
 8003e58:	481d      	ldr	r0, [pc, #116]	; (8003ed0 <xTaskRemoveFromEventList+0x1a0>)
 8003e5a:	4613      	mov	r3, r2
 8003e5c:	009b      	lsls	r3, r3, #2
 8003e5e:	4413      	add	r3, r2
 8003e60:	009b      	lsls	r3, r3, #2
 8003e62:	4403      	add	r3, r0
 8003e64:	6019      	str	r1, [r3, #0]
 8003e66:	e01b      	b.n	8003ea0 <xTaskRemoveFromEventList+0x170>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003e68:	4b1a      	ldr	r3, [pc, #104]	; (8003ed4 <xTaskRemoveFromEventList+0x1a4>)
 8003e6a:	685b      	ldr	r3, [r3, #4]
 8003e6c:	61bb      	str	r3, [r7, #24]
 8003e6e:	6a3b      	ldr	r3, [r7, #32]
 8003e70:	69ba      	ldr	r2, [r7, #24]
 8003e72:	61da      	str	r2, [r3, #28]
 8003e74:	69bb      	ldr	r3, [r7, #24]
 8003e76:	689a      	ldr	r2, [r3, #8]
 8003e78:	6a3b      	ldr	r3, [r7, #32]
 8003e7a:	621a      	str	r2, [r3, #32]
 8003e7c:	69bb      	ldr	r3, [r7, #24]
 8003e7e:	689b      	ldr	r3, [r3, #8]
 8003e80:	6a3a      	ldr	r2, [r7, #32]
 8003e82:	3218      	adds	r2, #24
 8003e84:	605a      	str	r2, [r3, #4]
 8003e86:	6a3b      	ldr	r3, [r7, #32]
 8003e88:	f103 0218 	add.w	r2, r3, #24
 8003e8c:	69bb      	ldr	r3, [r7, #24]
 8003e8e:	609a      	str	r2, [r3, #8]
 8003e90:	6a3b      	ldr	r3, [r7, #32]
 8003e92:	4a10      	ldr	r2, [pc, #64]	; (8003ed4 <xTaskRemoveFromEventList+0x1a4>)
 8003e94:	629a      	str	r2, [r3, #40]	; 0x28
 8003e96:	4b0f      	ldr	r3, [pc, #60]	; (8003ed4 <xTaskRemoveFromEventList+0x1a4>)
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	3301      	adds	r3, #1
 8003e9c:	4a0d      	ldr	r2, [pc, #52]	; (8003ed4 <xTaskRemoveFromEventList+0x1a4>)
 8003e9e:	6013      	str	r3, [r2, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003ea0:	6a3b      	ldr	r3, [r7, #32]
 8003ea2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ea4:	4b0c      	ldr	r3, [pc, #48]	; (8003ed8 <xTaskRemoveFromEventList+0x1a8>)
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003eaa:	429a      	cmp	r2, r3
 8003eac:	d905      	bls.n	8003eba <xTaskRemoveFromEventList+0x18a>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8003eae:	2301      	movs	r3, #1
 8003eb0:	627b      	str	r3, [r7, #36]	; 0x24

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8003eb2:	4b0a      	ldr	r3, [pc, #40]	; (8003edc <xTaskRemoveFromEventList+0x1ac>)
 8003eb4:	2201      	movs	r2, #1
 8003eb6:	601a      	str	r2, [r3, #0]
 8003eb8:	e001      	b.n	8003ebe <xTaskRemoveFromEventList+0x18e>
    }
    else
    {
        xReturn = pdFALSE;
 8003eba:	2300      	movs	r3, #0
 8003ebc:	627b      	str	r3, [r7, #36]	; 0x24
    }

    return xReturn;
 8003ebe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003ec0:	4618      	mov	r0, r3
 8003ec2:	3728      	adds	r7, #40	; 0x28
 8003ec4:	46bd      	mov	sp, r7
 8003ec6:	bd80      	pop	{r7, pc}
 8003ec8:	20000210 	.word	0x20000210
 8003ecc:	200001f0 	.word	0x200001f0
 8003ed0:	200000d8 	.word	0x200000d8
 8003ed4:	200001a8 	.word	0x200001a8
 8003ed8:	200000d4 	.word	0x200000d4
 8003edc:	200001fc 	.word	0x200001fc

08003ee0 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003ee0:	b480      	push	{r7}
 8003ee2:	b083      	sub	sp, #12
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003ee8:	4b06      	ldr	r3, [pc, #24]	; (8003f04 <vTaskInternalSetTimeOutState+0x24>)
 8003eea:	681a      	ldr	r2, [r3, #0]
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8003ef0:	4b05      	ldr	r3, [pc, #20]	; (8003f08 <vTaskInternalSetTimeOutState+0x28>)
 8003ef2:	681a      	ldr	r2, [r3, #0]
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	605a      	str	r2, [r3, #4]
}
 8003ef8:	bf00      	nop
 8003efa:	370c      	adds	r7, #12
 8003efc:	46bd      	mov	sp, r7
 8003efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f02:	4770      	bx	lr
 8003f04:	20000200 	.word	0x20000200
 8003f08:	200001ec 	.word	0x200001ec

08003f0c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8003f0c:	b580      	push	{r7, lr}
 8003f0e:	b088      	sub	sp, #32
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	6078      	str	r0, [r7, #4]
 8003f14:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d10a      	bne.n	8003f32 <xTaskCheckForTimeOut+0x26>
        __asm volatile
 8003f1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f20:	f383 8811 	msr	BASEPRI, r3
 8003f24:	f3bf 8f6f 	isb	sy
 8003f28:	f3bf 8f4f 	dsb	sy
 8003f2c:	613b      	str	r3, [r7, #16]
    }
 8003f2e:	bf00      	nop
 8003f30:	e7fe      	b.n	8003f30 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 8003f32:	683b      	ldr	r3, [r7, #0]
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d10a      	bne.n	8003f4e <xTaskCheckForTimeOut+0x42>
        __asm volatile
 8003f38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f3c:	f383 8811 	msr	BASEPRI, r3
 8003f40:	f3bf 8f6f 	isb	sy
 8003f44:	f3bf 8f4f 	dsb	sy
 8003f48:	60fb      	str	r3, [r7, #12]
    }
 8003f4a:	bf00      	nop
 8003f4c:	e7fe      	b.n	8003f4c <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 8003f4e:	f000 ff89 	bl	8004e64 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8003f52:	4b1f      	ldr	r3, [pc, #124]	; (8003fd0 <xTaskCheckForTimeOut+0xc4>)
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	685b      	ldr	r3, [r3, #4]
 8003f5c:	69ba      	ldr	r2, [r7, #24]
 8003f5e:	1ad3      	subs	r3, r2, r3
 8003f60:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8003f62:	683b      	ldr	r3, [r7, #0]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003f6a:	d102      	bne.n	8003f72 <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8003f6c:	2300      	movs	r3, #0
 8003f6e:	61fb      	str	r3, [r7, #28]
 8003f70:	e026      	b.n	8003fc0 <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681a      	ldr	r2, [r3, #0]
 8003f76:	4b17      	ldr	r3, [pc, #92]	; (8003fd4 <xTaskCheckForTimeOut+0xc8>)
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	429a      	cmp	r2, r3
 8003f7c:	d00a      	beq.n	8003f94 <xTaskCheckForTimeOut+0x88>
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	685b      	ldr	r3, [r3, #4]
 8003f82:	69ba      	ldr	r2, [r7, #24]
 8003f84:	429a      	cmp	r2, r3
 8003f86:	d305      	bcc.n	8003f94 <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8003f88:	2301      	movs	r3, #1
 8003f8a:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8003f8c:	683b      	ldr	r3, [r7, #0]
 8003f8e:	2200      	movs	r2, #0
 8003f90:	601a      	str	r2, [r3, #0]
 8003f92:	e015      	b.n	8003fc0 <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003f94:	683b      	ldr	r3, [r7, #0]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	697a      	ldr	r2, [r7, #20]
 8003f9a:	429a      	cmp	r2, r3
 8003f9c:	d20b      	bcs.n	8003fb6 <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8003f9e:	683b      	ldr	r3, [r7, #0]
 8003fa0:	681a      	ldr	r2, [r3, #0]
 8003fa2:	697b      	ldr	r3, [r7, #20]
 8003fa4:	1ad2      	subs	r2, r2, r3
 8003fa6:	683b      	ldr	r3, [r7, #0]
 8003fa8:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8003faa:	6878      	ldr	r0, [r7, #4]
 8003fac:	f7ff ff98 	bl	8003ee0 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8003fb0:	2300      	movs	r3, #0
 8003fb2:	61fb      	str	r3, [r7, #28]
 8003fb4:	e004      	b.n	8003fc0 <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8003fb6:	683b      	ldr	r3, [r7, #0]
 8003fb8:	2200      	movs	r2, #0
 8003fba:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8003fbc:	2301      	movs	r3, #1
 8003fbe:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8003fc0:	f000 ff80 	bl	8004ec4 <vPortExitCritical>

    return xReturn;
 8003fc4:	69fb      	ldr	r3, [r7, #28]
}
 8003fc6:	4618      	mov	r0, r3
 8003fc8:	3720      	adds	r7, #32
 8003fca:	46bd      	mov	sp, r7
 8003fcc:	bd80      	pop	{r7, pc}
 8003fce:	bf00      	nop
 8003fd0:	200001ec 	.word	0x200001ec
 8003fd4:	20000200 	.word	0x20000200

08003fd8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003fd8:	b480      	push	{r7}
 8003fda:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8003fdc:	4b03      	ldr	r3, [pc, #12]	; (8003fec <vTaskMissedYield+0x14>)
 8003fde:	2201      	movs	r2, #1
 8003fe0:	601a      	str	r2, [r3, #0]
}
 8003fe2:	bf00      	nop
 8003fe4:	46bd      	mov	sp, r7
 8003fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fea:	4770      	bx	lr
 8003fec:	200001fc 	.word	0x200001fc

08003ff0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003ff0:	b580      	push	{r7, lr}
 8003ff2:	b082      	sub	sp, #8
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8003ff8:	f000 f852 	bl	80040a0 <prvCheckTasksWaitingTermination>
             *
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains more than one task
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003ffc:	4b06      	ldr	r3, [pc, #24]	; (8004018 <prvIdleTask+0x28>)
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	2b01      	cmp	r3, #1
 8004002:	d9f9      	bls.n	8003ff8 <prvIdleTask+0x8>
            {
                taskYIELD();
 8004004:	4b05      	ldr	r3, [pc, #20]	; (800401c <prvIdleTask+0x2c>)
 8004006:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800400a:	601a      	str	r2, [r3, #0]
 800400c:	f3bf 8f4f 	dsb	sy
 8004010:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8004014:	e7f0      	b.n	8003ff8 <prvIdleTask+0x8>
 8004016:	bf00      	nop
 8004018:	200000d8 	.word	0x200000d8
 800401c:	e000ed04 	.word	0xe000ed04

08004020 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004020:	b580      	push	{r7, lr}
 8004022:	b082      	sub	sp, #8
 8004024:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004026:	2300      	movs	r3, #0
 8004028:	607b      	str	r3, [r7, #4]
 800402a:	e00c      	b.n	8004046 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800402c:	687a      	ldr	r2, [r7, #4]
 800402e:	4613      	mov	r3, r2
 8004030:	009b      	lsls	r3, r3, #2
 8004032:	4413      	add	r3, r2
 8004034:	009b      	lsls	r3, r3, #2
 8004036:	4a12      	ldr	r2, [pc, #72]	; (8004080 <prvInitialiseTaskLists+0x60>)
 8004038:	4413      	add	r3, r2
 800403a:	4618      	mov	r0, r3
 800403c:	f7fe fca4 	bl	8002988 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	3301      	adds	r3, #1
 8004044:	607b      	str	r3, [r7, #4]
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	2b07      	cmp	r3, #7
 800404a:	d9ef      	bls.n	800402c <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 800404c:	480d      	ldr	r0, [pc, #52]	; (8004084 <prvInitialiseTaskLists+0x64>)
 800404e:	f7fe fc9b 	bl	8002988 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8004052:	480d      	ldr	r0, [pc, #52]	; (8004088 <prvInitialiseTaskLists+0x68>)
 8004054:	f7fe fc98 	bl	8002988 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8004058:	480c      	ldr	r0, [pc, #48]	; (800408c <prvInitialiseTaskLists+0x6c>)
 800405a:	f7fe fc95 	bl	8002988 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 800405e:	480c      	ldr	r0, [pc, #48]	; (8004090 <prvInitialiseTaskLists+0x70>)
 8004060:	f7fe fc92 	bl	8002988 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 8004064:	480b      	ldr	r0, [pc, #44]	; (8004094 <prvInitialiseTaskLists+0x74>)
 8004066:	f7fe fc8f 	bl	8002988 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 800406a:	4b0b      	ldr	r3, [pc, #44]	; (8004098 <prvInitialiseTaskLists+0x78>)
 800406c:	4a05      	ldr	r2, [pc, #20]	; (8004084 <prvInitialiseTaskLists+0x64>)
 800406e:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004070:	4b0a      	ldr	r3, [pc, #40]	; (800409c <prvInitialiseTaskLists+0x7c>)
 8004072:	4a05      	ldr	r2, [pc, #20]	; (8004088 <prvInitialiseTaskLists+0x68>)
 8004074:	601a      	str	r2, [r3, #0]
}
 8004076:	bf00      	nop
 8004078:	3708      	adds	r7, #8
 800407a:	46bd      	mov	sp, r7
 800407c:	bd80      	pop	{r7, pc}
 800407e:	bf00      	nop
 8004080:	200000d8 	.word	0x200000d8
 8004084:	20000178 	.word	0x20000178
 8004088:	2000018c 	.word	0x2000018c
 800408c:	200001a8 	.word	0x200001a8
 8004090:	200001bc 	.word	0x200001bc
 8004094:	200001d4 	.word	0x200001d4
 8004098:	200001a0 	.word	0x200001a0
 800409c:	200001a4 	.word	0x200001a4

080040a0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80040a0:	b580      	push	{r7, lr}
 80040a2:	b082      	sub	sp, #8
 80040a4:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80040a6:	e019      	b.n	80040dc <prvCheckTasksWaitingTermination+0x3c>
        {
            taskENTER_CRITICAL();
 80040a8:	f000 fedc 	bl	8004e64 <vPortEnterCritical>
            {
                pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80040ac:	4b10      	ldr	r3, [pc, #64]	; (80040f0 <prvCheckTasksWaitingTermination+0x50>)
 80040ae:	68db      	ldr	r3, [r3, #12]
 80040b0:	68db      	ldr	r3, [r3, #12]
 80040b2:	607b      	str	r3, [r7, #4]
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	3304      	adds	r3, #4
 80040b8:	4618      	mov	r0, r3
 80040ba:	f7fe fcef 	bl	8002a9c <uxListRemove>
                --uxCurrentNumberOfTasks;
 80040be:	4b0d      	ldr	r3, [pc, #52]	; (80040f4 <prvCheckTasksWaitingTermination+0x54>)
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	3b01      	subs	r3, #1
 80040c4:	4a0b      	ldr	r2, [pc, #44]	; (80040f4 <prvCheckTasksWaitingTermination+0x54>)
 80040c6:	6013      	str	r3, [r2, #0]
                --uxDeletedTasksWaitingCleanUp;
 80040c8:	4b0b      	ldr	r3, [pc, #44]	; (80040f8 <prvCheckTasksWaitingTermination+0x58>)
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	3b01      	subs	r3, #1
 80040ce:	4a0a      	ldr	r2, [pc, #40]	; (80040f8 <prvCheckTasksWaitingTermination+0x58>)
 80040d0:	6013      	str	r3, [r2, #0]
            }
            taskEXIT_CRITICAL();
 80040d2:	f000 fef7 	bl	8004ec4 <vPortExitCritical>

            prvDeleteTCB( pxTCB );
 80040d6:	6878      	ldr	r0, [r7, #4]
 80040d8:	f000 f810 	bl	80040fc <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80040dc:	4b06      	ldr	r3, [pc, #24]	; (80040f8 <prvCheckTasksWaitingTermination+0x58>)
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d1e1      	bne.n	80040a8 <prvCheckTasksWaitingTermination+0x8>
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 80040e4:	bf00      	nop
 80040e6:	bf00      	nop
 80040e8:	3708      	adds	r7, #8
 80040ea:	46bd      	mov	sp, r7
 80040ec:	bd80      	pop	{r7, pc}
 80040ee:	bf00      	nop
 80040f0:	200001bc 	.word	0x200001bc
 80040f4:	200001e8 	.word	0x200001e8
 80040f8:	200001d0 	.word	0x200001d0

080040fc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 80040fc:	b580      	push	{r7, lr}
 80040fe:	b082      	sub	sp, #8
 8004100:	af00      	add	r7, sp, #0
 8004102:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004108:	4618      	mov	r0, r3
 800410a:	f001 f891 	bl	8005230 <vPortFree>
            vPortFree( pxTCB );
 800410e:	6878      	ldr	r0, [r7, #4]
 8004110:	f001 f88e 	bl	8005230 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8004114:	bf00      	nop
 8004116:	3708      	adds	r7, #8
 8004118:	46bd      	mov	sp, r7
 800411a:	bd80      	pop	{r7, pc}

0800411c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800411c:	b480      	push	{r7}
 800411e:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004120:	4b0a      	ldr	r3, [pc, #40]	; (800414c <prvResetNextTaskUnblockTime+0x30>)
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	2b00      	cmp	r3, #0
 8004128:	d104      	bne.n	8004134 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 800412a:	4b09      	ldr	r3, [pc, #36]	; (8004150 <prvResetNextTaskUnblockTime+0x34>)
 800412c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004130:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8004132:	e005      	b.n	8004140 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004134:	4b05      	ldr	r3, [pc, #20]	; (800414c <prvResetNextTaskUnblockTime+0x30>)
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	68db      	ldr	r3, [r3, #12]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	4a04      	ldr	r2, [pc, #16]	; (8004150 <prvResetNextTaskUnblockTime+0x34>)
 800413e:	6013      	str	r3, [r2, #0]
}
 8004140:	bf00      	nop
 8004142:	46bd      	mov	sp, r7
 8004144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004148:	4770      	bx	lr
 800414a:	bf00      	nop
 800414c:	200001a0 	.word	0x200001a0
 8004150:	20000208 	.word	0x20000208

08004154 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8004154:	b480      	push	{r7}
 8004156:	b083      	sub	sp, #12
 8004158:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 800415a:	4b0b      	ldr	r3, [pc, #44]	; (8004188 <xTaskGetSchedulerState+0x34>)
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	2b00      	cmp	r3, #0
 8004160:	d102      	bne.n	8004168 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8004162:	2301      	movs	r3, #1
 8004164:	607b      	str	r3, [r7, #4]
 8004166:	e008      	b.n	800417a <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004168:	4b08      	ldr	r3, [pc, #32]	; (800418c <xTaskGetSchedulerState+0x38>)
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	2b00      	cmp	r3, #0
 800416e:	d102      	bne.n	8004176 <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8004170:	2302      	movs	r3, #2
 8004172:	607b      	str	r3, [r7, #4]
 8004174:	e001      	b.n	800417a <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8004176:	2300      	movs	r3, #0
 8004178:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 800417a:	687b      	ldr	r3, [r7, #4]
    }
 800417c:	4618      	mov	r0, r3
 800417e:	370c      	adds	r7, #12
 8004180:	46bd      	mov	sp, r7
 8004182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004186:	4770      	bx	lr
 8004188:	200001f4 	.word	0x200001f4
 800418c:	20000210 	.word	0x20000210

08004190 <xTaskGenericNotifyWait>:
    BaseType_t xTaskGenericNotifyWait( UBaseType_t uxIndexToWait,
                                       uint32_t ulBitsToClearOnEntry,
                                       uint32_t ulBitsToClearOnExit,
                                       uint32_t * pulNotificationValue,
                                       TickType_t xTicksToWait )
    {
 8004190:	b580      	push	{r7, lr}
 8004192:	b088      	sub	sp, #32
 8004194:	af02      	add	r7, sp, #8
 8004196:	60f8      	str	r0, [r7, #12]
 8004198:	60b9      	str	r1, [r7, #8]
 800419a:	607a      	str	r2, [r7, #4]
 800419c:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn;

        configASSERT( uxIndexToWait < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d00a      	beq.n	80041ba <xTaskGenericNotifyWait+0x2a>
        __asm volatile
 80041a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041a8:	f383 8811 	msr	BASEPRI, r3
 80041ac:	f3bf 8f6f 	isb	sy
 80041b0:	f3bf 8f4f 	dsb	sy
 80041b4:	613b      	str	r3, [r7, #16]
    }
 80041b6:	bf00      	nop
 80041b8:	e7fe      	b.n	80041b8 <xTaskGenericNotifyWait+0x28>

        taskENTER_CRITICAL();
 80041ba:	f000 fe53 	bl	8004e64 <vPortEnterCritical>
        {
            /* Only block if a notification is not already pending. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 80041be:	4b36      	ldr	r3, [pc, #216]	; (8004298 <xTaskGenericNotifyWait+0x108>)
 80041c0:	681a      	ldr	r2, [r3, #0]
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	4413      	add	r3, r2
 80041c6:	3354      	adds	r3, #84	; 0x54
 80041c8:	781b      	ldrb	r3, [r3, #0]
 80041ca:	b2db      	uxtb	r3, r3
 80041cc:	2b02      	cmp	r3, #2
 80041ce:	d022      	beq.n	8004216 <xTaskGenericNotifyWait+0x86>
            {
                /* Clear bits in the task's notification value as bits may get
                 * set  by the notifying task or interrupt.  This can be used to
                 * clear the value to zero. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnEntry;
 80041d0:	4b31      	ldr	r3, [pc, #196]	; (8004298 <xTaskGenericNotifyWait+0x108>)
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	68fa      	ldr	r2, [r7, #12]
 80041d6:	3214      	adds	r2, #20
 80041d8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80041dc:	68ba      	ldr	r2, [r7, #8]
 80041de:	43d2      	mvns	r2, r2
 80041e0:	4011      	ands	r1, r2
 80041e2:	68fa      	ldr	r2, [r7, #12]
 80041e4:	3214      	adds	r2, #20
 80041e6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

                /* Mark this task as waiting for a notification. */
                pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskWAITING_NOTIFICATION;
 80041ea:	4b2b      	ldr	r3, [pc, #172]	; (8004298 <xTaskGenericNotifyWait+0x108>)
 80041ec:	681a      	ldr	r2, [r3, #0]
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	4413      	add	r3, r2
 80041f2:	3354      	adds	r3, #84	; 0x54
 80041f4:	2201      	movs	r2, #1
 80041f6:	701a      	strb	r2, [r3, #0]

                if( xTicksToWait > ( TickType_t ) 0 )
 80041f8:	6a3b      	ldr	r3, [r7, #32]
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d00b      	beq.n	8004216 <xTaskGenericNotifyWait+0x86>
                {
                    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80041fe:	2101      	movs	r1, #1
 8004200:	6a38      	ldr	r0, [r7, #32]
 8004202:	f000 f981 	bl	8004508 <prvAddCurrentTaskToDelayedList>

                    /* All ports are written to allow a yield in a critical
                     * section (some will yield immediately, others wait until the
                     * critical section exits) - but it is not something that
                     * application code should ever do. */
                    portYIELD_WITHIN_API();
 8004206:	4b25      	ldr	r3, [pc, #148]	; (800429c <xTaskGenericNotifyWait+0x10c>)
 8004208:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800420c:	601a      	str	r2, [r3, #0]
 800420e:	f3bf 8f4f 	dsb	sy
 8004212:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8004216:	f000 fe55 	bl	8004ec4 <vPortExitCritical>

        taskENTER_CRITICAL();
 800421a:	f000 fe23 	bl	8004e64 <vPortEnterCritical>
        {
            traceTASK_NOTIFY_WAIT(  );
 800421e:	683a      	ldr	r2, [r7, #0]
 8004220:	6a3b      	ldr	r3, [r7, #32]
 8004222:	9300      	str	r3, [sp, #0]
 8004224:	4613      	mov	r3, r2
 8004226:	687a      	ldr	r2, [r7, #4]
 8004228:	68b9      	ldr	r1, [r7, #8]
 800422a:	2040      	movs	r0, #64	; 0x40
 800422c:	f002 fc14 	bl	8006a58 <SEGGER_SYSVIEW_RecordU32x4>

            if( pulNotificationValue != NULL )
 8004230:	683b      	ldr	r3, [r7, #0]
 8004232:	2b00      	cmp	r3, #0
 8004234:	d007      	beq.n	8004246 <xTaskGenericNotifyWait+0xb6>
            {
                /* Output the current notification value, which may or may not
                 * have changed. */
                *pulNotificationValue = pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ];
 8004236:	4b18      	ldr	r3, [pc, #96]	; (8004298 <xTaskGenericNotifyWait+0x108>)
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	68fa      	ldr	r2, [r7, #12]
 800423c:	3214      	adds	r2, #20
 800423e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8004242:	683b      	ldr	r3, [r7, #0]
 8004244:	601a      	str	r2, [r3, #0]

            /* If ucNotifyValue is set then either the task never entered the
             * blocked state (because a notification was already pending) or the
             * task unblocked because of a notification.  Otherwise the task
             * unblocked because of a timeout. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 8004246:	4b14      	ldr	r3, [pc, #80]	; (8004298 <xTaskGenericNotifyWait+0x108>)
 8004248:	681a      	ldr	r2, [r3, #0]
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	4413      	add	r3, r2
 800424e:	3354      	adds	r3, #84	; 0x54
 8004250:	781b      	ldrb	r3, [r3, #0]
 8004252:	b2db      	uxtb	r3, r3
 8004254:	2b02      	cmp	r3, #2
 8004256:	d002      	beq.n	800425e <xTaskGenericNotifyWait+0xce>
            {
                /* A notification was not received. */
                xReturn = pdFALSE;
 8004258:	2300      	movs	r3, #0
 800425a:	617b      	str	r3, [r7, #20]
 800425c:	e00e      	b.n	800427c <xTaskGenericNotifyWait+0xec>
            }
            else
            {
                /* A notification was already pending or a notification was
                 * received while the task was waiting. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnExit;
 800425e:	4b0e      	ldr	r3, [pc, #56]	; (8004298 <xTaskGenericNotifyWait+0x108>)
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	68fa      	ldr	r2, [r7, #12]
 8004264:	3214      	adds	r2, #20
 8004266:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800426a:	687a      	ldr	r2, [r7, #4]
 800426c:	43d2      	mvns	r2, r2
 800426e:	4011      	ands	r1, r2
 8004270:	68fa      	ldr	r2, [r7, #12]
 8004272:	3214      	adds	r2, #20
 8004274:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                xReturn = pdTRUE;
 8004278:	2301      	movs	r3, #1
 800427a:	617b      	str	r3, [r7, #20]
            }

            pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskNOT_WAITING_NOTIFICATION;
 800427c:	4b06      	ldr	r3, [pc, #24]	; (8004298 <xTaskGenericNotifyWait+0x108>)
 800427e:	681a      	ldr	r2, [r3, #0]
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	4413      	add	r3, r2
 8004284:	3354      	adds	r3, #84	; 0x54
 8004286:	2200      	movs	r2, #0
 8004288:	701a      	strb	r2, [r3, #0]
        }
        taskEXIT_CRITICAL();
 800428a:	f000 fe1b 	bl	8004ec4 <vPortExitCritical>

        return xReturn;
 800428e:	697b      	ldr	r3, [r7, #20]
    }
 8004290:	4618      	mov	r0, r3
 8004292:	3718      	adds	r7, #24
 8004294:	46bd      	mov	sp, r7
 8004296:	bd80      	pop	{r7, pc}
 8004298:	200000d4 	.word	0x200000d4
 800429c:	e000ed04 	.word	0xe000ed04

080042a0 <xTaskGenericNotify>:
    BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify,
                                   UBaseType_t uxIndexToNotify,
                                   uint32_t ulValue,
                                   eNotifyAction eAction,
                                   uint32_t * pulPreviousNotificationValue )
    {
 80042a0:	b580      	push	{r7, lr}
 80042a2:	b090      	sub	sp, #64	; 0x40
 80042a4:	af02      	add	r7, sp, #8
 80042a6:	60f8      	str	r0, [r7, #12]
 80042a8:	60b9      	str	r1, [r7, #8]
 80042aa:	607a      	str	r2, [r7, #4]
 80042ac:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        BaseType_t xReturn = pdPASS;
 80042ae:	2301      	movs	r3, #1
 80042b0:	637b      	str	r3, [r7, #52]	; 0x34
        uint8_t ucOriginalNotifyState;

        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 80042b2:	68bb      	ldr	r3, [r7, #8]
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d00a      	beq.n	80042ce <xTaskGenericNotify+0x2e>
        __asm volatile
 80042b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042bc:	f383 8811 	msr	BASEPRI, r3
 80042c0:	f3bf 8f6f 	isb	sy
 80042c4:	f3bf 8f4f 	dsb	sy
 80042c8:	623b      	str	r3, [r7, #32]
    }
 80042ca:	bf00      	nop
 80042cc:	e7fe      	b.n	80042cc <xTaskGenericNotify+0x2c>
        configASSERT( xTaskToNotify );
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d10a      	bne.n	80042ea <xTaskGenericNotify+0x4a>
        __asm volatile
 80042d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042d8:	f383 8811 	msr	BASEPRI, r3
 80042dc:	f3bf 8f6f 	isb	sy
 80042e0:	f3bf 8f4f 	dsb	sy
 80042e4:	61fb      	str	r3, [r7, #28]
    }
 80042e6:	bf00      	nop
 80042e8:	e7fe      	b.n	80042e8 <xTaskGenericNotify+0x48>
        pxTCB = xTaskToNotify;
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	633b      	str	r3, [r7, #48]	; 0x30

        taskENTER_CRITICAL();
 80042ee:	f000 fdb9 	bl	8004e64 <vPortEnterCritical>
        {
            if( pulPreviousNotificationValue != NULL )
 80042f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d006      	beq.n	8004306 <xTaskGenericNotify+0x66>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 80042f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042fa:	68ba      	ldr	r2, [r7, #8]
 80042fc:	3214      	adds	r2, #20
 80042fe:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8004302:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004304:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 8004306:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004308:	68bb      	ldr	r3, [r7, #8]
 800430a:	4413      	add	r3, r2
 800430c:	3354      	adds	r3, #84	; 0x54
 800430e:	781b      	ldrb	r3, [r3, #0]
 8004310:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 8004314:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004316:	68bb      	ldr	r3, [r7, #8]
 8004318:	4413      	add	r3, r2
 800431a:	3354      	adds	r3, #84	; 0x54
 800431c:	2202      	movs	r2, #2
 800431e:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 8004320:	78fb      	ldrb	r3, [r7, #3]
 8004322:	2b04      	cmp	r3, #4
 8004324:	d83b      	bhi.n	800439e <xTaskGenericNotify+0xfe>
 8004326:	a201      	add	r2, pc, #4	; (adr r2, 800432c <xTaskGenericNotify+0x8c>)
 8004328:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800432c:	080043bd 	.word	0x080043bd
 8004330:	08004341 	.word	0x08004341
 8004334:	0800435d 	.word	0x0800435d
 8004338:	08004375 	.word	0x08004375
 800433c:	08004383 	.word	0x08004383
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 8004340:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004342:	68ba      	ldr	r2, [r7, #8]
 8004344:	3214      	adds	r2, #20
 8004346:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	ea42 0103 	orr.w	r1, r2, r3
 8004350:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004352:	68ba      	ldr	r2, [r7, #8]
 8004354:	3214      	adds	r2, #20
 8004356:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 800435a:	e032      	b.n	80043c2 <xTaskGenericNotify+0x122>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 800435c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800435e:	68ba      	ldr	r2, [r7, #8]
 8004360:	3214      	adds	r2, #20
 8004362:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004366:	1c59      	adds	r1, r3, #1
 8004368:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800436a:	68ba      	ldr	r2, [r7, #8]
 800436c:	3214      	adds	r2, #20
 800436e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8004372:	e026      	b.n	80043c2 <xTaskGenericNotify+0x122>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8004374:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004376:	68ba      	ldr	r2, [r7, #8]
 8004378:	3214      	adds	r2, #20
 800437a:	6879      	ldr	r1, [r7, #4]
 800437c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8004380:	e01f      	b.n	80043c2 <xTaskGenericNotify+0x122>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8004382:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004386:	2b02      	cmp	r3, #2
 8004388:	d006      	beq.n	8004398 <xTaskGenericNotify+0xf8>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 800438a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800438c:	68ba      	ldr	r2, [r7, #8]
 800438e:	3214      	adds	r2, #20
 8004390:	6879      	ldr	r1, [r7, #4]
 8004392:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 8004396:	e014      	b.n	80043c2 <xTaskGenericNotify+0x122>
                        xReturn = pdFAIL;
 8004398:	2300      	movs	r3, #0
 800439a:	637b      	str	r3, [r7, #52]	; 0x34
                    break;
 800439c:	e011      	b.n	80043c2 <xTaskGenericNotify+0x122>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 800439e:	4b55      	ldr	r3, [pc, #340]	; (80044f4 <xTaskGenericNotify+0x254>)
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d00c      	beq.n	80043c0 <xTaskGenericNotify+0x120>
        __asm volatile
 80043a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043aa:	f383 8811 	msr	BASEPRI, r3
 80043ae:	f3bf 8f6f 	isb	sy
 80043b2:	f3bf 8f4f 	dsb	sy
 80043b6:	61bb      	str	r3, [r7, #24]
    }
 80043b8:	bf00      	nop
 80043ba:	e7fe      	b.n	80043ba <xTaskGenericNotify+0x11a>
                    break;
 80043bc:	bf00      	nop
 80043be:	e000      	b.n	80043c2 <xTaskGenericNotify+0x122>

                    break;
 80043c0:	bf00      	nop
            }

            traceTASK_NOTIFY(  );
 80043c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043c4:	4618      	mov	r0, r3
 80043c6:	f002 fffd 	bl	80073c4 <SEGGER_SYSVIEW_ShrinkId>
 80043ca:	4601      	mov	r1, r0
 80043cc:	78fa      	ldrb	r2, [r7, #3]
 80043ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80043d0:	9300      	str	r3, [sp, #0]
 80043d2:	4613      	mov	r3, r2
 80043d4:	687a      	ldr	r2, [r7, #4]
 80043d6:	203e      	movs	r0, #62	; 0x3e
 80043d8:	f002 fb3e 	bl	8006a58 <SEGGER_SYSVIEW_RecordU32x4>

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 80043dc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80043e0:	2b01      	cmp	r3, #1
 80043e2:	d17f      	bne.n	80044e4 <xTaskGenericNotify+0x244>
            {
                listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 80043e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043e6:	695b      	ldr	r3, [r3, #20]
 80043e8:	62bb      	str	r3, [r7, #40]	; 0x28
 80043ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043ec:	689b      	ldr	r3, [r3, #8]
 80043ee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80043f0:	68d2      	ldr	r2, [r2, #12]
 80043f2:	609a      	str	r2, [r3, #8]
 80043f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043f6:	68db      	ldr	r3, [r3, #12]
 80043f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80043fa:	6892      	ldr	r2, [r2, #8]
 80043fc:	605a      	str	r2, [r3, #4]
 80043fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004400:	685a      	ldr	r2, [r3, #4]
 8004402:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004404:	3304      	adds	r3, #4
 8004406:	429a      	cmp	r2, r3
 8004408:	d103      	bne.n	8004412 <xTaskGenericNotify+0x172>
 800440a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800440c:	68da      	ldr	r2, [r3, #12]
 800440e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004410:	605a      	str	r2, [r3, #4]
 8004412:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004414:	2200      	movs	r2, #0
 8004416:	615a      	str	r2, [r3, #20]
 8004418:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	1e5a      	subs	r2, r3, #1
 800441e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004420:	601a      	str	r2, [r3, #0]
                prvAddTaskToReadyList( pxTCB );
 8004422:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004424:	4618      	mov	r0, r3
 8004426:	f002 ff8b 	bl	8007340 <SEGGER_SYSVIEW_OnTaskStartReady>
 800442a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800442c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800442e:	2201      	movs	r2, #1
 8004430:	409a      	lsls	r2, r3
 8004432:	4b31      	ldr	r3, [pc, #196]	; (80044f8 <xTaskGenericNotify+0x258>)
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	4313      	orrs	r3, r2
 8004438:	4a2f      	ldr	r2, [pc, #188]	; (80044f8 <xTaskGenericNotify+0x258>)
 800443a:	6013      	str	r3, [r2, #0]
 800443c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800443e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004440:	492e      	ldr	r1, [pc, #184]	; (80044fc <xTaskGenericNotify+0x25c>)
 8004442:	4613      	mov	r3, r2
 8004444:	009b      	lsls	r3, r3, #2
 8004446:	4413      	add	r3, r2
 8004448:	009b      	lsls	r3, r3, #2
 800444a:	440b      	add	r3, r1
 800444c:	3304      	adds	r3, #4
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	627b      	str	r3, [r7, #36]	; 0x24
 8004452:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004454:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004456:	609a      	str	r2, [r3, #8]
 8004458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800445a:	689a      	ldr	r2, [r3, #8]
 800445c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800445e:	60da      	str	r2, [r3, #12]
 8004460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004462:	689b      	ldr	r3, [r3, #8]
 8004464:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004466:	3204      	adds	r2, #4
 8004468:	605a      	str	r2, [r3, #4]
 800446a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800446c:	1d1a      	adds	r2, r3, #4
 800446e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004470:	609a      	str	r2, [r3, #8]
 8004472:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004474:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004476:	4613      	mov	r3, r2
 8004478:	009b      	lsls	r3, r3, #2
 800447a:	4413      	add	r3, r2
 800447c:	009b      	lsls	r3, r3, #2
 800447e:	4a1f      	ldr	r2, [pc, #124]	; (80044fc <xTaskGenericNotify+0x25c>)
 8004480:	441a      	add	r2, r3
 8004482:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004484:	615a      	str	r2, [r3, #20]
 8004486:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004488:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800448a:	491c      	ldr	r1, [pc, #112]	; (80044fc <xTaskGenericNotify+0x25c>)
 800448c:	4613      	mov	r3, r2
 800448e:	009b      	lsls	r3, r3, #2
 8004490:	4413      	add	r3, r2
 8004492:	009b      	lsls	r3, r3, #2
 8004494:	440b      	add	r3, r1
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	1c59      	adds	r1, r3, #1
 800449a:	4818      	ldr	r0, [pc, #96]	; (80044fc <xTaskGenericNotify+0x25c>)
 800449c:	4613      	mov	r3, r2
 800449e:	009b      	lsls	r3, r3, #2
 80044a0:	4413      	add	r3, r2
 80044a2:	009b      	lsls	r3, r3, #2
 80044a4:	4403      	add	r3, r0
 80044a6:	6019      	str	r1, [r3, #0]

                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 80044a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d00a      	beq.n	80044c6 <xTaskGenericNotify+0x226>
        __asm volatile
 80044b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044b4:	f383 8811 	msr	BASEPRI, r3
 80044b8:	f3bf 8f6f 	isb	sy
 80044bc:	f3bf 8f4f 	dsb	sy
 80044c0:	617b      	str	r3, [r7, #20]
    }
 80044c2:	bf00      	nop
 80044c4:	e7fe      	b.n	80044c4 <xTaskGenericNotify+0x224>
                     * earliest possible time. */
                    prvResetNextTaskUnblockTime();
                }
                #endif

                if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80044c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044ca:	4b0d      	ldr	r3, [pc, #52]	; (8004500 <xTaskGenericNotify+0x260>)
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044d0:	429a      	cmp	r2, r3
 80044d2:	d907      	bls.n	80044e4 <xTaskGenericNotify+0x244>
                {
                    /* The notified task has a priority above the currently
                     * executing task so a yield is required. */
                    taskYIELD_IF_USING_PREEMPTION();
 80044d4:	4b0b      	ldr	r3, [pc, #44]	; (8004504 <xTaskGenericNotify+0x264>)
 80044d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80044da:	601a      	str	r2, [r3, #0]
 80044dc:	f3bf 8f4f 	dsb	sy
 80044e0:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 80044e4:	f000 fcee 	bl	8004ec4 <vPortExitCritical>

        return xReturn;
 80044e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    }
 80044ea:	4618      	mov	r0, r3
 80044ec:	3738      	adds	r7, #56	; 0x38
 80044ee:	46bd      	mov	sp, r7
 80044f0:	bd80      	pop	{r7, pc}
 80044f2:	bf00      	nop
 80044f4:	200001ec 	.word	0x200001ec
 80044f8:	200001f0 	.word	0x200001f0
 80044fc:	200000d8 	.word	0x200000d8
 8004500:	200000d4 	.word	0x200000d4
 8004504:	e000ed04 	.word	0xe000ed04

08004508 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8004508:	b580      	push	{r7, lr}
 800450a:	b086      	sub	sp, #24
 800450c:	af00      	add	r7, sp, #0
 800450e:	6078      	str	r0, [r7, #4]
 8004510:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8004512:	4b36      	ldr	r3, [pc, #216]	; (80045ec <prvAddCurrentTaskToDelayedList+0xe4>)
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004518:	4b35      	ldr	r3, [pc, #212]	; (80045f0 <prvAddCurrentTaskToDelayedList+0xe8>)
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	3304      	adds	r3, #4
 800451e:	4618      	mov	r0, r3
 8004520:	f7fe fabc 	bl	8002a9c <uxListRemove>
 8004524:	4603      	mov	r3, r0
 8004526:	2b00      	cmp	r3, #0
 8004528:	d10b      	bne.n	8004542 <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800452a:	4b31      	ldr	r3, [pc, #196]	; (80045f0 <prvAddCurrentTaskToDelayedList+0xe8>)
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004530:	2201      	movs	r2, #1
 8004532:	fa02 f303 	lsl.w	r3, r2, r3
 8004536:	43da      	mvns	r2, r3
 8004538:	4b2e      	ldr	r3, [pc, #184]	; (80045f4 <prvAddCurrentTaskToDelayedList+0xec>)
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	4013      	ands	r3, r2
 800453e:	4a2d      	ldr	r2, [pc, #180]	; (80045f4 <prvAddCurrentTaskToDelayedList+0xec>)
 8004540:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004548:	d124      	bne.n	8004594 <prvAddCurrentTaskToDelayedList+0x8c>
 800454a:	683b      	ldr	r3, [r7, #0]
 800454c:	2b00      	cmp	r3, #0
 800454e:	d021      	beq.n	8004594 <prvAddCurrentTaskToDelayedList+0x8c>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004550:	4b29      	ldr	r3, [pc, #164]	; (80045f8 <prvAddCurrentTaskToDelayedList+0xf0>)
 8004552:	685b      	ldr	r3, [r3, #4]
 8004554:	613b      	str	r3, [r7, #16]
 8004556:	4b26      	ldr	r3, [pc, #152]	; (80045f0 <prvAddCurrentTaskToDelayedList+0xe8>)
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	693a      	ldr	r2, [r7, #16]
 800455c:	609a      	str	r2, [r3, #8]
 800455e:	4b24      	ldr	r3, [pc, #144]	; (80045f0 <prvAddCurrentTaskToDelayedList+0xe8>)
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	693a      	ldr	r2, [r7, #16]
 8004564:	6892      	ldr	r2, [r2, #8]
 8004566:	60da      	str	r2, [r3, #12]
 8004568:	4b21      	ldr	r3, [pc, #132]	; (80045f0 <prvAddCurrentTaskToDelayedList+0xe8>)
 800456a:	681a      	ldr	r2, [r3, #0]
 800456c:	693b      	ldr	r3, [r7, #16]
 800456e:	689b      	ldr	r3, [r3, #8]
 8004570:	3204      	adds	r2, #4
 8004572:	605a      	str	r2, [r3, #4]
 8004574:	4b1e      	ldr	r3, [pc, #120]	; (80045f0 <prvAddCurrentTaskToDelayedList+0xe8>)
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	1d1a      	adds	r2, r3, #4
 800457a:	693b      	ldr	r3, [r7, #16]
 800457c:	609a      	str	r2, [r3, #8]
 800457e:	4b1c      	ldr	r3, [pc, #112]	; (80045f0 <prvAddCurrentTaskToDelayedList+0xe8>)
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	4a1d      	ldr	r2, [pc, #116]	; (80045f8 <prvAddCurrentTaskToDelayedList+0xf0>)
 8004584:	615a      	str	r2, [r3, #20]
 8004586:	4b1c      	ldr	r3, [pc, #112]	; (80045f8 <prvAddCurrentTaskToDelayedList+0xf0>)
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	3301      	adds	r3, #1
 800458c:	4a1a      	ldr	r2, [pc, #104]	; (80045f8 <prvAddCurrentTaskToDelayedList+0xf0>)
 800458e:	6013      	str	r3, [r2, #0]
 8004590:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 8004592:	e026      	b.n	80045e2 <prvAddCurrentTaskToDelayedList+0xda>
            xTimeToWake = xConstTickCount + xTicksToWait;
 8004594:	697a      	ldr	r2, [r7, #20]
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	4413      	add	r3, r2
 800459a:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800459c:	4b14      	ldr	r3, [pc, #80]	; (80045f0 <prvAddCurrentTaskToDelayedList+0xe8>)
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	68fa      	ldr	r2, [r7, #12]
 80045a2:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 80045a4:	68fa      	ldr	r2, [r7, #12]
 80045a6:	697b      	ldr	r3, [r7, #20]
 80045a8:	429a      	cmp	r2, r3
 80045aa:	d209      	bcs.n	80045c0 <prvAddCurrentTaskToDelayedList+0xb8>
                vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80045ac:	4b13      	ldr	r3, [pc, #76]	; (80045fc <prvAddCurrentTaskToDelayedList+0xf4>)
 80045ae:	681a      	ldr	r2, [r3, #0]
 80045b0:	4b0f      	ldr	r3, [pc, #60]	; (80045f0 <prvAddCurrentTaskToDelayedList+0xe8>)
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	3304      	adds	r3, #4
 80045b6:	4619      	mov	r1, r3
 80045b8:	4610      	mov	r0, r2
 80045ba:	f7fe fa36 	bl	8002a2a <vListInsert>
}
 80045be:	e010      	b.n	80045e2 <prvAddCurrentTaskToDelayedList+0xda>
                vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80045c0:	4b0f      	ldr	r3, [pc, #60]	; (8004600 <prvAddCurrentTaskToDelayedList+0xf8>)
 80045c2:	681a      	ldr	r2, [r3, #0]
 80045c4:	4b0a      	ldr	r3, [pc, #40]	; (80045f0 <prvAddCurrentTaskToDelayedList+0xe8>)
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	3304      	adds	r3, #4
 80045ca:	4619      	mov	r1, r3
 80045cc:	4610      	mov	r0, r2
 80045ce:	f7fe fa2c 	bl	8002a2a <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 80045d2:	4b0c      	ldr	r3, [pc, #48]	; (8004604 <prvAddCurrentTaskToDelayedList+0xfc>)
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	68fa      	ldr	r2, [r7, #12]
 80045d8:	429a      	cmp	r2, r3
 80045da:	d202      	bcs.n	80045e2 <prvAddCurrentTaskToDelayedList+0xda>
                    xNextTaskUnblockTime = xTimeToWake;
 80045dc:	4a09      	ldr	r2, [pc, #36]	; (8004604 <prvAddCurrentTaskToDelayedList+0xfc>)
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	6013      	str	r3, [r2, #0]
}
 80045e2:	bf00      	nop
 80045e4:	3718      	adds	r7, #24
 80045e6:	46bd      	mov	sp, r7
 80045e8:	bd80      	pop	{r7, pc}
 80045ea:	bf00      	nop
 80045ec:	200001ec 	.word	0x200001ec
 80045f0:	200000d4 	.word	0x200000d4
 80045f4:	200001f0 	.word	0x200001f0
 80045f8:	200001d4 	.word	0x200001d4
 80045fc:	200001a4 	.word	0x200001a4
 8004600:	200001a0 	.word	0x200001a0
 8004604:	20000208 	.word	0x20000208

08004608 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8004608:	b580      	push	{r7, lr}
 800460a:	b084      	sub	sp, #16
 800460c:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 800460e:	2300      	movs	r3, #0
 8004610:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8004612:	f000 fa47 	bl	8004aa4 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8004616:	4b11      	ldr	r3, [pc, #68]	; (800465c <xTimerCreateTimerTask+0x54>)
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	2b00      	cmp	r3, #0
 800461c:	d00b      	beq.n	8004636 <xTimerCreateTimerTask+0x2e>
                    xReturn = pdPASS;
                }
            }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
            {
                xReturn = xTaskCreate( prvTimerTask,
 800461e:	4b10      	ldr	r3, [pc, #64]	; (8004660 <xTimerCreateTimerTask+0x58>)
 8004620:	9301      	str	r3, [sp, #4]
 8004622:	2302      	movs	r3, #2
 8004624:	9300      	str	r3, [sp, #0]
 8004626:	2300      	movs	r3, #0
 8004628:	f44f 7200 	mov.w	r2, #512	; 0x200
 800462c:	490d      	ldr	r1, [pc, #52]	; (8004664 <xTimerCreateTimerTask+0x5c>)
 800462e:	480e      	ldr	r0, [pc, #56]	; (8004668 <xTimerCreateTimerTask+0x60>)
 8004630:	f7fe fd8e 	bl	8003150 <xTaskCreate>
 8004634:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	2b00      	cmp	r3, #0
 800463a:	d10a      	bne.n	8004652 <xTimerCreateTimerTask+0x4a>
        __asm volatile
 800463c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004640:	f383 8811 	msr	BASEPRI, r3
 8004644:	f3bf 8f6f 	isb	sy
 8004648:	f3bf 8f4f 	dsb	sy
 800464c:	603b      	str	r3, [r7, #0]
    }
 800464e:	bf00      	nop
 8004650:	e7fe      	b.n	8004650 <xTimerCreateTimerTask+0x48>
        return xReturn;
 8004652:	687b      	ldr	r3, [r7, #4]
    }
 8004654:	4618      	mov	r0, r3
 8004656:	3708      	adds	r7, #8
 8004658:	46bd      	mov	sp, r7
 800465a:	bd80      	pop	{r7, pc}
 800465c:	20000244 	.word	0x20000244
 8004660:	20000248 	.word	0x20000248
 8004664:	080077f4 	.word	0x080077f4
 8004668:	08004711 	.word	0x08004711

0800466c <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 800466c:	b580      	push	{r7, lr}
 800466e:	b084      	sub	sp, #16
 8004670:	af00      	add	r7, sp, #0
 8004672:	60f8      	str	r0, [r7, #12]
 8004674:	60b9      	str	r1, [r7, #8]
 8004676:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8004678:	e008      	b.n	800468c <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	699b      	ldr	r3, [r3, #24]
 800467e:	68ba      	ldr	r2, [r7, #8]
 8004680:	4413      	add	r3, r2
 8004682:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	6a1b      	ldr	r3, [r3, #32]
 8004688:	68f8      	ldr	r0, [r7, #12]
 800468a:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	699a      	ldr	r2, [r3, #24]
 8004690:	68bb      	ldr	r3, [r7, #8]
 8004692:	18d1      	adds	r1, r2, r3
 8004694:	68bb      	ldr	r3, [r7, #8]
 8004696:	687a      	ldr	r2, [r7, #4]
 8004698:	68f8      	ldr	r0, [r7, #12]
 800469a:	f000 f8dd 	bl	8004858 <prvInsertTimerInActiveList>
 800469e:	4603      	mov	r3, r0
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d1ea      	bne.n	800467a <prvReloadTimer+0xe>
        }
    }
 80046a4:	bf00      	nop
 80046a6:	bf00      	nop
 80046a8:	3710      	adds	r7, #16
 80046aa:	46bd      	mov	sp, r7
 80046ac:	bd80      	pop	{r7, pc}
	...

080046b0 <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 80046b0:	b580      	push	{r7, lr}
 80046b2:	b084      	sub	sp, #16
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	6078      	str	r0, [r7, #4]
 80046b8:	6039      	str	r1, [r7, #0]
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80046ba:	4b14      	ldr	r3, [pc, #80]	; (800470c <prvProcessExpiredTimer+0x5c>)
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	68db      	ldr	r3, [r3, #12]
 80046c0:	68db      	ldr	r3, [r3, #12]
 80046c2:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	3304      	adds	r3, #4
 80046c8:	4618      	mov	r0, r3
 80046ca:	f7fe f9e7 	bl	8002a9c <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80046d4:	f003 0304 	and.w	r3, r3, #4
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d005      	beq.n	80046e8 <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 80046dc:	683a      	ldr	r2, [r7, #0]
 80046de:	6879      	ldr	r1, [r7, #4]
 80046e0:	68f8      	ldr	r0, [r7, #12]
 80046e2:	f7ff ffc3 	bl	800466c <prvReloadTimer>
 80046e6:	e008      	b.n	80046fa <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80046ee:	f023 0301 	bic.w	r3, r3, #1
 80046f2:	b2da      	uxtb	r2, r3
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	6a1b      	ldr	r3, [r3, #32]
 80046fe:	68f8      	ldr	r0, [r7, #12]
 8004700:	4798      	blx	r3
    }
 8004702:	bf00      	nop
 8004704:	3710      	adds	r7, #16
 8004706:	46bd      	mov	sp, r7
 8004708:	bd80      	pop	{r7, pc}
 800470a:	bf00      	nop
 800470c:	2000023c 	.word	0x2000023c

08004710 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8004710:	b580      	push	{r7, lr}
 8004712:	b084      	sub	sp, #16
 8004714:	af00      	add	r7, sp, #0
 8004716:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004718:	f107 0308 	add.w	r3, r7, #8
 800471c:	4618      	mov	r0, r3
 800471e:	f000 f857 	bl	80047d0 <prvGetNextExpireTime>
 8004722:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004724:	68bb      	ldr	r3, [r7, #8]
 8004726:	4619      	mov	r1, r3
 8004728:	68f8      	ldr	r0, [r7, #12]
 800472a:	f000 f803 	bl	8004734 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 800472e:	f000 f8d5 	bl	80048dc <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004732:	e7f1      	b.n	8004718 <prvTimerTask+0x8>

08004734 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8004734:	b580      	push	{r7, lr}
 8004736:	b084      	sub	sp, #16
 8004738:	af00      	add	r7, sp, #0
 800473a:	6078      	str	r0, [r7, #4]
 800473c:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 800473e:	f7fe ffd7 	bl	80036f0 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004742:	f107 0308 	add.w	r3, r7, #8
 8004746:	4618      	mov	r0, r3
 8004748:	f000 f866 	bl	8004818 <prvSampleTimeNow>
 800474c:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 800474e:	68bb      	ldr	r3, [r7, #8]
 8004750:	2b00      	cmp	r3, #0
 8004752:	d130      	bne.n	80047b6 <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004754:	683b      	ldr	r3, [r7, #0]
 8004756:	2b00      	cmp	r3, #0
 8004758:	d10a      	bne.n	8004770 <prvProcessTimerOrBlockTask+0x3c>
 800475a:	687a      	ldr	r2, [r7, #4]
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	429a      	cmp	r2, r3
 8004760:	d806      	bhi.n	8004770 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8004762:	f7fe ffd3 	bl	800370c <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004766:	68f9      	ldr	r1, [r7, #12]
 8004768:	6878      	ldr	r0, [r7, #4]
 800476a:	f7ff ffa1 	bl	80046b0 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 800476e:	e024      	b.n	80047ba <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8004770:	683b      	ldr	r3, [r7, #0]
 8004772:	2b00      	cmp	r3, #0
 8004774:	d008      	beq.n	8004788 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004776:	4b13      	ldr	r3, [pc, #76]	; (80047c4 <prvProcessTimerOrBlockTask+0x90>)
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	2b00      	cmp	r3, #0
 800477e:	d101      	bne.n	8004784 <prvProcessTimerOrBlockTask+0x50>
 8004780:	2301      	movs	r3, #1
 8004782:	e000      	b.n	8004786 <prvProcessTimerOrBlockTask+0x52>
 8004784:	2300      	movs	r3, #0
 8004786:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004788:	4b0f      	ldr	r3, [pc, #60]	; (80047c8 <prvProcessTimerOrBlockTask+0x94>)
 800478a:	6818      	ldr	r0, [r3, #0]
 800478c:	687a      	ldr	r2, [r7, #4]
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	1ad3      	subs	r3, r2, r3
 8004792:	683a      	ldr	r2, [r7, #0]
 8004794:	4619      	mov	r1, r3
 8004796:	f7fe fca7 	bl	80030e8 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 800479a:	f7fe ffb7 	bl	800370c <xTaskResumeAll>
 800479e:	4603      	mov	r3, r0
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d10a      	bne.n	80047ba <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 80047a4:	4b09      	ldr	r3, [pc, #36]	; (80047cc <prvProcessTimerOrBlockTask+0x98>)
 80047a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80047aa:	601a      	str	r2, [r3, #0]
 80047ac:	f3bf 8f4f 	dsb	sy
 80047b0:	f3bf 8f6f 	isb	sy
    }
 80047b4:	e001      	b.n	80047ba <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 80047b6:	f7fe ffa9 	bl	800370c <xTaskResumeAll>
    }
 80047ba:	bf00      	nop
 80047bc:	3710      	adds	r7, #16
 80047be:	46bd      	mov	sp, r7
 80047c0:	bd80      	pop	{r7, pc}
 80047c2:	bf00      	nop
 80047c4:	20000240 	.word	0x20000240
 80047c8:	20000244 	.word	0x20000244
 80047cc:	e000ed04 	.word	0xe000ed04

080047d0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 80047d0:	b480      	push	{r7}
 80047d2:	b085      	sub	sp, #20
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80047d8:	4b0e      	ldr	r3, [pc, #56]	; (8004814 <prvGetNextExpireTime+0x44>)
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d101      	bne.n	80047e6 <prvGetNextExpireTime+0x16>
 80047e2:	2201      	movs	r2, #1
 80047e4:	e000      	b.n	80047e8 <prvGetNextExpireTime+0x18>
 80047e6:	2200      	movs	r2, #0
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d105      	bne.n	8004800 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80047f4:	4b07      	ldr	r3, [pc, #28]	; (8004814 <prvGetNextExpireTime+0x44>)
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	68db      	ldr	r3, [r3, #12]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	60fb      	str	r3, [r7, #12]
 80047fe:	e001      	b.n	8004804 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8004800:	2300      	movs	r3, #0
 8004802:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8004804:	68fb      	ldr	r3, [r7, #12]
    }
 8004806:	4618      	mov	r0, r3
 8004808:	3714      	adds	r7, #20
 800480a:	46bd      	mov	sp, r7
 800480c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004810:	4770      	bx	lr
 8004812:	bf00      	nop
 8004814:	2000023c 	.word	0x2000023c

08004818 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8004818:	b580      	push	{r7, lr}
 800481a:	b084      	sub	sp, #16
 800481c:	af00      	add	r7, sp, #0
 800481e:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8004820:	f7ff f874 	bl	800390c <xTaskGetTickCount>
 8004824:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8004826:	4b0b      	ldr	r3, [pc, #44]	; (8004854 <prvSampleTimeNow+0x3c>)
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	68fa      	ldr	r2, [r7, #12]
 800482c:	429a      	cmp	r2, r3
 800482e:	d205      	bcs.n	800483c <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8004830:	f000 f912 	bl	8004a58 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	2201      	movs	r2, #1
 8004838:	601a      	str	r2, [r3, #0]
 800483a:	e002      	b.n	8004842 <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	2200      	movs	r2, #0
 8004840:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8004842:	4a04      	ldr	r2, [pc, #16]	; (8004854 <prvSampleTimeNow+0x3c>)
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8004848:	68fb      	ldr	r3, [r7, #12]
    }
 800484a:	4618      	mov	r0, r3
 800484c:	3710      	adds	r7, #16
 800484e:	46bd      	mov	sp, r7
 8004850:	bd80      	pop	{r7, pc}
 8004852:	bf00      	nop
 8004854:	2000024c 	.word	0x2000024c

08004858 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8004858:	b580      	push	{r7, lr}
 800485a:	b086      	sub	sp, #24
 800485c:	af00      	add	r7, sp, #0
 800485e:	60f8      	str	r0, [r7, #12]
 8004860:	60b9      	str	r1, [r7, #8]
 8004862:	607a      	str	r2, [r7, #4]
 8004864:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8004866:	2300      	movs	r3, #0
 8004868:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	68ba      	ldr	r2, [r7, #8]
 800486e:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	68fa      	ldr	r2, [r7, #12]
 8004874:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8004876:	68ba      	ldr	r2, [r7, #8]
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	429a      	cmp	r2, r3
 800487c:	d812      	bhi.n	80048a4 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800487e:	687a      	ldr	r2, [r7, #4]
 8004880:	683b      	ldr	r3, [r7, #0]
 8004882:	1ad2      	subs	r2, r2, r3
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	699b      	ldr	r3, [r3, #24]
 8004888:	429a      	cmp	r2, r3
 800488a:	d302      	bcc.n	8004892 <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 800488c:	2301      	movs	r3, #1
 800488e:	617b      	str	r3, [r7, #20]
 8004890:	e01b      	b.n	80048ca <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004892:	4b10      	ldr	r3, [pc, #64]	; (80048d4 <prvInsertTimerInActiveList+0x7c>)
 8004894:	681a      	ldr	r2, [r3, #0]
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	3304      	adds	r3, #4
 800489a:	4619      	mov	r1, r3
 800489c:	4610      	mov	r0, r2
 800489e:	f7fe f8c4 	bl	8002a2a <vListInsert>
 80048a2:	e012      	b.n	80048ca <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80048a4:	687a      	ldr	r2, [r7, #4]
 80048a6:	683b      	ldr	r3, [r7, #0]
 80048a8:	429a      	cmp	r2, r3
 80048aa:	d206      	bcs.n	80048ba <prvInsertTimerInActiveList+0x62>
 80048ac:	68ba      	ldr	r2, [r7, #8]
 80048ae:	683b      	ldr	r3, [r7, #0]
 80048b0:	429a      	cmp	r2, r3
 80048b2:	d302      	bcc.n	80048ba <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 80048b4:	2301      	movs	r3, #1
 80048b6:	617b      	str	r3, [r7, #20]
 80048b8:	e007      	b.n	80048ca <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80048ba:	4b07      	ldr	r3, [pc, #28]	; (80048d8 <prvInsertTimerInActiveList+0x80>)
 80048bc:	681a      	ldr	r2, [r3, #0]
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	3304      	adds	r3, #4
 80048c2:	4619      	mov	r1, r3
 80048c4:	4610      	mov	r0, r2
 80048c6:	f7fe f8b0 	bl	8002a2a <vListInsert>
            }
        }

        return xProcessTimerNow;
 80048ca:	697b      	ldr	r3, [r7, #20]
    }
 80048cc:	4618      	mov	r0, r3
 80048ce:	3718      	adds	r7, #24
 80048d0:	46bd      	mov	sp, r7
 80048d2:	bd80      	pop	{r7, pc}
 80048d4:	20000240 	.word	0x20000240
 80048d8:	2000023c 	.word	0x2000023c

080048dc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 80048dc:	b580      	push	{r7, lr}
 80048de:	b088      	sub	sp, #32
 80048e0:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80048e2:	e0a6      	b.n	8004a32 <prvProcessReceivedCommands+0x156>
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80048e4:	68bb      	ldr	r3, [r7, #8]
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	f2c0 80a3 	blt.w	8004a32 <prvProcessReceivedCommands+0x156>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80048ec:	693b      	ldr	r3, [r7, #16]
 80048ee:	61fb      	str	r3, [r7, #28]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80048f0:	69fb      	ldr	r3, [r7, #28]
 80048f2:	695b      	ldr	r3, [r3, #20]
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d004      	beq.n	8004902 <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80048f8:	69fb      	ldr	r3, [r7, #28]
 80048fa:	3304      	adds	r3, #4
 80048fc:	4618      	mov	r0, r3
 80048fe:	f7fe f8cd 	bl	8002a9c <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004902:	1d3b      	adds	r3, r7, #4
 8004904:	4618      	mov	r0, r3
 8004906:	f7ff ff87 	bl	8004818 <prvSampleTimeNow>
 800490a:	61b8      	str	r0, [r7, #24]

                switch( xMessage.xMessageID )
 800490c:	68bb      	ldr	r3, [r7, #8]
 800490e:	3b01      	subs	r3, #1
 8004910:	2b08      	cmp	r3, #8
 8004912:	f200 808d 	bhi.w	8004a30 <prvProcessReceivedCommands+0x154>
 8004916:	a201      	add	r2, pc, #4	; (adr r2, 800491c <prvProcessReceivedCommands+0x40>)
 8004918:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800491c:	08004941 	.word	0x08004941
 8004920:	08004941 	.word	0x08004941
 8004924:	080049a9 	.word	0x080049a9
 8004928:	080049bd 	.word	0x080049bd
 800492c:	08004a07 	.word	0x08004a07
 8004930:	08004941 	.word	0x08004941
 8004934:	08004941 	.word	0x08004941
 8004938:	080049a9 	.word	0x080049a9
 800493c:	080049bd 	.word	0x080049bd
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004940:	69fb      	ldr	r3, [r7, #28]
 8004942:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004946:	f043 0301 	orr.w	r3, r3, #1
 800494a:	b2da      	uxtb	r2, r3
 800494c:	69fb      	ldr	r3, [r7, #28]
 800494e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004952:	68fa      	ldr	r2, [r7, #12]
 8004954:	69fb      	ldr	r3, [r7, #28]
 8004956:	699b      	ldr	r3, [r3, #24]
 8004958:	18d1      	adds	r1, r2, r3
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	69ba      	ldr	r2, [r7, #24]
 800495e:	69f8      	ldr	r0, [r7, #28]
 8004960:	f7ff ff7a 	bl	8004858 <prvInsertTimerInActiveList>
 8004964:	4603      	mov	r3, r0
 8004966:	2b00      	cmp	r3, #0
 8004968:	d063      	beq.n	8004a32 <prvProcessReceivedCommands+0x156>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800496a:	69fb      	ldr	r3, [r7, #28]
 800496c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004970:	f003 0304 	and.w	r3, r3, #4
 8004974:	2b00      	cmp	r3, #0
 8004976:	d009      	beq.n	800498c <prvProcessReceivedCommands+0xb0>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 8004978:	68fa      	ldr	r2, [r7, #12]
 800497a:	69fb      	ldr	r3, [r7, #28]
 800497c:	699b      	ldr	r3, [r3, #24]
 800497e:	4413      	add	r3, r2
 8004980:	69ba      	ldr	r2, [r7, #24]
 8004982:	4619      	mov	r1, r3
 8004984:	69f8      	ldr	r0, [r7, #28]
 8004986:	f7ff fe71 	bl	800466c <prvReloadTimer>
 800498a:	e008      	b.n	800499e <prvProcessReceivedCommands+0xc2>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 800498c:	69fb      	ldr	r3, [r7, #28]
 800498e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004992:	f023 0301 	bic.w	r3, r3, #1
 8004996:	b2da      	uxtb	r2, r3
 8004998:	69fb      	ldr	r3, [r7, #28]
 800499a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800499e:	69fb      	ldr	r3, [r7, #28]
 80049a0:	6a1b      	ldr	r3, [r3, #32]
 80049a2:	69f8      	ldr	r0, [r7, #28]
 80049a4:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 80049a6:	e044      	b.n	8004a32 <prvProcessReceivedCommands+0x156>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 80049a8:	69fb      	ldr	r3, [r7, #28]
 80049aa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80049ae:	f023 0301 	bic.w	r3, r3, #1
 80049b2:	b2da      	uxtb	r2, r3
 80049b4:	69fb      	ldr	r3, [r7, #28]
 80049b6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 80049ba:	e03a      	b.n	8004a32 <prvProcessReceivedCommands+0x156>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80049bc:	69fb      	ldr	r3, [r7, #28]
 80049be:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80049c2:	f043 0301 	orr.w	r3, r3, #1
 80049c6:	b2da      	uxtb	r2, r3
 80049c8:	69fb      	ldr	r3, [r7, #28]
 80049ca:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80049ce:	68fa      	ldr	r2, [r7, #12]
 80049d0:	69fb      	ldr	r3, [r7, #28]
 80049d2:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80049d4:	69fb      	ldr	r3, [r7, #28]
 80049d6:	699b      	ldr	r3, [r3, #24]
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d10a      	bne.n	80049f2 <prvProcessReceivedCommands+0x116>
        __asm volatile
 80049dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049e0:	f383 8811 	msr	BASEPRI, r3
 80049e4:	f3bf 8f6f 	isb	sy
 80049e8:	f3bf 8f4f 	dsb	sy
 80049ec:	617b      	str	r3, [r7, #20]
    }
 80049ee:	bf00      	nop
 80049f0:	e7fe      	b.n	80049f0 <prvProcessReceivedCommands+0x114>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80049f2:	69fb      	ldr	r3, [r7, #28]
 80049f4:	699a      	ldr	r2, [r3, #24]
 80049f6:	69bb      	ldr	r3, [r7, #24]
 80049f8:	18d1      	adds	r1, r2, r3
 80049fa:	69bb      	ldr	r3, [r7, #24]
 80049fc:	69ba      	ldr	r2, [r7, #24]
 80049fe:	69f8      	ldr	r0, [r7, #28]
 8004a00:	f7ff ff2a 	bl	8004858 <prvInsertTimerInActiveList>
                        break;
 8004a04:	e015      	b.n	8004a32 <prvProcessReceivedCommands+0x156>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                        {
                            /* The timer has already been removed from the active list,
                             * just free up the memory if the memory was dynamically
                             * allocated. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8004a06:	69fb      	ldr	r3, [r7, #28]
 8004a08:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004a0c:	f003 0302 	and.w	r3, r3, #2
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d103      	bne.n	8004a1c <prvProcessReceivedCommands+0x140>
                            {
                                vPortFree( pxTimer );
 8004a14:	69f8      	ldr	r0, [r7, #28]
 8004a16:	f000 fc0b 	bl	8005230 <vPortFree>
 8004a1a:	e00a      	b.n	8004a32 <prvProcessReceivedCommands+0x156>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8004a1c:	69fb      	ldr	r3, [r7, #28]
 8004a1e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004a22:	f023 0301 	bic.w	r3, r3, #1
 8004a26:	b2da      	uxtb	r2, r3
 8004a28:	69fb      	ldr	r3, [r7, #28]
 8004a2a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                             * no need to free the memory - just mark the timer as
                             * "not active". */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                        }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8004a2e:	e000      	b.n	8004a32 <prvProcessReceivedCommands+0x156>

                    default:
                        /* Don't expect to get here. */
                        break;
 8004a30:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004a32:	4b08      	ldr	r3, [pc, #32]	; (8004a54 <prvProcessReceivedCommands+0x178>)
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	f107 0108 	add.w	r1, r7, #8
 8004a3a:	2200      	movs	r2, #0
 8004a3c:	4618      	mov	r0, r3
 8004a3e:	f7fe f95f 	bl	8002d00 <xQueueReceive>
 8004a42:	4603      	mov	r3, r0
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	f47f af4d 	bne.w	80048e4 <prvProcessReceivedCommands+0x8>
                }
            }
        }
    }
 8004a4a:	bf00      	nop
 8004a4c:	bf00      	nop
 8004a4e:	3720      	adds	r7, #32
 8004a50:	46bd      	mov	sp, r7
 8004a52:	bd80      	pop	{r7, pc}
 8004a54:	20000244 	.word	0x20000244

08004a58 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8004a58:	b580      	push	{r7, lr}
 8004a5a:	b082      	sub	sp, #8
 8004a5c:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004a5e:	e009      	b.n	8004a74 <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004a60:	4b0e      	ldr	r3, [pc, #56]	; (8004a9c <prvSwitchTimerLists+0x44>)
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	68db      	ldr	r3, [r3, #12]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 8004a6a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004a6e:	6838      	ldr	r0, [r7, #0]
 8004a70:	f7ff fe1e 	bl	80046b0 <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004a74:	4b09      	ldr	r3, [pc, #36]	; (8004a9c <prvSwitchTimerLists+0x44>)
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d1f0      	bne.n	8004a60 <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 8004a7e:	4b07      	ldr	r3, [pc, #28]	; (8004a9c <prvSwitchTimerLists+0x44>)
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 8004a84:	4b06      	ldr	r3, [pc, #24]	; (8004aa0 <prvSwitchTimerLists+0x48>)
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	4a04      	ldr	r2, [pc, #16]	; (8004a9c <prvSwitchTimerLists+0x44>)
 8004a8a:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8004a8c:	4a04      	ldr	r2, [pc, #16]	; (8004aa0 <prvSwitchTimerLists+0x48>)
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	6013      	str	r3, [r2, #0]
    }
 8004a92:	bf00      	nop
 8004a94:	3708      	adds	r7, #8
 8004a96:	46bd      	mov	sp, r7
 8004a98:	bd80      	pop	{r7, pc}
 8004a9a:	bf00      	nop
 8004a9c:	2000023c 	.word	0x2000023c
 8004aa0:	20000240 	.word	0x20000240

08004aa4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8004aa4:	b580      	push	{r7, lr}
 8004aa6:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8004aa8:	f000 f9dc 	bl	8004e64 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8004aac:	4b12      	ldr	r3, [pc, #72]	; (8004af8 <prvCheckForValidListAndQueue+0x54>)
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d11d      	bne.n	8004af0 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8004ab4:	4811      	ldr	r0, [pc, #68]	; (8004afc <prvCheckForValidListAndQueue+0x58>)
 8004ab6:	f7fd ff67 	bl	8002988 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8004aba:	4811      	ldr	r0, [pc, #68]	; (8004b00 <prvCheckForValidListAndQueue+0x5c>)
 8004abc:	f7fd ff64 	bl	8002988 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8004ac0:	4b10      	ldr	r3, [pc, #64]	; (8004b04 <prvCheckForValidListAndQueue+0x60>)
 8004ac2:	4a0e      	ldr	r2, [pc, #56]	; (8004afc <prvCheckForValidListAndQueue+0x58>)
 8004ac4:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8004ac6:	4b10      	ldr	r3, [pc, #64]	; (8004b08 <prvCheckForValidListAndQueue+0x64>)
 8004ac8:	4a0d      	ldr	r2, [pc, #52]	; (8004b00 <prvCheckForValidListAndQueue+0x5c>)
 8004aca:	601a      	str	r2, [r3, #0]

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                }
                #else
                {
                    xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8004acc:	2200      	movs	r2, #0
 8004ace:	210c      	movs	r1, #12
 8004ad0:	200a      	movs	r0, #10
 8004ad2:	f7fe f89d 	bl	8002c10 <xQueueGenericCreate>
 8004ad6:	4603      	mov	r3, r0
 8004ad8:	4a07      	ldr	r2, [pc, #28]	; (8004af8 <prvCheckForValidListAndQueue+0x54>)
 8004ada:	6013      	str	r3, [r2, #0]
                }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                {
                    if( xTimerQueue != NULL )
 8004adc:	4b06      	ldr	r3, [pc, #24]	; (8004af8 <prvCheckForValidListAndQueue+0x54>)
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d005      	beq.n	8004af0 <prvCheckForValidListAndQueue+0x4c>
                    {
                        vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004ae4:	4b04      	ldr	r3, [pc, #16]	; (8004af8 <prvCheckForValidListAndQueue+0x54>)
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	4908      	ldr	r1, [pc, #32]	; (8004b0c <prvCheckForValidListAndQueue+0x68>)
 8004aea:	4618      	mov	r0, r3
 8004aec:	f7fe faa6 	bl	800303c <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8004af0:	f000 f9e8 	bl	8004ec4 <vPortExitCritical>
    }
 8004af4:	bf00      	nop
 8004af6:	bd80      	pop	{r7, pc}
 8004af8:	20000244 	.word	0x20000244
 8004afc:	20000214 	.word	0x20000214
 8004b00:	20000228 	.word	0x20000228
 8004b04:	2000023c 	.word	0x2000023c
 8004b08:	20000240 	.word	0x20000240
 8004b0c:	080077fc 	.word	0x080077fc

08004b10 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8004b10:	b480      	push	{r7}
 8004b12:	b085      	sub	sp, #20
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	60f8      	str	r0, [r7, #12]
 8004b18:	60b9      	str	r1, [r7, #8]
 8004b1a:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	3b04      	subs	r3, #4
 8004b20:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004b28:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	3b04      	subs	r3, #4
 8004b2e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8004b30:	68bb      	ldr	r3, [r7, #8]
 8004b32:	f023 0201 	bic.w	r2, r3, #1
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	3b04      	subs	r3, #4
 8004b3e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8004b40:	4a0c      	ldr	r2, [pc, #48]	; (8004b74 <pxPortInitialiseStack+0x64>)
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	3b14      	subs	r3, #20
 8004b4a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8004b4c:	687a      	ldr	r2, [r7, #4]
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	3b04      	subs	r3, #4
 8004b56:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	f06f 0202 	mvn.w	r2, #2
 8004b5e:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	3b20      	subs	r3, #32
 8004b64:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8004b66:	68fb      	ldr	r3, [r7, #12]
}
 8004b68:	4618      	mov	r0, r3
 8004b6a:	3714      	adds	r7, #20
 8004b6c:	46bd      	mov	sp, r7
 8004b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b72:	4770      	bx	lr
 8004b74:	08004b79 	.word	0x08004b79

08004b78 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004b78:	b480      	push	{r7}
 8004b7a:	b085      	sub	sp, #20
 8004b7c:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8004b7e:	2300      	movs	r3, #0
 8004b80:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8004b82:	4b12      	ldr	r3, [pc, #72]	; (8004bcc <prvTaskExitError+0x54>)
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004b8a:	d00a      	beq.n	8004ba2 <prvTaskExitError+0x2a>
        __asm volatile
 8004b8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b90:	f383 8811 	msr	BASEPRI, r3
 8004b94:	f3bf 8f6f 	isb	sy
 8004b98:	f3bf 8f4f 	dsb	sy
 8004b9c:	60fb      	str	r3, [r7, #12]
    }
 8004b9e:	bf00      	nop
 8004ba0:	e7fe      	b.n	8004ba0 <prvTaskExitError+0x28>
        __asm volatile
 8004ba2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ba6:	f383 8811 	msr	BASEPRI, r3
 8004baa:	f3bf 8f6f 	isb	sy
 8004bae:	f3bf 8f4f 	dsb	sy
 8004bb2:	60bb      	str	r3, [r7, #8]
    }
 8004bb4:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8004bb6:	bf00      	nop
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d0fc      	beq.n	8004bb8 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8004bbe:	bf00      	nop
 8004bc0:	bf00      	nop
 8004bc2:	3714      	adds	r7, #20
 8004bc4:	46bd      	mov	sp, r7
 8004bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bca:	4770      	bx	lr
 8004bcc:	20000010 	.word	0x20000010

08004bd0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8004bd0:	4b07      	ldr	r3, [pc, #28]	; (8004bf0 <pxCurrentTCBConst2>)
 8004bd2:	6819      	ldr	r1, [r3, #0]
 8004bd4:	6808      	ldr	r0, [r1, #0]
 8004bd6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004bda:	f380 8809 	msr	PSP, r0
 8004bde:	f3bf 8f6f 	isb	sy
 8004be2:	f04f 0000 	mov.w	r0, #0
 8004be6:	f380 8811 	msr	BASEPRI, r0
 8004bea:	4770      	bx	lr
 8004bec:	f3af 8000 	nop.w

08004bf0 <pxCurrentTCBConst2>:
 8004bf0:	200000d4 	.word	0x200000d4
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8004bf4:	bf00      	nop
 8004bf6:	bf00      	nop

08004bf8 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8004bf8:	4808      	ldr	r0, [pc, #32]	; (8004c1c <prvPortStartFirstTask+0x24>)
 8004bfa:	6800      	ldr	r0, [r0, #0]
 8004bfc:	6800      	ldr	r0, [r0, #0]
 8004bfe:	f380 8808 	msr	MSP, r0
 8004c02:	f04f 0000 	mov.w	r0, #0
 8004c06:	f380 8814 	msr	CONTROL, r0
 8004c0a:	b662      	cpsie	i
 8004c0c:	b661      	cpsie	f
 8004c0e:	f3bf 8f4f 	dsb	sy
 8004c12:	f3bf 8f6f 	isb	sy
 8004c16:	df00      	svc	0
 8004c18:	bf00      	nop
 8004c1a:	0000      	.short	0x0000
 8004c1c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8004c20:	bf00      	nop
 8004c22:	bf00      	nop

08004c24 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004c24:	b580      	push	{r7, lr}
 8004c26:	b086      	sub	sp, #24
 8004c28:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004c2a:	4b46      	ldr	r3, [pc, #280]	; (8004d44 <xPortStartScheduler+0x120>)
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	4a46      	ldr	r2, [pc, #280]	; (8004d48 <xPortStartScheduler+0x124>)
 8004c30:	4293      	cmp	r3, r2
 8004c32:	d10a      	bne.n	8004c4a <xPortStartScheduler+0x26>
        __asm volatile
 8004c34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c38:	f383 8811 	msr	BASEPRI, r3
 8004c3c:	f3bf 8f6f 	isb	sy
 8004c40:	f3bf 8f4f 	dsb	sy
 8004c44:	613b      	str	r3, [r7, #16]
    }
 8004c46:	bf00      	nop
 8004c48:	e7fe      	b.n	8004c48 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004c4a:	4b3e      	ldr	r3, [pc, #248]	; (8004d44 <xPortStartScheduler+0x120>)
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	4a3f      	ldr	r2, [pc, #252]	; (8004d4c <xPortStartScheduler+0x128>)
 8004c50:	4293      	cmp	r3, r2
 8004c52:	d10a      	bne.n	8004c6a <xPortStartScheduler+0x46>
        __asm volatile
 8004c54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c58:	f383 8811 	msr	BASEPRI, r3
 8004c5c:	f3bf 8f6f 	isb	sy
 8004c60:	f3bf 8f4f 	dsb	sy
 8004c64:	60fb      	str	r3, [r7, #12]
    }
 8004c66:	bf00      	nop
 8004c68:	e7fe      	b.n	8004c68 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint32_t ulOriginalPriority;
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004c6a:	4b39      	ldr	r3, [pc, #228]	; (8004d50 <xPortStartScheduler+0x12c>)
 8004c6c:	617b      	str	r3, [r7, #20]
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004c6e:	697b      	ldr	r3, [r7, #20]
 8004c70:	781b      	ldrb	r3, [r3, #0]
 8004c72:	b2db      	uxtb	r3, r3
 8004c74:	607b      	str	r3, [r7, #4]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004c76:	697b      	ldr	r3, [r7, #20]
 8004c78:	22ff      	movs	r2, #255	; 0xff
 8004c7a:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004c7c:	697b      	ldr	r3, [r7, #20]
 8004c7e:	781b      	ldrb	r3, [r3, #0]
 8004c80:	b2db      	uxtb	r3, r3
 8004c82:	70fb      	strb	r3, [r7, #3]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004c84:	78fb      	ldrb	r3, [r7, #3]
 8004c86:	b2db      	uxtb	r3, r3
 8004c88:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004c8c:	b2da      	uxtb	r2, r3
 8004c8e:	4b31      	ldr	r3, [pc, #196]	; (8004d54 <xPortStartScheduler+0x130>)
 8004c90:	701a      	strb	r2, [r3, #0]

        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */
        ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004c92:	4b31      	ldr	r3, [pc, #196]	; (8004d58 <xPortStartScheduler+0x134>)
 8004c94:	2207      	movs	r2, #7
 8004c96:	601a      	str	r2, [r3, #0]

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004c98:	e009      	b.n	8004cae <xPortStartScheduler+0x8a>
        {
            ulMaxPRIGROUPValue--;
 8004c9a:	4b2f      	ldr	r3, [pc, #188]	; (8004d58 <xPortStartScheduler+0x134>)
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	3b01      	subs	r3, #1
 8004ca0:	4a2d      	ldr	r2, [pc, #180]	; (8004d58 <xPortStartScheduler+0x134>)
 8004ca2:	6013      	str	r3, [r2, #0]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004ca4:	78fb      	ldrb	r3, [r7, #3]
 8004ca6:	b2db      	uxtb	r3, r3
 8004ca8:	005b      	lsls	r3, r3, #1
 8004caa:	b2db      	uxtb	r3, r3
 8004cac:	70fb      	strb	r3, [r7, #3]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004cae:	78fb      	ldrb	r3, [r7, #3]
 8004cb0:	b2db      	uxtb	r3, r3
 8004cb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004cb6:	2b80      	cmp	r3, #128	; 0x80
 8004cb8:	d0ef      	beq.n	8004c9a <xPortStartScheduler+0x76>
        #ifdef configPRIO_BITS
        {
            /* Check the FreeRTOS configuration that defines the number of
             * priority bits matches the number of priority bits actually queried
             * from the hardware. */
            configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004cba:	4b27      	ldr	r3, [pc, #156]	; (8004d58 <xPortStartScheduler+0x134>)
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	f1c3 0307 	rsb	r3, r3, #7
 8004cc2:	2b04      	cmp	r3, #4
 8004cc4:	d00a      	beq.n	8004cdc <xPortStartScheduler+0xb8>
        __asm volatile
 8004cc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cca:	f383 8811 	msr	BASEPRI, r3
 8004cce:	f3bf 8f6f 	isb	sy
 8004cd2:	f3bf 8f4f 	dsb	sy
 8004cd6:	60bb      	str	r3, [r7, #8]
    }
 8004cd8:	bf00      	nop
 8004cda:	e7fe      	b.n	8004cda <xPortStartScheduler+0xb6>
        }
        #endif

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004cdc:	4b1e      	ldr	r3, [pc, #120]	; (8004d58 <xPortStartScheduler+0x134>)
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	021b      	lsls	r3, r3, #8
 8004ce2:	4a1d      	ldr	r2, [pc, #116]	; (8004d58 <xPortStartScheduler+0x134>)
 8004ce4:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004ce6:	4b1c      	ldr	r3, [pc, #112]	; (8004d58 <xPortStartScheduler+0x134>)
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004cee:	4a1a      	ldr	r2, [pc, #104]	; (8004d58 <xPortStartScheduler+0x134>)
 8004cf0:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ulOriginalPriority;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	b2da      	uxtb	r2, r3
 8004cf6:	697b      	ldr	r3, [r7, #20]
 8004cf8:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8004cfa:	4b18      	ldr	r3, [pc, #96]	; (8004d5c <xPortStartScheduler+0x138>)
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	4a17      	ldr	r2, [pc, #92]	; (8004d5c <xPortStartScheduler+0x138>)
 8004d00:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004d04:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8004d06:	4b15      	ldr	r3, [pc, #84]	; (8004d5c <xPortStartScheduler+0x138>)
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	4a14      	ldr	r2, [pc, #80]	; (8004d5c <xPortStartScheduler+0x138>)
 8004d0c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004d10:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8004d12:	f000 f963 	bl	8004fdc <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8004d16:	4b12      	ldr	r3, [pc, #72]	; (8004d60 <xPortStartScheduler+0x13c>)
 8004d18:	2200      	movs	r2, #0
 8004d1a:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8004d1c:	f000 f982 	bl	8005024 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004d20:	4b10      	ldr	r3, [pc, #64]	; (8004d64 <xPortStartScheduler+0x140>)
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	4a0f      	ldr	r2, [pc, #60]	; (8004d64 <xPortStartScheduler+0x140>)
 8004d26:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004d2a:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8004d2c:	f7ff ff64 	bl	8004bf8 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8004d30:	f7fe ff28 	bl	8003b84 <vTaskSwitchContext>
    prvTaskExitError();
 8004d34:	f7ff ff20 	bl	8004b78 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8004d38:	2300      	movs	r3, #0
}
 8004d3a:	4618      	mov	r0, r3
 8004d3c:	3718      	adds	r7, #24
 8004d3e:	46bd      	mov	sp, r7
 8004d40:	bd80      	pop	{r7, pc}
 8004d42:	bf00      	nop
 8004d44:	e000ed00 	.word	0xe000ed00
 8004d48:	410fc271 	.word	0x410fc271
 8004d4c:	410fc270 	.word	0x410fc270
 8004d50:	e000e400 	.word	0xe000e400
 8004d54:	20000250 	.word	0x20000250
 8004d58:	20000254 	.word	0x20000254
 8004d5c:	e000ed20 	.word	0xe000ed20
 8004d60:	20000010 	.word	0x20000010
 8004d64:	e000ef34 	.word	0xe000ef34

08004d68 <vInitPrioGroupValue>:
/*-----------------------------------------------------------*/


void vInitPrioGroupValue(void)
{
 8004d68:	b480      	push	{r7}
 8004d6a:	b087      	sub	sp, #28
 8004d6c:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004d6e:	4b37      	ldr	r3, [pc, #220]	; (8004e4c <vInitPrioGroupValue+0xe4>)
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	4a37      	ldr	r2, [pc, #220]	; (8004e50 <vInitPrioGroupValue+0xe8>)
 8004d74:	4293      	cmp	r3, r2
 8004d76:	d10a      	bne.n	8004d8e <vInitPrioGroupValue+0x26>
        __asm volatile
 8004d78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d7c:	f383 8811 	msr	BASEPRI, r3
 8004d80:	f3bf 8f6f 	isb	sy
 8004d84:	f3bf 8f4f 	dsb	sy
 8004d88:	613b      	str	r3, [r7, #16]
    }
 8004d8a:	bf00      	nop
 8004d8c:	e7fe      	b.n	8004d8c <vInitPrioGroupValue+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004d8e:	4b2f      	ldr	r3, [pc, #188]	; (8004e4c <vInitPrioGroupValue+0xe4>)
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	4a30      	ldr	r2, [pc, #192]	; (8004e54 <vInitPrioGroupValue+0xec>)
 8004d94:	4293      	cmp	r3, r2
 8004d96:	d10a      	bne.n	8004dae <vInitPrioGroupValue+0x46>
        __asm volatile
 8004d98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d9c:	f383 8811 	msr	BASEPRI, r3
 8004da0:	f3bf 8f6f 	isb	sy
 8004da4:	f3bf 8f4f 	dsb	sy
 8004da8:	60fb      	str	r3, [r7, #12]
    }
 8004daa:	bf00      	nop
 8004dac:	e7fe      	b.n	8004dac <vInitPrioGroupValue+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004dae:	4b2a      	ldr	r3, [pc, #168]	; (8004e58 <vInitPrioGroupValue+0xf0>)
 8004db0:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004db2:	697b      	ldr	r3, [r7, #20]
 8004db4:	781b      	ldrb	r3, [r3, #0]
 8004db6:	b2db      	uxtb	r3, r3
 8004db8:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004dba:	697b      	ldr	r3, [r7, #20]
 8004dbc:	22ff      	movs	r2, #255	; 0xff
 8004dbe:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004dc0:	697b      	ldr	r3, [r7, #20]
 8004dc2:	781b      	ldrb	r3, [r3, #0]
 8004dc4:	b2db      	uxtb	r3, r3
 8004dc6:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004dc8:	78fb      	ldrb	r3, [r7, #3]
 8004dca:	b2db      	uxtb	r3, r3
 8004dcc:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004dd0:	b2da      	uxtb	r2, r3
 8004dd2:	4b22      	ldr	r3, [pc, #136]	; (8004e5c <vInitPrioGroupValue+0xf4>)
 8004dd4:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004dd6:	4b22      	ldr	r3, [pc, #136]	; (8004e60 <vInitPrioGroupValue+0xf8>)
 8004dd8:	2207      	movs	r2, #7
 8004dda:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004ddc:	e009      	b.n	8004df2 <vInitPrioGroupValue+0x8a>
            {
                ulMaxPRIGROUPValue--;
 8004dde:	4b20      	ldr	r3, [pc, #128]	; (8004e60 <vInitPrioGroupValue+0xf8>)
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	3b01      	subs	r3, #1
 8004de4:	4a1e      	ldr	r2, [pc, #120]	; (8004e60 <vInitPrioGroupValue+0xf8>)
 8004de6:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004de8:	78fb      	ldrb	r3, [r7, #3]
 8004dea:	b2db      	uxtb	r3, r3
 8004dec:	005b      	lsls	r3, r3, #1
 8004dee:	b2db      	uxtb	r3, r3
 8004df0:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004df2:	78fb      	ldrb	r3, [r7, #3]
 8004df4:	b2db      	uxtb	r3, r3
 8004df6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004dfa:	2b80      	cmp	r3, #128	; 0x80
 8004dfc:	d0ef      	beq.n	8004dde <vInitPrioGroupValue+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004dfe:	4b18      	ldr	r3, [pc, #96]	; (8004e60 <vInitPrioGroupValue+0xf8>)
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	f1c3 0307 	rsb	r3, r3, #7
 8004e06:	2b04      	cmp	r3, #4
 8004e08:	d00a      	beq.n	8004e20 <vInitPrioGroupValue+0xb8>
        __asm volatile
 8004e0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e0e:	f383 8811 	msr	BASEPRI, r3
 8004e12:	f3bf 8f6f 	isb	sy
 8004e16:	f3bf 8f4f 	dsb	sy
 8004e1a:	60bb      	str	r3, [r7, #8]
    }
 8004e1c:	bf00      	nop
 8004e1e:	e7fe      	b.n	8004e1e <vInitPrioGroupValue+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004e20:	4b0f      	ldr	r3, [pc, #60]	; (8004e60 <vInitPrioGroupValue+0xf8>)
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	021b      	lsls	r3, r3, #8
 8004e26:	4a0e      	ldr	r2, [pc, #56]	; (8004e60 <vInitPrioGroupValue+0xf8>)
 8004e28:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004e2a:	4b0d      	ldr	r3, [pc, #52]	; (8004e60 <vInitPrioGroupValue+0xf8>)
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004e32:	4a0b      	ldr	r2, [pc, #44]	; (8004e60 <vInitPrioGroupValue+0xf8>)
 8004e34:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	b2da      	uxtb	r2, r3
 8004e3a:	697b      	ldr	r3, [r7, #20]
 8004e3c:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */
}
 8004e3e:	bf00      	nop
 8004e40:	371c      	adds	r7, #28
 8004e42:	46bd      	mov	sp, r7
 8004e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e48:	4770      	bx	lr
 8004e4a:	bf00      	nop
 8004e4c:	e000ed00 	.word	0xe000ed00
 8004e50:	410fc271 	.word	0x410fc271
 8004e54:	410fc270 	.word	0x410fc270
 8004e58:	e000e400 	.word	0xe000e400
 8004e5c:	20000250 	.word	0x20000250
 8004e60:	20000254 	.word	0x20000254

08004e64 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004e64:	b480      	push	{r7}
 8004e66:	b083      	sub	sp, #12
 8004e68:	af00      	add	r7, sp, #0
        __asm volatile
 8004e6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e6e:	f383 8811 	msr	BASEPRI, r3
 8004e72:	f3bf 8f6f 	isb	sy
 8004e76:	f3bf 8f4f 	dsb	sy
 8004e7a:	607b      	str	r3, [r7, #4]
    }
 8004e7c:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8004e7e:	4b0f      	ldr	r3, [pc, #60]	; (8004ebc <vPortEnterCritical+0x58>)
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	3301      	adds	r3, #1
 8004e84:	4a0d      	ldr	r2, [pc, #52]	; (8004ebc <vPortEnterCritical+0x58>)
 8004e86:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8004e88:	4b0c      	ldr	r3, [pc, #48]	; (8004ebc <vPortEnterCritical+0x58>)
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	2b01      	cmp	r3, #1
 8004e8e:	d10f      	bne.n	8004eb0 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004e90:	4b0b      	ldr	r3, [pc, #44]	; (8004ec0 <vPortEnterCritical+0x5c>)
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	b2db      	uxtb	r3, r3
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d00a      	beq.n	8004eb0 <vPortEnterCritical+0x4c>
        __asm volatile
 8004e9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e9e:	f383 8811 	msr	BASEPRI, r3
 8004ea2:	f3bf 8f6f 	isb	sy
 8004ea6:	f3bf 8f4f 	dsb	sy
 8004eaa:	603b      	str	r3, [r7, #0]
    }
 8004eac:	bf00      	nop
 8004eae:	e7fe      	b.n	8004eae <vPortEnterCritical+0x4a>
    }
}
 8004eb0:	bf00      	nop
 8004eb2:	370c      	adds	r7, #12
 8004eb4:	46bd      	mov	sp, r7
 8004eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eba:	4770      	bx	lr
 8004ebc:	20000010 	.word	0x20000010
 8004ec0:	e000ed04 	.word	0xe000ed04

08004ec4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004ec4:	b480      	push	{r7}
 8004ec6:	b083      	sub	sp, #12
 8004ec8:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8004eca:	4b12      	ldr	r3, [pc, #72]	; (8004f14 <vPortExitCritical+0x50>)
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d10a      	bne.n	8004ee8 <vPortExitCritical+0x24>
        __asm volatile
 8004ed2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ed6:	f383 8811 	msr	BASEPRI, r3
 8004eda:	f3bf 8f6f 	isb	sy
 8004ede:	f3bf 8f4f 	dsb	sy
 8004ee2:	607b      	str	r3, [r7, #4]
    }
 8004ee4:	bf00      	nop
 8004ee6:	e7fe      	b.n	8004ee6 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8004ee8:	4b0a      	ldr	r3, [pc, #40]	; (8004f14 <vPortExitCritical+0x50>)
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	3b01      	subs	r3, #1
 8004eee:	4a09      	ldr	r2, [pc, #36]	; (8004f14 <vPortExitCritical+0x50>)
 8004ef0:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8004ef2:	4b08      	ldr	r3, [pc, #32]	; (8004f14 <vPortExitCritical+0x50>)
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d105      	bne.n	8004f06 <vPortExitCritical+0x42>
 8004efa:	2300      	movs	r3, #0
 8004efc:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8004efe:	683b      	ldr	r3, [r7, #0]
 8004f00:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8004f04:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8004f06:	bf00      	nop
 8004f08:	370c      	adds	r7, #12
 8004f0a:	46bd      	mov	sp, r7
 8004f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f10:	4770      	bx	lr
 8004f12:	bf00      	nop
 8004f14:	20000010 	.word	0x20000010
	...

08004f20 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8004f20:	f3ef 8009 	mrs	r0, PSP
 8004f24:	f3bf 8f6f 	isb	sy
 8004f28:	4b15      	ldr	r3, [pc, #84]	; (8004f80 <pxCurrentTCBConst>)
 8004f2a:	681a      	ldr	r2, [r3, #0]
 8004f2c:	f01e 0f10 	tst.w	lr, #16
 8004f30:	bf08      	it	eq
 8004f32:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004f36:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f3a:	6010      	str	r0, [r2, #0]
 8004f3c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004f40:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004f44:	f380 8811 	msr	BASEPRI, r0
 8004f48:	f3bf 8f4f 	dsb	sy
 8004f4c:	f3bf 8f6f 	isb	sy
 8004f50:	f7fe fe18 	bl	8003b84 <vTaskSwitchContext>
 8004f54:	f04f 0000 	mov.w	r0, #0
 8004f58:	f380 8811 	msr	BASEPRI, r0
 8004f5c:	bc09      	pop	{r0, r3}
 8004f5e:	6819      	ldr	r1, [r3, #0]
 8004f60:	6808      	ldr	r0, [r1, #0]
 8004f62:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f66:	f01e 0f10 	tst.w	lr, #16
 8004f6a:	bf08      	it	eq
 8004f6c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004f70:	f380 8809 	msr	PSP, r0
 8004f74:	f3bf 8f6f 	isb	sy
 8004f78:	4770      	bx	lr
 8004f7a:	bf00      	nop
 8004f7c:	f3af 8000 	nop.w

08004f80 <pxCurrentTCBConst>:
 8004f80:	200000d4 	.word	0x200000d4
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8004f84:	bf00      	nop
 8004f86:	bf00      	nop

08004f88 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004f88:	b580      	push	{r7, lr}
 8004f8a:	b082      	sub	sp, #8
 8004f8c:	af00      	add	r7, sp, #0
        __asm volatile
 8004f8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f92:	f383 8811 	msr	BASEPRI, r3
 8004f96:	f3bf 8f6f 	isb	sy
 8004f9a:	f3bf 8f4f 	dsb	sy
 8004f9e:	607b      	str	r3, [r7, #4]
    }
 8004fa0:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 8004fa2:	f002 f8b3 	bl	800710c <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8004fa6:	f7fe fcd3 	bl	8003950 <xTaskIncrementTick>
 8004faa:	4603      	mov	r3, r0
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d006      	beq.n	8004fbe <SysTick_Handler+0x36>
        {
			traceISR_EXIT_TO_SCHEDULER();
 8004fb0:	f002 f90a 	bl	80071c8 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004fb4:	4b08      	ldr	r3, [pc, #32]	; (8004fd8 <SysTick_Handler+0x50>)
 8004fb6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004fba:	601a      	str	r2, [r3, #0]
 8004fbc:	e001      	b.n	8004fc2 <SysTick_Handler+0x3a>
        }
		else
		{
			traceISR_EXIT();
 8004fbe:	f002 f8e7 	bl	8007190 <SEGGER_SYSVIEW_RecordExitISR>
 8004fc2:	2300      	movs	r3, #0
 8004fc4:	603b      	str	r3, [r7, #0]
        __asm volatile
 8004fc6:	683b      	ldr	r3, [r7, #0]
 8004fc8:	f383 8811 	msr	BASEPRI, r3
    }
 8004fcc:	bf00      	nop
		}
    }
    portENABLE_INTERRUPTS();
}
 8004fce:	bf00      	nop
 8004fd0:	3708      	adds	r7, #8
 8004fd2:	46bd      	mov	sp, r7
 8004fd4:	bd80      	pop	{r7, pc}
 8004fd6:	bf00      	nop
 8004fd8:	e000ed04 	.word	0xe000ed04

08004fdc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8004fdc:	b480      	push	{r7}
 8004fde:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004fe0:	4b0b      	ldr	r3, [pc, #44]	; (8005010 <vPortSetupTimerInterrupt+0x34>)
 8004fe2:	2200      	movs	r2, #0
 8004fe4:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004fe6:	4b0b      	ldr	r3, [pc, #44]	; (8005014 <vPortSetupTimerInterrupt+0x38>)
 8004fe8:	2200      	movs	r2, #0
 8004fea:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004fec:	4b0a      	ldr	r3, [pc, #40]	; (8005018 <vPortSetupTimerInterrupt+0x3c>)
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	4a0a      	ldr	r2, [pc, #40]	; (800501c <vPortSetupTimerInterrupt+0x40>)
 8004ff2:	fba2 2303 	umull	r2, r3, r2, r3
 8004ff6:	099b      	lsrs	r3, r3, #6
 8004ff8:	4a09      	ldr	r2, [pc, #36]	; (8005020 <vPortSetupTimerInterrupt+0x44>)
 8004ffa:	3b01      	subs	r3, #1
 8004ffc:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004ffe:	4b04      	ldr	r3, [pc, #16]	; (8005010 <vPortSetupTimerInterrupt+0x34>)
 8005000:	2207      	movs	r2, #7
 8005002:	601a      	str	r2, [r3, #0]
}
 8005004:	bf00      	nop
 8005006:	46bd      	mov	sp, r7
 8005008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800500c:	4770      	bx	lr
 800500e:	bf00      	nop
 8005010:	e000e010 	.word	0xe000e010
 8005014:	e000e018 	.word	0xe000e018
 8005018:	20000000 	.word	0x20000000
 800501c:	10624dd3 	.word	0x10624dd3
 8005020:	e000e014 	.word	0xe000e014

08005024 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8005024:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005034 <vPortEnableVFP+0x10>
 8005028:	6801      	ldr	r1, [r0, #0]
 800502a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800502e:	6001      	str	r1, [r0, #0]
 8005030:	4770      	bx	lr
 8005032:	0000      	.short	0x0000
 8005034:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8005038:	bf00      	nop
 800503a:	bf00      	nop

0800503c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 800503c:	b480      	push	{r7}
 800503e:	b085      	sub	sp, #20
 8005040:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8005042:	f3ef 8305 	mrs	r3, IPSR
 8005046:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	2b0f      	cmp	r3, #15
 800504c:	d914      	bls.n	8005078 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800504e:	4a17      	ldr	r2, [pc, #92]	; (80050ac <vPortValidateInterruptPriority+0x70>)
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	4413      	add	r3, r2
 8005054:	781b      	ldrb	r3, [r3, #0]
 8005056:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005058:	4b15      	ldr	r3, [pc, #84]	; (80050b0 <vPortValidateInterruptPriority+0x74>)
 800505a:	781b      	ldrb	r3, [r3, #0]
 800505c:	7afa      	ldrb	r2, [r7, #11]
 800505e:	429a      	cmp	r2, r3
 8005060:	d20a      	bcs.n	8005078 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 8005062:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005066:	f383 8811 	msr	BASEPRI, r3
 800506a:	f3bf 8f6f 	isb	sy
 800506e:	f3bf 8f4f 	dsb	sy
 8005072:	607b      	str	r3, [r7, #4]
    }
 8005074:	bf00      	nop
 8005076:	e7fe      	b.n	8005076 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005078:	4b0e      	ldr	r3, [pc, #56]	; (80050b4 <vPortValidateInterruptPriority+0x78>)
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005080:	4b0d      	ldr	r3, [pc, #52]	; (80050b8 <vPortValidateInterruptPriority+0x7c>)
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	429a      	cmp	r2, r3
 8005086:	d90a      	bls.n	800509e <vPortValidateInterruptPriority+0x62>
        __asm volatile
 8005088:	f04f 0350 	mov.w	r3, #80	; 0x50
 800508c:	f383 8811 	msr	BASEPRI, r3
 8005090:	f3bf 8f6f 	isb	sy
 8005094:	f3bf 8f4f 	dsb	sy
 8005098:	603b      	str	r3, [r7, #0]
    }
 800509a:	bf00      	nop
 800509c:	e7fe      	b.n	800509c <vPortValidateInterruptPriority+0x60>
    }
 800509e:	bf00      	nop
 80050a0:	3714      	adds	r7, #20
 80050a2:	46bd      	mov	sp, r7
 80050a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a8:	4770      	bx	lr
 80050aa:	bf00      	nop
 80050ac:	e000e3f0 	.word	0xe000e3f0
 80050b0:	20000250 	.word	0x20000250
 80050b4:	e000ed0c 	.word	0xe000ed0c
 80050b8:	20000254 	.word	0x20000254

080050bc <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 80050bc:	b580      	push	{r7, lr}
 80050be:	b08a      	sub	sp, #40	; 0x28
 80050c0:	af00      	add	r7, sp, #0
 80050c2:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 80050c4:	2300      	movs	r3, #0
 80050c6:	61fb      	str	r3, [r7, #28]
    size_t xAdditionalRequiredSize;

    vTaskSuspendAll();
 80050c8:	f7fe fb12 	bl	80036f0 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 80050cc:	4b53      	ldr	r3, [pc, #332]	; (800521c <pvPortMalloc+0x160>)
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d101      	bne.n	80050d8 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 80050d4:	f000 f908 	bl	80052e8 <prvHeapInit>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xWantedSize > 0 )
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d012      	beq.n	8005104 <pvPortMalloc+0x48>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. Some
             * additional increment may also be needed for alignment. */
            xAdditionalRequiredSize = xHeapStructSize + portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 80050de:	2208      	movs	r2, #8
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	f003 0307 	and.w	r3, r3, #7
 80050e6:	1ad3      	subs	r3, r2, r3
 80050e8:	3308      	adds	r3, #8
 80050ea:	61bb      	str	r3, [r7, #24]

            if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 80050ec:	69bb      	ldr	r3, [r7, #24]
 80050ee:	43db      	mvns	r3, r3
 80050f0:	687a      	ldr	r2, [r7, #4]
 80050f2:	429a      	cmp	r2, r3
 80050f4:	d804      	bhi.n	8005100 <pvPortMalloc+0x44>
            {
                xWantedSize += xAdditionalRequiredSize;
 80050f6:	687a      	ldr	r2, [r7, #4]
 80050f8:	69bb      	ldr	r3, [r7, #24]
 80050fa:	4413      	add	r3, r2
 80050fc:	607b      	str	r3, [r7, #4]
 80050fe:	e001      	b.n	8005104 <pvPortMalloc+0x48>
            }
            else
            {
                xWantedSize = 0;
 8005100:	2300      	movs	r3, #0
 8005102:	607b      	str	r3, [r7, #4]

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	2b00      	cmp	r3, #0
 8005108:	db70      	blt.n	80051ec <pvPortMalloc+0x130>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	2b00      	cmp	r3, #0
 800510e:	d06d      	beq.n	80051ec <pvPortMalloc+0x130>
 8005110:	4b43      	ldr	r3, [pc, #268]	; (8005220 <pvPortMalloc+0x164>)
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	687a      	ldr	r2, [r7, #4]
 8005116:	429a      	cmp	r2, r3
 8005118:	d868      	bhi.n	80051ec <pvPortMalloc+0x130>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 800511a:	4b42      	ldr	r3, [pc, #264]	; (8005224 <pvPortMalloc+0x168>)
 800511c:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 800511e:	4b41      	ldr	r3, [pc, #260]	; (8005224 <pvPortMalloc+0x168>)
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005124:	e004      	b.n	8005130 <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
 8005126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005128:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 800512a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005132:	685b      	ldr	r3, [r3, #4]
 8005134:	687a      	ldr	r2, [r7, #4]
 8005136:	429a      	cmp	r2, r3
 8005138:	d903      	bls.n	8005142 <pvPortMalloc+0x86>
 800513a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	2b00      	cmp	r3, #0
 8005140:	d1f1      	bne.n	8005126 <pvPortMalloc+0x6a>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8005142:	4b36      	ldr	r3, [pc, #216]	; (800521c <pvPortMalloc+0x160>)
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005148:	429a      	cmp	r2, r3
 800514a:	d04f      	beq.n	80051ec <pvPortMalloc+0x130>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800514c:	6a3b      	ldr	r3, [r7, #32]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	2208      	movs	r2, #8
 8005152:	4413      	add	r3, r2
 8005154:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005156:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005158:	681a      	ldr	r2, [r3, #0]
 800515a:	6a3b      	ldr	r3, [r7, #32]
 800515c:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800515e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005160:	685a      	ldr	r2, [r3, #4]
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	1ad2      	subs	r2, r2, r3
 8005166:	2308      	movs	r3, #8
 8005168:	005b      	lsls	r3, r3, #1
 800516a:	429a      	cmp	r2, r3
 800516c:	d91f      	bls.n	80051ae <pvPortMalloc+0xf2>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800516e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	4413      	add	r3, r2
 8005174:	617b      	str	r3, [r7, #20]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005176:	697b      	ldr	r3, [r7, #20]
 8005178:	f003 0307 	and.w	r3, r3, #7
 800517c:	2b00      	cmp	r3, #0
 800517e:	d00a      	beq.n	8005196 <pvPortMalloc+0xda>
        __asm volatile
 8005180:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005184:	f383 8811 	msr	BASEPRI, r3
 8005188:	f3bf 8f6f 	isb	sy
 800518c:	f3bf 8f4f 	dsb	sy
 8005190:	613b      	str	r3, [r7, #16]
    }
 8005192:	bf00      	nop
 8005194:	e7fe      	b.n	8005194 <pvPortMalloc+0xd8>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005198:	685a      	ldr	r2, [r3, #4]
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	1ad2      	subs	r2, r2, r3
 800519e:	697b      	ldr	r3, [r7, #20]
 80051a0:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 80051a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051a4:	687a      	ldr	r2, [r7, #4]
 80051a6:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 80051a8:	6978      	ldr	r0, [r7, #20]
 80051aa:	f000 f8f9 	bl	80053a0 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 80051ae:	4b1c      	ldr	r3, [pc, #112]	; (8005220 <pvPortMalloc+0x164>)
 80051b0:	681a      	ldr	r2, [r3, #0]
 80051b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051b4:	685b      	ldr	r3, [r3, #4]
 80051b6:	1ad3      	subs	r3, r2, r3
 80051b8:	4a19      	ldr	r2, [pc, #100]	; (8005220 <pvPortMalloc+0x164>)
 80051ba:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80051bc:	4b18      	ldr	r3, [pc, #96]	; (8005220 <pvPortMalloc+0x164>)
 80051be:	681a      	ldr	r2, [r3, #0]
 80051c0:	4b19      	ldr	r3, [pc, #100]	; (8005228 <pvPortMalloc+0x16c>)
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	429a      	cmp	r2, r3
 80051c6:	d203      	bcs.n	80051d0 <pvPortMalloc+0x114>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80051c8:	4b15      	ldr	r3, [pc, #84]	; (8005220 <pvPortMalloc+0x164>)
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	4a16      	ldr	r2, [pc, #88]	; (8005228 <pvPortMalloc+0x16c>)
 80051ce:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 80051d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051d2:	685b      	ldr	r3, [r3, #4]
 80051d4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80051d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051da:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 80051dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051de:	2200      	movs	r2, #0
 80051e0:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 80051e2:	4b12      	ldr	r3, [pc, #72]	; (800522c <pvPortMalloc+0x170>)
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	3301      	adds	r3, #1
 80051e8:	4a10      	ldr	r2, [pc, #64]	; (800522c <pvPortMalloc+0x170>)
 80051ea:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 80051ec:	f7fe fa8e 	bl	800370c <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80051f0:	69fb      	ldr	r3, [r7, #28]
 80051f2:	f003 0307 	and.w	r3, r3, #7
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d00a      	beq.n	8005210 <pvPortMalloc+0x154>
        __asm volatile
 80051fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051fe:	f383 8811 	msr	BASEPRI, r3
 8005202:	f3bf 8f6f 	isb	sy
 8005206:	f3bf 8f4f 	dsb	sy
 800520a:	60fb      	str	r3, [r7, #12]
    }
 800520c:	bf00      	nop
 800520e:	e7fe      	b.n	800520e <pvPortMalloc+0x152>
    return pvReturn;
 8005210:	69fb      	ldr	r3, [r7, #28]
}
 8005212:	4618      	mov	r0, r3
 8005214:	3728      	adds	r7, #40	; 0x28
 8005216:	46bd      	mov	sp, r7
 8005218:	bd80      	pop	{r7, pc}
 800521a:	bf00      	nop
 800521c:	20003e60 	.word	0x20003e60
 8005220:	20003e64 	.word	0x20003e64
 8005224:	20003e58 	.word	0x20003e58
 8005228:	20003e68 	.word	0x20003e68
 800522c:	20003e6c 	.word	0x20003e6c

08005230 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8005230:	b580      	push	{r7, lr}
 8005232:	b086      	sub	sp, #24
 8005234:	af00      	add	r7, sp, #0
 8005236:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	2b00      	cmp	r3, #0
 8005240:	d049      	beq.n	80052d6 <vPortFree+0xa6>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8005242:	2308      	movs	r3, #8
 8005244:	425b      	negs	r3, r3
 8005246:	697a      	ldr	r2, [r7, #20]
 8005248:	4413      	add	r3, r2
 800524a:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 800524c:	697b      	ldr	r3, [r7, #20]
 800524e:	613b      	str	r3, [r7, #16]

        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 8005250:	693b      	ldr	r3, [r7, #16]
 8005252:	685b      	ldr	r3, [r3, #4]
 8005254:	2b00      	cmp	r3, #0
 8005256:	db0a      	blt.n	800526e <vPortFree+0x3e>
        __asm volatile
 8005258:	f04f 0350 	mov.w	r3, #80	; 0x50
 800525c:	f383 8811 	msr	BASEPRI, r3
 8005260:	f3bf 8f6f 	isb	sy
 8005264:	f3bf 8f4f 	dsb	sy
 8005268:	60fb      	str	r3, [r7, #12]
    }
 800526a:	bf00      	nop
 800526c:	e7fe      	b.n	800526c <vPortFree+0x3c>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 800526e:	693b      	ldr	r3, [r7, #16]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	2b00      	cmp	r3, #0
 8005274:	d00a      	beq.n	800528c <vPortFree+0x5c>
        __asm volatile
 8005276:	f04f 0350 	mov.w	r3, #80	; 0x50
 800527a:	f383 8811 	msr	BASEPRI, r3
 800527e:	f3bf 8f6f 	isb	sy
 8005282:	f3bf 8f4f 	dsb	sy
 8005286:	60bb      	str	r3, [r7, #8]
    }
 8005288:	bf00      	nop
 800528a:	e7fe      	b.n	800528a <vPortFree+0x5a>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 800528c:	693b      	ldr	r3, [r7, #16]
 800528e:	685b      	ldr	r3, [r3, #4]
 8005290:	0fdb      	lsrs	r3, r3, #31
 8005292:	f003 0301 	and.w	r3, r3, #1
 8005296:	b2db      	uxtb	r3, r3
 8005298:	2b00      	cmp	r3, #0
 800529a:	d01c      	beq.n	80052d6 <vPortFree+0xa6>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 800529c:	693b      	ldr	r3, [r7, #16]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d118      	bne.n	80052d6 <vPortFree+0xa6>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 80052a4:	693b      	ldr	r3, [r7, #16]
 80052a6:	685b      	ldr	r3, [r3, #4]
 80052a8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80052ac:	693b      	ldr	r3, [r7, #16]
 80052ae:	605a      	str	r2, [r3, #4]
                {
                    ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                }
                #endif

                vTaskSuspendAll();
 80052b0:	f7fe fa1e 	bl	80036f0 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 80052b4:	693b      	ldr	r3, [r7, #16]
 80052b6:	685a      	ldr	r2, [r3, #4]
 80052b8:	4b09      	ldr	r3, [pc, #36]	; (80052e0 <vPortFree+0xb0>)
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	4413      	add	r3, r2
 80052be:	4a08      	ldr	r2, [pc, #32]	; (80052e0 <vPortFree+0xb0>)
 80052c0:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80052c2:	6938      	ldr	r0, [r7, #16]
 80052c4:	f000 f86c 	bl	80053a0 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 80052c8:	4b06      	ldr	r3, [pc, #24]	; (80052e4 <vPortFree+0xb4>)
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	3301      	adds	r3, #1
 80052ce:	4a05      	ldr	r2, [pc, #20]	; (80052e4 <vPortFree+0xb4>)
 80052d0:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 80052d2:	f7fe fa1b 	bl	800370c <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 80052d6:	bf00      	nop
 80052d8:	3718      	adds	r7, #24
 80052da:	46bd      	mov	sp, r7
 80052dc:	bd80      	pop	{r7, pc}
 80052de:	bf00      	nop
 80052e0:	20003e64 	.word	0x20003e64
 80052e4:	20003e70 	.word	0x20003e70

080052e8 <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 80052e8:	b480      	push	{r7}
 80052ea:	b085      	sub	sp, #20
 80052ec:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    portPOINTER_SIZE_TYPE uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80052ee:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80052f2:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 80052f4:	4b25      	ldr	r3, [pc, #148]	; (800538c <prvHeapInit+0xa4>)
 80052f6:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	f003 0307 	and.w	r3, r3, #7
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d00c      	beq.n	800531c <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	3307      	adds	r3, #7
 8005306:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	f023 0307 	bic.w	r3, r3, #7
 800530e:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( portPOINTER_SIZE_TYPE ) ucHeap;
 8005310:	68ba      	ldr	r2, [r7, #8]
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	1ad3      	subs	r3, r2, r3
 8005316:	4a1d      	ldr	r2, [pc, #116]	; (800538c <prvHeapInit+0xa4>)
 8005318:	4413      	add	r3, r2
 800531a:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005320:	4a1b      	ldr	r2, [pc, #108]	; (8005390 <prvHeapInit+0xa8>)
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8005326:	4b1a      	ldr	r3, [pc, #104]	; (8005390 <prvHeapInit+0xa8>)
 8005328:	2200      	movs	r2, #0
 800532a:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( portPOINTER_SIZE_TYPE ) pucAlignedHeap ) + xTotalHeapSize;
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	68ba      	ldr	r2, [r7, #8]
 8005330:	4413      	add	r3, r2
 8005332:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8005334:	2208      	movs	r2, #8
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	1a9b      	subs	r3, r3, r2
 800533a:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	f023 0307 	bic.w	r3, r3, #7
 8005342:	60fb      	str	r3, [r7, #12]
    pxEnd = ( BlockLink_t * ) uxAddress;
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	4a13      	ldr	r2, [pc, #76]	; (8005394 <prvHeapInit+0xac>)
 8005348:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 800534a:	4b12      	ldr	r3, [pc, #72]	; (8005394 <prvHeapInit+0xac>)
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	2200      	movs	r2, #0
 8005350:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8005352:	4b10      	ldr	r3, [pc, #64]	; (8005394 <prvHeapInit+0xac>)
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	2200      	movs	r2, #0
 8005358:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) pucAlignedHeap;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 800535e:	683b      	ldr	r3, [r7, #0]
 8005360:	68fa      	ldr	r2, [r7, #12]
 8005362:	1ad2      	subs	r2, r2, r3
 8005364:	683b      	ldr	r3, [r7, #0]
 8005366:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005368:	4b0a      	ldr	r3, [pc, #40]	; (8005394 <prvHeapInit+0xac>)
 800536a:	681a      	ldr	r2, [r3, #0]
 800536c:	683b      	ldr	r3, [r7, #0]
 800536e:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005370:	683b      	ldr	r3, [r7, #0]
 8005372:	685b      	ldr	r3, [r3, #4]
 8005374:	4a08      	ldr	r2, [pc, #32]	; (8005398 <prvHeapInit+0xb0>)
 8005376:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005378:	683b      	ldr	r3, [r7, #0]
 800537a:	685b      	ldr	r3, [r3, #4]
 800537c:	4a07      	ldr	r2, [pc, #28]	; (800539c <prvHeapInit+0xb4>)
 800537e:	6013      	str	r3, [r2, #0]
}
 8005380:	bf00      	nop
 8005382:	3714      	adds	r7, #20
 8005384:	46bd      	mov	sp, r7
 8005386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800538a:	4770      	bx	lr
 800538c:	20000258 	.word	0x20000258
 8005390:	20003e58 	.word	0x20003e58
 8005394:	20003e60 	.word	0x20003e60
 8005398:	20003e68 	.word	0x20003e68
 800539c:	20003e64 	.word	0x20003e64

080053a0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 80053a0:	b480      	push	{r7}
 80053a2:	b085      	sub	sp, #20
 80053a4:	af00      	add	r7, sp, #0
 80053a6:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80053a8:	4b28      	ldr	r3, [pc, #160]	; (800544c <prvInsertBlockIntoFreeList+0xac>)
 80053aa:	60fb      	str	r3, [r7, #12]
 80053ac:	e002      	b.n	80053b4 <prvInsertBlockIntoFreeList+0x14>
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	60fb      	str	r3, [r7, #12]
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	687a      	ldr	r2, [r7, #4]
 80053ba:	429a      	cmp	r2, r3
 80053bc:	d8f7      	bhi.n	80053ae <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	685b      	ldr	r3, [r3, #4]
 80053c6:	68ba      	ldr	r2, [r7, #8]
 80053c8:	4413      	add	r3, r2
 80053ca:	687a      	ldr	r2, [r7, #4]
 80053cc:	429a      	cmp	r2, r3
 80053ce:	d108      	bne.n	80053e2 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	685a      	ldr	r2, [r3, #4]
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	685b      	ldr	r3, [r3, #4]
 80053d8:	441a      	add	r2, r3
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	685b      	ldr	r3, [r3, #4]
 80053ea:	68ba      	ldr	r2, [r7, #8]
 80053ec:	441a      	add	r2, r3
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	429a      	cmp	r2, r3
 80053f4:	d118      	bne.n	8005428 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	681a      	ldr	r2, [r3, #0]
 80053fa:	4b15      	ldr	r3, [pc, #84]	; (8005450 <prvInsertBlockIntoFreeList+0xb0>)
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	429a      	cmp	r2, r3
 8005400:	d00d      	beq.n	800541e <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	685a      	ldr	r2, [r3, #4]
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	685b      	ldr	r3, [r3, #4]
 800540c:	441a      	add	r2, r3
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	681a      	ldr	r2, [r3, #0]
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	601a      	str	r2, [r3, #0]
 800541c:	e008      	b.n	8005430 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800541e:	4b0c      	ldr	r3, [pc, #48]	; (8005450 <prvInsertBlockIntoFreeList+0xb0>)
 8005420:	681a      	ldr	r2, [r3, #0]
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	601a      	str	r2, [r3, #0]
 8005426:	e003      	b.n	8005430 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	681a      	ldr	r2, [r3, #0]
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8005430:	68fa      	ldr	r2, [r7, #12]
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	429a      	cmp	r2, r3
 8005436:	d002      	beq.n	800543e <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	687a      	ldr	r2, [r7, #4]
 800543c:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800543e:	bf00      	nop
 8005440:	3714      	adds	r7, #20
 8005442:	46bd      	mov	sp, r7
 8005444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005448:	4770      	bx	lr
 800544a:	bf00      	nop
 800544c:	20003e58 	.word	0x20003e58
 8005450:	20003e60 	.word	0x20003e60

08005454 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8005454:	b580      	push	{r7, lr}
 8005456:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 8005458:	4803      	ldr	r0, [pc, #12]	; (8005468 <_cbSendSystemDesc+0x14>)
 800545a:	f001 fe01 	bl	8007060 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 800545e:	4803      	ldr	r0, [pc, #12]	; (800546c <_cbSendSystemDesc+0x18>)
 8005460:	f001 fdfe 	bl	8007060 <SEGGER_SYSVIEW_SendSysDesc>
}
 8005464:	bf00      	nop
 8005466:	bd80      	pop	{r7, pc}
 8005468:	08007804 	.word	0x08007804
 800546c:	08007840 	.word	0x08007840

08005470 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8005470:	b580      	push	{r7, lr}
 8005472:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8005474:	4b06      	ldr	r3, [pc, #24]	; (8005490 <SEGGER_SYSVIEW_Conf+0x20>)
 8005476:	6818      	ldr	r0, [r3, #0]
 8005478:	4b05      	ldr	r3, [pc, #20]	; (8005490 <SEGGER_SYSVIEW_Conf+0x20>)
 800547a:	6819      	ldr	r1, [r3, #0]
 800547c:	4b05      	ldr	r3, [pc, #20]	; (8005494 <SEGGER_SYSVIEW_Conf+0x24>)
 800547e:	4a06      	ldr	r2, [pc, #24]	; (8005498 <SEGGER_SYSVIEW_Conf+0x28>)
 8005480:	f001 f96c 	bl	800675c <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8005484:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8005488:	f001 f9ac 	bl	80067e4 <SEGGER_SYSVIEW_SetRAMBase>
}
 800548c:	bf00      	nop
 800548e:	bd80      	pop	{r7, pc}
 8005490:	20000000 	.word	0x20000000
 8005494:	08005455 	.word	0x08005455
 8005498:	08007900 	.word	0x08007900

0800549c <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 800549c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800549e:	b085      	sub	sp, #20
 80054a0:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 80054a2:	2300      	movs	r3, #0
 80054a4:	607b      	str	r3, [r7, #4]
 80054a6:	e033      	b.n	8005510 <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 80054a8:	491e      	ldr	r1, [pc, #120]	; (8005524 <_cbSendTaskList+0x88>)
 80054aa:	687a      	ldr	r2, [r7, #4]
 80054ac:	4613      	mov	r3, r2
 80054ae:	009b      	lsls	r3, r3, #2
 80054b0:	4413      	add	r3, r2
 80054b2:	009b      	lsls	r3, r3, #2
 80054b4:	440b      	add	r3, r1
 80054b6:	6818      	ldr	r0, [r3, #0]
 80054b8:	491a      	ldr	r1, [pc, #104]	; (8005524 <_cbSendTaskList+0x88>)
 80054ba:	687a      	ldr	r2, [r7, #4]
 80054bc:	4613      	mov	r3, r2
 80054be:	009b      	lsls	r3, r3, #2
 80054c0:	4413      	add	r3, r2
 80054c2:	009b      	lsls	r3, r3, #2
 80054c4:	440b      	add	r3, r1
 80054c6:	3304      	adds	r3, #4
 80054c8:	6819      	ldr	r1, [r3, #0]
 80054ca:	4c16      	ldr	r4, [pc, #88]	; (8005524 <_cbSendTaskList+0x88>)
 80054cc:	687a      	ldr	r2, [r7, #4]
 80054ce:	4613      	mov	r3, r2
 80054d0:	009b      	lsls	r3, r3, #2
 80054d2:	4413      	add	r3, r2
 80054d4:	009b      	lsls	r3, r3, #2
 80054d6:	4423      	add	r3, r4
 80054d8:	3308      	adds	r3, #8
 80054da:	681c      	ldr	r4, [r3, #0]
 80054dc:	4d11      	ldr	r5, [pc, #68]	; (8005524 <_cbSendTaskList+0x88>)
 80054de:	687a      	ldr	r2, [r7, #4]
 80054e0:	4613      	mov	r3, r2
 80054e2:	009b      	lsls	r3, r3, #2
 80054e4:	4413      	add	r3, r2
 80054e6:	009b      	lsls	r3, r3, #2
 80054e8:	442b      	add	r3, r5
 80054ea:	330c      	adds	r3, #12
 80054ec:	681d      	ldr	r5, [r3, #0]
 80054ee:	4e0d      	ldr	r6, [pc, #52]	; (8005524 <_cbSendTaskList+0x88>)
 80054f0:	687a      	ldr	r2, [r7, #4]
 80054f2:	4613      	mov	r3, r2
 80054f4:	009b      	lsls	r3, r3, #2
 80054f6:	4413      	add	r3, r2
 80054f8:	009b      	lsls	r3, r3, #2
 80054fa:	4433      	add	r3, r6
 80054fc:	3310      	adds	r3, #16
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	9300      	str	r3, [sp, #0]
 8005502:	462b      	mov	r3, r5
 8005504:	4622      	mov	r2, r4
 8005506:	f000 f979 	bl	80057fc <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	3301      	adds	r3, #1
 800550e:	607b      	str	r3, [r7, #4]
 8005510:	4b05      	ldr	r3, [pc, #20]	; (8005528 <_cbSendTaskList+0x8c>)
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	687a      	ldr	r2, [r7, #4]
 8005516:	429a      	cmp	r2, r3
 8005518:	d3c6      	bcc.n	80054a8 <_cbSendTaskList+0xc>
  }
}
 800551a:	bf00      	nop
 800551c:	bf00      	nop
 800551e:	370c      	adds	r7, #12
 8005520:	46bd      	mov	sp, r7
 8005522:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005524:	20003e74 	.word	0x20003e74
 8005528:	20003f14 	.word	0x20003f14

0800552c <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 800552c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005530:	b082      	sub	sp, #8
 8005532:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8005534:	f7fe f9fa 	bl	800392c <xTaskGetTickCountFromISR>
 8005538:	4603      	mov	r3, r0
 800553a:	2200      	movs	r2, #0
 800553c:	469a      	mov	sl, r3
 800553e:	4693      	mov	fp, r2
 8005540:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8005544:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005548:	4602      	mov	r2, r0
 800554a:	460b      	mov	r3, r1
 800554c:	f04f 0a00 	mov.w	sl, #0
 8005550:	f04f 0b00 	mov.w	fp, #0
 8005554:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 8005558:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 800555c:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 8005560:	4652      	mov	r2, sl
 8005562:	465b      	mov	r3, fp
 8005564:	1a14      	subs	r4, r2, r0
 8005566:	eb63 0501 	sbc.w	r5, r3, r1
 800556a:	f04f 0200 	mov.w	r2, #0
 800556e:	f04f 0300 	mov.w	r3, #0
 8005572:	00ab      	lsls	r3, r5, #2
 8005574:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 8005578:	00a2      	lsls	r2, r4, #2
 800557a:	4614      	mov	r4, r2
 800557c:	461d      	mov	r5, r3
 800557e:	eb14 0800 	adds.w	r8, r4, r0
 8005582:	eb45 0901 	adc.w	r9, r5, r1
 8005586:	f04f 0200 	mov.w	r2, #0
 800558a:	f04f 0300 	mov.w	r3, #0
 800558e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005592:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005596:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800559a:	4690      	mov	r8, r2
 800559c:	4699      	mov	r9, r3
 800559e:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 80055a2:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 80055a6:	4610      	mov	r0, r2
 80055a8:	4619      	mov	r1, r3
 80055aa:	3708      	adds	r7, #8
 80055ac:	46bd      	mov	sp, r7
 80055ae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

080055b4 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 80055b4:	b580      	push	{r7, lr}
 80055b6:	b086      	sub	sp, #24
 80055b8:	af02      	add	r7, sp, #8
 80055ba:	60f8      	str	r0, [r7, #12]
 80055bc:	60b9      	str	r1, [r7, #8]
 80055be:	607a      	str	r2, [r7, #4]
 80055c0:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 80055c2:	2205      	movs	r2, #5
 80055c4:	492b      	ldr	r1, [pc, #172]	; (8005674 <SYSVIEW_AddTask+0xc0>)
 80055c6:	68b8      	ldr	r0, [r7, #8]
 80055c8:	f002 f858 	bl	800767c <memcmp>
 80055cc:	4603      	mov	r3, r0
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d04b      	beq.n	800566a <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 80055d2:	4b29      	ldr	r3, [pc, #164]	; (8005678 <SYSVIEW_AddTask+0xc4>)
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	2b07      	cmp	r3, #7
 80055d8:	d903      	bls.n	80055e2 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 80055da:	4828      	ldr	r0, [pc, #160]	; (800567c <SYSVIEW_AddTask+0xc8>)
 80055dc:	f001 fff2 	bl	80075c4 <SEGGER_SYSVIEW_Warn>
    return;
 80055e0:	e044      	b.n	800566c <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 80055e2:	4b25      	ldr	r3, [pc, #148]	; (8005678 <SYSVIEW_AddTask+0xc4>)
 80055e4:	681a      	ldr	r2, [r3, #0]
 80055e6:	4926      	ldr	r1, [pc, #152]	; (8005680 <SYSVIEW_AddTask+0xcc>)
 80055e8:	4613      	mov	r3, r2
 80055ea:	009b      	lsls	r3, r3, #2
 80055ec:	4413      	add	r3, r2
 80055ee:	009b      	lsls	r3, r3, #2
 80055f0:	440b      	add	r3, r1
 80055f2:	68fa      	ldr	r2, [r7, #12]
 80055f4:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 80055f6:	4b20      	ldr	r3, [pc, #128]	; (8005678 <SYSVIEW_AddTask+0xc4>)
 80055f8:	681a      	ldr	r2, [r3, #0]
 80055fa:	4921      	ldr	r1, [pc, #132]	; (8005680 <SYSVIEW_AddTask+0xcc>)
 80055fc:	4613      	mov	r3, r2
 80055fe:	009b      	lsls	r3, r3, #2
 8005600:	4413      	add	r3, r2
 8005602:	009b      	lsls	r3, r3, #2
 8005604:	440b      	add	r3, r1
 8005606:	3304      	adds	r3, #4
 8005608:	68ba      	ldr	r2, [r7, #8]
 800560a:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 800560c:	4b1a      	ldr	r3, [pc, #104]	; (8005678 <SYSVIEW_AddTask+0xc4>)
 800560e:	681a      	ldr	r2, [r3, #0]
 8005610:	491b      	ldr	r1, [pc, #108]	; (8005680 <SYSVIEW_AddTask+0xcc>)
 8005612:	4613      	mov	r3, r2
 8005614:	009b      	lsls	r3, r3, #2
 8005616:	4413      	add	r3, r2
 8005618:	009b      	lsls	r3, r3, #2
 800561a:	440b      	add	r3, r1
 800561c:	3308      	adds	r3, #8
 800561e:	687a      	ldr	r2, [r7, #4]
 8005620:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8005622:	4b15      	ldr	r3, [pc, #84]	; (8005678 <SYSVIEW_AddTask+0xc4>)
 8005624:	681a      	ldr	r2, [r3, #0]
 8005626:	4916      	ldr	r1, [pc, #88]	; (8005680 <SYSVIEW_AddTask+0xcc>)
 8005628:	4613      	mov	r3, r2
 800562a:	009b      	lsls	r3, r3, #2
 800562c:	4413      	add	r3, r2
 800562e:	009b      	lsls	r3, r3, #2
 8005630:	440b      	add	r3, r1
 8005632:	330c      	adds	r3, #12
 8005634:	683a      	ldr	r2, [r7, #0]
 8005636:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 8005638:	4b0f      	ldr	r3, [pc, #60]	; (8005678 <SYSVIEW_AddTask+0xc4>)
 800563a:	681a      	ldr	r2, [r3, #0]
 800563c:	4910      	ldr	r1, [pc, #64]	; (8005680 <SYSVIEW_AddTask+0xcc>)
 800563e:	4613      	mov	r3, r2
 8005640:	009b      	lsls	r3, r3, #2
 8005642:	4413      	add	r3, r2
 8005644:	009b      	lsls	r3, r3, #2
 8005646:	440b      	add	r3, r1
 8005648:	3310      	adds	r3, #16
 800564a:	69ba      	ldr	r2, [r7, #24]
 800564c:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 800564e:	4b0a      	ldr	r3, [pc, #40]	; (8005678 <SYSVIEW_AddTask+0xc4>)
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	3301      	adds	r3, #1
 8005654:	4a08      	ldr	r2, [pc, #32]	; (8005678 <SYSVIEW_AddTask+0xc4>)
 8005656:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 8005658:	69bb      	ldr	r3, [r7, #24]
 800565a:	9300      	str	r3, [sp, #0]
 800565c:	683b      	ldr	r3, [r7, #0]
 800565e:	687a      	ldr	r2, [r7, #4]
 8005660:	68b9      	ldr	r1, [r7, #8]
 8005662:	68f8      	ldr	r0, [r7, #12]
 8005664:	f000 f8ca 	bl	80057fc <SYSVIEW_SendTaskInfo>
 8005668:	e000      	b.n	800566c <SYSVIEW_AddTask+0xb8>
    return;
 800566a:	bf00      	nop

}
 800566c:	3710      	adds	r7, #16
 800566e:	46bd      	mov	sp, r7
 8005670:	bd80      	pop	{r7, pc}
 8005672:	bf00      	nop
 8005674:	08007850 	.word	0x08007850
 8005678:	20003f14 	.word	0x20003f14
 800567c:	08007858 	.word	0x08007858
 8005680:	20003e74 	.word	0x20003e74

08005684 <SYSVIEW_DeleteTask>:
*       SYSVIEW_DeleteTask()
*
*  Function description
*    Delete a task from the internal list.
*/
void SYSVIEW_DeleteTask(U32 xHandle) {
 8005684:	b580      	push	{r7, lr}
 8005686:	b084      	sub	sp, #16
 8005688:	af00      	add	r7, sp, #0
 800568a:	6078      	str	r0, [r7, #4]
  unsigned n;
  
  if (_NumTasks == 0) {
 800568c:	4b59      	ldr	r3, [pc, #356]	; (80057f4 <SYSVIEW_DeleteTask+0x170>)
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	2b00      	cmp	r3, #0
 8005692:	f000 80ab 	beq.w	80057ec <SYSVIEW_DeleteTask+0x168>
    return; // Early out
  }  
  for (n = 0; n < _NumTasks; n++) {
 8005696:	2300      	movs	r3, #0
 8005698:	60fb      	str	r3, [r7, #12]
 800569a:	e00d      	b.n	80056b8 <SYSVIEW_DeleteTask+0x34>
    if (_aTasks[n].xHandle == xHandle) {
 800569c:	4956      	ldr	r1, [pc, #344]	; (80057f8 <SYSVIEW_DeleteTask+0x174>)
 800569e:	68fa      	ldr	r2, [r7, #12]
 80056a0:	4613      	mov	r3, r2
 80056a2:	009b      	lsls	r3, r3, #2
 80056a4:	4413      	add	r3, r2
 80056a6:	009b      	lsls	r3, r3, #2
 80056a8:	440b      	add	r3, r1
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	687a      	ldr	r2, [r7, #4]
 80056ae:	429a      	cmp	r2, r3
 80056b0:	d008      	beq.n	80056c4 <SYSVIEW_DeleteTask+0x40>
  for (n = 0; n < _NumTasks; n++) {
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	3301      	adds	r3, #1
 80056b6:	60fb      	str	r3, [r7, #12]
 80056b8:	4b4e      	ldr	r3, [pc, #312]	; (80057f4 <SYSVIEW_DeleteTask+0x170>)
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	68fa      	ldr	r2, [r7, #12]
 80056be:	429a      	cmp	r2, r3
 80056c0:	d3ec      	bcc.n	800569c <SYSVIEW_DeleteTask+0x18>
 80056c2:	e000      	b.n	80056c6 <SYSVIEW_DeleteTask+0x42>
      break;
 80056c4:	bf00      	nop
    }
  }
  if (n == (_NumTasks - 1)) {  
 80056c6:	4b4b      	ldr	r3, [pc, #300]	; (80057f4 <SYSVIEW_DeleteTask+0x170>)
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	3b01      	subs	r3, #1
 80056cc:	68fa      	ldr	r2, [r7, #12]
 80056ce:	429a      	cmp	r2, r3
 80056d0:	d111      	bne.n	80056f6 <SYSVIEW_DeleteTask+0x72>
    //
    // Task is last item in list.
    // Simply zero the item and decrement number of tasks.
    //
    memset(&_aTasks[n], 0, sizeof(_aTasks[n]));
 80056d2:	68fa      	ldr	r2, [r7, #12]
 80056d4:	4613      	mov	r3, r2
 80056d6:	009b      	lsls	r3, r3, #2
 80056d8:	4413      	add	r3, r2
 80056da:	009b      	lsls	r3, r3, #2
 80056dc:	4a46      	ldr	r2, [pc, #280]	; (80057f8 <SYSVIEW_DeleteTask+0x174>)
 80056de:	4413      	add	r3, r2
 80056e0:	2214      	movs	r2, #20
 80056e2:	2100      	movs	r1, #0
 80056e4:	4618      	mov	r0, r3
 80056e6:	f001 ffd9 	bl	800769c <memset>
    _NumTasks--;
 80056ea:	4b42      	ldr	r3, [pc, #264]	; (80057f4 <SYSVIEW_DeleteTask+0x170>)
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	3b01      	subs	r3, #1
 80056f0:	4a40      	ldr	r2, [pc, #256]	; (80057f4 <SYSVIEW_DeleteTask+0x170>)
 80056f2:	6013      	str	r3, [r2, #0]
 80056f4:	e07b      	b.n	80057ee <SYSVIEW_DeleteTask+0x16a>
  } else if (n < _NumTasks) {
 80056f6:	4b3f      	ldr	r3, [pc, #252]	; (80057f4 <SYSVIEW_DeleteTask+0x170>)
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	68fa      	ldr	r2, [r7, #12]
 80056fc:	429a      	cmp	r2, r3
 80056fe:	d276      	bcs.n	80057ee <SYSVIEW_DeleteTask+0x16a>
    //
    // Task is in the middle of the list.
    // Move last item to current position and decrement number of tasks.
    // Order of tasks does not really matter, so no need to move all following items.
    //
    _aTasks[n].xHandle             = _aTasks[_NumTasks - 1].xHandle;
 8005700:	4b3c      	ldr	r3, [pc, #240]	; (80057f4 <SYSVIEW_DeleteTask+0x170>)
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	1e5a      	subs	r2, r3, #1
 8005706:	493c      	ldr	r1, [pc, #240]	; (80057f8 <SYSVIEW_DeleteTask+0x174>)
 8005708:	4613      	mov	r3, r2
 800570a:	009b      	lsls	r3, r3, #2
 800570c:	4413      	add	r3, r2
 800570e:	009b      	lsls	r3, r3, #2
 8005710:	440b      	add	r3, r1
 8005712:	6819      	ldr	r1, [r3, #0]
 8005714:	4838      	ldr	r0, [pc, #224]	; (80057f8 <SYSVIEW_DeleteTask+0x174>)
 8005716:	68fa      	ldr	r2, [r7, #12]
 8005718:	4613      	mov	r3, r2
 800571a:	009b      	lsls	r3, r3, #2
 800571c:	4413      	add	r3, r2
 800571e:	009b      	lsls	r3, r3, #2
 8005720:	4403      	add	r3, r0
 8005722:	6019      	str	r1, [r3, #0]
    _aTasks[n].pcTaskName          = _aTasks[_NumTasks - 1].pcTaskName;
 8005724:	4b33      	ldr	r3, [pc, #204]	; (80057f4 <SYSVIEW_DeleteTask+0x170>)
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	1e5a      	subs	r2, r3, #1
 800572a:	4933      	ldr	r1, [pc, #204]	; (80057f8 <SYSVIEW_DeleteTask+0x174>)
 800572c:	4613      	mov	r3, r2
 800572e:	009b      	lsls	r3, r3, #2
 8005730:	4413      	add	r3, r2
 8005732:	009b      	lsls	r3, r3, #2
 8005734:	440b      	add	r3, r1
 8005736:	3304      	adds	r3, #4
 8005738:	6819      	ldr	r1, [r3, #0]
 800573a:	482f      	ldr	r0, [pc, #188]	; (80057f8 <SYSVIEW_DeleteTask+0x174>)
 800573c:	68fa      	ldr	r2, [r7, #12]
 800573e:	4613      	mov	r3, r2
 8005740:	009b      	lsls	r3, r3, #2
 8005742:	4413      	add	r3, r2
 8005744:	009b      	lsls	r3, r3, #2
 8005746:	4403      	add	r3, r0
 8005748:	3304      	adds	r3, #4
 800574a:	6019      	str	r1, [r3, #0]
    _aTasks[n].uxCurrentPriority   = _aTasks[_NumTasks - 1].uxCurrentPriority;
 800574c:	4b29      	ldr	r3, [pc, #164]	; (80057f4 <SYSVIEW_DeleteTask+0x170>)
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	1e5a      	subs	r2, r3, #1
 8005752:	4929      	ldr	r1, [pc, #164]	; (80057f8 <SYSVIEW_DeleteTask+0x174>)
 8005754:	4613      	mov	r3, r2
 8005756:	009b      	lsls	r3, r3, #2
 8005758:	4413      	add	r3, r2
 800575a:	009b      	lsls	r3, r3, #2
 800575c:	440b      	add	r3, r1
 800575e:	3308      	adds	r3, #8
 8005760:	6819      	ldr	r1, [r3, #0]
 8005762:	4825      	ldr	r0, [pc, #148]	; (80057f8 <SYSVIEW_DeleteTask+0x174>)
 8005764:	68fa      	ldr	r2, [r7, #12]
 8005766:	4613      	mov	r3, r2
 8005768:	009b      	lsls	r3, r3, #2
 800576a:	4413      	add	r3, r2
 800576c:	009b      	lsls	r3, r3, #2
 800576e:	4403      	add	r3, r0
 8005770:	3308      	adds	r3, #8
 8005772:	6019      	str	r1, [r3, #0]
    _aTasks[n].pxStack             = _aTasks[_NumTasks - 1].pxStack;
 8005774:	4b1f      	ldr	r3, [pc, #124]	; (80057f4 <SYSVIEW_DeleteTask+0x170>)
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	1e5a      	subs	r2, r3, #1
 800577a:	491f      	ldr	r1, [pc, #124]	; (80057f8 <SYSVIEW_DeleteTask+0x174>)
 800577c:	4613      	mov	r3, r2
 800577e:	009b      	lsls	r3, r3, #2
 8005780:	4413      	add	r3, r2
 8005782:	009b      	lsls	r3, r3, #2
 8005784:	440b      	add	r3, r1
 8005786:	330c      	adds	r3, #12
 8005788:	6819      	ldr	r1, [r3, #0]
 800578a:	481b      	ldr	r0, [pc, #108]	; (80057f8 <SYSVIEW_DeleteTask+0x174>)
 800578c:	68fa      	ldr	r2, [r7, #12]
 800578e:	4613      	mov	r3, r2
 8005790:	009b      	lsls	r3, r3, #2
 8005792:	4413      	add	r3, r2
 8005794:	009b      	lsls	r3, r3, #2
 8005796:	4403      	add	r3, r0
 8005798:	330c      	adds	r3, #12
 800579a:	6019      	str	r1, [r3, #0]
    _aTasks[n].uStackHighWaterMark = _aTasks[_NumTasks - 1].uStackHighWaterMark;
 800579c:	4b15      	ldr	r3, [pc, #84]	; (80057f4 <SYSVIEW_DeleteTask+0x170>)
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	1e5a      	subs	r2, r3, #1
 80057a2:	4915      	ldr	r1, [pc, #84]	; (80057f8 <SYSVIEW_DeleteTask+0x174>)
 80057a4:	4613      	mov	r3, r2
 80057a6:	009b      	lsls	r3, r3, #2
 80057a8:	4413      	add	r3, r2
 80057aa:	009b      	lsls	r3, r3, #2
 80057ac:	440b      	add	r3, r1
 80057ae:	3310      	adds	r3, #16
 80057b0:	6819      	ldr	r1, [r3, #0]
 80057b2:	4811      	ldr	r0, [pc, #68]	; (80057f8 <SYSVIEW_DeleteTask+0x174>)
 80057b4:	68fa      	ldr	r2, [r7, #12]
 80057b6:	4613      	mov	r3, r2
 80057b8:	009b      	lsls	r3, r3, #2
 80057ba:	4413      	add	r3, r2
 80057bc:	009b      	lsls	r3, r3, #2
 80057be:	4403      	add	r3, r0
 80057c0:	3310      	adds	r3, #16
 80057c2:	6019      	str	r1, [r3, #0]
    memset(&_aTasks[_NumTasks - 1], 0, sizeof(_aTasks[_NumTasks - 1]));
 80057c4:	4b0b      	ldr	r3, [pc, #44]	; (80057f4 <SYSVIEW_DeleteTask+0x170>)
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	1e5a      	subs	r2, r3, #1
 80057ca:	4613      	mov	r3, r2
 80057cc:	009b      	lsls	r3, r3, #2
 80057ce:	4413      	add	r3, r2
 80057d0:	009b      	lsls	r3, r3, #2
 80057d2:	4a09      	ldr	r2, [pc, #36]	; (80057f8 <SYSVIEW_DeleteTask+0x174>)
 80057d4:	4413      	add	r3, r2
 80057d6:	2214      	movs	r2, #20
 80057d8:	2100      	movs	r1, #0
 80057da:	4618      	mov	r0, r3
 80057dc:	f001 ff5e 	bl	800769c <memset>
    _NumTasks--;
 80057e0:	4b04      	ldr	r3, [pc, #16]	; (80057f4 <SYSVIEW_DeleteTask+0x170>)
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	3b01      	subs	r3, #1
 80057e6:	4a03      	ldr	r2, [pc, #12]	; (80057f4 <SYSVIEW_DeleteTask+0x170>)
 80057e8:	6013      	str	r3, [r2, #0]
 80057ea:	e000      	b.n	80057ee <SYSVIEW_DeleteTask+0x16a>
    return; // Early out
 80057ec:	bf00      	nop
  }
}
 80057ee:	3710      	adds	r7, #16
 80057f0:	46bd      	mov	sp, r7
 80057f2:	bd80      	pop	{r7, pc}
 80057f4:	20003f14 	.word	0x20003f14
 80057f8:	20003e74 	.word	0x20003e74

080057fc <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 80057fc:	b580      	push	{r7, lr}
 80057fe:	b08a      	sub	sp, #40	; 0x28
 8005800:	af00      	add	r7, sp, #0
 8005802:	60f8      	str	r0, [r7, #12]
 8005804:	60b9      	str	r1, [r7, #8]
 8005806:	607a      	str	r2, [r7, #4]
 8005808:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 800580a:	f107 0314 	add.w	r3, r7, #20
 800580e:	2214      	movs	r2, #20
 8005810:	2100      	movs	r1, #0
 8005812:	4618      	mov	r0, r3
 8005814:	f001 ff42 	bl	800769c <memset>
  TaskInfo.TaskID     = TaskID;
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 800581c:	68bb      	ldr	r3, [r7, #8]
 800581e:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 8005824:	683b      	ldr	r3, [r7, #0]
 8005826:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8005828:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800582a:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 800582c:	f107 0314 	add.w	r3, r7, #20
 8005830:	4618      	mov	r0, r3
 8005832:	f001 fb1d 	bl	8006e70 <SEGGER_SYSVIEW_SendTaskInfo>
}
 8005836:	bf00      	nop
 8005838:	3728      	adds	r7, #40	; 0x28
 800583a:	46bd      	mov	sp, r7
 800583c:	bd80      	pop	{r7, pc}
	...

08005840 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 8005840:	b480      	push	{r7}
 8005842:	b083      	sub	sp, #12
 8005844:	af00      	add	r7, sp, #0
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 8005846:	4b24      	ldr	r3, [pc, #144]	; (80058d8 <_DoInit+0x98>)
 8005848:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	2203      	movs	r2, #3
 800584e:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	2203      	movs	r2, #3
 8005854:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	4a20      	ldr	r2, [pc, #128]	; (80058dc <_DoInit+0x9c>)
 800585a:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	4a20      	ldr	r2, [pc, #128]	; (80058e0 <_DoInit+0xa0>)
 8005860:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005868:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	2200      	movs	r2, #0
 800586e:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	2200      	movs	r2, #0
 8005874:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	2200      	movs	r2, #0
 800587a:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	4a17      	ldr	r2, [pc, #92]	; (80058dc <_DoInit+0x9c>)
 8005880:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	4a17      	ldr	r2, [pc, #92]	; (80058e4 <_DoInit+0xa4>)
 8005886:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	2210      	movs	r2, #16
 800588c:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	2200      	movs	r2, #0
 8005892:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	2200      	movs	r2, #0
 8005898:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	2200      	movs	r2, #0
 800589e:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	3307      	adds	r3, #7
 80058a4:	4a10      	ldr	r2, [pc, #64]	; (80058e8 <_DoInit+0xa8>)
 80058a6:	6810      	ldr	r0, [r2, #0]
 80058a8:	6018      	str	r0, [r3, #0]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 80058aa:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	4a0e      	ldr	r2, [pc, #56]	; (80058ec <_DoInit+0xac>)
 80058b2:	6810      	ldr	r0, [r2, #0]
 80058b4:	6018      	str	r0, [r3, #0]
 80058b6:	8891      	ldrh	r1, [r2, #4]
 80058b8:	7992      	ldrb	r2, [r2, #6]
 80058ba:	8099      	strh	r1, [r3, #4]
 80058bc:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 80058be:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	2220      	movs	r2, #32
 80058c6:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 80058c8:	f3bf 8f5f 	dmb	sy
}
 80058cc:	bf00      	nop
 80058ce:	370c      	adds	r7, #12
 80058d0:	46bd      	mov	sp, r7
 80058d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d6:	4770      	bx	lr
 80058d8:	20003f18 	.word	0x20003f18
 80058dc:	080078a8 	.word	0x080078a8
 80058e0:	20003fc0 	.word	0x20003fc0
 80058e4:	200043c0 	.word	0x200043c0
 80058e8:	080078b4 	.word	0x080078b4
 80058ec:	080078b8 	.word	0x080078b8

080058f0 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 80058f0:	b580      	push	{r7, lr}
 80058f2:	b08c      	sub	sp, #48	; 0x30
 80058f4:	af00      	add	r7, sp, #0
 80058f6:	60f8      	str	r0, [r7, #12]
 80058f8:	60b9      	str	r1, [r7, #8]
 80058fa:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 80058fc:	4b3e      	ldr	r3, [pc, #248]	; (80059f8 <SEGGER_RTT_ReadNoLock+0x108>)
 80058fe:	623b      	str	r3, [r7, #32]
 8005900:	6a3b      	ldr	r3, [r7, #32]
 8005902:	781b      	ldrb	r3, [r3, #0]
 8005904:	b2db      	uxtb	r3, r3
 8005906:	2b00      	cmp	r3, #0
 8005908:	d101      	bne.n	800590e <SEGGER_RTT_ReadNoLock+0x1e>
 800590a:	f7ff ff99 	bl	8005840 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800590e:	68fa      	ldr	r2, [r7, #12]
 8005910:	4613      	mov	r3, r2
 8005912:	005b      	lsls	r3, r3, #1
 8005914:	4413      	add	r3, r2
 8005916:	00db      	lsls	r3, r3, #3
 8005918:	3360      	adds	r3, #96	; 0x60
 800591a:	4a37      	ldr	r2, [pc, #220]	; (80059f8 <SEGGER_RTT_ReadNoLock+0x108>)
 800591c:	4413      	add	r3, r2
 800591e:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8005920:	68bb      	ldr	r3, [r7, #8]
 8005922:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 8005924:	69fb      	ldr	r3, [r7, #28]
 8005926:	691b      	ldr	r3, [r3, #16]
 8005928:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 800592a:	69fb      	ldr	r3, [r7, #28]
 800592c:	68db      	ldr	r3, [r3, #12]
 800592e:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8005930:	2300      	movs	r3, #0
 8005932:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8005934:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005936:	69bb      	ldr	r3, [r7, #24]
 8005938:	429a      	cmp	r2, r3
 800593a:	d92b      	bls.n	8005994 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 800593c:	69fb      	ldr	r3, [r7, #28]
 800593e:	689a      	ldr	r2, [r3, #8]
 8005940:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005942:	1ad3      	subs	r3, r2, r3
 8005944:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8005946:	697a      	ldr	r2, [r7, #20]
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	4293      	cmp	r3, r2
 800594c:	bf28      	it	cs
 800594e:	4613      	movcs	r3, r2
 8005950:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8005952:	69fb      	ldr	r3, [r7, #28]
 8005954:	685a      	ldr	r2, [r3, #4]
 8005956:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005958:	4413      	add	r3, r2
 800595a:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 800595c:	697a      	ldr	r2, [r7, #20]
 800595e:	6939      	ldr	r1, [r7, #16]
 8005960:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005962:	f001 fec7 	bl	80076f4 <memcpy>
    NumBytesRead += NumBytesRem;
 8005966:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005968:	697b      	ldr	r3, [r7, #20]
 800596a:	4413      	add	r3, r2
 800596c:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 800596e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005970:	697b      	ldr	r3, [r7, #20]
 8005972:	4413      	add	r3, r2
 8005974:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8005976:	687a      	ldr	r2, [r7, #4]
 8005978:	697b      	ldr	r3, [r7, #20]
 800597a:	1ad3      	subs	r3, r2, r3
 800597c:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800597e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005980:	697b      	ldr	r3, [r7, #20]
 8005982:	4413      	add	r3, r2
 8005984:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8005986:	69fb      	ldr	r3, [r7, #28]
 8005988:	689b      	ldr	r3, [r3, #8]
 800598a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800598c:	429a      	cmp	r2, r3
 800598e:	d101      	bne.n	8005994 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 8005990:	2300      	movs	r3, #0
 8005992:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8005994:	69ba      	ldr	r2, [r7, #24]
 8005996:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005998:	1ad3      	subs	r3, r2, r3
 800599a:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 800599c:	697a      	ldr	r2, [r7, #20]
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	4293      	cmp	r3, r2
 80059a2:	bf28      	it	cs
 80059a4:	4613      	movcs	r3, r2
 80059a6:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 80059a8:	697b      	ldr	r3, [r7, #20]
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d019      	beq.n	80059e2 <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 80059ae:	69fb      	ldr	r3, [r7, #28]
 80059b0:	685a      	ldr	r2, [r3, #4]
 80059b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059b4:	4413      	add	r3, r2
 80059b6:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 80059b8:	697a      	ldr	r2, [r7, #20]
 80059ba:	6939      	ldr	r1, [r7, #16]
 80059bc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80059be:	f001 fe99 	bl	80076f4 <memcpy>
    NumBytesRead += NumBytesRem;
 80059c2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80059c4:	697b      	ldr	r3, [r7, #20]
 80059c6:	4413      	add	r3, r2
 80059c8:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 80059ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80059cc:	697b      	ldr	r3, [r7, #20]
 80059ce:	4413      	add	r3, r2
 80059d0:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 80059d2:	687a      	ldr	r2, [r7, #4]
 80059d4:	697b      	ldr	r3, [r7, #20]
 80059d6:	1ad3      	subs	r3, r2, r3
 80059d8:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 80059da:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80059dc:	697b      	ldr	r3, [r7, #20]
 80059de:	4413      	add	r3, r2
 80059e0:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 80059e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d002      	beq.n	80059ee <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 80059e8:	69fb      	ldr	r3, [r7, #28]
 80059ea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80059ec:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 80059ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80059f0:	4618      	mov	r0, r3
 80059f2:	3730      	adds	r7, #48	; 0x30
 80059f4:	46bd      	mov	sp, r7
 80059f6:	bd80      	pop	{r7, pc}
 80059f8:	20003f18 	.word	0x20003f18

080059fc <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 80059fc:	b580      	push	{r7, lr}
 80059fe:	b088      	sub	sp, #32
 8005a00:	af00      	add	r7, sp, #0
 8005a02:	60f8      	str	r0, [r7, #12]
 8005a04:	60b9      	str	r1, [r7, #8]
 8005a06:	607a      	str	r2, [r7, #4]
 8005a08:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 8005a0a:	4b3d      	ldr	r3, [pc, #244]	; (8005b00 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8005a0c:	61bb      	str	r3, [r7, #24]
 8005a0e:	69bb      	ldr	r3, [r7, #24]
 8005a10:	781b      	ldrb	r3, [r3, #0]
 8005a12:	b2db      	uxtb	r3, r3
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d101      	bne.n	8005a1c <SEGGER_RTT_AllocUpBuffer+0x20>
 8005a18:	f7ff ff12 	bl	8005840 <_DoInit>
  SEGGER_RTT_LOCK();
 8005a1c:	f3ef 8311 	mrs	r3, BASEPRI
 8005a20:	f04f 0120 	mov.w	r1, #32
 8005a24:	f381 8811 	msr	BASEPRI, r1
 8005a28:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8005a2a:	4b35      	ldr	r3, [pc, #212]	; (8005b00 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8005a2c:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 8005a2e:	2300      	movs	r3, #0
 8005a30:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 8005a32:	6939      	ldr	r1, [r7, #16]
 8005a34:	69fb      	ldr	r3, [r7, #28]
 8005a36:	1c5a      	adds	r2, r3, #1
 8005a38:	4613      	mov	r3, r2
 8005a3a:	005b      	lsls	r3, r3, #1
 8005a3c:	4413      	add	r3, r2
 8005a3e:	00db      	lsls	r3, r3, #3
 8005a40:	440b      	add	r3, r1
 8005a42:	3304      	adds	r3, #4
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d008      	beq.n	8005a5c <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 8005a4a:	69fb      	ldr	r3, [r7, #28]
 8005a4c:	3301      	adds	r3, #1
 8005a4e:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 8005a50:	693b      	ldr	r3, [r7, #16]
 8005a52:	691b      	ldr	r3, [r3, #16]
 8005a54:	69fa      	ldr	r2, [r7, #28]
 8005a56:	429a      	cmp	r2, r3
 8005a58:	dbeb      	blt.n	8005a32 <SEGGER_RTT_AllocUpBuffer+0x36>
 8005a5a:	e000      	b.n	8005a5e <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 8005a5c:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 8005a5e:	693b      	ldr	r3, [r7, #16]
 8005a60:	691b      	ldr	r3, [r3, #16]
 8005a62:	69fa      	ldr	r2, [r7, #28]
 8005a64:	429a      	cmp	r2, r3
 8005a66:	da3f      	bge.n	8005ae8 <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 8005a68:	6939      	ldr	r1, [r7, #16]
 8005a6a:	69fb      	ldr	r3, [r7, #28]
 8005a6c:	1c5a      	adds	r2, r3, #1
 8005a6e:	4613      	mov	r3, r2
 8005a70:	005b      	lsls	r3, r3, #1
 8005a72:	4413      	add	r3, r2
 8005a74:	00db      	lsls	r3, r3, #3
 8005a76:	440b      	add	r3, r1
 8005a78:	68fa      	ldr	r2, [r7, #12]
 8005a7a:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8005a7c:	6939      	ldr	r1, [r7, #16]
 8005a7e:	69fb      	ldr	r3, [r7, #28]
 8005a80:	1c5a      	adds	r2, r3, #1
 8005a82:	4613      	mov	r3, r2
 8005a84:	005b      	lsls	r3, r3, #1
 8005a86:	4413      	add	r3, r2
 8005a88:	00db      	lsls	r3, r3, #3
 8005a8a:	440b      	add	r3, r1
 8005a8c:	3304      	adds	r3, #4
 8005a8e:	68ba      	ldr	r2, [r7, #8]
 8005a90:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 8005a92:	6939      	ldr	r1, [r7, #16]
 8005a94:	69fa      	ldr	r2, [r7, #28]
 8005a96:	4613      	mov	r3, r2
 8005a98:	005b      	lsls	r3, r3, #1
 8005a9a:	4413      	add	r3, r2
 8005a9c:	00db      	lsls	r3, r3, #3
 8005a9e:	440b      	add	r3, r1
 8005aa0:	3320      	adds	r3, #32
 8005aa2:	687a      	ldr	r2, [r7, #4]
 8005aa4:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 8005aa6:	6939      	ldr	r1, [r7, #16]
 8005aa8:	69fa      	ldr	r2, [r7, #28]
 8005aaa:	4613      	mov	r3, r2
 8005aac:	005b      	lsls	r3, r3, #1
 8005aae:	4413      	add	r3, r2
 8005ab0:	00db      	lsls	r3, r3, #3
 8005ab2:	440b      	add	r3, r1
 8005ab4:	3328      	adds	r3, #40	; 0x28
 8005ab6:	2200      	movs	r2, #0
 8005ab8:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 8005aba:	6939      	ldr	r1, [r7, #16]
 8005abc:	69fa      	ldr	r2, [r7, #28]
 8005abe:	4613      	mov	r3, r2
 8005ac0:	005b      	lsls	r3, r3, #1
 8005ac2:	4413      	add	r3, r2
 8005ac4:	00db      	lsls	r3, r3, #3
 8005ac6:	440b      	add	r3, r1
 8005ac8:	3324      	adds	r3, #36	; 0x24
 8005aca:	2200      	movs	r2, #0
 8005acc:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 8005ace:	6939      	ldr	r1, [r7, #16]
 8005ad0:	69fa      	ldr	r2, [r7, #28]
 8005ad2:	4613      	mov	r3, r2
 8005ad4:	005b      	lsls	r3, r3, #1
 8005ad6:	4413      	add	r3, r2
 8005ad8:	00db      	lsls	r3, r3, #3
 8005ada:	440b      	add	r3, r1
 8005adc:	332c      	adds	r3, #44	; 0x2c
 8005ade:	683a      	ldr	r2, [r7, #0]
 8005ae0:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8005ae2:	f3bf 8f5f 	dmb	sy
 8005ae6:	e002      	b.n	8005aee <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 8005ae8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005aec:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 8005aee:	697b      	ldr	r3, [r7, #20]
 8005af0:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 8005af4:	69fb      	ldr	r3, [r7, #28]
}
 8005af6:	4618      	mov	r0, r3
 8005af8:	3720      	adds	r7, #32
 8005afa:	46bd      	mov	sp, r7
 8005afc:	bd80      	pop	{r7, pc}
 8005afe:	bf00      	nop
 8005b00:	20003f18 	.word	0x20003f18

08005b04 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8005b04:	b580      	push	{r7, lr}
 8005b06:	b088      	sub	sp, #32
 8005b08:	af00      	add	r7, sp, #0
 8005b0a:	60f8      	str	r0, [r7, #12]
 8005b0c:	60b9      	str	r1, [r7, #8]
 8005b0e:	607a      	str	r2, [r7, #4]
 8005b10:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 8005b12:	4b33      	ldr	r3, [pc, #204]	; (8005be0 <SEGGER_RTT_ConfigDownBuffer+0xdc>)
 8005b14:	61bb      	str	r3, [r7, #24]
 8005b16:	69bb      	ldr	r3, [r7, #24]
 8005b18:	781b      	ldrb	r3, [r3, #0]
 8005b1a:	b2db      	uxtb	r3, r3
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d101      	bne.n	8005b24 <SEGGER_RTT_ConfigDownBuffer+0x20>
 8005b20:	f7ff fe8e 	bl	8005840 <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8005b24:	4b2e      	ldr	r3, [pc, #184]	; (8005be0 <SEGGER_RTT_ConfigDownBuffer+0xdc>)
 8005b26:	617b      	str	r3, [r7, #20]
  if (BufferIndex < (unsigned)pRTTCB->MaxNumDownBuffers) {
 8005b28:	697b      	ldr	r3, [r7, #20]
 8005b2a:	695b      	ldr	r3, [r3, #20]
 8005b2c:	461a      	mov	r2, r3
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	4293      	cmp	r3, r2
 8005b32:	d24d      	bcs.n	8005bd0 <SEGGER_RTT_ConfigDownBuffer+0xcc>
    SEGGER_RTT_LOCK();
 8005b34:	f3ef 8311 	mrs	r3, BASEPRI
 8005b38:	f04f 0120 	mov.w	r1, #32
 8005b3c:	f381 8811 	msr	BASEPRI, r1
 8005b40:	613b      	str	r3, [r7, #16]
    if (BufferIndex > 0u) {
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d031      	beq.n	8005bac <SEGGER_RTT_ConfigDownBuffer+0xa8>
      pRTTCB->aDown[BufferIndex].sName        = sName;
 8005b48:	6979      	ldr	r1, [r7, #20]
 8005b4a:	68fa      	ldr	r2, [r7, #12]
 8005b4c:	4613      	mov	r3, r2
 8005b4e:	005b      	lsls	r3, r3, #1
 8005b50:	4413      	add	r3, r2
 8005b52:	00db      	lsls	r3, r3, #3
 8005b54:	440b      	add	r3, r1
 8005b56:	3360      	adds	r3, #96	; 0x60
 8005b58:	68ba      	ldr	r2, [r7, #8]
 8005b5a:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].pBuffer      = (char*)pBuffer;
 8005b5c:	6979      	ldr	r1, [r7, #20]
 8005b5e:	68fa      	ldr	r2, [r7, #12]
 8005b60:	4613      	mov	r3, r2
 8005b62:	005b      	lsls	r3, r3, #1
 8005b64:	4413      	add	r3, r2
 8005b66:	00db      	lsls	r3, r3, #3
 8005b68:	440b      	add	r3, r1
 8005b6a:	3364      	adds	r3, #100	; 0x64
 8005b6c:	687a      	ldr	r2, [r7, #4]
 8005b6e:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].SizeOfBuffer = BufferSize;
 8005b70:	6979      	ldr	r1, [r7, #20]
 8005b72:	68fa      	ldr	r2, [r7, #12]
 8005b74:	4613      	mov	r3, r2
 8005b76:	005b      	lsls	r3, r3, #1
 8005b78:	4413      	add	r3, r2
 8005b7a:	00db      	lsls	r3, r3, #3
 8005b7c:	440b      	add	r3, r1
 8005b7e:	3368      	adds	r3, #104	; 0x68
 8005b80:	683a      	ldr	r2, [r7, #0]
 8005b82:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].RdOff        = 0u;
 8005b84:	6979      	ldr	r1, [r7, #20]
 8005b86:	68fa      	ldr	r2, [r7, #12]
 8005b88:	4613      	mov	r3, r2
 8005b8a:	005b      	lsls	r3, r3, #1
 8005b8c:	4413      	add	r3, r2
 8005b8e:	00db      	lsls	r3, r3, #3
 8005b90:	440b      	add	r3, r1
 8005b92:	3370      	adds	r3, #112	; 0x70
 8005b94:	2200      	movs	r2, #0
 8005b96:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].WrOff        = 0u;
 8005b98:	6979      	ldr	r1, [r7, #20]
 8005b9a:	68fa      	ldr	r2, [r7, #12]
 8005b9c:	4613      	mov	r3, r2
 8005b9e:	005b      	lsls	r3, r3, #1
 8005ba0:	4413      	add	r3, r2
 8005ba2:	00db      	lsls	r3, r3, #3
 8005ba4:	440b      	add	r3, r1
 8005ba6:	336c      	adds	r3, #108	; 0x6c
 8005ba8:	2200      	movs	r2, #0
 8005baa:	601a      	str	r2, [r3, #0]
    }
    pRTTCB->aDown[BufferIndex].Flags          = Flags;
 8005bac:	6979      	ldr	r1, [r7, #20]
 8005bae:	68fa      	ldr	r2, [r7, #12]
 8005bb0:	4613      	mov	r3, r2
 8005bb2:	005b      	lsls	r3, r3, #1
 8005bb4:	4413      	add	r3, r2
 8005bb6:	00db      	lsls	r3, r3, #3
 8005bb8:	440b      	add	r3, r1
 8005bba:	3374      	adds	r3, #116	; 0x74
 8005bbc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005bbe:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8005bc0:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 8005bc4:	693b      	ldr	r3, [r7, #16]
 8005bc6:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 8005bca:	2300      	movs	r3, #0
 8005bcc:	61fb      	str	r3, [r7, #28]
 8005bce:	e002      	b.n	8005bd6 <SEGGER_RTT_ConfigDownBuffer+0xd2>
  } else {
    r = -1;
 8005bd0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005bd4:	61fb      	str	r3, [r7, #28]
  }
  return r;
 8005bd6:	69fb      	ldr	r3, [r7, #28]
}
 8005bd8:	4618      	mov	r0, r3
 8005bda:	3720      	adds	r7, #32
 8005bdc:	46bd      	mov	sp, r7
 8005bde:	bd80      	pop	{r7, pc}
 8005be0:	20003f18 	.word	0x20003f18

08005be4 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8005be4:	b480      	push	{r7}
 8005be6:	b087      	sub	sp, #28
 8005be8:	af00      	add	r7, sp, #0
 8005bea:	60f8      	str	r0, [r7, #12]
 8005bec:	60b9      	str	r1, [r7, #8]
 8005bee:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 8005bf0:	2300      	movs	r3, #0
 8005bf2:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 8005bf4:	e002      	b.n	8005bfc <_EncodeStr+0x18>
    Len++;
 8005bf6:	693b      	ldr	r3, [r7, #16]
 8005bf8:	3301      	adds	r3, #1
 8005bfa:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 8005bfc:	68ba      	ldr	r2, [r7, #8]
 8005bfe:	693b      	ldr	r3, [r7, #16]
 8005c00:	4413      	add	r3, r2
 8005c02:	781b      	ldrb	r3, [r3, #0]
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d1f6      	bne.n	8005bf6 <_EncodeStr+0x12>
  }
  if (Len > Limit) {
 8005c08:	693a      	ldr	r2, [r7, #16]
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	429a      	cmp	r2, r3
 8005c0e:	d901      	bls.n	8005c14 <_EncodeStr+0x30>
    Len = Limit;
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	613b      	str	r3, [r7, #16]
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 8005c14:	693b      	ldr	r3, [r7, #16]
 8005c16:	2bfe      	cmp	r3, #254	; 0xfe
 8005c18:	d806      	bhi.n	8005c28 <_EncodeStr+0x44>
    *pPayload++ = Len; 
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	1c5a      	adds	r2, r3, #1
 8005c1e:	60fa      	str	r2, [r7, #12]
 8005c20:	693a      	ldr	r2, [r7, #16]
 8005c22:	b2d2      	uxtb	r2, r2
 8005c24:	701a      	strb	r2, [r3, #0]
 8005c26:	e011      	b.n	8005c4c <_EncodeStr+0x68>
  } else {
    *pPayload++ = 255;
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	1c5a      	adds	r2, r3, #1
 8005c2c:	60fa      	str	r2, [r7, #12]
 8005c2e:	22ff      	movs	r2, #255	; 0xff
 8005c30:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	1c5a      	adds	r2, r3, #1
 8005c36:	60fa      	str	r2, [r7, #12]
 8005c38:	693a      	ldr	r2, [r7, #16]
 8005c3a:	b2d2      	uxtb	r2, r2
 8005c3c:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 8005c3e:	693b      	ldr	r3, [r7, #16]
 8005c40:	0a19      	lsrs	r1, r3, #8
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	1c5a      	adds	r2, r3, #1
 8005c46:	60fa      	str	r2, [r7, #12]
 8005c48:	b2ca      	uxtb	r2, r1
 8005c4a:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 8005c4c:	2300      	movs	r3, #0
 8005c4e:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8005c50:	e00a      	b.n	8005c68 <_EncodeStr+0x84>
    *pPayload++ = *pText++;
 8005c52:	68ba      	ldr	r2, [r7, #8]
 8005c54:	1c53      	adds	r3, r2, #1
 8005c56:	60bb      	str	r3, [r7, #8]
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	1c59      	adds	r1, r3, #1
 8005c5c:	60f9      	str	r1, [r7, #12]
 8005c5e:	7812      	ldrb	r2, [r2, #0]
 8005c60:	701a      	strb	r2, [r3, #0]
    n++;
 8005c62:	697b      	ldr	r3, [r7, #20]
 8005c64:	3301      	adds	r3, #1
 8005c66:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8005c68:	697a      	ldr	r2, [r7, #20]
 8005c6a:	693b      	ldr	r3, [r7, #16]
 8005c6c:	429a      	cmp	r2, r3
 8005c6e:	d3f0      	bcc.n	8005c52 <_EncodeStr+0x6e>
  }
  return pPayload;
 8005c70:	68fb      	ldr	r3, [r7, #12]
}
 8005c72:	4618      	mov	r0, r3
 8005c74:	371c      	adds	r7, #28
 8005c76:	46bd      	mov	sp, r7
 8005c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c7c:	4770      	bx	lr

08005c7e <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8005c7e:	b480      	push	{r7}
 8005c80:	b083      	sub	sp, #12
 8005c82:	af00      	add	r7, sp, #0
 8005c84:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	3304      	adds	r3, #4
}
 8005c8a:	4618      	mov	r0, r3
 8005c8c:	370c      	adds	r7, #12
 8005c8e:	46bd      	mov	sp, r7
 8005c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c94:	4770      	bx	lr
	...

08005c98 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8005c98:	b580      	push	{r7, lr}
 8005c9a:	b082      	sub	sp, #8
 8005c9c:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8005c9e:	4b35      	ldr	r3, [pc, #212]	; (8005d74 <_HandleIncomingPacket+0xdc>)
 8005ca0:	7e1b      	ldrb	r3, [r3, #24]
 8005ca2:	4618      	mov	r0, r3
 8005ca4:	1cfb      	adds	r3, r7, #3
 8005ca6:	2201      	movs	r2, #1
 8005ca8:	4619      	mov	r1, r3
 8005caa:	f7ff fe21 	bl	80058f0 <SEGGER_RTT_ReadNoLock>
 8005cae:	4603      	mov	r3, r0
 8005cb0:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	dd59      	ble.n	8005d6c <_HandleIncomingPacket+0xd4>
    switch (Cmd) {
 8005cb8:	78fb      	ldrb	r3, [r7, #3]
 8005cba:	2b80      	cmp	r3, #128	; 0x80
 8005cbc:	d032      	beq.n	8005d24 <_HandleIncomingPacket+0x8c>
 8005cbe:	2b80      	cmp	r3, #128	; 0x80
 8005cc0:	dc42      	bgt.n	8005d48 <_HandleIncomingPacket+0xb0>
 8005cc2:	2b07      	cmp	r3, #7
 8005cc4:	dc16      	bgt.n	8005cf4 <_HandleIncomingPacket+0x5c>
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	dd3e      	ble.n	8005d48 <_HandleIncomingPacket+0xb0>
 8005cca:	3b01      	subs	r3, #1
 8005ccc:	2b06      	cmp	r3, #6
 8005cce:	d83b      	bhi.n	8005d48 <_HandleIncomingPacket+0xb0>
 8005cd0:	a201      	add	r2, pc, #4	; (adr r2, 8005cd8 <_HandleIncomingPacket+0x40>)
 8005cd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cd6:	bf00      	nop
 8005cd8:	08005cfb 	.word	0x08005cfb
 8005cdc:	08005d01 	.word	0x08005d01
 8005ce0:	08005d07 	.word	0x08005d07
 8005ce4:	08005d0d 	.word	0x08005d0d
 8005ce8:	08005d13 	.word	0x08005d13
 8005cec:	08005d19 	.word	0x08005d19
 8005cf0:	08005d1f 	.word	0x08005d1f
 8005cf4:	2b7f      	cmp	r3, #127	; 0x7f
 8005cf6:	d034      	beq.n	8005d62 <_HandleIncomingPacket+0xca>
 8005cf8:	e026      	b.n	8005d48 <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 8005cfa:	f000 ff3f 	bl	8006b7c <SEGGER_SYSVIEW_Start>
      break;
 8005cfe:	e035      	b.n	8005d6c <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8005d00:	f000 fff6 	bl	8006cf0 <SEGGER_SYSVIEW_Stop>
      break;
 8005d04:	e032      	b.n	8005d6c <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 8005d06:	f001 f9cf 	bl	80070a8 <SEGGER_SYSVIEW_RecordSystime>
      break;
 8005d0a:	e02f      	b.n	8005d6c <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8005d0c:	f001 f994 	bl	8007038 <SEGGER_SYSVIEW_SendTaskList>
      break;
 8005d10:	e02c      	b.n	8005d6c <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 8005d12:	f001 f813 	bl	8006d3c <SEGGER_SYSVIEW_GetSysDesc>
      break;
 8005d16:	e029      	b.n	8005d6c <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8005d18:	f001 fc02 	bl	8007520 <SEGGER_SYSVIEW_SendNumModules>
      break;
 8005d1c:	e026      	b.n	8005d6c <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 8005d1e:	f001 fbe1 	bl	80074e4 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 8005d22:	e023      	b.n	8005d6c <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8005d24:	4b13      	ldr	r3, [pc, #76]	; (8005d74 <_HandleIncomingPacket+0xdc>)
 8005d26:	7e1b      	ldrb	r3, [r3, #24]
 8005d28:	4618      	mov	r0, r3
 8005d2a:	1cfb      	adds	r3, r7, #3
 8005d2c:	2201      	movs	r2, #1
 8005d2e:	4619      	mov	r1, r3
 8005d30:	f7ff fdde 	bl	80058f0 <SEGGER_RTT_ReadNoLock>
 8005d34:	4603      	mov	r3, r0
 8005d36:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	dd13      	ble.n	8005d66 <_HandleIncomingPacket+0xce>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8005d3e:	78fb      	ldrb	r3, [r7, #3]
 8005d40:	4618      	mov	r0, r3
 8005d42:	f001 fb4f 	bl	80073e4 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 8005d46:	e00e      	b.n	8005d66 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 8005d48:	78fb      	ldrb	r3, [r7, #3]
 8005d4a:	b25b      	sxtb	r3, r3
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	da0c      	bge.n	8005d6a <_HandleIncomingPacket+0xd2>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8005d50:	4b08      	ldr	r3, [pc, #32]	; (8005d74 <_HandleIncomingPacket+0xdc>)
 8005d52:	7e1b      	ldrb	r3, [r3, #24]
 8005d54:	4618      	mov	r0, r3
 8005d56:	1cfb      	adds	r3, r7, #3
 8005d58:	2201      	movs	r2, #1
 8005d5a:	4619      	mov	r1, r3
 8005d5c:	f7ff fdc8 	bl	80058f0 <SEGGER_RTT_ReadNoLock>
      }
      break;
 8005d60:	e003      	b.n	8005d6a <_HandleIncomingPacket+0xd2>
      break;
 8005d62:	bf00      	nop
 8005d64:	e002      	b.n	8005d6c <_HandleIncomingPacket+0xd4>
      break;
 8005d66:	bf00      	nop
 8005d68:	e000      	b.n	8005d6c <_HandleIncomingPacket+0xd4>
      break;
 8005d6a:	bf00      	nop
    }
  }
}
 8005d6c:	bf00      	nop
 8005d6e:	3708      	adds	r7, #8
 8005d70:	46bd      	mov	sp, r7
 8005d72:	bd80      	pop	{r7, pc}
 8005d74:	200083d8 	.word	0x200083d8

08005d78 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8005d78:	b580      	push	{r7, lr}
 8005d7a:	b08c      	sub	sp, #48	; 0x30
 8005d7c:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 8005d7e:	2301      	movs	r3, #1
 8005d80:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 8005d82:	1d3b      	adds	r3, r7, #4
 8005d84:	3301      	adds	r3, #1
 8005d86:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8005d88:	69fb      	ldr	r3, [r7, #28]
 8005d8a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005d8c:	4b31      	ldr	r3, [pc, #196]	; (8005e54 <_TrySendOverflowPacket+0xdc>)
 8005d8e:	695b      	ldr	r3, [r3, #20]
 8005d90:	62bb      	str	r3, [r7, #40]	; 0x28
 8005d92:	e00b      	b.n	8005dac <_TrySendOverflowPacket+0x34>
 8005d94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d96:	b2da      	uxtb	r2, r3
 8005d98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d9a:	1c59      	adds	r1, r3, #1
 8005d9c:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005d9e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005da2:	b2d2      	uxtb	r2, r2
 8005da4:	701a      	strb	r2, [r3, #0]
 8005da6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005da8:	09db      	lsrs	r3, r3, #7
 8005daa:	62bb      	str	r3, [r7, #40]	; 0x28
 8005dac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dae:	2b7f      	cmp	r3, #127	; 0x7f
 8005db0:	d8f0      	bhi.n	8005d94 <_TrySendOverflowPacket+0x1c>
 8005db2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005db4:	1c5a      	adds	r2, r3, #1
 8005db6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005db8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005dba:	b2d2      	uxtb	r2, r2
 8005dbc:	701a      	strb	r2, [r3, #0]
 8005dbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005dc0:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8005dc2:	4b25      	ldr	r3, [pc, #148]	; (8005e58 <_TrySendOverflowPacket+0xe0>)
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8005dc8:	4b22      	ldr	r3, [pc, #136]	; (8005e54 <_TrySendOverflowPacket+0xdc>)
 8005dca:	68db      	ldr	r3, [r3, #12]
 8005dcc:	69ba      	ldr	r2, [r7, #24]
 8005dce:	1ad3      	subs	r3, r2, r3
 8005dd0:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 8005dd2:	69fb      	ldr	r3, [r7, #28]
 8005dd4:	627b      	str	r3, [r7, #36]	; 0x24
 8005dd6:	697b      	ldr	r3, [r7, #20]
 8005dd8:	623b      	str	r3, [r7, #32]
 8005dda:	e00b      	b.n	8005df4 <_TrySendOverflowPacket+0x7c>
 8005ddc:	6a3b      	ldr	r3, [r7, #32]
 8005dde:	b2da      	uxtb	r2, r3
 8005de0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005de2:	1c59      	adds	r1, r3, #1
 8005de4:	6279      	str	r1, [r7, #36]	; 0x24
 8005de6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005dea:	b2d2      	uxtb	r2, r2
 8005dec:	701a      	strb	r2, [r3, #0]
 8005dee:	6a3b      	ldr	r3, [r7, #32]
 8005df0:	09db      	lsrs	r3, r3, #7
 8005df2:	623b      	str	r3, [r7, #32]
 8005df4:	6a3b      	ldr	r3, [r7, #32]
 8005df6:	2b7f      	cmp	r3, #127	; 0x7f
 8005df8:	d8f0      	bhi.n	8005ddc <_TrySendOverflowPacket+0x64>
 8005dfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dfc:	1c5a      	adds	r2, r3, #1
 8005dfe:	627a      	str	r2, [r7, #36]	; 0x24
 8005e00:	6a3a      	ldr	r2, [r7, #32]
 8005e02:	b2d2      	uxtb	r2, r2
 8005e04:	701a      	strb	r2, [r3, #0]
 8005e06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e08:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 8005e0a:	4b12      	ldr	r3, [pc, #72]	; (8005e54 <_TrySendOverflowPacket+0xdc>)
 8005e0c:	785b      	ldrb	r3, [r3, #1]
 8005e0e:	4618      	mov	r0, r3
 8005e10:	1d3b      	adds	r3, r7, #4
 8005e12:	69fa      	ldr	r2, [r7, #28]
 8005e14:	1ad3      	subs	r3, r2, r3
 8005e16:	461a      	mov	r2, r3
 8005e18:	1d3b      	adds	r3, r7, #4
 8005e1a:	4619      	mov	r1, r3
 8005e1c:	f7fa f9d8 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8005e20:	4603      	mov	r3, r0
 8005e22:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
  if (Status) {
 8005e24:	693b      	ldr	r3, [r7, #16]
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d009      	beq.n	8005e3e <_TrySendOverflowPacket+0xc6>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8005e2a:	4a0a      	ldr	r2, [pc, #40]	; (8005e54 <_TrySendOverflowPacket+0xdc>)
 8005e2c:	69bb      	ldr	r3, [r7, #24]
 8005e2e:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8005e30:	4b08      	ldr	r3, [pc, #32]	; (8005e54 <_TrySendOverflowPacket+0xdc>)
 8005e32:	781b      	ldrb	r3, [r3, #0]
 8005e34:	3b01      	subs	r3, #1
 8005e36:	b2da      	uxtb	r2, r3
 8005e38:	4b06      	ldr	r3, [pc, #24]	; (8005e54 <_TrySendOverflowPacket+0xdc>)
 8005e3a:	701a      	strb	r2, [r3, #0]
 8005e3c:	e004      	b.n	8005e48 <_TrySendOverflowPacket+0xd0>
  } else {
    _SYSVIEW_Globals.DropCount++;
 8005e3e:	4b05      	ldr	r3, [pc, #20]	; (8005e54 <_TrySendOverflowPacket+0xdc>)
 8005e40:	695b      	ldr	r3, [r3, #20]
 8005e42:	3301      	adds	r3, #1
 8005e44:	4a03      	ldr	r2, [pc, #12]	; (8005e54 <_TrySendOverflowPacket+0xdc>)
 8005e46:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8005e48:	693b      	ldr	r3, [r7, #16]
}
 8005e4a:	4618      	mov	r0, r3
 8005e4c:	3730      	adds	r7, #48	; 0x30
 8005e4e:	46bd      	mov	sp, r7
 8005e50:	bd80      	pop	{r7, pc}
 8005e52:	bf00      	nop
 8005e54:	200083d8 	.word	0x200083d8
 8005e58:	e0001004 	.word	0xe0001004

08005e5c <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8005e5c:	b580      	push	{r7, lr}
 8005e5e:	b08a      	sub	sp, #40	; 0x28
 8005e60:	af00      	add	r7, sp, #0
 8005e62:	60f8      	str	r0, [r7, #12]
 8005e64:	60b9      	str	r1, [r7, #8]
 8005e66:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8005e68:	4b6c      	ldr	r3, [pc, #432]	; (800601c <_SendPacket+0x1c0>)
 8005e6a:	781b      	ldrb	r3, [r3, #0]
 8005e6c:	2b01      	cmp	r3, #1
 8005e6e:	d010      	beq.n	8005e92 <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8005e70:	4b6a      	ldr	r3, [pc, #424]	; (800601c <_SendPacket+0x1c0>)
 8005e72:	781b      	ldrb	r3, [r3, #0]
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	f000 80a3 	beq.w	8005fc0 <_SendPacket+0x164>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 8005e7a:	4b68      	ldr	r3, [pc, #416]	; (800601c <_SendPacket+0x1c0>)
 8005e7c:	781b      	ldrb	r3, [r3, #0]
 8005e7e:	2b02      	cmp	r3, #2
 8005e80:	d109      	bne.n	8005e96 <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 8005e82:	f7ff ff79 	bl	8005d78 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 8005e86:	4b65      	ldr	r3, [pc, #404]	; (800601c <_SendPacket+0x1c0>)
 8005e88:	781b      	ldrb	r3, [r3, #0]
 8005e8a:	2b01      	cmp	r3, #1
 8005e8c:	f040 809a 	bne.w	8005fc4 <_SendPacket+0x168>
      goto SendDone;
    }
  }
Send:
 8005e90:	e001      	b.n	8005e96 <_SendPacket+0x3a>
    goto Send;
 8005e92:	bf00      	nop
 8005e94:	e000      	b.n	8005e98 <_SendPacket+0x3c>
Send:
 8005e96:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	2b1f      	cmp	r3, #31
 8005e9c:	d809      	bhi.n	8005eb2 <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 8005e9e:	4b5f      	ldr	r3, [pc, #380]	; (800601c <_SendPacket+0x1c0>)
 8005ea0:	69da      	ldr	r2, [r3, #28]
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	fa22 f303 	lsr.w	r3, r2, r3
 8005ea8:	f003 0301 	and.w	r3, r3, #1
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	f040 808b 	bne.w	8005fc8 <_SendPacket+0x16c>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	2b17      	cmp	r3, #23
 8005eb6:	d807      	bhi.n	8005ec8 <_SendPacket+0x6c>
    *--pStartPacket = EventId;
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	3b01      	subs	r3, #1
 8005ebc:	60fb      	str	r3, [r7, #12]
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	b2da      	uxtb	r2, r3
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	701a      	strb	r2, [r3, #0]
 8005ec6:	e03d      	b.n	8005f44 <_SendPacket+0xe8>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 8005ec8:	68ba      	ldr	r2, [r7, #8]
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	1ad3      	subs	r3, r2, r3
 8005ece:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 8005ed0:	69fb      	ldr	r3, [r7, #28]
 8005ed2:	2b7f      	cmp	r3, #127	; 0x7f
 8005ed4:	d912      	bls.n	8005efc <_SendPacket+0xa0>
      *--pStartPacket = (NumBytes >> 7);
 8005ed6:	69fb      	ldr	r3, [r7, #28]
 8005ed8:	09da      	lsrs	r2, r3, #7
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	3b01      	subs	r3, #1
 8005ede:	60fb      	str	r3, [r7, #12]
 8005ee0:	b2d2      	uxtb	r2, r2
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 8005ee6:	69fb      	ldr	r3, [r7, #28]
 8005ee8:	b2db      	uxtb	r3, r3
 8005eea:	68fa      	ldr	r2, [r7, #12]
 8005eec:	3a01      	subs	r2, #1
 8005eee:	60fa      	str	r2, [r7, #12]
 8005ef0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005ef4:	b2da      	uxtb	r2, r3
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	701a      	strb	r2, [r3, #0]
 8005efa:	e006      	b.n	8005f0a <_SendPacket+0xae>
    } else {
      *--pStartPacket = NumBytes;
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	3b01      	subs	r3, #1
 8005f00:	60fb      	str	r3, [r7, #12]
 8005f02:	69fb      	ldr	r3, [r7, #28]
 8005f04:	b2da      	uxtb	r2, r3
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	2b7f      	cmp	r3, #127	; 0x7f
 8005f0e:	d912      	bls.n	8005f36 <_SendPacket+0xda>
      *--pStartPacket = (EventId >> 7);
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	09da      	lsrs	r2, r3, #7
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	3b01      	subs	r3, #1
 8005f18:	60fb      	str	r3, [r7, #12]
 8005f1a:	b2d2      	uxtb	r2, r2
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	b2db      	uxtb	r3, r3
 8005f24:	68fa      	ldr	r2, [r7, #12]
 8005f26:	3a01      	subs	r2, #1
 8005f28:	60fa      	str	r2, [r7, #12]
 8005f2a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005f2e:	b2da      	uxtb	r2, r3
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	701a      	strb	r2, [r3, #0]
 8005f34:	e006      	b.n	8005f44 <_SendPacket+0xe8>
    } else {
      *--pStartPacket = EventId;
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	3b01      	subs	r3, #1
 8005f3a:	60fb      	str	r3, [r7, #12]
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	b2da      	uxtb	r2, r3
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8005f44:	4b36      	ldr	r3, [pc, #216]	; (8006020 <_SendPacket+0x1c4>)
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8005f4a:	4b34      	ldr	r3, [pc, #208]	; (800601c <_SendPacket+0x1c0>)
 8005f4c:	68db      	ldr	r3, [r3, #12]
 8005f4e:	69ba      	ldr	r2, [r7, #24]
 8005f50:	1ad3      	subs	r3, r2, r3
 8005f52:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8005f54:	68bb      	ldr	r3, [r7, #8]
 8005f56:	627b      	str	r3, [r7, #36]	; 0x24
 8005f58:	697b      	ldr	r3, [r7, #20]
 8005f5a:	623b      	str	r3, [r7, #32]
 8005f5c:	e00b      	b.n	8005f76 <_SendPacket+0x11a>
 8005f5e:	6a3b      	ldr	r3, [r7, #32]
 8005f60:	b2da      	uxtb	r2, r3
 8005f62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f64:	1c59      	adds	r1, r3, #1
 8005f66:	6279      	str	r1, [r7, #36]	; 0x24
 8005f68:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005f6c:	b2d2      	uxtb	r2, r2
 8005f6e:	701a      	strb	r2, [r3, #0]
 8005f70:	6a3b      	ldr	r3, [r7, #32]
 8005f72:	09db      	lsrs	r3, r3, #7
 8005f74:	623b      	str	r3, [r7, #32]
 8005f76:	6a3b      	ldr	r3, [r7, #32]
 8005f78:	2b7f      	cmp	r3, #127	; 0x7f
 8005f7a:	d8f0      	bhi.n	8005f5e <_SendPacket+0x102>
 8005f7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f7e:	1c5a      	adds	r2, r3, #1
 8005f80:	627a      	str	r2, [r7, #36]	; 0x24
 8005f82:	6a3a      	ldr	r2, [r7, #32]
 8005f84:	b2d2      	uxtb	r2, r2
 8005f86:	701a      	strb	r2, [r3, #0]
 8005f88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f8a:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 8005f8c:	4b23      	ldr	r3, [pc, #140]	; (800601c <_SendPacket+0x1c0>)
 8005f8e:	785b      	ldrb	r3, [r3, #1]
 8005f90:	4618      	mov	r0, r3
 8005f92:	68ba      	ldr	r2, [r7, #8]
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	1ad3      	subs	r3, r2, r3
 8005f98:	461a      	mov	r2, r3
 8005f9a:	68f9      	ldr	r1, [r7, #12]
 8005f9c:	f7fa f918 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8005fa0:	4603      	mov	r3, r0
 8005fa2:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
  if (Status) {
 8005fa4:	693b      	ldr	r3, [r7, #16]
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d003      	beq.n	8005fb2 <_SendPacket+0x156>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8005faa:	4a1c      	ldr	r2, [pc, #112]	; (800601c <_SendPacket+0x1c0>)
 8005fac:	69bb      	ldr	r3, [r7, #24]
 8005fae:	60d3      	str	r3, [r2, #12]
 8005fb0:	e00b      	b.n	8005fca <_SendPacket+0x16e>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 8005fb2:	4b1a      	ldr	r3, [pc, #104]	; (800601c <_SendPacket+0x1c0>)
 8005fb4:	781b      	ldrb	r3, [r3, #0]
 8005fb6:	3301      	adds	r3, #1
 8005fb8:	b2da      	uxtb	r2, r3
 8005fba:	4b18      	ldr	r3, [pc, #96]	; (800601c <_SendPacket+0x1c0>)
 8005fbc:	701a      	strb	r2, [r3, #0]
 8005fbe:	e004      	b.n	8005fca <_SendPacket+0x16e>
    goto SendDone;
 8005fc0:	bf00      	nop
 8005fc2:	e002      	b.n	8005fca <_SendPacket+0x16e>
      goto SendDone;
 8005fc4:	bf00      	nop
 8005fc6:	e000      	b.n	8005fca <_SendPacket+0x16e>
      goto SendDone;
 8005fc8:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8005fca:	4b14      	ldr	r3, [pc, #80]	; (800601c <_SendPacket+0x1c0>)
 8005fcc:	7e1b      	ldrb	r3, [r3, #24]
 8005fce:	4619      	mov	r1, r3
 8005fd0:	4a14      	ldr	r2, [pc, #80]	; (8006024 <_SendPacket+0x1c8>)
 8005fd2:	460b      	mov	r3, r1
 8005fd4:	005b      	lsls	r3, r3, #1
 8005fd6:	440b      	add	r3, r1
 8005fd8:	00db      	lsls	r3, r3, #3
 8005fda:	4413      	add	r3, r2
 8005fdc:	336c      	adds	r3, #108	; 0x6c
 8005fde:	681a      	ldr	r2, [r3, #0]
 8005fe0:	4b0e      	ldr	r3, [pc, #56]	; (800601c <_SendPacket+0x1c0>)
 8005fe2:	7e1b      	ldrb	r3, [r3, #24]
 8005fe4:	4618      	mov	r0, r3
 8005fe6:	490f      	ldr	r1, [pc, #60]	; (8006024 <_SendPacket+0x1c8>)
 8005fe8:	4603      	mov	r3, r0
 8005fea:	005b      	lsls	r3, r3, #1
 8005fec:	4403      	add	r3, r0
 8005fee:	00db      	lsls	r3, r3, #3
 8005ff0:	440b      	add	r3, r1
 8005ff2:	3370      	adds	r3, #112	; 0x70
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	429a      	cmp	r2, r3
 8005ff8:	d00b      	beq.n	8006012 <_SendPacket+0x1b6>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8005ffa:	4b08      	ldr	r3, [pc, #32]	; (800601c <_SendPacket+0x1c0>)
 8005ffc:	789b      	ldrb	r3, [r3, #2]
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d107      	bne.n	8006012 <_SendPacket+0x1b6>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8006002:	4b06      	ldr	r3, [pc, #24]	; (800601c <_SendPacket+0x1c0>)
 8006004:	2201      	movs	r2, #1
 8006006:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8006008:	f7ff fe46 	bl	8005c98 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 800600c:	4b03      	ldr	r3, [pc, #12]	; (800601c <_SendPacket+0x1c0>)
 800600e:	2200      	movs	r2, #0
 8006010:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 8006012:	bf00      	nop
 8006014:	3728      	adds	r7, #40	; 0x28
 8006016:	46bd      	mov	sp, r7
 8006018:	bd80      	pop	{r7, pc}
 800601a:	bf00      	nop
 800601c:	200083d8 	.word	0x200083d8
 8006020:	e0001004 	.word	0xe0001004
 8006024:	20003f18 	.word	0x20003f18

08006028 <_StoreChar>:
*
*  Parameters
*    p            Pointer to the buffer description.
*    c            Character to be printed.
*/
static void _StoreChar(SEGGER_SYSVIEW_PRINTF_DESC * p, char c) {
 8006028:	b580      	push	{r7, lr}
 800602a:	b08a      	sub	sp, #40	; 0x28
 800602c:	af00      	add	r7, sp, #0
 800602e:	6078      	str	r0, [r7, #4]
 8006030:	460b      	mov	r3, r1
 8006032:	70fb      	strb	r3, [r7, #3]
  unsigned int  Cnt;
  U8*           pPayload;
  U32           Options;

  Cnt = p->Cnt;
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	691b      	ldr	r3, [r3, #16]
 8006038:	617b      	str	r3, [r7, #20]
  if ((Cnt + 1u) <= SEGGER_SYSVIEW_MAX_STRING_LEN) {
 800603a:	697b      	ldr	r3, [r7, #20]
 800603c:	3301      	adds	r3, #1
 800603e:	2b80      	cmp	r3, #128	; 0x80
 8006040:	d80a      	bhi.n	8006058 <_StoreChar+0x30>
    *(p->pPayload++) = c;
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	685b      	ldr	r3, [r3, #4]
 8006046:	1c59      	adds	r1, r3, #1
 8006048:	687a      	ldr	r2, [r7, #4]
 800604a:	6051      	str	r1, [r2, #4]
 800604c:	78fa      	ldrb	r2, [r7, #3]
 800604e:	701a      	strb	r2, [r3, #0]
    p->Cnt = Cnt + 1u;
 8006050:	697b      	ldr	r3, [r7, #20]
 8006052:	1c5a      	adds	r2, r3, #1
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	611a      	str	r2, [r3, #16]
  }
  //
  // Write part of string, when the buffer is full
  //
  if (p->Cnt == SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	691b      	ldr	r3, [r3, #16]
 800605c:	2b80      	cmp	r3, #128	; 0x80
 800605e:	d15a      	bne.n	8006116 <_StoreChar+0xee>
    *(p->pPayloadStart) = p->Cnt;
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	691a      	ldr	r2, [r3, #16]
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	689b      	ldr	r3, [r3, #8]
 8006068:	b2d2      	uxtb	r2, r2
 800606a:	701a      	strb	r2, [r3, #0]
    pPayload = p->pPayload;
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	685b      	ldr	r3, [r3, #4]
 8006070:	613b      	str	r3, [r7, #16]
    Options = p->Options;
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	68db      	ldr	r3, [r3, #12]
 8006076:	60fb      	str	r3, [r7, #12]
    ENCODE_U32(pPayload, Options);
 8006078:	693b      	ldr	r3, [r7, #16]
 800607a:	627b      	str	r3, [r7, #36]	; 0x24
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	623b      	str	r3, [r7, #32]
 8006080:	e00b      	b.n	800609a <_StoreChar+0x72>
 8006082:	6a3b      	ldr	r3, [r7, #32]
 8006084:	b2da      	uxtb	r2, r3
 8006086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006088:	1c59      	adds	r1, r3, #1
 800608a:	6279      	str	r1, [r7, #36]	; 0x24
 800608c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006090:	b2d2      	uxtb	r2, r2
 8006092:	701a      	strb	r2, [r3, #0]
 8006094:	6a3b      	ldr	r3, [r7, #32]
 8006096:	09db      	lsrs	r3, r3, #7
 8006098:	623b      	str	r3, [r7, #32]
 800609a:	6a3b      	ldr	r3, [r7, #32]
 800609c:	2b7f      	cmp	r3, #127	; 0x7f
 800609e:	d8f0      	bhi.n	8006082 <_StoreChar+0x5a>
 80060a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060a2:	1c5a      	adds	r2, r3, #1
 80060a4:	627a      	str	r2, [r7, #36]	; 0x24
 80060a6:	6a3a      	ldr	r2, [r7, #32]
 80060a8:	b2d2      	uxtb	r2, r2
 80060aa:	701a      	strb	r2, [r3, #0]
 80060ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060ae:	613b      	str	r3, [r7, #16]
    ENCODE_U32(pPayload, 0);
 80060b0:	693b      	ldr	r3, [r7, #16]
 80060b2:	61fb      	str	r3, [r7, #28]
 80060b4:	2300      	movs	r3, #0
 80060b6:	61bb      	str	r3, [r7, #24]
 80060b8:	e00b      	b.n	80060d2 <_StoreChar+0xaa>
 80060ba:	69bb      	ldr	r3, [r7, #24]
 80060bc:	b2da      	uxtb	r2, r3
 80060be:	69fb      	ldr	r3, [r7, #28]
 80060c0:	1c59      	adds	r1, r3, #1
 80060c2:	61f9      	str	r1, [r7, #28]
 80060c4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80060c8:	b2d2      	uxtb	r2, r2
 80060ca:	701a      	strb	r2, [r3, #0]
 80060cc:	69bb      	ldr	r3, [r7, #24]
 80060ce:	09db      	lsrs	r3, r3, #7
 80060d0:	61bb      	str	r3, [r7, #24]
 80060d2:	69bb      	ldr	r3, [r7, #24]
 80060d4:	2b7f      	cmp	r3, #127	; 0x7f
 80060d6:	d8f0      	bhi.n	80060ba <_StoreChar+0x92>
 80060d8:	69fb      	ldr	r3, [r7, #28]
 80060da:	1c5a      	adds	r2, r3, #1
 80060dc:	61fa      	str	r2, [r7, #28]
 80060de:	69ba      	ldr	r2, [r7, #24]
 80060e0:	b2d2      	uxtb	r2, r2
 80060e2:	701a      	strb	r2, [r3, #0]
 80060e4:	69fb      	ldr	r3, [r7, #28]
 80060e6:	613b      	str	r3, [r7, #16]
    _SendPacket(p->pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	689b      	ldr	r3, [r3, #8]
 80060ec:	221a      	movs	r2, #26
 80060ee:	6939      	ldr	r1, [r7, #16]
 80060f0:	4618      	mov	r0, r3
 80060f2:	f7ff feb3 	bl	8005e5c <_SendPacket>
    p->pPayloadStart = _PreparePacket(p->pBuffer);
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	4618      	mov	r0, r3
 80060fc:	f7ff fdbf 	bl	8005c7e <_PreparePacket>
 8006100:	4602      	mov	r2, r0
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	609a      	str	r2, [r3, #8]
    p->pPayload = p->pPayloadStart + 1u;
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	689b      	ldr	r3, [r3, #8]
 800610a:	1c5a      	adds	r2, r3, #1
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	605a      	str	r2, [r3, #4]
    p->Cnt = 0u;
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	2200      	movs	r2, #0
 8006114:	611a      	str	r2, [r3, #16]
  }
}
 8006116:	bf00      	nop
 8006118:	3728      	adds	r7, #40	; 0x28
 800611a:	46bd      	mov	sp, r7
 800611c:	bd80      	pop	{r7, pc}
	...

08006120 <_PrintUnsigned>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintUnsigned(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, unsigned int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 8006120:	b580      	push	{r7, lr}
 8006122:	b08a      	sub	sp, #40	; 0x28
 8006124:	af00      	add	r7, sp, #0
 8006126:	60f8      	str	r0, [r7, #12]
 8006128:	60b9      	str	r1, [r7, #8]
 800612a:	607a      	str	r2, [r7, #4]
 800612c:	603b      	str	r3, [r7, #0]
  unsigned int      Digit;
  unsigned int      Number;
  unsigned int      Width;
  char              c;

  Number = v;
 800612e:	68bb      	ldr	r3, [r7, #8]
 8006130:	623b      	str	r3, [r7, #32]
  Digit = 1u;
 8006132:	2301      	movs	r3, #1
 8006134:	627b      	str	r3, [r7, #36]	; 0x24
  //
  // Get actual field width
  //
  Width = 1u;
 8006136:	2301      	movs	r3, #1
 8006138:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 800613a:	e007      	b.n	800614c <_PrintUnsigned+0x2c>
    Number = (Number / Base);
 800613c:	6a3a      	ldr	r2, [r7, #32]
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	fbb2 f3f3 	udiv	r3, r2, r3
 8006144:	623b      	str	r3, [r7, #32]
    Width++;
 8006146:	69fb      	ldr	r3, [r7, #28]
 8006148:	3301      	adds	r3, #1
 800614a:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 800614c:	6a3a      	ldr	r2, [r7, #32]
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	429a      	cmp	r2, r3
 8006152:	d2f3      	bcs.n	800613c <_PrintUnsigned+0x1c>
  }
  if (NumDigits > Width) {
 8006154:	683a      	ldr	r2, [r7, #0]
 8006156:	69fb      	ldr	r3, [r7, #28]
 8006158:	429a      	cmp	r2, r3
 800615a:	d901      	bls.n	8006160 <_PrintUnsigned+0x40>
    Width = NumDigits;
 800615c:	683b      	ldr	r3, [r7, #0]
 800615e:	61fb      	str	r3, [r7, #28]
  }
  //
  // Print leading chars if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) {
 8006160:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006162:	f003 0301 	and.w	r3, r3, #1
 8006166:	2b00      	cmp	r3, #0
 8006168:	d11f      	bne.n	80061aa <_PrintUnsigned+0x8a>
    if (FieldWidth != 0u) {
 800616a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800616c:	2b00      	cmp	r3, #0
 800616e:	d01c      	beq.n	80061aa <_PrintUnsigned+0x8a>
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && (NumDigits == 0u)) {
 8006170:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006172:	f003 0302 	and.w	r3, r3, #2
 8006176:	2b00      	cmp	r3, #0
 8006178:	d005      	beq.n	8006186 <_PrintUnsigned+0x66>
 800617a:	683b      	ldr	r3, [r7, #0]
 800617c:	2b00      	cmp	r3, #0
 800617e:	d102      	bne.n	8006186 <_PrintUnsigned+0x66>
        c = '0';
 8006180:	2330      	movs	r3, #48	; 0x30
 8006182:	76fb      	strb	r3, [r7, #27]
 8006184:	e001      	b.n	800618a <_PrintUnsigned+0x6a>
      } else {
        c = ' ';
 8006186:	2320      	movs	r3, #32
 8006188:	76fb      	strb	r3, [r7, #27]
      }
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 800618a:	e007      	b.n	800619c <_PrintUnsigned+0x7c>
        FieldWidth--;
 800618c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800618e:	3b01      	subs	r3, #1
 8006190:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, c);
 8006192:	7efb      	ldrb	r3, [r7, #27]
 8006194:	4619      	mov	r1, r3
 8006196:	68f8      	ldr	r0, [r7, #12]
 8006198:	f7ff ff46 	bl	8006028 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 800619c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d003      	beq.n	80061aa <_PrintUnsigned+0x8a>
 80061a2:	69fa      	ldr	r2, [r7, #28]
 80061a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061a6:	429a      	cmp	r2, r3
 80061a8:	d3f0      	bcc.n	800618c <_PrintUnsigned+0x6c>
  // Compute Digit.
  // Loop until Digit has the value of the highest digit required.
  // Example: If the output is 345 (Base 10), loop 2 times until Digit is 100.
  //
  while (1) {
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 80061aa:	683b      	ldr	r3, [r7, #0]
 80061ac:	2b01      	cmp	r3, #1
 80061ae:	d903      	bls.n	80061b8 <_PrintUnsigned+0x98>
      NumDigits--;
 80061b0:	683b      	ldr	r3, [r7, #0]
 80061b2:	3b01      	subs	r3, #1
 80061b4:	603b      	str	r3, [r7, #0]
 80061b6:	e009      	b.n	80061cc <_PrintUnsigned+0xac>
    } else {
      Div = v / Digit;
 80061b8:	68ba      	ldr	r2, [r7, #8]
 80061ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80061c0:	617b      	str	r3, [r7, #20]
      if (Div < Base) {        // Is our divider big enough to extract the highest digit from value? => Done
 80061c2:	697a      	ldr	r2, [r7, #20]
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	429a      	cmp	r2, r3
 80061c8:	d200      	bcs.n	80061cc <_PrintUnsigned+0xac>
        break;
 80061ca:	e005      	b.n	80061d8 <_PrintUnsigned+0xb8>
      }
    }
    Digit *= Base;
 80061cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061ce:	687a      	ldr	r2, [r7, #4]
 80061d0:	fb02 f303 	mul.w	r3, r2, r3
 80061d4:	627b      	str	r3, [r7, #36]	; 0x24
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 80061d6:	e7e8      	b.n	80061aa <_PrintUnsigned+0x8a>
  }
  //
  // Output digits
  //
  do {
    Div = v / Digit;
 80061d8:	68ba      	ldr	r2, [r7, #8]
 80061da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80061e0:	617b      	str	r3, [r7, #20]
    v -= Div * Digit;
 80061e2:	697b      	ldr	r3, [r7, #20]
 80061e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80061e6:	fb02 f303 	mul.w	r3, r2, r3
 80061ea:	68ba      	ldr	r2, [r7, #8]
 80061ec:	1ad3      	subs	r3, r2, r3
 80061ee:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, _aV2C[Div]);
 80061f0:	4a15      	ldr	r2, [pc, #84]	; (8006248 <_PrintUnsigned+0x128>)
 80061f2:	697b      	ldr	r3, [r7, #20]
 80061f4:	4413      	add	r3, r2
 80061f6:	781b      	ldrb	r3, [r3, #0]
 80061f8:	4619      	mov	r1, r3
 80061fa:	68f8      	ldr	r0, [r7, #12]
 80061fc:	f7ff ff14 	bl	8006028 <_StoreChar>
    Digit /= Base;
 8006200:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	fbb2 f3f3 	udiv	r3, r2, r3
 8006208:	627b      	str	r3, [r7, #36]	; 0x24
  } while (Digit);
 800620a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800620c:	2b00      	cmp	r3, #0
 800620e:	d1e3      	bne.n	80061d8 <_PrintUnsigned+0xb8>
  //
  // Print trailing spaces if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == FORMAT_FLAG_LEFT_JUSTIFY) {
 8006210:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006212:	f003 0301 	and.w	r3, r3, #1
 8006216:	2b00      	cmp	r3, #0
 8006218:	d011      	beq.n	800623e <_PrintUnsigned+0x11e>
    if (FieldWidth != 0u) {
 800621a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800621c:	2b00      	cmp	r3, #0
 800621e:	d00e      	beq.n	800623e <_PrintUnsigned+0x11e>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8006220:	e006      	b.n	8006230 <_PrintUnsigned+0x110>
        FieldWidth--;
 8006222:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006224:	3b01      	subs	r3, #1
 8006226:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, ' ');
 8006228:	2120      	movs	r1, #32
 800622a:	68f8      	ldr	r0, [r7, #12]
 800622c:	f7ff fefc 	bl	8006028 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8006230:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006232:	2b00      	cmp	r3, #0
 8006234:	d003      	beq.n	800623e <_PrintUnsigned+0x11e>
 8006236:	69fa      	ldr	r2, [r7, #28]
 8006238:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800623a:	429a      	cmp	r2, r3
 800623c:	d3f1      	bcc.n	8006222 <_PrintUnsigned+0x102>
      }
    }
  }
}
 800623e:	bf00      	nop
 8006240:	3728      	adds	r7, #40	; 0x28
 8006242:	46bd      	mov	sp, r7
 8006244:	bd80      	pop	{r7, pc}
 8006246:	bf00      	nop
 8006248:	08007914 	.word	0x08007914

0800624c <_PrintInt>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintInt(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 800624c:	b580      	push	{r7, lr}
 800624e:	b088      	sub	sp, #32
 8006250:	af02      	add	r7, sp, #8
 8006252:	60f8      	str	r0, [r7, #12]
 8006254:	60b9      	str	r1, [r7, #8]
 8006256:	607a      	str	r2, [r7, #4]
 8006258:	603b      	str	r3, [r7, #0]
  unsigned int  Width;
  int           Number;

  Number = (v < 0) ? -v : v;
 800625a:	68bb      	ldr	r3, [r7, #8]
 800625c:	2b00      	cmp	r3, #0
 800625e:	bfb8      	it	lt
 8006260:	425b      	neglt	r3, r3
 8006262:	613b      	str	r3, [r7, #16]

  //
  // Get actual field width
  //
  Width = 1u;
 8006264:	2301      	movs	r3, #1
 8006266:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 8006268:	e007      	b.n	800627a <_PrintInt+0x2e>
    Number = (Number / (int)Base);
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	693a      	ldr	r2, [r7, #16]
 800626e:	fb92 f3f3 	sdiv	r3, r2, r3
 8006272:	613b      	str	r3, [r7, #16]
    Width++;
 8006274:	697b      	ldr	r3, [r7, #20]
 8006276:	3301      	adds	r3, #1
 8006278:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	693a      	ldr	r2, [r7, #16]
 800627e:	429a      	cmp	r2, r3
 8006280:	daf3      	bge.n	800626a <_PrintInt+0x1e>
  }
  if (NumDigits > Width) {
 8006282:	683a      	ldr	r2, [r7, #0]
 8006284:	697b      	ldr	r3, [r7, #20]
 8006286:	429a      	cmp	r2, r3
 8006288:	d901      	bls.n	800628e <_PrintInt+0x42>
    Width = NumDigits;
 800628a:	683b      	ldr	r3, [r7, #0]
 800628c:	617b      	str	r3, [r7, #20]
  }
  if ((FieldWidth > 0u) && ((v < 0) || ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN))) {
 800628e:	6a3b      	ldr	r3, [r7, #32]
 8006290:	2b00      	cmp	r3, #0
 8006292:	d00a      	beq.n	80062aa <_PrintInt+0x5e>
 8006294:	68bb      	ldr	r3, [r7, #8]
 8006296:	2b00      	cmp	r3, #0
 8006298:	db04      	blt.n	80062a4 <_PrintInt+0x58>
 800629a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800629c:	f003 0304 	and.w	r3, r3, #4
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d002      	beq.n	80062aa <_PrintInt+0x5e>
    FieldWidth--;
 80062a4:	6a3b      	ldr	r3, [r7, #32]
 80062a6:	3b01      	subs	r3, #1
 80062a8:	623b      	str	r3, [r7, #32]
  }

  //
  // Print leading spaces if necessary
  //
  if ((((FormatFlags & FORMAT_FLAG_PAD_ZERO) == 0u) || (NumDigits != 0u)) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u)) {
 80062aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062ac:	f003 0302 	and.w	r3, r3, #2
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d002      	beq.n	80062ba <_PrintInt+0x6e>
 80062b4:	683b      	ldr	r3, [r7, #0]
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d016      	beq.n	80062e8 <_PrintInt+0x9c>
 80062ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062bc:	f003 0301 	and.w	r3, r3, #1
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d111      	bne.n	80062e8 <_PrintInt+0x9c>
    if (FieldWidth != 0u) {
 80062c4:	6a3b      	ldr	r3, [r7, #32]
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d00e      	beq.n	80062e8 <_PrintInt+0x9c>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80062ca:	e006      	b.n	80062da <_PrintInt+0x8e>
        FieldWidth--;
 80062cc:	6a3b      	ldr	r3, [r7, #32]
 80062ce:	3b01      	subs	r3, #1
 80062d0:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, ' ');
 80062d2:	2120      	movs	r1, #32
 80062d4:	68f8      	ldr	r0, [r7, #12]
 80062d6:	f7ff fea7 	bl	8006028 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80062da:	6a3b      	ldr	r3, [r7, #32]
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d003      	beq.n	80062e8 <_PrintInt+0x9c>
 80062e0:	697a      	ldr	r2, [r7, #20]
 80062e2:	6a3b      	ldr	r3, [r7, #32]
 80062e4:	429a      	cmp	r2, r3
 80062e6:	d3f1      	bcc.n	80062cc <_PrintInt+0x80>
    }
  }
  //
  // Print sign if necessary
  //
  if (v < 0) {
 80062e8:	68bb      	ldr	r3, [r7, #8]
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	da07      	bge.n	80062fe <_PrintInt+0xb2>
    v = -v;
 80062ee:	68bb      	ldr	r3, [r7, #8]
 80062f0:	425b      	negs	r3, r3
 80062f2:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, '-');
 80062f4:	212d      	movs	r1, #45	; 0x2d
 80062f6:	68f8      	ldr	r0, [r7, #12]
 80062f8:	f7ff fe96 	bl	8006028 <_StoreChar>
 80062fc:	e008      	b.n	8006310 <_PrintInt+0xc4>
  } else if ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN) {
 80062fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006300:	f003 0304 	and.w	r3, r3, #4
 8006304:	2b00      	cmp	r3, #0
 8006306:	d003      	beq.n	8006310 <_PrintInt+0xc4>
    _StoreChar(pBufferDesc, '+');
 8006308:	212b      	movs	r1, #43	; 0x2b
 800630a:	68f8      	ldr	r0, [r7, #12]
 800630c:	f7ff fe8c 	bl	8006028 <_StoreChar>

  }
  //
  // Print leading zeros if necessary
  //
  if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) && (NumDigits == 0u)) {
 8006310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006312:	f003 0302 	and.w	r3, r3, #2
 8006316:	2b00      	cmp	r3, #0
 8006318:	d019      	beq.n	800634e <_PrintInt+0x102>
 800631a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800631c:	f003 0301 	and.w	r3, r3, #1
 8006320:	2b00      	cmp	r3, #0
 8006322:	d114      	bne.n	800634e <_PrintInt+0x102>
 8006324:	683b      	ldr	r3, [r7, #0]
 8006326:	2b00      	cmp	r3, #0
 8006328:	d111      	bne.n	800634e <_PrintInt+0x102>
    if (FieldWidth != 0u) {
 800632a:	6a3b      	ldr	r3, [r7, #32]
 800632c:	2b00      	cmp	r3, #0
 800632e:	d00e      	beq.n	800634e <_PrintInt+0x102>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8006330:	e006      	b.n	8006340 <_PrintInt+0xf4>
        FieldWidth--;
 8006332:	6a3b      	ldr	r3, [r7, #32]
 8006334:	3b01      	subs	r3, #1
 8006336:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, '0');
 8006338:	2130      	movs	r1, #48	; 0x30
 800633a:	68f8      	ldr	r0, [r7, #12]
 800633c:	f7ff fe74 	bl	8006028 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8006340:	6a3b      	ldr	r3, [r7, #32]
 8006342:	2b00      	cmp	r3, #0
 8006344:	d003      	beq.n	800634e <_PrintInt+0x102>
 8006346:	697a      	ldr	r2, [r7, #20]
 8006348:	6a3b      	ldr	r3, [r7, #32]
 800634a:	429a      	cmp	r2, r3
 800634c:	d3f1      	bcc.n	8006332 <_PrintInt+0xe6>
    }
  }
  //
  // Print number without sign
  //
  _PrintUnsigned(pBufferDesc, (unsigned int)v, Base, NumDigits, FieldWidth, FormatFlags);
 800634e:	68b9      	ldr	r1, [r7, #8]
 8006350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006352:	9301      	str	r3, [sp, #4]
 8006354:	6a3b      	ldr	r3, [r7, #32]
 8006356:	9300      	str	r3, [sp, #0]
 8006358:	683b      	ldr	r3, [r7, #0]
 800635a:	687a      	ldr	r2, [r7, #4]
 800635c:	68f8      	ldr	r0, [r7, #12]
 800635e:	f7ff fedf 	bl	8006120 <_PrintUnsigned>
}
 8006362:	bf00      	nop
 8006364:	3718      	adds	r7, #24
 8006366:	46bd      	mov	sp, r7
 8006368:	bd80      	pop	{r7, pc}
	...

0800636c <_VPrintTarget>:
*  Parameters
*    sFormat      Pointer to format string.
*    Options      Options to be sent to the host.
*    pParamList   Pointer to the list of arguments for the format string.
*/
static void _VPrintTarget(const char* sFormat, U32 Options, va_list* pParamList) {
 800636c:	b580      	push	{r7, lr}
 800636e:	b098      	sub	sp, #96	; 0x60
 8006370:	af02      	add	r7, sp, #8
 8006372:	60f8      	str	r0, [r7, #12]
 8006374:	60b9      	str	r1, [r7, #8]
 8006376:	607a      	str	r2, [r7, #4]
  U8*           pPayloadStart;
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
  SEGGER_SYSVIEW_LOCK();
#else
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8006378:	f3ef 8311 	mrs	r3, BASEPRI
 800637c:	f04f 0120 	mov.w	r1, #32
 8006380:	f381 8811 	msr	BASEPRI, r1
 8006384:	633b      	str	r3, [r7, #48]	; 0x30
 8006386:	48b7      	ldr	r0, [pc, #732]	; (8006664 <_VPrintTarget+0x2f8>)
 8006388:	f7ff fc79 	bl	8005c7e <_PreparePacket>
 800638c:	62f8      	str	r0, [r7, #44]	; 0x2c
#endif

#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  BufferDesc.pBuffer        = aPacket;
#else
  BufferDesc.pBuffer        = _aPacket;
 800638e:	4bb5      	ldr	r3, [pc, #724]	; (8006664 <_VPrintTarget+0x2f8>)
 8006390:	617b      	str	r3, [r7, #20]
#endif
  BufferDesc.Cnt            = 0u;
 8006392:	2300      	movs	r3, #0
 8006394:	627b      	str	r3, [r7, #36]	; 0x24
  BufferDesc.pPayloadStart  = pPayloadStart;
 8006396:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006398:	61fb      	str	r3, [r7, #28]
  BufferDesc.pPayload       = BufferDesc.pPayloadStart + 1u;
 800639a:	69fb      	ldr	r3, [r7, #28]
 800639c:	3301      	adds	r3, #1
 800639e:	61bb      	str	r3, [r7, #24]
  BufferDesc.Options        =  Options;
 80063a0:	68bb      	ldr	r3, [r7, #8]
 80063a2:	623b      	str	r3, [r7, #32]

  do {
    c = *sFormat;
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	781b      	ldrb	r3, [r3, #0]
 80063a8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    sFormat++;
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	3301      	adds	r3, #1
 80063b0:	60fb      	str	r3, [r7, #12]
    if (c == 0u) {
 80063b2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	f000 8183 	beq.w	80066c2 <_VPrintTarget+0x356>
      break;
    }
    if (c == '%') {
 80063bc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80063c0:	2b25      	cmp	r3, #37	; 0x25
 80063c2:	f040 8170 	bne.w	80066a6 <_VPrintTarget+0x33a>
      //
      // Filter out flags
      //
      FormatFlags = 0u;
 80063c6:	2300      	movs	r3, #0
 80063c8:	64bb      	str	r3, [r7, #72]	; 0x48
      v = 1;
 80063ca:	2301      	movs	r3, #1
 80063cc:	653b      	str	r3, [r7, #80]	; 0x50
      do {
        c = *sFormat;
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	781b      	ldrb	r3, [r3, #0]
 80063d2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        switch (c) {
 80063d6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80063da:	3b23      	subs	r3, #35	; 0x23
 80063dc:	2b0d      	cmp	r3, #13
 80063de:	d83f      	bhi.n	8006460 <_VPrintTarget+0xf4>
 80063e0:	a201      	add	r2, pc, #4	; (adr r2, 80063e8 <_VPrintTarget+0x7c>)
 80063e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063e6:	bf00      	nop
 80063e8:	08006451 	.word	0x08006451
 80063ec:	08006461 	.word	0x08006461
 80063f0:	08006461 	.word	0x08006461
 80063f4:	08006461 	.word	0x08006461
 80063f8:	08006461 	.word	0x08006461
 80063fc:	08006461 	.word	0x08006461
 8006400:	08006461 	.word	0x08006461
 8006404:	08006461 	.word	0x08006461
 8006408:	08006441 	.word	0x08006441
 800640c:	08006461 	.word	0x08006461
 8006410:	08006421 	.word	0x08006421
 8006414:	08006461 	.word	0x08006461
 8006418:	08006461 	.word	0x08006461
 800641c:	08006431 	.word	0x08006431
        case '-': FormatFlags |= FORMAT_FLAG_LEFT_JUSTIFY; sFormat++; break;
 8006420:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006422:	f043 0301 	orr.w	r3, r3, #1
 8006426:	64bb      	str	r3, [r7, #72]	; 0x48
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	3301      	adds	r3, #1
 800642c:	60fb      	str	r3, [r7, #12]
 800642e:	e01a      	b.n	8006466 <_VPrintTarget+0xfa>
        case '0': FormatFlags |= FORMAT_FLAG_PAD_ZERO;     sFormat++; break;
 8006430:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006432:	f043 0302 	orr.w	r3, r3, #2
 8006436:	64bb      	str	r3, [r7, #72]	; 0x48
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	3301      	adds	r3, #1
 800643c:	60fb      	str	r3, [r7, #12]
 800643e:	e012      	b.n	8006466 <_VPrintTarget+0xfa>
        case '+': FormatFlags |= FORMAT_FLAG_PRINT_SIGN;   sFormat++; break;
 8006440:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006442:	f043 0304 	orr.w	r3, r3, #4
 8006446:	64bb      	str	r3, [r7, #72]	; 0x48
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	3301      	adds	r3, #1
 800644c:	60fb      	str	r3, [r7, #12]
 800644e:	e00a      	b.n	8006466 <_VPrintTarget+0xfa>
        case '#': FormatFlags |= FORMAT_FLAG_ALTERNATE;    sFormat++; break;
 8006450:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006452:	f043 0308 	orr.w	r3, r3, #8
 8006456:	64bb      	str	r3, [r7, #72]	; 0x48
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	3301      	adds	r3, #1
 800645c:	60fb      	str	r3, [r7, #12]
 800645e:	e002      	b.n	8006466 <_VPrintTarget+0xfa>
        default:  v = 0; break;
 8006460:	2300      	movs	r3, #0
 8006462:	653b      	str	r3, [r7, #80]	; 0x50
 8006464:	bf00      	nop
        }
      } while (v);
 8006466:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006468:	2b00      	cmp	r3, #0
 800646a:	d1b0      	bne.n	80063ce <_VPrintTarget+0x62>
      //
      // filter out field with
      //
      FieldWidth = 0u;
 800646c:	2300      	movs	r3, #0
 800646e:	647b      	str	r3, [r7, #68]	; 0x44
      do {
        c = *sFormat;
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	781b      	ldrb	r3, [r3, #0]
 8006474:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        if ((c < '0') || (c > '9')) {
 8006478:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800647c:	2b2f      	cmp	r3, #47	; 0x2f
 800647e:	d912      	bls.n	80064a6 <_VPrintTarget+0x13a>
 8006480:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006484:	2b39      	cmp	r3, #57	; 0x39
 8006486:	d80e      	bhi.n	80064a6 <_VPrintTarget+0x13a>
          break;
        }
        sFormat++;
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	3301      	adds	r3, #1
 800648c:	60fb      	str	r3, [r7, #12]
        FieldWidth = (FieldWidth * 10u) + ((unsigned int)c - '0');
 800648e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006490:	4613      	mov	r3, r2
 8006492:	009b      	lsls	r3, r3, #2
 8006494:	4413      	add	r3, r2
 8006496:	005b      	lsls	r3, r3, #1
 8006498:	461a      	mov	r2, r3
 800649a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800649e:	4413      	add	r3, r2
 80064a0:	3b30      	subs	r3, #48	; 0x30
 80064a2:	647b      	str	r3, [r7, #68]	; 0x44
        c = *sFormat;
 80064a4:	e7e4      	b.n	8006470 <_VPrintTarget+0x104>
      } while (1);

      //
      // Filter out precision (number of digits to display)
      //
      NumDigits = 0u;
 80064a6:	2300      	movs	r3, #0
 80064a8:	64fb      	str	r3, [r7, #76]	; 0x4c
      c = *sFormat;
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	781b      	ldrb	r3, [r3, #0]
 80064ae:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
      if (c == '.') {
 80064b2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80064b6:	2b2e      	cmp	r3, #46	; 0x2e
 80064b8:	d11d      	bne.n	80064f6 <_VPrintTarget+0x18a>
        sFormat++;
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	3301      	adds	r3, #1
 80064be:	60fb      	str	r3, [r7, #12]
        do {
          c = *sFormat;
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	781b      	ldrb	r3, [r3, #0]
 80064c4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          if ((c < '0') || (c > '9')) {
 80064c8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80064cc:	2b2f      	cmp	r3, #47	; 0x2f
 80064ce:	d912      	bls.n	80064f6 <_VPrintTarget+0x18a>
 80064d0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80064d4:	2b39      	cmp	r3, #57	; 0x39
 80064d6:	d80e      	bhi.n	80064f6 <_VPrintTarget+0x18a>
            break;
          }
          sFormat++;
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	3301      	adds	r3, #1
 80064dc:	60fb      	str	r3, [r7, #12]
          NumDigits = NumDigits * 10u + ((unsigned int)c - '0');
 80064de:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80064e0:	4613      	mov	r3, r2
 80064e2:	009b      	lsls	r3, r3, #2
 80064e4:	4413      	add	r3, r2
 80064e6:	005b      	lsls	r3, r3, #1
 80064e8:	461a      	mov	r2, r3
 80064ea:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80064ee:	4413      	add	r3, r2
 80064f0:	3b30      	subs	r3, #48	; 0x30
 80064f2:	64fb      	str	r3, [r7, #76]	; 0x4c
          c = *sFormat;
 80064f4:	e7e4      	b.n	80064c0 <_VPrintTarget+0x154>
        } while (1);
      }
      //
      // Filter out length modifier
      //
      c = *sFormat;
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	781b      	ldrb	r3, [r3, #0]
 80064fa:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
      do {
        if ((c == 'l') || (c == 'h')) {
 80064fe:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006502:	2b6c      	cmp	r3, #108	; 0x6c
 8006504:	d003      	beq.n	800650e <_VPrintTarget+0x1a2>
 8006506:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800650a:	2b68      	cmp	r3, #104	; 0x68
 800650c:	d107      	bne.n	800651e <_VPrintTarget+0x1b2>
          c = *sFormat;
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	781b      	ldrb	r3, [r3, #0]
 8006512:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          sFormat++;
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	3301      	adds	r3, #1
 800651a:	60fb      	str	r3, [r7, #12]
        if ((c == 'l') || (c == 'h')) {
 800651c:	e7ef      	b.n	80064fe <_VPrintTarget+0x192>
        }
      } while (1);
      //
      // Handle specifiers
      //
      switch (c) {
 800651e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006522:	2b25      	cmp	r3, #37	; 0x25
 8006524:	f000 80b3 	beq.w	800668e <_VPrintTarget+0x322>
 8006528:	2b25      	cmp	r3, #37	; 0x25
 800652a:	f2c0 80b7 	blt.w	800669c <_VPrintTarget+0x330>
 800652e:	2b78      	cmp	r3, #120	; 0x78
 8006530:	f300 80b4 	bgt.w	800669c <_VPrintTarget+0x330>
 8006534:	2b58      	cmp	r3, #88	; 0x58
 8006536:	f2c0 80b1 	blt.w	800669c <_VPrintTarget+0x330>
 800653a:	3b58      	subs	r3, #88	; 0x58
 800653c:	2b20      	cmp	r3, #32
 800653e:	f200 80ad 	bhi.w	800669c <_VPrintTarget+0x330>
 8006542:	a201      	add	r2, pc, #4	; (adr r2, 8006548 <_VPrintTarget+0x1dc>)
 8006544:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006548:	0800663f 	.word	0x0800663f
 800654c:	0800669d 	.word	0x0800669d
 8006550:	0800669d 	.word	0x0800669d
 8006554:	0800669d 	.word	0x0800669d
 8006558:	0800669d 	.word	0x0800669d
 800655c:	0800669d 	.word	0x0800669d
 8006560:	0800669d 	.word	0x0800669d
 8006564:	0800669d 	.word	0x0800669d
 8006568:	0800669d 	.word	0x0800669d
 800656c:	0800669d 	.word	0x0800669d
 8006570:	0800669d 	.word	0x0800669d
 8006574:	080065cd 	.word	0x080065cd
 8006578:	080065f3 	.word	0x080065f3
 800657c:	0800669d 	.word	0x0800669d
 8006580:	0800669d 	.word	0x0800669d
 8006584:	0800669d 	.word	0x0800669d
 8006588:	0800669d 	.word	0x0800669d
 800658c:	0800669d 	.word	0x0800669d
 8006590:	0800669d 	.word	0x0800669d
 8006594:	0800669d 	.word	0x0800669d
 8006598:	0800669d 	.word	0x0800669d
 800659c:	0800669d 	.word	0x0800669d
 80065a0:	0800669d 	.word	0x0800669d
 80065a4:	0800669d 	.word	0x0800669d
 80065a8:	08006669 	.word	0x08006669
 80065ac:	0800669d 	.word	0x0800669d
 80065b0:	0800669d 	.word	0x0800669d
 80065b4:	0800669d 	.word	0x0800669d
 80065b8:	0800669d 	.word	0x0800669d
 80065bc:	08006619 	.word	0x08006619
 80065c0:	0800669d 	.word	0x0800669d
 80065c4:	0800669d 	.word	0x0800669d
 80065c8:	0800663f 	.word	0x0800663f
      case 'c': {
        char c0;
        v = va_arg(*pParamList, int);
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	1d19      	adds	r1, r3, #4
 80065d2:	687a      	ldr	r2, [r7, #4]
 80065d4:	6011      	str	r1, [r2, #0]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	653b      	str	r3, [r7, #80]	; 0x50
        c0 = (char)v;
 80065da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80065dc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        _StoreChar(&BufferDesc, c0);
 80065e0:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 80065e4:	f107 0314 	add.w	r3, r7, #20
 80065e8:	4611      	mov	r1, r2
 80065ea:	4618      	mov	r0, r3
 80065ec:	f7ff fd1c 	bl	8006028 <_StoreChar>
        break;
 80065f0:	e055      	b.n	800669e <_VPrintTarget+0x332>
      }
      case 'd':
        v = va_arg(*pParamList, int);
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	1d19      	adds	r1, r3, #4
 80065f8:	687a      	ldr	r2, [r7, #4]
 80065fa:	6011      	str	r1, [r2, #0]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintInt(&BufferDesc, v, 10u, NumDigits, FieldWidth, FormatFlags);
 8006600:	f107 0014 	add.w	r0, r7, #20
 8006604:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006606:	9301      	str	r3, [sp, #4]
 8006608:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800660a:	9300      	str	r3, [sp, #0]
 800660c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800660e:	220a      	movs	r2, #10
 8006610:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006612:	f7ff fe1b 	bl	800624c <_PrintInt>
        break;
 8006616:	e042      	b.n	800669e <_VPrintTarget+0x332>
      case 'u':
        v = va_arg(*pParamList, int);
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	1d19      	adds	r1, r3, #4
 800661e:	687a      	ldr	r2, [r7, #4]
 8006620:	6011      	str	r1, [r2, #0]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 10u, NumDigits, FieldWidth, FormatFlags);
 8006626:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006628:	f107 0014 	add.w	r0, r7, #20
 800662c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800662e:	9301      	str	r3, [sp, #4]
 8006630:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006632:	9300      	str	r3, [sp, #0]
 8006634:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006636:	220a      	movs	r2, #10
 8006638:	f7ff fd72 	bl	8006120 <_PrintUnsigned>
        break;
 800663c:	e02f      	b.n	800669e <_VPrintTarget+0x332>
      case 'x':
      case 'X':
        v = va_arg(*pParamList, int);
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	1d19      	adds	r1, r3, #4
 8006644:	687a      	ldr	r2, [r7, #4]
 8006646:	6011      	str	r1, [r2, #0]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, NumDigits, FieldWidth, FormatFlags);
 800664c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800664e:	f107 0014 	add.w	r0, r7, #20
 8006652:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006654:	9301      	str	r3, [sp, #4]
 8006656:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006658:	9300      	str	r3, [sp, #0]
 800665a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800665c:	2210      	movs	r2, #16
 800665e:	f7ff fd5f 	bl	8006120 <_PrintUnsigned>
        break;
 8006662:	e01c      	b.n	800669e <_VPrintTarget+0x332>
 8006664:	20008408 	.word	0x20008408
      case 'p':
        v = va_arg(*pParamList, int);
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	1d19      	adds	r1, r3, #4
 800666e:	687a      	ldr	r2, [r7, #4]
 8006670:	6011      	str	r1, [r2, #0]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, 8u, 8u, 0u);
 8006676:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006678:	f107 0014 	add.w	r0, r7, #20
 800667c:	2300      	movs	r3, #0
 800667e:	9301      	str	r3, [sp, #4]
 8006680:	2308      	movs	r3, #8
 8006682:	9300      	str	r3, [sp, #0]
 8006684:	2308      	movs	r3, #8
 8006686:	2210      	movs	r2, #16
 8006688:	f7ff fd4a 	bl	8006120 <_PrintUnsigned>
        break;
 800668c:	e007      	b.n	800669e <_VPrintTarget+0x332>
      case '%':
        _StoreChar(&BufferDesc, '%');
 800668e:	f107 0314 	add.w	r3, r7, #20
 8006692:	2125      	movs	r1, #37	; 0x25
 8006694:	4618      	mov	r0, r3
 8006696:	f7ff fcc7 	bl	8006028 <_StoreChar>
        break;
 800669a:	e000      	b.n	800669e <_VPrintTarget+0x332>
      default:
        break;
 800669c:	bf00      	nop
      }
      sFormat++;
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	3301      	adds	r3, #1
 80066a2:	60fb      	str	r3, [r7, #12]
 80066a4:	e007      	b.n	80066b6 <_VPrintTarget+0x34a>
    } else {
      _StoreChar(&BufferDesc, c);
 80066a6:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 80066aa:	f107 0314 	add.w	r3, r7, #20
 80066ae:	4611      	mov	r1, r2
 80066b0:	4618      	mov	r0, r3
 80066b2:	f7ff fcb9 	bl	8006028 <_StoreChar>
    }
  } while (*sFormat);
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	781b      	ldrb	r3, [r3, #0]
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	f47f ae72 	bne.w	80063a4 <_VPrintTarget+0x38>
 80066c0:	e000      	b.n	80066c4 <_VPrintTarget+0x358>
      break;
 80066c2:	bf00      	nop

  //
  // Write remaining data, if any
  //
  if (BufferDesc.Cnt != 0u) {
 80066c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d041      	beq.n	800674e <_VPrintTarget+0x3e2>
    *(BufferDesc.pPayloadStart) = BufferDesc.Cnt;
 80066ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80066cc:	69fb      	ldr	r3, [r7, #28]
 80066ce:	b2d2      	uxtb	r2, r2
 80066d0:	701a      	strb	r2, [r3, #0]
    ENCODE_U32(BufferDesc.pPayload, BufferDesc.Options);
 80066d2:	69bb      	ldr	r3, [r7, #24]
 80066d4:	643b      	str	r3, [r7, #64]	; 0x40
 80066d6:	6a3b      	ldr	r3, [r7, #32]
 80066d8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80066da:	e00b      	b.n	80066f4 <_VPrintTarget+0x388>
 80066dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80066de:	b2da      	uxtb	r2, r3
 80066e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80066e2:	1c59      	adds	r1, r3, #1
 80066e4:	6439      	str	r1, [r7, #64]	; 0x40
 80066e6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80066ea:	b2d2      	uxtb	r2, r2
 80066ec:	701a      	strb	r2, [r3, #0]
 80066ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80066f0:	09db      	lsrs	r3, r3, #7
 80066f2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80066f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80066f6:	2b7f      	cmp	r3, #127	; 0x7f
 80066f8:	d8f0      	bhi.n	80066dc <_VPrintTarget+0x370>
 80066fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80066fc:	1c5a      	adds	r2, r3, #1
 80066fe:	643a      	str	r2, [r7, #64]	; 0x40
 8006700:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006702:	b2d2      	uxtb	r2, r2
 8006704:	701a      	strb	r2, [r3, #0]
 8006706:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006708:	61bb      	str	r3, [r7, #24]
    ENCODE_U32(BufferDesc.pPayload, 0);
 800670a:	69bb      	ldr	r3, [r7, #24]
 800670c:	63bb      	str	r3, [r7, #56]	; 0x38
 800670e:	2300      	movs	r3, #0
 8006710:	637b      	str	r3, [r7, #52]	; 0x34
 8006712:	e00b      	b.n	800672c <_VPrintTarget+0x3c0>
 8006714:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006716:	b2da      	uxtb	r2, r3
 8006718:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800671a:	1c59      	adds	r1, r3, #1
 800671c:	63b9      	str	r1, [r7, #56]	; 0x38
 800671e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006722:	b2d2      	uxtb	r2, r2
 8006724:	701a      	strb	r2, [r3, #0]
 8006726:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006728:	09db      	lsrs	r3, r3, #7
 800672a:	637b      	str	r3, [r7, #52]	; 0x34
 800672c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800672e:	2b7f      	cmp	r3, #127	; 0x7f
 8006730:	d8f0      	bhi.n	8006714 <_VPrintTarget+0x3a8>
 8006732:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006734:	1c5a      	adds	r2, r3, #1
 8006736:	63ba      	str	r2, [r7, #56]	; 0x38
 8006738:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800673a:	b2d2      	uxtb	r2, r2
 800673c:	701a      	strb	r2, [r3, #0]
 800673e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006740:	61bb      	str	r3, [r7, #24]
    _SendPacket(BufferDesc.pPayloadStart, BufferDesc.pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8006742:	69fb      	ldr	r3, [r7, #28]
 8006744:	69b9      	ldr	r1, [r7, #24]
 8006746:	221a      	movs	r2, #26
 8006748:	4618      	mov	r0, r3
 800674a:	f7ff fb87 	bl	8005e5c <_SendPacket>
  }
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  SEGGER_SYSVIEW_UNLOCK();
  RECORD_END();
#else
  RECORD_END();
 800674e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006750:	f383 8811 	msr	BASEPRI, r3
#endif
}
 8006754:	bf00      	nop
 8006756:	3758      	adds	r7, #88	; 0x58
 8006758:	46bd      	mov	sp, r7
 800675a:	bd80      	pop	{r7, pc}

0800675c <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software 
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 800675c:	b580      	push	{r7, lr}
 800675e:	b086      	sub	sp, #24
 8006760:	af02      	add	r7, sp, #8
 8006762:	60f8      	str	r0, [r7, #12]
 8006764:	60b9      	str	r1, [r7, #8]
 8006766:	607a      	str	r2, [r7, #4]
 8006768:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 800676a:	2300      	movs	r3, #0
 800676c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8006770:	4917      	ldr	r1, [pc, #92]	; (80067d0 <SEGGER_SYSVIEW_Init+0x74>)
 8006772:	4818      	ldr	r0, [pc, #96]	; (80067d4 <SEGGER_SYSVIEW_Init+0x78>)
 8006774:	f7ff f942 	bl	80059fc <SEGGER_RTT_AllocUpBuffer>
 8006778:	4603      	mov	r3, r0
 800677a:	b2da      	uxtb	r2, r3
 800677c:	4b16      	ldr	r3, [pc, #88]	; (80067d8 <SEGGER_SYSVIEW_Init+0x7c>)
 800677e:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 8006780:	4b15      	ldr	r3, [pc, #84]	; (80067d8 <SEGGER_SYSVIEW_Init+0x7c>)
 8006782:	785a      	ldrb	r2, [r3, #1]
 8006784:	4b14      	ldr	r3, [pc, #80]	; (80067d8 <SEGGER_SYSVIEW_Init+0x7c>)
 8006786:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8006788:	4b13      	ldr	r3, [pc, #76]	; (80067d8 <SEGGER_SYSVIEW_Init+0x7c>)
 800678a:	7e1b      	ldrb	r3, [r3, #24]
 800678c:	4618      	mov	r0, r3
 800678e:	2300      	movs	r3, #0
 8006790:	9300      	str	r3, [sp, #0]
 8006792:	2308      	movs	r3, #8
 8006794:	4a11      	ldr	r2, [pc, #68]	; (80067dc <SEGGER_SYSVIEW_Init+0x80>)
 8006796:	490f      	ldr	r1, [pc, #60]	; (80067d4 <SEGGER_SYSVIEW_Init+0x78>)
 8006798:	f7ff f9b4 	bl	8005b04 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 800679c:	4b0e      	ldr	r3, [pc, #56]	; (80067d8 <SEGGER_SYSVIEW_Init+0x7c>)
 800679e:	2200      	movs	r2, #0
 80067a0:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80067a2:	4b0f      	ldr	r3, [pc, #60]	; (80067e0 <SEGGER_SYSVIEW_Init+0x84>)
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	4a0c      	ldr	r2, [pc, #48]	; (80067d8 <SEGGER_SYSVIEW_Init+0x7c>)
 80067a8:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 80067aa:	4a0b      	ldr	r2, [pc, #44]	; (80067d8 <SEGGER_SYSVIEW_Init+0x7c>)
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 80067b0:	4a09      	ldr	r2, [pc, #36]	; (80067d8 <SEGGER_SYSVIEW_Init+0x7c>)
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 80067b6:	4a08      	ldr	r2, [pc, #32]	; (80067d8 <SEGGER_SYSVIEW_Init+0x7c>)
 80067b8:	68bb      	ldr	r3, [r7, #8]
 80067ba:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 80067bc:	4a06      	ldr	r2, [pc, #24]	; (80067d8 <SEGGER_SYSVIEW_Init+0x7c>)
 80067be:	683b      	ldr	r3, [r7, #0]
 80067c0:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 80067c2:	4b05      	ldr	r3, [pc, #20]	; (80067d8 <SEGGER_SYSVIEW_Init+0x7c>)
 80067c4:	2200      	movs	r2, #0
 80067c6:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 80067c8:	bf00      	nop
 80067ca:	3710      	adds	r7, #16
 80067cc:	46bd      	mov	sp, r7
 80067ce:	bd80      	pop	{r7, pc}
 80067d0:	200043d0 	.word	0x200043d0
 80067d4:	080078c0 	.word	0x080078c0
 80067d8:	200083d8 	.word	0x200083d8
 80067dc:	200083d0 	.word	0x200083d0
 80067e0:	e0001004 	.word	0xe0001004

080067e4 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 80067e4:	b480      	push	{r7}
 80067e6:	b083      	sub	sp, #12
 80067e8:	af00      	add	r7, sp, #0
 80067ea:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 80067ec:	4a04      	ldr	r2, [pc, #16]	; (8006800 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	6113      	str	r3, [r2, #16]
}
 80067f2:	bf00      	nop
 80067f4:	370c      	adds	r7, #12
 80067f6:	46bd      	mov	sp, r7
 80067f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067fc:	4770      	bx	lr
 80067fe:	bf00      	nop
 8006800:	200083d8 	.word	0x200083d8

08006804 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8006804:	b580      	push	{r7, lr}
 8006806:	b084      	sub	sp, #16
 8006808:	af00      	add	r7, sp, #0
 800680a:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800680c:	f3ef 8311 	mrs	r3, BASEPRI
 8006810:	f04f 0120 	mov.w	r1, #32
 8006814:	f381 8811 	msr	BASEPRI, r1
 8006818:	60fb      	str	r3, [r7, #12]
 800681a:	4808      	ldr	r0, [pc, #32]	; (800683c <SEGGER_SYSVIEW_RecordVoid+0x38>)
 800681c:	f7ff fa2f 	bl	8005c7e <_PreparePacket>
 8006820:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 8006822:	687a      	ldr	r2, [r7, #4]
 8006824:	68b9      	ldr	r1, [r7, #8]
 8006826:	68b8      	ldr	r0, [r7, #8]
 8006828:	f7ff fb18 	bl	8005e5c <_SendPacket>
  RECORD_END();
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	f383 8811 	msr	BASEPRI, r3
}
 8006832:	bf00      	nop
 8006834:	3710      	adds	r7, #16
 8006836:	46bd      	mov	sp, r7
 8006838:	bd80      	pop	{r7, pc}
 800683a:	bf00      	nop
 800683c:	20008408 	.word	0x20008408

08006840 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8006840:	b580      	push	{r7, lr}
 8006842:	b088      	sub	sp, #32
 8006844:	af00      	add	r7, sp, #0
 8006846:	6078      	str	r0, [r7, #4]
 8006848:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800684a:	f3ef 8311 	mrs	r3, BASEPRI
 800684e:	f04f 0120 	mov.w	r1, #32
 8006852:	f381 8811 	msr	BASEPRI, r1
 8006856:	617b      	str	r3, [r7, #20]
 8006858:	4816      	ldr	r0, [pc, #88]	; (80068b4 <SEGGER_SYSVIEW_RecordU32+0x74>)
 800685a:	f7ff fa10 	bl	8005c7e <_PreparePacket>
 800685e:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006860:	693b      	ldr	r3, [r7, #16]
 8006862:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	61fb      	str	r3, [r7, #28]
 8006868:	683b      	ldr	r3, [r7, #0]
 800686a:	61bb      	str	r3, [r7, #24]
 800686c:	e00b      	b.n	8006886 <SEGGER_SYSVIEW_RecordU32+0x46>
 800686e:	69bb      	ldr	r3, [r7, #24]
 8006870:	b2da      	uxtb	r2, r3
 8006872:	69fb      	ldr	r3, [r7, #28]
 8006874:	1c59      	adds	r1, r3, #1
 8006876:	61f9      	str	r1, [r7, #28]
 8006878:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800687c:	b2d2      	uxtb	r2, r2
 800687e:	701a      	strb	r2, [r3, #0]
 8006880:	69bb      	ldr	r3, [r7, #24]
 8006882:	09db      	lsrs	r3, r3, #7
 8006884:	61bb      	str	r3, [r7, #24]
 8006886:	69bb      	ldr	r3, [r7, #24]
 8006888:	2b7f      	cmp	r3, #127	; 0x7f
 800688a:	d8f0      	bhi.n	800686e <SEGGER_SYSVIEW_RecordU32+0x2e>
 800688c:	69fb      	ldr	r3, [r7, #28]
 800688e:	1c5a      	adds	r2, r3, #1
 8006890:	61fa      	str	r2, [r7, #28]
 8006892:	69ba      	ldr	r2, [r7, #24]
 8006894:	b2d2      	uxtb	r2, r2
 8006896:	701a      	strb	r2, [r3, #0]
 8006898:	69fb      	ldr	r3, [r7, #28]
 800689a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800689c:	687a      	ldr	r2, [r7, #4]
 800689e:	68f9      	ldr	r1, [r7, #12]
 80068a0:	6938      	ldr	r0, [r7, #16]
 80068a2:	f7ff fadb 	bl	8005e5c <_SendPacket>
  RECORD_END();
 80068a6:	697b      	ldr	r3, [r7, #20]
 80068a8:	f383 8811 	msr	BASEPRI, r3
}
 80068ac:	bf00      	nop
 80068ae:	3720      	adds	r7, #32
 80068b0:	46bd      	mov	sp, r7
 80068b2:	bd80      	pop	{r7, pc}
 80068b4:	20008408 	.word	0x20008408

080068b8 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 80068b8:	b580      	push	{r7, lr}
 80068ba:	b08c      	sub	sp, #48	; 0x30
 80068bc:	af00      	add	r7, sp, #0
 80068be:	60f8      	str	r0, [r7, #12]
 80068c0:	60b9      	str	r1, [r7, #8]
 80068c2:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 80068c4:	f3ef 8311 	mrs	r3, BASEPRI
 80068c8:	f04f 0120 	mov.w	r1, #32
 80068cc:	f381 8811 	msr	BASEPRI, r1
 80068d0:	61fb      	str	r3, [r7, #28]
 80068d2:	4825      	ldr	r0, [pc, #148]	; (8006968 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 80068d4:	f7ff f9d3 	bl	8005c7e <_PreparePacket>
 80068d8:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 80068da:	69bb      	ldr	r3, [r7, #24]
 80068dc:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 80068de:	697b      	ldr	r3, [r7, #20]
 80068e0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80068e2:	68bb      	ldr	r3, [r7, #8]
 80068e4:	62bb      	str	r3, [r7, #40]	; 0x28
 80068e6:	e00b      	b.n	8006900 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 80068e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068ea:	b2da      	uxtb	r2, r3
 80068ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068ee:	1c59      	adds	r1, r3, #1
 80068f0:	62f9      	str	r1, [r7, #44]	; 0x2c
 80068f2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80068f6:	b2d2      	uxtb	r2, r2
 80068f8:	701a      	strb	r2, [r3, #0]
 80068fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068fc:	09db      	lsrs	r3, r3, #7
 80068fe:	62bb      	str	r3, [r7, #40]	; 0x28
 8006900:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006902:	2b7f      	cmp	r3, #127	; 0x7f
 8006904:	d8f0      	bhi.n	80068e8 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 8006906:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006908:	1c5a      	adds	r2, r3, #1
 800690a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800690c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800690e:	b2d2      	uxtb	r2, r2
 8006910:	701a      	strb	r2, [r3, #0]
 8006912:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006914:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8006916:	697b      	ldr	r3, [r7, #20]
 8006918:	627b      	str	r3, [r7, #36]	; 0x24
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	623b      	str	r3, [r7, #32]
 800691e:	e00b      	b.n	8006938 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8006920:	6a3b      	ldr	r3, [r7, #32]
 8006922:	b2da      	uxtb	r2, r3
 8006924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006926:	1c59      	adds	r1, r3, #1
 8006928:	6279      	str	r1, [r7, #36]	; 0x24
 800692a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800692e:	b2d2      	uxtb	r2, r2
 8006930:	701a      	strb	r2, [r3, #0]
 8006932:	6a3b      	ldr	r3, [r7, #32]
 8006934:	09db      	lsrs	r3, r3, #7
 8006936:	623b      	str	r3, [r7, #32]
 8006938:	6a3b      	ldr	r3, [r7, #32]
 800693a:	2b7f      	cmp	r3, #127	; 0x7f
 800693c:	d8f0      	bhi.n	8006920 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 800693e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006940:	1c5a      	adds	r2, r3, #1
 8006942:	627a      	str	r2, [r7, #36]	; 0x24
 8006944:	6a3a      	ldr	r2, [r7, #32]
 8006946:	b2d2      	uxtb	r2, r2
 8006948:	701a      	strb	r2, [r3, #0]
 800694a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800694c:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800694e:	68fa      	ldr	r2, [r7, #12]
 8006950:	6979      	ldr	r1, [r7, #20]
 8006952:	69b8      	ldr	r0, [r7, #24]
 8006954:	f7ff fa82 	bl	8005e5c <_SendPacket>
  RECORD_END();
 8006958:	69fb      	ldr	r3, [r7, #28]
 800695a:	f383 8811 	msr	BASEPRI, r3
}
 800695e:	bf00      	nop
 8006960:	3730      	adds	r7, #48	; 0x30
 8006962:	46bd      	mov	sp, r7
 8006964:	bd80      	pop	{r7, pc}
 8006966:	bf00      	nop
 8006968:	20008408 	.word	0x20008408

0800696c <SEGGER_SYSVIEW_RecordU32x3>:
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 800696c:	b580      	push	{r7, lr}
 800696e:	b08e      	sub	sp, #56	; 0x38
 8006970:	af00      	add	r7, sp, #0
 8006972:	60f8      	str	r0, [r7, #12]
 8006974:	60b9      	str	r1, [r7, #8]
 8006976:	607a      	str	r2, [r7, #4]
 8006978:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 800697a:	f3ef 8311 	mrs	r3, BASEPRI
 800697e:	f04f 0120 	mov.w	r1, #32
 8006982:	f381 8811 	msr	BASEPRI, r1
 8006986:	61fb      	str	r3, [r7, #28]
 8006988:	4832      	ldr	r0, [pc, #200]	; (8006a54 <SEGGER_SYSVIEW_RecordU32x3+0xe8>)
 800698a:	f7ff f978 	bl	8005c7e <_PreparePacket>
 800698e:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8006990:	69bb      	ldr	r3, [r7, #24]
 8006992:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8006994:	697b      	ldr	r3, [r7, #20]
 8006996:	637b      	str	r3, [r7, #52]	; 0x34
 8006998:	68bb      	ldr	r3, [r7, #8]
 800699a:	633b      	str	r3, [r7, #48]	; 0x30
 800699c:	e00b      	b.n	80069b6 <SEGGER_SYSVIEW_RecordU32x3+0x4a>
 800699e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069a0:	b2da      	uxtb	r2, r3
 80069a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80069a4:	1c59      	adds	r1, r3, #1
 80069a6:	6379      	str	r1, [r7, #52]	; 0x34
 80069a8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80069ac:	b2d2      	uxtb	r2, r2
 80069ae:	701a      	strb	r2, [r3, #0]
 80069b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069b2:	09db      	lsrs	r3, r3, #7
 80069b4:	633b      	str	r3, [r7, #48]	; 0x30
 80069b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069b8:	2b7f      	cmp	r3, #127	; 0x7f
 80069ba:	d8f0      	bhi.n	800699e <SEGGER_SYSVIEW_RecordU32x3+0x32>
 80069bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80069be:	1c5a      	adds	r2, r3, #1
 80069c0:	637a      	str	r2, [r7, #52]	; 0x34
 80069c2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80069c4:	b2d2      	uxtb	r2, r2
 80069c6:	701a      	strb	r2, [r3, #0]
 80069c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80069ca:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 80069cc:	697b      	ldr	r3, [r7, #20]
 80069ce:	62fb      	str	r3, [r7, #44]	; 0x2c
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	62bb      	str	r3, [r7, #40]	; 0x28
 80069d4:	e00b      	b.n	80069ee <SEGGER_SYSVIEW_RecordU32x3+0x82>
 80069d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069d8:	b2da      	uxtb	r2, r3
 80069da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069dc:	1c59      	adds	r1, r3, #1
 80069de:	62f9      	str	r1, [r7, #44]	; 0x2c
 80069e0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80069e4:	b2d2      	uxtb	r2, r2
 80069e6:	701a      	strb	r2, [r3, #0]
 80069e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069ea:	09db      	lsrs	r3, r3, #7
 80069ec:	62bb      	str	r3, [r7, #40]	; 0x28
 80069ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069f0:	2b7f      	cmp	r3, #127	; 0x7f
 80069f2:	d8f0      	bhi.n	80069d6 <SEGGER_SYSVIEW_RecordU32x3+0x6a>
 80069f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069f6:	1c5a      	adds	r2, r3, #1
 80069f8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80069fa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80069fc:	b2d2      	uxtb	r2, r2
 80069fe:	701a      	strb	r2, [r3, #0]
 8006a00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a02:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8006a04:	697b      	ldr	r3, [r7, #20]
 8006a06:	627b      	str	r3, [r7, #36]	; 0x24
 8006a08:	683b      	ldr	r3, [r7, #0]
 8006a0a:	623b      	str	r3, [r7, #32]
 8006a0c:	e00b      	b.n	8006a26 <SEGGER_SYSVIEW_RecordU32x3+0xba>
 8006a0e:	6a3b      	ldr	r3, [r7, #32]
 8006a10:	b2da      	uxtb	r2, r3
 8006a12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a14:	1c59      	adds	r1, r3, #1
 8006a16:	6279      	str	r1, [r7, #36]	; 0x24
 8006a18:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006a1c:	b2d2      	uxtb	r2, r2
 8006a1e:	701a      	strb	r2, [r3, #0]
 8006a20:	6a3b      	ldr	r3, [r7, #32]
 8006a22:	09db      	lsrs	r3, r3, #7
 8006a24:	623b      	str	r3, [r7, #32]
 8006a26:	6a3b      	ldr	r3, [r7, #32]
 8006a28:	2b7f      	cmp	r3, #127	; 0x7f
 8006a2a:	d8f0      	bhi.n	8006a0e <SEGGER_SYSVIEW_RecordU32x3+0xa2>
 8006a2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a2e:	1c5a      	adds	r2, r3, #1
 8006a30:	627a      	str	r2, [r7, #36]	; 0x24
 8006a32:	6a3a      	ldr	r2, [r7, #32]
 8006a34:	b2d2      	uxtb	r2, r2
 8006a36:	701a      	strb	r2, [r3, #0]
 8006a38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a3a:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8006a3c:	68fa      	ldr	r2, [r7, #12]
 8006a3e:	6979      	ldr	r1, [r7, #20]
 8006a40:	69b8      	ldr	r0, [r7, #24]
 8006a42:	f7ff fa0b 	bl	8005e5c <_SendPacket>
  RECORD_END();
 8006a46:	69fb      	ldr	r3, [r7, #28]
 8006a48:	f383 8811 	msr	BASEPRI, r3
}
 8006a4c:	bf00      	nop
 8006a4e:	3738      	adds	r7, #56	; 0x38
 8006a50:	46bd      	mov	sp, r7
 8006a52:	bd80      	pop	{r7, pc}
 8006a54:	20008408 	.word	0x20008408

08006a58 <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 8006a58:	b580      	push	{r7, lr}
 8006a5a:	b090      	sub	sp, #64	; 0x40
 8006a5c:	af00      	add	r7, sp, #0
 8006a5e:	60f8      	str	r0, [r7, #12]
 8006a60:	60b9      	str	r1, [r7, #8]
 8006a62:	607a      	str	r2, [r7, #4]
 8006a64:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8006a66:	f3ef 8311 	mrs	r3, BASEPRI
 8006a6a:	f04f 0120 	mov.w	r1, #32
 8006a6e:	f381 8811 	msr	BASEPRI, r1
 8006a72:	61fb      	str	r3, [r7, #28]
 8006a74:	4840      	ldr	r0, [pc, #256]	; (8006b78 <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 8006a76:	f7ff f902 	bl	8005c7e <_PreparePacket>
 8006a7a:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8006a7c:	69bb      	ldr	r3, [r7, #24]
 8006a7e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8006a80:	697b      	ldr	r3, [r7, #20]
 8006a82:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006a84:	68bb      	ldr	r3, [r7, #8]
 8006a86:	63bb      	str	r3, [r7, #56]	; 0x38
 8006a88:	e00b      	b.n	8006aa2 <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 8006a8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a8c:	b2da      	uxtb	r2, r3
 8006a8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a90:	1c59      	adds	r1, r3, #1
 8006a92:	63f9      	str	r1, [r7, #60]	; 0x3c
 8006a94:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006a98:	b2d2      	uxtb	r2, r2
 8006a9a:	701a      	strb	r2, [r3, #0]
 8006a9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a9e:	09db      	lsrs	r3, r3, #7
 8006aa0:	63bb      	str	r3, [r7, #56]	; 0x38
 8006aa2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006aa4:	2b7f      	cmp	r3, #127	; 0x7f
 8006aa6:	d8f0      	bhi.n	8006a8a <SEGGER_SYSVIEW_RecordU32x4+0x32>
 8006aa8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006aaa:	1c5a      	adds	r2, r3, #1
 8006aac:	63fa      	str	r2, [r7, #60]	; 0x3c
 8006aae:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006ab0:	b2d2      	uxtb	r2, r2
 8006ab2:	701a      	strb	r2, [r3, #0]
 8006ab4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ab6:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8006ab8:	697b      	ldr	r3, [r7, #20]
 8006aba:	637b      	str	r3, [r7, #52]	; 0x34
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	633b      	str	r3, [r7, #48]	; 0x30
 8006ac0:	e00b      	b.n	8006ada <SEGGER_SYSVIEW_RecordU32x4+0x82>
 8006ac2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ac4:	b2da      	uxtb	r2, r3
 8006ac6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ac8:	1c59      	adds	r1, r3, #1
 8006aca:	6379      	str	r1, [r7, #52]	; 0x34
 8006acc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006ad0:	b2d2      	uxtb	r2, r2
 8006ad2:	701a      	strb	r2, [r3, #0]
 8006ad4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ad6:	09db      	lsrs	r3, r3, #7
 8006ad8:	633b      	str	r3, [r7, #48]	; 0x30
 8006ada:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006adc:	2b7f      	cmp	r3, #127	; 0x7f
 8006ade:	d8f0      	bhi.n	8006ac2 <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 8006ae0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ae2:	1c5a      	adds	r2, r3, #1
 8006ae4:	637a      	str	r2, [r7, #52]	; 0x34
 8006ae6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006ae8:	b2d2      	uxtb	r2, r2
 8006aea:	701a      	strb	r2, [r3, #0]
 8006aec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006aee:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8006af0:	697b      	ldr	r3, [r7, #20]
 8006af2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006af4:	683b      	ldr	r3, [r7, #0]
 8006af6:	62bb      	str	r3, [r7, #40]	; 0x28
 8006af8:	e00b      	b.n	8006b12 <SEGGER_SYSVIEW_RecordU32x4+0xba>
 8006afa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006afc:	b2da      	uxtb	r2, r3
 8006afe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b00:	1c59      	adds	r1, r3, #1
 8006b02:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006b04:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006b08:	b2d2      	uxtb	r2, r2
 8006b0a:	701a      	strb	r2, [r3, #0]
 8006b0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b0e:	09db      	lsrs	r3, r3, #7
 8006b10:	62bb      	str	r3, [r7, #40]	; 0x28
 8006b12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b14:	2b7f      	cmp	r3, #127	; 0x7f
 8006b16:	d8f0      	bhi.n	8006afa <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 8006b18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b1a:	1c5a      	adds	r2, r3, #1
 8006b1c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006b1e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006b20:	b2d2      	uxtb	r2, r2
 8006b22:	701a      	strb	r2, [r3, #0]
 8006b24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b26:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 8006b28:	697b      	ldr	r3, [r7, #20]
 8006b2a:	627b      	str	r3, [r7, #36]	; 0x24
 8006b2c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006b2e:	623b      	str	r3, [r7, #32]
 8006b30:	e00b      	b.n	8006b4a <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 8006b32:	6a3b      	ldr	r3, [r7, #32]
 8006b34:	b2da      	uxtb	r2, r3
 8006b36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b38:	1c59      	adds	r1, r3, #1
 8006b3a:	6279      	str	r1, [r7, #36]	; 0x24
 8006b3c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006b40:	b2d2      	uxtb	r2, r2
 8006b42:	701a      	strb	r2, [r3, #0]
 8006b44:	6a3b      	ldr	r3, [r7, #32]
 8006b46:	09db      	lsrs	r3, r3, #7
 8006b48:	623b      	str	r3, [r7, #32]
 8006b4a:	6a3b      	ldr	r3, [r7, #32]
 8006b4c:	2b7f      	cmp	r3, #127	; 0x7f
 8006b4e:	d8f0      	bhi.n	8006b32 <SEGGER_SYSVIEW_RecordU32x4+0xda>
 8006b50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b52:	1c5a      	adds	r2, r3, #1
 8006b54:	627a      	str	r2, [r7, #36]	; 0x24
 8006b56:	6a3a      	ldr	r2, [r7, #32]
 8006b58:	b2d2      	uxtb	r2, r2
 8006b5a:	701a      	strb	r2, [r3, #0]
 8006b5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b5e:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8006b60:	68fa      	ldr	r2, [r7, #12]
 8006b62:	6979      	ldr	r1, [r7, #20]
 8006b64:	69b8      	ldr	r0, [r7, #24]
 8006b66:	f7ff f979 	bl	8005e5c <_SendPacket>
  RECORD_END();
 8006b6a:	69fb      	ldr	r3, [r7, #28]
 8006b6c:	f383 8811 	msr	BASEPRI, r3
}
 8006b70:	bf00      	nop
 8006b72:	3740      	adds	r7, #64	; 0x40
 8006b74:	46bd      	mov	sp, r7
 8006b76:	bd80      	pop	{r7, pc}
 8006b78:	20008408 	.word	0x20008408

08006b7c <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 8006b7c:	b580      	push	{r7, lr}
 8006b7e:	b08c      	sub	sp, #48	; 0x30
 8006b80:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 8006b82:	4b58      	ldr	r3, [pc, #352]	; (8006ce4 <SEGGER_SYSVIEW_Start+0x168>)
 8006b84:	2201      	movs	r2, #1
 8006b86:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8006b88:	f3ef 8311 	mrs	r3, BASEPRI
 8006b8c:	f04f 0120 	mov.w	r1, #32
 8006b90:	f381 8811 	msr	BASEPRI, r1
 8006b94:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 8006b96:	4b53      	ldr	r3, [pc, #332]	; (8006ce4 <SEGGER_SYSVIEW_Start+0x168>)
 8006b98:	785b      	ldrb	r3, [r3, #1]
 8006b9a:	220a      	movs	r2, #10
 8006b9c:	4952      	ldr	r1, [pc, #328]	; (8006ce8 <SEGGER_SYSVIEW_Start+0x16c>)
 8006b9e:	4618      	mov	r0, r3
 8006ba0:	f7f9 fb16 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 8006baa:	200a      	movs	r0, #10
 8006bac:	f7ff fe2a 	bl	8006804 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8006bb0:	f3ef 8311 	mrs	r3, BASEPRI
 8006bb4:	f04f 0120 	mov.w	r1, #32
 8006bb8:	f381 8811 	msr	BASEPRI, r1
 8006bbc:	60bb      	str	r3, [r7, #8]
 8006bbe:	484b      	ldr	r0, [pc, #300]	; (8006cec <SEGGER_SYSVIEW_Start+0x170>)
 8006bc0:	f7ff f85d 	bl	8005c7e <_PreparePacket>
 8006bc4:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8006bca:	683b      	ldr	r3, [r7, #0]
 8006bcc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006bce:	4b45      	ldr	r3, [pc, #276]	; (8006ce4 <SEGGER_SYSVIEW_Start+0x168>)
 8006bd0:	685b      	ldr	r3, [r3, #4]
 8006bd2:	62bb      	str	r3, [r7, #40]	; 0x28
 8006bd4:	e00b      	b.n	8006bee <SEGGER_SYSVIEW_Start+0x72>
 8006bd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bd8:	b2da      	uxtb	r2, r3
 8006bda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bdc:	1c59      	adds	r1, r3, #1
 8006bde:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006be0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006be4:	b2d2      	uxtb	r2, r2
 8006be6:	701a      	strb	r2, [r3, #0]
 8006be8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bea:	09db      	lsrs	r3, r3, #7
 8006bec:	62bb      	str	r3, [r7, #40]	; 0x28
 8006bee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bf0:	2b7f      	cmp	r3, #127	; 0x7f
 8006bf2:	d8f0      	bhi.n	8006bd6 <SEGGER_SYSVIEW_Start+0x5a>
 8006bf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bf6:	1c5a      	adds	r2, r3, #1
 8006bf8:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006bfa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006bfc:	b2d2      	uxtb	r2, r2
 8006bfe:	701a      	strb	r2, [r3, #0]
 8006c00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c02:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8006c04:	683b      	ldr	r3, [r7, #0]
 8006c06:	627b      	str	r3, [r7, #36]	; 0x24
 8006c08:	4b36      	ldr	r3, [pc, #216]	; (8006ce4 <SEGGER_SYSVIEW_Start+0x168>)
 8006c0a:	689b      	ldr	r3, [r3, #8]
 8006c0c:	623b      	str	r3, [r7, #32]
 8006c0e:	e00b      	b.n	8006c28 <SEGGER_SYSVIEW_Start+0xac>
 8006c10:	6a3b      	ldr	r3, [r7, #32]
 8006c12:	b2da      	uxtb	r2, r3
 8006c14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c16:	1c59      	adds	r1, r3, #1
 8006c18:	6279      	str	r1, [r7, #36]	; 0x24
 8006c1a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006c1e:	b2d2      	uxtb	r2, r2
 8006c20:	701a      	strb	r2, [r3, #0]
 8006c22:	6a3b      	ldr	r3, [r7, #32]
 8006c24:	09db      	lsrs	r3, r3, #7
 8006c26:	623b      	str	r3, [r7, #32]
 8006c28:	6a3b      	ldr	r3, [r7, #32]
 8006c2a:	2b7f      	cmp	r3, #127	; 0x7f
 8006c2c:	d8f0      	bhi.n	8006c10 <SEGGER_SYSVIEW_Start+0x94>
 8006c2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c30:	1c5a      	adds	r2, r3, #1
 8006c32:	627a      	str	r2, [r7, #36]	; 0x24
 8006c34:	6a3a      	ldr	r2, [r7, #32]
 8006c36:	b2d2      	uxtb	r2, r2
 8006c38:	701a      	strb	r2, [r3, #0]
 8006c3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c3c:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8006c3e:	683b      	ldr	r3, [r7, #0]
 8006c40:	61fb      	str	r3, [r7, #28]
 8006c42:	4b28      	ldr	r3, [pc, #160]	; (8006ce4 <SEGGER_SYSVIEW_Start+0x168>)
 8006c44:	691b      	ldr	r3, [r3, #16]
 8006c46:	61bb      	str	r3, [r7, #24]
 8006c48:	e00b      	b.n	8006c62 <SEGGER_SYSVIEW_Start+0xe6>
 8006c4a:	69bb      	ldr	r3, [r7, #24]
 8006c4c:	b2da      	uxtb	r2, r3
 8006c4e:	69fb      	ldr	r3, [r7, #28]
 8006c50:	1c59      	adds	r1, r3, #1
 8006c52:	61f9      	str	r1, [r7, #28]
 8006c54:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006c58:	b2d2      	uxtb	r2, r2
 8006c5a:	701a      	strb	r2, [r3, #0]
 8006c5c:	69bb      	ldr	r3, [r7, #24]
 8006c5e:	09db      	lsrs	r3, r3, #7
 8006c60:	61bb      	str	r3, [r7, #24]
 8006c62:	69bb      	ldr	r3, [r7, #24]
 8006c64:	2b7f      	cmp	r3, #127	; 0x7f
 8006c66:	d8f0      	bhi.n	8006c4a <SEGGER_SYSVIEW_Start+0xce>
 8006c68:	69fb      	ldr	r3, [r7, #28]
 8006c6a:	1c5a      	adds	r2, r3, #1
 8006c6c:	61fa      	str	r2, [r7, #28]
 8006c6e:	69ba      	ldr	r2, [r7, #24]
 8006c70:	b2d2      	uxtb	r2, r2
 8006c72:	701a      	strb	r2, [r3, #0]
 8006c74:	69fb      	ldr	r3, [r7, #28]
 8006c76:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8006c78:	683b      	ldr	r3, [r7, #0]
 8006c7a:	617b      	str	r3, [r7, #20]
 8006c7c:	2300      	movs	r3, #0
 8006c7e:	613b      	str	r3, [r7, #16]
 8006c80:	e00b      	b.n	8006c9a <SEGGER_SYSVIEW_Start+0x11e>
 8006c82:	693b      	ldr	r3, [r7, #16]
 8006c84:	b2da      	uxtb	r2, r3
 8006c86:	697b      	ldr	r3, [r7, #20]
 8006c88:	1c59      	adds	r1, r3, #1
 8006c8a:	6179      	str	r1, [r7, #20]
 8006c8c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006c90:	b2d2      	uxtb	r2, r2
 8006c92:	701a      	strb	r2, [r3, #0]
 8006c94:	693b      	ldr	r3, [r7, #16]
 8006c96:	09db      	lsrs	r3, r3, #7
 8006c98:	613b      	str	r3, [r7, #16]
 8006c9a:	693b      	ldr	r3, [r7, #16]
 8006c9c:	2b7f      	cmp	r3, #127	; 0x7f
 8006c9e:	d8f0      	bhi.n	8006c82 <SEGGER_SYSVIEW_Start+0x106>
 8006ca0:	697b      	ldr	r3, [r7, #20]
 8006ca2:	1c5a      	adds	r2, r3, #1
 8006ca4:	617a      	str	r2, [r7, #20]
 8006ca6:	693a      	ldr	r2, [r7, #16]
 8006ca8:	b2d2      	uxtb	r2, r2
 8006caa:	701a      	strb	r2, [r3, #0]
 8006cac:	697b      	ldr	r3, [r7, #20]
 8006cae:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8006cb0:	2218      	movs	r2, #24
 8006cb2:	6839      	ldr	r1, [r7, #0]
 8006cb4:	6878      	ldr	r0, [r7, #4]
 8006cb6:	f7ff f8d1 	bl	8005e5c <_SendPacket>
      RECORD_END();
 8006cba:	68bb      	ldr	r3, [r7, #8]
 8006cbc:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8006cc0:	4b08      	ldr	r3, [pc, #32]	; (8006ce4 <SEGGER_SYSVIEW_Start+0x168>)
 8006cc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d002      	beq.n	8006cce <SEGGER_SYSVIEW_Start+0x152>
      _SYSVIEW_Globals.pfSendSysDesc();
 8006cc8:	4b06      	ldr	r3, [pc, #24]	; (8006ce4 <SEGGER_SYSVIEW_Start+0x168>)
 8006cca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ccc:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 8006cce:	f000 f9eb 	bl	80070a8 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 8006cd2:	f000 f9b1 	bl	8007038 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8006cd6:	f000 fc23 	bl	8007520 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 8006cda:	bf00      	nop
 8006cdc:	3730      	adds	r7, #48	; 0x30
 8006cde:	46bd      	mov	sp, r7
 8006ce0:	bd80      	pop	{r7, pc}
 8006ce2:	bf00      	nop
 8006ce4:	200083d8 	.word	0x200083d8
 8006ce8:	08007908 	.word	0x08007908
 8006cec:	20008408 	.word	0x20008408

08006cf0 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8006cf0:	b580      	push	{r7, lr}
 8006cf2:	b082      	sub	sp, #8
 8006cf4:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006cf6:	f3ef 8311 	mrs	r3, BASEPRI
 8006cfa:	f04f 0120 	mov.w	r1, #32
 8006cfe:	f381 8811 	msr	BASEPRI, r1
 8006d02:	607b      	str	r3, [r7, #4]
 8006d04:	480b      	ldr	r0, [pc, #44]	; (8006d34 <SEGGER_SYSVIEW_Stop+0x44>)
 8006d06:	f7fe ffba 	bl	8005c7e <_PreparePacket>
 8006d0a:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8006d0c:	4b0a      	ldr	r3, [pc, #40]	; (8006d38 <SEGGER_SYSVIEW_Stop+0x48>)
 8006d0e:	781b      	ldrb	r3, [r3, #0]
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d007      	beq.n	8006d24 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8006d14:	220b      	movs	r2, #11
 8006d16:	6839      	ldr	r1, [r7, #0]
 8006d18:	6838      	ldr	r0, [r7, #0]
 8006d1a:	f7ff f89f 	bl	8005e5c <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 8006d1e:	4b06      	ldr	r3, [pc, #24]	; (8006d38 <SEGGER_SYSVIEW_Stop+0x48>)
 8006d20:	2200      	movs	r2, #0
 8006d22:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	f383 8811 	msr	BASEPRI, r3
}
 8006d2a:	bf00      	nop
 8006d2c:	3708      	adds	r7, #8
 8006d2e:	46bd      	mov	sp, r7
 8006d30:	bd80      	pop	{r7, pc}
 8006d32:	bf00      	nop
 8006d34:	20008408 	.word	0x20008408
 8006d38:	200083d8 	.word	0x200083d8

08006d3c <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8006d3c:	b580      	push	{r7, lr}
 8006d3e:	b08c      	sub	sp, #48	; 0x30
 8006d40:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8006d42:	f3ef 8311 	mrs	r3, BASEPRI
 8006d46:	f04f 0120 	mov.w	r1, #32
 8006d4a:	f381 8811 	msr	BASEPRI, r1
 8006d4e:	60fb      	str	r3, [r7, #12]
 8006d50:	4845      	ldr	r0, [pc, #276]	; (8006e68 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 8006d52:	f7fe ff94 	bl	8005c7e <_PreparePacket>
 8006d56:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8006d58:	68bb      	ldr	r3, [r7, #8]
 8006d5a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006d60:	4b42      	ldr	r3, [pc, #264]	; (8006e6c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006d62:	685b      	ldr	r3, [r3, #4]
 8006d64:	62bb      	str	r3, [r7, #40]	; 0x28
 8006d66:	e00b      	b.n	8006d80 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8006d68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d6a:	b2da      	uxtb	r2, r3
 8006d6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d6e:	1c59      	adds	r1, r3, #1
 8006d70:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006d72:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006d76:	b2d2      	uxtb	r2, r2
 8006d78:	701a      	strb	r2, [r3, #0]
 8006d7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d7c:	09db      	lsrs	r3, r3, #7
 8006d7e:	62bb      	str	r3, [r7, #40]	; 0x28
 8006d80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d82:	2b7f      	cmp	r3, #127	; 0x7f
 8006d84:	d8f0      	bhi.n	8006d68 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 8006d86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d88:	1c5a      	adds	r2, r3, #1
 8006d8a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006d8c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006d8e:	b2d2      	uxtb	r2, r2
 8006d90:	701a      	strb	r2, [r3, #0]
 8006d92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d94:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	627b      	str	r3, [r7, #36]	; 0x24
 8006d9a:	4b34      	ldr	r3, [pc, #208]	; (8006e6c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006d9c:	689b      	ldr	r3, [r3, #8]
 8006d9e:	623b      	str	r3, [r7, #32]
 8006da0:	e00b      	b.n	8006dba <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 8006da2:	6a3b      	ldr	r3, [r7, #32]
 8006da4:	b2da      	uxtb	r2, r3
 8006da6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006da8:	1c59      	adds	r1, r3, #1
 8006daa:	6279      	str	r1, [r7, #36]	; 0x24
 8006dac:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006db0:	b2d2      	uxtb	r2, r2
 8006db2:	701a      	strb	r2, [r3, #0]
 8006db4:	6a3b      	ldr	r3, [r7, #32]
 8006db6:	09db      	lsrs	r3, r3, #7
 8006db8:	623b      	str	r3, [r7, #32]
 8006dba:	6a3b      	ldr	r3, [r7, #32]
 8006dbc:	2b7f      	cmp	r3, #127	; 0x7f
 8006dbe:	d8f0      	bhi.n	8006da2 <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8006dc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dc2:	1c5a      	adds	r2, r3, #1
 8006dc4:	627a      	str	r2, [r7, #36]	; 0x24
 8006dc6:	6a3a      	ldr	r2, [r7, #32]
 8006dc8:	b2d2      	uxtb	r2, r2
 8006dca:	701a      	strb	r2, [r3, #0]
 8006dcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dce:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	61fb      	str	r3, [r7, #28]
 8006dd4:	4b25      	ldr	r3, [pc, #148]	; (8006e6c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006dd6:	691b      	ldr	r3, [r3, #16]
 8006dd8:	61bb      	str	r3, [r7, #24]
 8006dda:	e00b      	b.n	8006df4 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8006ddc:	69bb      	ldr	r3, [r7, #24]
 8006dde:	b2da      	uxtb	r2, r3
 8006de0:	69fb      	ldr	r3, [r7, #28]
 8006de2:	1c59      	adds	r1, r3, #1
 8006de4:	61f9      	str	r1, [r7, #28]
 8006de6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006dea:	b2d2      	uxtb	r2, r2
 8006dec:	701a      	strb	r2, [r3, #0]
 8006dee:	69bb      	ldr	r3, [r7, #24]
 8006df0:	09db      	lsrs	r3, r3, #7
 8006df2:	61bb      	str	r3, [r7, #24]
 8006df4:	69bb      	ldr	r3, [r7, #24]
 8006df6:	2b7f      	cmp	r3, #127	; 0x7f
 8006df8:	d8f0      	bhi.n	8006ddc <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 8006dfa:	69fb      	ldr	r3, [r7, #28]
 8006dfc:	1c5a      	adds	r2, r3, #1
 8006dfe:	61fa      	str	r2, [r7, #28]
 8006e00:	69ba      	ldr	r2, [r7, #24]
 8006e02:	b2d2      	uxtb	r2, r2
 8006e04:	701a      	strb	r2, [r3, #0]
 8006e06:	69fb      	ldr	r3, [r7, #28]
 8006e08:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	617b      	str	r3, [r7, #20]
 8006e0e:	2300      	movs	r3, #0
 8006e10:	613b      	str	r3, [r7, #16]
 8006e12:	e00b      	b.n	8006e2c <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8006e14:	693b      	ldr	r3, [r7, #16]
 8006e16:	b2da      	uxtb	r2, r3
 8006e18:	697b      	ldr	r3, [r7, #20]
 8006e1a:	1c59      	adds	r1, r3, #1
 8006e1c:	6179      	str	r1, [r7, #20]
 8006e1e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006e22:	b2d2      	uxtb	r2, r2
 8006e24:	701a      	strb	r2, [r3, #0]
 8006e26:	693b      	ldr	r3, [r7, #16]
 8006e28:	09db      	lsrs	r3, r3, #7
 8006e2a:	613b      	str	r3, [r7, #16]
 8006e2c:	693b      	ldr	r3, [r7, #16]
 8006e2e:	2b7f      	cmp	r3, #127	; 0x7f
 8006e30:	d8f0      	bhi.n	8006e14 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 8006e32:	697b      	ldr	r3, [r7, #20]
 8006e34:	1c5a      	adds	r2, r3, #1
 8006e36:	617a      	str	r2, [r7, #20]
 8006e38:	693a      	ldr	r2, [r7, #16]
 8006e3a:	b2d2      	uxtb	r2, r2
 8006e3c:	701a      	strb	r2, [r3, #0]
 8006e3e:	697b      	ldr	r3, [r7, #20]
 8006e40:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8006e42:	2218      	movs	r2, #24
 8006e44:	6879      	ldr	r1, [r7, #4]
 8006e46:	68b8      	ldr	r0, [r7, #8]
 8006e48:	f7ff f808 	bl	8005e5c <_SendPacket>
  RECORD_END();
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 8006e52:	4b06      	ldr	r3, [pc, #24]	; (8006e6c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006e54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d002      	beq.n	8006e60 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 8006e5a:	4b04      	ldr	r3, [pc, #16]	; (8006e6c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006e5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e5e:	4798      	blx	r3
  }
}
 8006e60:	bf00      	nop
 8006e62:	3730      	adds	r7, #48	; 0x30
 8006e64:	46bd      	mov	sp, r7
 8006e66:	bd80      	pop	{r7, pc}
 8006e68:	20008408 	.word	0x20008408
 8006e6c:	200083d8 	.word	0x200083d8

08006e70 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8006e70:	b580      	push	{r7, lr}
 8006e72:	b092      	sub	sp, #72	; 0x48
 8006e74:	af00      	add	r7, sp, #0
 8006e76:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8006e78:	f3ef 8311 	mrs	r3, BASEPRI
 8006e7c:	f04f 0120 	mov.w	r1, #32
 8006e80:	f381 8811 	msr	BASEPRI, r1
 8006e84:	617b      	str	r3, [r7, #20]
 8006e86:	486a      	ldr	r0, [pc, #424]	; (8007030 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 8006e88:	f7fe fef9 	bl	8005c7e <_PreparePacket>
 8006e8c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006e8e:	693b      	ldr	r3, [r7, #16]
 8006e90:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	647b      	str	r3, [r7, #68]	; 0x44
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	681a      	ldr	r2, [r3, #0]
 8006e9a:	4b66      	ldr	r3, [pc, #408]	; (8007034 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8006e9c:	691b      	ldr	r3, [r3, #16]
 8006e9e:	1ad3      	subs	r3, r2, r3
 8006ea0:	643b      	str	r3, [r7, #64]	; 0x40
 8006ea2:	e00b      	b.n	8006ebc <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 8006ea4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006ea6:	b2da      	uxtb	r2, r3
 8006ea8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006eaa:	1c59      	adds	r1, r3, #1
 8006eac:	6479      	str	r1, [r7, #68]	; 0x44
 8006eae:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006eb2:	b2d2      	uxtb	r2, r2
 8006eb4:	701a      	strb	r2, [r3, #0]
 8006eb6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006eb8:	09db      	lsrs	r3, r3, #7
 8006eba:	643b      	str	r3, [r7, #64]	; 0x40
 8006ebc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006ebe:	2b7f      	cmp	r3, #127	; 0x7f
 8006ec0:	d8f0      	bhi.n	8006ea4 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 8006ec2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006ec4:	1c5a      	adds	r2, r3, #1
 8006ec6:	647a      	str	r2, [r7, #68]	; 0x44
 8006ec8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006eca:	b2d2      	uxtb	r2, r2
 8006ecc:	701a      	strb	r2, [r3, #0]
 8006ece:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006ed0:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	689b      	ldr	r3, [r3, #8]
 8006eda:	63bb      	str	r3, [r7, #56]	; 0x38
 8006edc:	e00b      	b.n	8006ef6 <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 8006ede:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ee0:	b2da      	uxtb	r2, r3
 8006ee2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ee4:	1c59      	adds	r1, r3, #1
 8006ee6:	63f9      	str	r1, [r7, #60]	; 0x3c
 8006ee8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006eec:	b2d2      	uxtb	r2, r2
 8006eee:	701a      	strb	r2, [r3, #0]
 8006ef0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ef2:	09db      	lsrs	r3, r3, #7
 8006ef4:	63bb      	str	r3, [r7, #56]	; 0x38
 8006ef6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ef8:	2b7f      	cmp	r3, #127	; 0x7f
 8006efa:	d8f0      	bhi.n	8006ede <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 8006efc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006efe:	1c5a      	adds	r2, r3, #1
 8006f00:	63fa      	str	r2, [r7, #60]	; 0x3c
 8006f02:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006f04:	b2d2      	uxtb	r2, r2
 8006f06:	701a      	strb	r2, [r3, #0]
 8006f08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f0a:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	685b      	ldr	r3, [r3, #4]
 8006f10:	2220      	movs	r2, #32
 8006f12:	4619      	mov	r1, r3
 8006f14:	68f8      	ldr	r0, [r7, #12]
 8006f16:	f7fe fe65 	bl	8005be4 <_EncodeStr>
 8006f1a:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8006f1c:	2209      	movs	r2, #9
 8006f1e:	68f9      	ldr	r1, [r7, #12]
 8006f20:	6938      	ldr	r0, [r7, #16]
 8006f22:	f7fe ff9b 	bl	8005e5c <_SendPacket>
  //
  pPayload = pPayloadStart;
 8006f26:	693b      	ldr	r3, [r7, #16]
 8006f28:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	637b      	str	r3, [r7, #52]	; 0x34
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	681a      	ldr	r2, [r3, #0]
 8006f32:	4b40      	ldr	r3, [pc, #256]	; (8007034 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8006f34:	691b      	ldr	r3, [r3, #16]
 8006f36:	1ad3      	subs	r3, r2, r3
 8006f38:	633b      	str	r3, [r7, #48]	; 0x30
 8006f3a:	e00b      	b.n	8006f54 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 8006f3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f3e:	b2da      	uxtb	r2, r3
 8006f40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f42:	1c59      	adds	r1, r3, #1
 8006f44:	6379      	str	r1, [r7, #52]	; 0x34
 8006f46:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006f4a:	b2d2      	uxtb	r2, r2
 8006f4c:	701a      	strb	r2, [r3, #0]
 8006f4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f50:	09db      	lsrs	r3, r3, #7
 8006f52:	633b      	str	r3, [r7, #48]	; 0x30
 8006f54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f56:	2b7f      	cmp	r3, #127	; 0x7f
 8006f58:	d8f0      	bhi.n	8006f3c <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 8006f5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f5c:	1c5a      	adds	r2, r3, #1
 8006f5e:	637a      	str	r2, [r7, #52]	; 0x34
 8006f60:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006f62:	b2d2      	uxtb	r2, r2
 8006f64:	701a      	strb	r2, [r3, #0]
 8006f66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f68:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	68db      	ldr	r3, [r3, #12]
 8006f72:	62bb      	str	r3, [r7, #40]	; 0x28
 8006f74:	e00b      	b.n	8006f8e <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 8006f76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f78:	b2da      	uxtb	r2, r3
 8006f7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f7c:	1c59      	adds	r1, r3, #1
 8006f7e:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006f80:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006f84:	b2d2      	uxtb	r2, r2
 8006f86:	701a      	strb	r2, [r3, #0]
 8006f88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f8a:	09db      	lsrs	r3, r3, #7
 8006f8c:	62bb      	str	r3, [r7, #40]	; 0x28
 8006f8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f90:	2b7f      	cmp	r3, #127	; 0x7f
 8006f92:	d8f0      	bhi.n	8006f76 <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 8006f94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f96:	1c5a      	adds	r2, r3, #1
 8006f98:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006f9a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006f9c:	b2d2      	uxtb	r2, r2
 8006f9e:	701a      	strb	r2, [r3, #0]
 8006fa0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fa2:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	627b      	str	r3, [r7, #36]	; 0x24
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	691b      	ldr	r3, [r3, #16]
 8006fac:	623b      	str	r3, [r7, #32]
 8006fae:	e00b      	b.n	8006fc8 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 8006fb0:	6a3b      	ldr	r3, [r7, #32]
 8006fb2:	b2da      	uxtb	r2, r3
 8006fb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fb6:	1c59      	adds	r1, r3, #1
 8006fb8:	6279      	str	r1, [r7, #36]	; 0x24
 8006fba:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006fbe:	b2d2      	uxtb	r2, r2
 8006fc0:	701a      	strb	r2, [r3, #0]
 8006fc2:	6a3b      	ldr	r3, [r7, #32]
 8006fc4:	09db      	lsrs	r3, r3, #7
 8006fc6:	623b      	str	r3, [r7, #32]
 8006fc8:	6a3b      	ldr	r3, [r7, #32]
 8006fca:	2b7f      	cmp	r3, #127	; 0x7f
 8006fcc:	d8f0      	bhi.n	8006fb0 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 8006fce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fd0:	1c5a      	adds	r2, r3, #1
 8006fd2:	627a      	str	r2, [r7, #36]	; 0x24
 8006fd4:	6a3a      	ldr	r2, [r7, #32]
 8006fd6:	b2d2      	uxtb	r2, r2
 8006fd8:	701a      	strb	r2, [r3, #0]
 8006fda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fdc:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	61fb      	str	r3, [r7, #28]
 8006fe2:	2300      	movs	r3, #0
 8006fe4:	61bb      	str	r3, [r7, #24]
 8006fe6:	e00b      	b.n	8007000 <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 8006fe8:	69bb      	ldr	r3, [r7, #24]
 8006fea:	b2da      	uxtb	r2, r3
 8006fec:	69fb      	ldr	r3, [r7, #28]
 8006fee:	1c59      	adds	r1, r3, #1
 8006ff0:	61f9      	str	r1, [r7, #28]
 8006ff2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006ff6:	b2d2      	uxtb	r2, r2
 8006ff8:	701a      	strb	r2, [r3, #0]
 8006ffa:	69bb      	ldr	r3, [r7, #24]
 8006ffc:	09db      	lsrs	r3, r3, #7
 8006ffe:	61bb      	str	r3, [r7, #24]
 8007000:	69bb      	ldr	r3, [r7, #24]
 8007002:	2b7f      	cmp	r3, #127	; 0x7f
 8007004:	d8f0      	bhi.n	8006fe8 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 8007006:	69fb      	ldr	r3, [r7, #28]
 8007008:	1c5a      	adds	r2, r3, #1
 800700a:	61fa      	str	r2, [r7, #28]
 800700c:	69ba      	ldr	r2, [r7, #24]
 800700e:	b2d2      	uxtb	r2, r2
 8007010:	701a      	strb	r2, [r3, #0]
 8007012:	69fb      	ldr	r3, [r7, #28]
 8007014:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 8007016:	2215      	movs	r2, #21
 8007018:	68f9      	ldr	r1, [r7, #12]
 800701a:	6938      	ldr	r0, [r7, #16]
 800701c:	f7fe ff1e 	bl	8005e5c <_SendPacket>
  RECORD_END();
 8007020:	697b      	ldr	r3, [r7, #20]
 8007022:	f383 8811 	msr	BASEPRI, r3
}
 8007026:	bf00      	nop
 8007028:	3748      	adds	r7, #72	; 0x48
 800702a:	46bd      	mov	sp, r7
 800702c:	bd80      	pop	{r7, pc}
 800702e:	bf00      	nop
 8007030:	20008408 	.word	0x20008408
 8007034:	200083d8 	.word	0x200083d8

08007038 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8007038:	b580      	push	{r7, lr}
 800703a:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 800703c:	4b07      	ldr	r3, [pc, #28]	; (800705c <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800703e:	6a1b      	ldr	r3, [r3, #32]
 8007040:	2b00      	cmp	r3, #0
 8007042:	d008      	beq.n	8007056 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8007044:	4b05      	ldr	r3, [pc, #20]	; (800705c <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8007046:	6a1b      	ldr	r3, [r3, #32]
 8007048:	685b      	ldr	r3, [r3, #4]
 800704a:	2b00      	cmp	r3, #0
 800704c:	d003      	beq.n	8007056 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 800704e:	4b03      	ldr	r3, [pc, #12]	; (800705c <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8007050:	6a1b      	ldr	r3, [r3, #32]
 8007052:	685b      	ldr	r3, [r3, #4]
 8007054:	4798      	blx	r3
  }
}
 8007056:	bf00      	nop
 8007058:	bd80      	pop	{r7, pc}
 800705a:	bf00      	nop
 800705c:	200083d8 	.word	0x200083d8

08007060 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 8007060:	b580      	push	{r7, lr}
 8007062:	b086      	sub	sp, #24
 8007064:	af00      	add	r7, sp, #0
 8007066:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8007068:	f3ef 8311 	mrs	r3, BASEPRI
 800706c:	f04f 0120 	mov.w	r1, #32
 8007070:	f381 8811 	msr	BASEPRI, r1
 8007074:	617b      	str	r3, [r7, #20]
 8007076:	480b      	ldr	r0, [pc, #44]	; (80070a4 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 8007078:	f7fe fe01 	bl	8005c7e <_PreparePacket>
 800707c:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800707e:	2280      	movs	r2, #128	; 0x80
 8007080:	6879      	ldr	r1, [r7, #4]
 8007082:	6938      	ldr	r0, [r7, #16]
 8007084:	f7fe fdae 	bl	8005be4 <_EncodeStr>
 8007088:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 800708a:	220e      	movs	r2, #14
 800708c:	68f9      	ldr	r1, [r7, #12]
 800708e:	6938      	ldr	r0, [r7, #16]
 8007090:	f7fe fee4 	bl	8005e5c <_SendPacket>
  RECORD_END();
 8007094:	697b      	ldr	r3, [r7, #20]
 8007096:	f383 8811 	msr	BASEPRI, r3
}
 800709a:	bf00      	nop
 800709c:	3718      	adds	r7, #24
 800709e:	46bd      	mov	sp, r7
 80070a0:	bd80      	pop	{r7, pc}
 80070a2:	bf00      	nop
 80070a4:	20008408 	.word	0x20008408

080070a8 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 80070a8:	b590      	push	{r4, r7, lr}
 80070aa:	b083      	sub	sp, #12
 80070ac:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 80070ae:	4b15      	ldr	r3, [pc, #84]	; (8007104 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 80070b0:	6a1b      	ldr	r3, [r3, #32]
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d01a      	beq.n	80070ec <SEGGER_SYSVIEW_RecordSystime+0x44>
 80070b6:	4b13      	ldr	r3, [pc, #76]	; (8007104 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 80070b8:	6a1b      	ldr	r3, [r3, #32]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d015      	beq.n	80070ec <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 80070c0:	4b10      	ldr	r3, [pc, #64]	; (8007104 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 80070c2:	6a1b      	ldr	r3, [r3, #32]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	4798      	blx	r3
 80070c8:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 80070cc:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 80070ce:	e9d7 0100 	ldrd	r0, r1, [r7]
 80070d2:	f04f 0200 	mov.w	r2, #0
 80070d6:	f04f 0300 	mov.w	r3, #0
 80070da:	000a      	movs	r2, r1
 80070dc:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 80070de:	4613      	mov	r3, r2
 80070e0:	461a      	mov	r2, r3
 80070e2:	4621      	mov	r1, r4
 80070e4:	200d      	movs	r0, #13
 80070e6:	f7ff fbe7 	bl	80068b8 <SEGGER_SYSVIEW_RecordU32x2>
 80070ea:	e006      	b.n	80070fa <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 80070ec:	4b06      	ldr	r3, [pc, #24]	; (8007108 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	4619      	mov	r1, r3
 80070f2:	200c      	movs	r0, #12
 80070f4:	f7ff fba4 	bl	8006840 <SEGGER_SYSVIEW_RecordU32>
  }
}
 80070f8:	bf00      	nop
 80070fa:	bf00      	nop
 80070fc:	370c      	adds	r7, #12
 80070fe:	46bd      	mov	sp, r7
 8007100:	bd90      	pop	{r4, r7, pc}
 8007102:	bf00      	nop
 8007104:	200083d8 	.word	0x200083d8
 8007108:	e0001004 	.word	0xe0001004

0800710c <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 800710c:	b580      	push	{r7, lr}
 800710e:	b086      	sub	sp, #24
 8007110:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8007112:	f3ef 8311 	mrs	r3, BASEPRI
 8007116:	f04f 0120 	mov.w	r1, #32
 800711a:	f381 8811 	msr	BASEPRI, r1
 800711e:	60fb      	str	r3, [r7, #12]
 8007120:	4819      	ldr	r0, [pc, #100]	; (8007188 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 8007122:	f7fe fdac 	bl	8005c7e <_PreparePacket>
 8007126:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8007128:	68bb      	ldr	r3, [r7, #8]
 800712a:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 800712c:	4b17      	ldr	r3, [pc, #92]	; (800718c <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007134:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	617b      	str	r3, [r7, #20]
 800713a:	683b      	ldr	r3, [r7, #0]
 800713c:	613b      	str	r3, [r7, #16]
 800713e:	e00b      	b.n	8007158 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 8007140:	693b      	ldr	r3, [r7, #16]
 8007142:	b2da      	uxtb	r2, r3
 8007144:	697b      	ldr	r3, [r7, #20]
 8007146:	1c59      	adds	r1, r3, #1
 8007148:	6179      	str	r1, [r7, #20]
 800714a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800714e:	b2d2      	uxtb	r2, r2
 8007150:	701a      	strb	r2, [r3, #0]
 8007152:	693b      	ldr	r3, [r7, #16]
 8007154:	09db      	lsrs	r3, r3, #7
 8007156:	613b      	str	r3, [r7, #16]
 8007158:	693b      	ldr	r3, [r7, #16]
 800715a:	2b7f      	cmp	r3, #127	; 0x7f
 800715c:	d8f0      	bhi.n	8007140 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 800715e:	697b      	ldr	r3, [r7, #20]
 8007160:	1c5a      	adds	r2, r3, #1
 8007162:	617a      	str	r2, [r7, #20]
 8007164:	693a      	ldr	r2, [r7, #16]
 8007166:	b2d2      	uxtb	r2, r2
 8007168:	701a      	strb	r2, [r3, #0]
 800716a:	697b      	ldr	r3, [r7, #20]
 800716c:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 800716e:	2202      	movs	r2, #2
 8007170:	6879      	ldr	r1, [r7, #4]
 8007172:	68b8      	ldr	r0, [r7, #8]
 8007174:	f7fe fe72 	bl	8005e5c <_SendPacket>
  RECORD_END();
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	f383 8811 	msr	BASEPRI, r3
}
 800717e:	bf00      	nop
 8007180:	3718      	adds	r7, #24
 8007182:	46bd      	mov	sp, r7
 8007184:	bd80      	pop	{r7, pc}
 8007186:	bf00      	nop
 8007188:	20008408 	.word	0x20008408
 800718c:	e000ed04 	.word	0xe000ed04

08007190 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 8007190:	b580      	push	{r7, lr}
 8007192:	b082      	sub	sp, #8
 8007194:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8007196:	f3ef 8311 	mrs	r3, BASEPRI
 800719a:	f04f 0120 	mov.w	r1, #32
 800719e:	f381 8811 	msr	BASEPRI, r1
 80071a2:	607b      	str	r3, [r7, #4]
 80071a4:	4807      	ldr	r0, [pc, #28]	; (80071c4 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 80071a6:	f7fe fd6a 	bl	8005c7e <_PreparePacket>
 80071aa:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 80071ac:	2203      	movs	r2, #3
 80071ae:	6839      	ldr	r1, [r7, #0]
 80071b0:	6838      	ldr	r0, [r7, #0]
 80071b2:	f7fe fe53 	bl	8005e5c <_SendPacket>
  RECORD_END();
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	f383 8811 	msr	BASEPRI, r3
}
 80071bc:	bf00      	nop
 80071be:	3708      	adds	r7, #8
 80071c0:	46bd      	mov	sp, r7
 80071c2:	bd80      	pop	{r7, pc}
 80071c4:	20008408 	.word	0x20008408

080071c8 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 80071c8:	b580      	push	{r7, lr}
 80071ca:	b082      	sub	sp, #8
 80071cc:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80071ce:	f3ef 8311 	mrs	r3, BASEPRI
 80071d2:	f04f 0120 	mov.w	r1, #32
 80071d6:	f381 8811 	msr	BASEPRI, r1
 80071da:	607b      	str	r3, [r7, #4]
 80071dc:	4807      	ldr	r0, [pc, #28]	; (80071fc <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 80071de:	f7fe fd4e 	bl	8005c7e <_PreparePacket>
 80071e2:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 80071e4:	2212      	movs	r2, #18
 80071e6:	6839      	ldr	r1, [r7, #0]
 80071e8:	6838      	ldr	r0, [r7, #0]
 80071ea:	f7fe fe37 	bl	8005e5c <_SendPacket>
  RECORD_END();
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	f383 8811 	msr	BASEPRI, r3
}
 80071f4:	bf00      	nop
 80071f6:	3708      	adds	r7, #8
 80071f8:	46bd      	mov	sp, r7
 80071fa:	bd80      	pop	{r7, pc}
 80071fc:	20008408 	.word	0x20008408

08007200 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 8007200:	b580      	push	{r7, lr}
 8007202:	b082      	sub	sp, #8
 8007204:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8007206:	f3ef 8311 	mrs	r3, BASEPRI
 800720a:	f04f 0120 	mov.w	r1, #32
 800720e:	f381 8811 	msr	BASEPRI, r1
 8007212:	607b      	str	r3, [r7, #4]
 8007214:	4807      	ldr	r0, [pc, #28]	; (8007234 <SEGGER_SYSVIEW_OnIdle+0x34>)
 8007216:	f7fe fd32 	bl	8005c7e <_PreparePacket>
 800721a:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 800721c:	2211      	movs	r2, #17
 800721e:	6839      	ldr	r1, [r7, #0]
 8007220:	6838      	ldr	r0, [r7, #0]
 8007222:	f7fe fe1b 	bl	8005e5c <_SendPacket>
  RECORD_END();
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	f383 8811 	msr	BASEPRI, r3
}
 800722c:	bf00      	nop
 800722e:	3708      	adds	r7, #8
 8007230:	46bd      	mov	sp, r7
 8007232:	bd80      	pop	{r7, pc}
 8007234:	20008408 	.word	0x20008408

08007238 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 8007238:	b580      	push	{r7, lr}
 800723a:	b088      	sub	sp, #32
 800723c:	af00      	add	r7, sp, #0
 800723e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8007240:	f3ef 8311 	mrs	r3, BASEPRI
 8007244:	f04f 0120 	mov.w	r1, #32
 8007248:	f381 8811 	msr	BASEPRI, r1
 800724c:	617b      	str	r3, [r7, #20]
 800724e:	4819      	ldr	r0, [pc, #100]	; (80072b4 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 8007250:	f7fe fd15 	bl	8005c7e <_PreparePacket>
 8007254:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8007256:	693b      	ldr	r3, [r7, #16]
 8007258:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800725a:	4b17      	ldr	r3, [pc, #92]	; (80072b8 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 800725c:	691b      	ldr	r3, [r3, #16]
 800725e:	687a      	ldr	r2, [r7, #4]
 8007260:	1ad3      	subs	r3, r2, r3
 8007262:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	61fb      	str	r3, [r7, #28]
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	61bb      	str	r3, [r7, #24]
 800726c:	e00b      	b.n	8007286 <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 800726e:	69bb      	ldr	r3, [r7, #24]
 8007270:	b2da      	uxtb	r2, r3
 8007272:	69fb      	ldr	r3, [r7, #28]
 8007274:	1c59      	adds	r1, r3, #1
 8007276:	61f9      	str	r1, [r7, #28]
 8007278:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800727c:	b2d2      	uxtb	r2, r2
 800727e:	701a      	strb	r2, [r3, #0]
 8007280:	69bb      	ldr	r3, [r7, #24]
 8007282:	09db      	lsrs	r3, r3, #7
 8007284:	61bb      	str	r3, [r7, #24]
 8007286:	69bb      	ldr	r3, [r7, #24]
 8007288:	2b7f      	cmp	r3, #127	; 0x7f
 800728a:	d8f0      	bhi.n	800726e <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 800728c:	69fb      	ldr	r3, [r7, #28]
 800728e:	1c5a      	adds	r2, r3, #1
 8007290:	61fa      	str	r2, [r7, #28]
 8007292:	69ba      	ldr	r2, [r7, #24]
 8007294:	b2d2      	uxtb	r2, r2
 8007296:	701a      	strb	r2, [r3, #0]
 8007298:	69fb      	ldr	r3, [r7, #28]
 800729a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 800729c:	2208      	movs	r2, #8
 800729e:	68f9      	ldr	r1, [r7, #12]
 80072a0:	6938      	ldr	r0, [r7, #16]
 80072a2:	f7fe fddb 	bl	8005e5c <_SendPacket>
  RECORD_END();
 80072a6:	697b      	ldr	r3, [r7, #20]
 80072a8:	f383 8811 	msr	BASEPRI, r3
}
 80072ac:	bf00      	nop
 80072ae:	3720      	adds	r7, #32
 80072b0:	46bd      	mov	sp, r7
 80072b2:	bd80      	pop	{r7, pc}
 80072b4:	20008408 	.word	0x20008408
 80072b8:	200083d8 	.word	0x200083d8

080072bc <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 80072bc:	b580      	push	{r7, lr}
 80072be:	b088      	sub	sp, #32
 80072c0:	af00      	add	r7, sp, #0
 80072c2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80072c4:	f3ef 8311 	mrs	r3, BASEPRI
 80072c8:	f04f 0120 	mov.w	r1, #32
 80072cc:	f381 8811 	msr	BASEPRI, r1
 80072d0:	617b      	str	r3, [r7, #20]
 80072d2:	4819      	ldr	r0, [pc, #100]	; (8007338 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 80072d4:	f7fe fcd3 	bl	8005c7e <_PreparePacket>
 80072d8:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80072da:	693b      	ldr	r3, [r7, #16]
 80072dc:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80072de:	4b17      	ldr	r3, [pc, #92]	; (800733c <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 80072e0:	691b      	ldr	r3, [r3, #16]
 80072e2:	687a      	ldr	r2, [r7, #4]
 80072e4:	1ad3      	subs	r3, r2, r3
 80072e6:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	61fb      	str	r3, [r7, #28]
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	61bb      	str	r3, [r7, #24]
 80072f0:	e00b      	b.n	800730a <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 80072f2:	69bb      	ldr	r3, [r7, #24]
 80072f4:	b2da      	uxtb	r2, r3
 80072f6:	69fb      	ldr	r3, [r7, #28]
 80072f8:	1c59      	adds	r1, r3, #1
 80072fa:	61f9      	str	r1, [r7, #28]
 80072fc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007300:	b2d2      	uxtb	r2, r2
 8007302:	701a      	strb	r2, [r3, #0]
 8007304:	69bb      	ldr	r3, [r7, #24]
 8007306:	09db      	lsrs	r3, r3, #7
 8007308:	61bb      	str	r3, [r7, #24]
 800730a:	69bb      	ldr	r3, [r7, #24]
 800730c:	2b7f      	cmp	r3, #127	; 0x7f
 800730e:	d8f0      	bhi.n	80072f2 <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 8007310:	69fb      	ldr	r3, [r7, #28]
 8007312:	1c5a      	adds	r2, r3, #1
 8007314:	61fa      	str	r2, [r7, #28]
 8007316:	69ba      	ldr	r2, [r7, #24]
 8007318:	b2d2      	uxtb	r2, r2
 800731a:	701a      	strb	r2, [r3, #0]
 800731c:	69fb      	ldr	r3, [r7, #28]
 800731e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8007320:	2204      	movs	r2, #4
 8007322:	68f9      	ldr	r1, [r7, #12]
 8007324:	6938      	ldr	r0, [r7, #16]
 8007326:	f7fe fd99 	bl	8005e5c <_SendPacket>
  RECORD_END();
 800732a:	697b      	ldr	r3, [r7, #20]
 800732c:	f383 8811 	msr	BASEPRI, r3
}
 8007330:	bf00      	nop
 8007332:	3720      	adds	r7, #32
 8007334:	46bd      	mov	sp, r7
 8007336:	bd80      	pop	{r7, pc}
 8007338:	20008408 	.word	0x20008408
 800733c:	200083d8 	.word	0x200083d8

08007340 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8007340:	b580      	push	{r7, lr}
 8007342:	b088      	sub	sp, #32
 8007344:	af00      	add	r7, sp, #0
 8007346:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8007348:	f3ef 8311 	mrs	r3, BASEPRI
 800734c:	f04f 0120 	mov.w	r1, #32
 8007350:	f381 8811 	msr	BASEPRI, r1
 8007354:	617b      	str	r3, [r7, #20]
 8007356:	4819      	ldr	r0, [pc, #100]	; (80073bc <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 8007358:	f7fe fc91 	bl	8005c7e <_PreparePacket>
 800735c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800735e:	693b      	ldr	r3, [r7, #16]
 8007360:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8007362:	4b17      	ldr	r3, [pc, #92]	; (80073c0 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8007364:	691b      	ldr	r3, [r3, #16]
 8007366:	687a      	ldr	r2, [r7, #4]
 8007368:	1ad3      	subs	r3, r2, r3
 800736a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	61fb      	str	r3, [r7, #28]
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	61bb      	str	r3, [r7, #24]
 8007374:	e00b      	b.n	800738e <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 8007376:	69bb      	ldr	r3, [r7, #24]
 8007378:	b2da      	uxtb	r2, r3
 800737a:	69fb      	ldr	r3, [r7, #28]
 800737c:	1c59      	adds	r1, r3, #1
 800737e:	61f9      	str	r1, [r7, #28]
 8007380:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007384:	b2d2      	uxtb	r2, r2
 8007386:	701a      	strb	r2, [r3, #0]
 8007388:	69bb      	ldr	r3, [r7, #24]
 800738a:	09db      	lsrs	r3, r3, #7
 800738c:	61bb      	str	r3, [r7, #24]
 800738e:	69bb      	ldr	r3, [r7, #24]
 8007390:	2b7f      	cmp	r3, #127	; 0x7f
 8007392:	d8f0      	bhi.n	8007376 <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 8007394:	69fb      	ldr	r3, [r7, #28]
 8007396:	1c5a      	adds	r2, r3, #1
 8007398:	61fa      	str	r2, [r7, #28]
 800739a:	69ba      	ldr	r2, [r7, #24]
 800739c:	b2d2      	uxtb	r2, r2
 800739e:	701a      	strb	r2, [r3, #0]
 80073a0:	69fb      	ldr	r3, [r7, #28]
 80073a2:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 80073a4:	2206      	movs	r2, #6
 80073a6:	68f9      	ldr	r1, [r7, #12]
 80073a8:	6938      	ldr	r0, [r7, #16]
 80073aa:	f7fe fd57 	bl	8005e5c <_SendPacket>
  RECORD_END();
 80073ae:	697b      	ldr	r3, [r7, #20]
 80073b0:	f383 8811 	msr	BASEPRI, r3
}
 80073b4:	bf00      	nop
 80073b6:	3720      	adds	r7, #32
 80073b8:	46bd      	mov	sp, r7
 80073ba:	bd80      	pop	{r7, pc}
 80073bc:	20008408 	.word	0x20008408
 80073c0:	200083d8 	.word	0x200083d8

080073c4 <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 80073c4:	b480      	push	{r7}
 80073c6:	b083      	sub	sp, #12
 80073c8:	af00      	add	r7, sp, #0
 80073ca:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 80073cc:	4b04      	ldr	r3, [pc, #16]	; (80073e0 <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 80073ce:	691b      	ldr	r3, [r3, #16]
 80073d0:	687a      	ldr	r2, [r7, #4]
 80073d2:	1ad3      	subs	r3, r2, r3
}
 80073d4:	4618      	mov	r0, r3
 80073d6:	370c      	adds	r7, #12
 80073d8:	46bd      	mov	sp, r7
 80073da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073de:	4770      	bx	lr
 80073e0:	200083d8 	.word	0x200083d8

080073e4 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 80073e4:	b580      	push	{r7, lr}
 80073e6:	b08c      	sub	sp, #48	; 0x30
 80073e8:	af00      	add	r7, sp, #0
 80073ea:	4603      	mov	r3, r0
 80073ec:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 80073ee:	4b3b      	ldr	r3, [pc, #236]	; (80074dc <SEGGER_SYSVIEW_SendModule+0xf8>)
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d06d      	beq.n	80074d2 <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 80073f6:	4b39      	ldr	r3, [pc, #228]	; (80074dc <SEGGER_SYSVIEW_SendModule+0xf8>)
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 80073fc:	2300      	movs	r3, #0
 80073fe:	62bb      	str	r3, [r7, #40]	; 0x28
 8007400:	e008      	b.n	8007414 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 8007402:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007404:	691b      	ldr	r3, [r3, #16]
 8007406:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 8007408:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800740a:	2b00      	cmp	r3, #0
 800740c:	d007      	beq.n	800741e <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 800740e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007410:	3301      	adds	r3, #1
 8007412:	62bb      	str	r3, [r7, #40]	; 0x28
 8007414:	79fb      	ldrb	r3, [r7, #7]
 8007416:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007418:	429a      	cmp	r2, r3
 800741a:	d3f2      	bcc.n	8007402 <SEGGER_SYSVIEW_SendModule+0x1e>
 800741c:	e000      	b.n	8007420 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 800741e:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8007420:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007422:	2b00      	cmp	r3, #0
 8007424:	d055      	beq.n	80074d2 <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8007426:	f3ef 8311 	mrs	r3, BASEPRI
 800742a:	f04f 0120 	mov.w	r1, #32
 800742e:	f381 8811 	msr	BASEPRI, r1
 8007432:	617b      	str	r3, [r7, #20]
 8007434:	482a      	ldr	r0, [pc, #168]	; (80074e0 <SEGGER_SYSVIEW_SendModule+0xfc>)
 8007436:	f7fe fc22 	bl	8005c7e <_PreparePacket>
 800743a:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 800743c:	693b      	ldr	r3, [r7, #16]
 800743e:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	627b      	str	r3, [r7, #36]	; 0x24
 8007444:	79fb      	ldrb	r3, [r7, #7]
 8007446:	623b      	str	r3, [r7, #32]
 8007448:	e00b      	b.n	8007462 <SEGGER_SYSVIEW_SendModule+0x7e>
 800744a:	6a3b      	ldr	r3, [r7, #32]
 800744c:	b2da      	uxtb	r2, r3
 800744e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007450:	1c59      	adds	r1, r3, #1
 8007452:	6279      	str	r1, [r7, #36]	; 0x24
 8007454:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007458:	b2d2      	uxtb	r2, r2
 800745a:	701a      	strb	r2, [r3, #0]
 800745c:	6a3b      	ldr	r3, [r7, #32]
 800745e:	09db      	lsrs	r3, r3, #7
 8007460:	623b      	str	r3, [r7, #32]
 8007462:	6a3b      	ldr	r3, [r7, #32]
 8007464:	2b7f      	cmp	r3, #127	; 0x7f
 8007466:	d8f0      	bhi.n	800744a <SEGGER_SYSVIEW_SendModule+0x66>
 8007468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800746a:	1c5a      	adds	r2, r3, #1
 800746c:	627a      	str	r2, [r7, #36]	; 0x24
 800746e:	6a3a      	ldr	r2, [r7, #32]
 8007470:	b2d2      	uxtb	r2, r2
 8007472:	701a      	strb	r2, [r3, #0]
 8007474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007476:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	61fb      	str	r3, [r7, #28]
 800747c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800747e:	689b      	ldr	r3, [r3, #8]
 8007480:	61bb      	str	r3, [r7, #24]
 8007482:	e00b      	b.n	800749c <SEGGER_SYSVIEW_SendModule+0xb8>
 8007484:	69bb      	ldr	r3, [r7, #24]
 8007486:	b2da      	uxtb	r2, r3
 8007488:	69fb      	ldr	r3, [r7, #28]
 800748a:	1c59      	adds	r1, r3, #1
 800748c:	61f9      	str	r1, [r7, #28]
 800748e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007492:	b2d2      	uxtb	r2, r2
 8007494:	701a      	strb	r2, [r3, #0]
 8007496:	69bb      	ldr	r3, [r7, #24]
 8007498:	09db      	lsrs	r3, r3, #7
 800749a:	61bb      	str	r3, [r7, #24]
 800749c:	69bb      	ldr	r3, [r7, #24]
 800749e:	2b7f      	cmp	r3, #127	; 0x7f
 80074a0:	d8f0      	bhi.n	8007484 <SEGGER_SYSVIEW_SendModule+0xa0>
 80074a2:	69fb      	ldr	r3, [r7, #28]
 80074a4:	1c5a      	adds	r2, r3, #1
 80074a6:	61fa      	str	r2, [r7, #28]
 80074a8:	69ba      	ldr	r2, [r7, #24]
 80074aa:	b2d2      	uxtb	r2, r2
 80074ac:	701a      	strb	r2, [r3, #0]
 80074ae:	69fb      	ldr	r3, [r7, #28]
 80074b0:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80074b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	2280      	movs	r2, #128	; 0x80
 80074b8:	4619      	mov	r1, r3
 80074ba:	68f8      	ldr	r0, [r7, #12]
 80074bc:	f7fe fb92 	bl	8005be4 <_EncodeStr>
 80074c0:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 80074c2:	2216      	movs	r2, #22
 80074c4:	68f9      	ldr	r1, [r7, #12]
 80074c6:	6938      	ldr	r0, [r7, #16]
 80074c8:	f7fe fcc8 	bl	8005e5c <_SendPacket>
      RECORD_END();
 80074cc:	697b      	ldr	r3, [r7, #20]
 80074ce:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 80074d2:	bf00      	nop
 80074d4:	3730      	adds	r7, #48	; 0x30
 80074d6:	46bd      	mov	sp, r7
 80074d8:	bd80      	pop	{r7, pc}
 80074da:	bf00      	nop
 80074dc:	20008400 	.word	0x20008400
 80074e0:	20008408 	.word	0x20008408

080074e4 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 80074e4:	b580      	push	{r7, lr}
 80074e6:	b082      	sub	sp, #8
 80074e8:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 80074ea:	4b0c      	ldr	r3, [pc, #48]	; (800751c <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d00f      	beq.n	8007512 <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 80074f2:	4b0a      	ldr	r3, [pc, #40]	; (800751c <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	68db      	ldr	r3, [r3, #12]
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d002      	beq.n	8007506 <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	68db      	ldr	r3, [r3, #12]
 8007504:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	691b      	ldr	r3, [r3, #16]
 800750a:	607b      	str	r3, [r7, #4]
    } while (pModule);
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	2b00      	cmp	r3, #0
 8007510:	d1f2      	bne.n	80074f8 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 8007512:	bf00      	nop
 8007514:	3708      	adds	r7, #8
 8007516:	46bd      	mov	sp, r7
 8007518:	bd80      	pop	{r7, pc}
 800751a:	bf00      	nop
 800751c:	20008400 	.word	0x20008400

08007520 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8007520:	b580      	push	{r7, lr}
 8007522:	b086      	sub	sp, #24
 8007524:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 8007526:	f3ef 8311 	mrs	r3, BASEPRI
 800752a:	f04f 0120 	mov.w	r1, #32
 800752e:	f381 8811 	msr	BASEPRI, r1
 8007532:	60fb      	str	r3, [r7, #12]
 8007534:	4817      	ldr	r0, [pc, #92]	; (8007594 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 8007536:	f7fe fba2 	bl	8005c7e <_PreparePacket>
 800753a:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 800753c:	68bb      	ldr	r3, [r7, #8]
 800753e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	617b      	str	r3, [r7, #20]
 8007544:	4b14      	ldr	r3, [pc, #80]	; (8007598 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 8007546:	781b      	ldrb	r3, [r3, #0]
 8007548:	613b      	str	r3, [r7, #16]
 800754a:	e00b      	b.n	8007564 <SEGGER_SYSVIEW_SendNumModules+0x44>
 800754c:	693b      	ldr	r3, [r7, #16]
 800754e:	b2da      	uxtb	r2, r3
 8007550:	697b      	ldr	r3, [r7, #20]
 8007552:	1c59      	adds	r1, r3, #1
 8007554:	6179      	str	r1, [r7, #20]
 8007556:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800755a:	b2d2      	uxtb	r2, r2
 800755c:	701a      	strb	r2, [r3, #0]
 800755e:	693b      	ldr	r3, [r7, #16]
 8007560:	09db      	lsrs	r3, r3, #7
 8007562:	613b      	str	r3, [r7, #16]
 8007564:	693b      	ldr	r3, [r7, #16]
 8007566:	2b7f      	cmp	r3, #127	; 0x7f
 8007568:	d8f0      	bhi.n	800754c <SEGGER_SYSVIEW_SendNumModules+0x2c>
 800756a:	697b      	ldr	r3, [r7, #20]
 800756c:	1c5a      	adds	r2, r3, #1
 800756e:	617a      	str	r2, [r7, #20]
 8007570:	693a      	ldr	r2, [r7, #16]
 8007572:	b2d2      	uxtb	r2, r2
 8007574:	701a      	strb	r2, [r3, #0]
 8007576:	697b      	ldr	r3, [r7, #20]
 8007578:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 800757a:	221b      	movs	r2, #27
 800757c:	6879      	ldr	r1, [r7, #4]
 800757e:	68b8      	ldr	r0, [r7, #8]
 8007580:	f7fe fc6c 	bl	8005e5c <_SendPacket>
  RECORD_END();
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	f383 8811 	msr	BASEPRI, r3
}
 800758a:	bf00      	nop
 800758c:	3718      	adds	r7, #24
 800758e:	46bd      	mov	sp, r7
 8007590:	bd80      	pop	{r7, pc}
 8007592:	bf00      	nop
 8007594:	20008408 	.word	0x20008408
 8007598:	20008404 	.word	0x20008404

0800759c <SEGGER_SYSVIEW_PrintfTarget>:
*    the host.
*
*  Parameters
*    s        - String to be formatted.
*/
void SEGGER_SYSVIEW_PrintfTarget(const char* s, ...) {
 800759c:	b40f      	push	{r0, r1, r2, r3}
 800759e:	b580      	push	{r7, lr}
 80075a0:	b082      	sub	sp, #8
 80075a2:	af00      	add	r7, sp, #0
  va_list ParamList;

  va_start(ParamList, s);
 80075a4:	f107 0314 	add.w	r3, r7, #20
 80075a8:	607b      	str	r3, [r7, #4]
  _VPrintTarget(s, SEGGER_SYSVIEW_LOG, &ParamList);
 80075aa:	1d3b      	adds	r3, r7, #4
 80075ac:	461a      	mov	r2, r3
 80075ae:	2100      	movs	r1, #0
 80075b0:	6938      	ldr	r0, [r7, #16]
 80075b2:	f7fe fedb 	bl	800636c <_VPrintTarget>
  va_end(ParamList);
}
 80075b6:	bf00      	nop
 80075b8:	3708      	adds	r7, #8
 80075ba:	46bd      	mov	sp, r7
 80075bc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80075c0:	b004      	add	sp, #16
 80075c2:	4770      	bx	lr

080075c4 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 80075c4:	b580      	push	{r7, lr}
 80075c6:	b08a      	sub	sp, #40	; 0x28
 80075c8:	af00      	add	r7, sp, #0
 80075ca:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80075cc:	f3ef 8311 	mrs	r3, BASEPRI
 80075d0:	f04f 0120 	mov.w	r1, #32
 80075d4:	f381 8811 	msr	BASEPRI, r1
 80075d8:	617b      	str	r3, [r7, #20]
 80075da:	4827      	ldr	r0, [pc, #156]	; (8007678 <SEGGER_SYSVIEW_Warn+0xb4>)
 80075dc:	f7fe fb4f 	bl	8005c7e <_PreparePacket>
 80075e0:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80075e2:	2280      	movs	r2, #128	; 0x80
 80075e4:	6879      	ldr	r1, [r7, #4]
 80075e6:	6938      	ldr	r0, [r7, #16]
 80075e8:	f7fe fafc 	bl	8005be4 <_EncodeStr>
 80075ec:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	627b      	str	r3, [r7, #36]	; 0x24
 80075f2:	2301      	movs	r3, #1
 80075f4:	623b      	str	r3, [r7, #32]
 80075f6:	e00b      	b.n	8007610 <SEGGER_SYSVIEW_Warn+0x4c>
 80075f8:	6a3b      	ldr	r3, [r7, #32]
 80075fa:	b2da      	uxtb	r2, r3
 80075fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075fe:	1c59      	adds	r1, r3, #1
 8007600:	6279      	str	r1, [r7, #36]	; 0x24
 8007602:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007606:	b2d2      	uxtb	r2, r2
 8007608:	701a      	strb	r2, [r3, #0]
 800760a:	6a3b      	ldr	r3, [r7, #32]
 800760c:	09db      	lsrs	r3, r3, #7
 800760e:	623b      	str	r3, [r7, #32]
 8007610:	6a3b      	ldr	r3, [r7, #32]
 8007612:	2b7f      	cmp	r3, #127	; 0x7f
 8007614:	d8f0      	bhi.n	80075f8 <SEGGER_SYSVIEW_Warn+0x34>
 8007616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007618:	1c5a      	adds	r2, r3, #1
 800761a:	627a      	str	r2, [r7, #36]	; 0x24
 800761c:	6a3a      	ldr	r2, [r7, #32]
 800761e:	b2d2      	uxtb	r2, r2
 8007620:	701a      	strb	r2, [r3, #0]
 8007622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007624:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	61fb      	str	r3, [r7, #28]
 800762a:	2300      	movs	r3, #0
 800762c:	61bb      	str	r3, [r7, #24]
 800762e:	e00b      	b.n	8007648 <SEGGER_SYSVIEW_Warn+0x84>
 8007630:	69bb      	ldr	r3, [r7, #24]
 8007632:	b2da      	uxtb	r2, r3
 8007634:	69fb      	ldr	r3, [r7, #28]
 8007636:	1c59      	adds	r1, r3, #1
 8007638:	61f9      	str	r1, [r7, #28]
 800763a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800763e:	b2d2      	uxtb	r2, r2
 8007640:	701a      	strb	r2, [r3, #0]
 8007642:	69bb      	ldr	r3, [r7, #24]
 8007644:	09db      	lsrs	r3, r3, #7
 8007646:	61bb      	str	r3, [r7, #24]
 8007648:	69bb      	ldr	r3, [r7, #24]
 800764a:	2b7f      	cmp	r3, #127	; 0x7f
 800764c:	d8f0      	bhi.n	8007630 <SEGGER_SYSVIEW_Warn+0x6c>
 800764e:	69fb      	ldr	r3, [r7, #28]
 8007650:	1c5a      	adds	r2, r3, #1
 8007652:	61fa      	str	r2, [r7, #28]
 8007654:	69ba      	ldr	r2, [r7, #24]
 8007656:	b2d2      	uxtb	r2, r2
 8007658:	701a      	strb	r2, [r3, #0]
 800765a:	69fb      	ldr	r3, [r7, #28]
 800765c:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 800765e:	221a      	movs	r2, #26
 8007660:	68f9      	ldr	r1, [r7, #12]
 8007662:	6938      	ldr	r0, [r7, #16]
 8007664:	f7fe fbfa 	bl	8005e5c <_SendPacket>
  RECORD_END();
 8007668:	697b      	ldr	r3, [r7, #20]
 800766a:	f383 8811 	msr	BASEPRI, r3
}
 800766e:	bf00      	nop
 8007670:	3728      	adds	r7, #40	; 0x28
 8007672:	46bd      	mov	sp, r7
 8007674:	bd80      	pop	{r7, pc}
 8007676:	bf00      	nop
 8007678:	20008408 	.word	0x20008408

0800767c <memcmp>:
 800767c:	b510      	push	{r4, lr}
 800767e:	3901      	subs	r1, #1
 8007680:	4402      	add	r2, r0
 8007682:	4290      	cmp	r0, r2
 8007684:	d101      	bne.n	800768a <memcmp+0xe>
 8007686:	2000      	movs	r0, #0
 8007688:	e005      	b.n	8007696 <memcmp+0x1a>
 800768a:	7803      	ldrb	r3, [r0, #0]
 800768c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8007690:	42a3      	cmp	r3, r4
 8007692:	d001      	beq.n	8007698 <memcmp+0x1c>
 8007694:	1b18      	subs	r0, r3, r4
 8007696:	bd10      	pop	{r4, pc}
 8007698:	3001      	adds	r0, #1
 800769a:	e7f2      	b.n	8007682 <memcmp+0x6>

0800769c <memset>:
 800769c:	4402      	add	r2, r0
 800769e:	4603      	mov	r3, r0
 80076a0:	4293      	cmp	r3, r2
 80076a2:	d100      	bne.n	80076a6 <memset+0xa>
 80076a4:	4770      	bx	lr
 80076a6:	f803 1b01 	strb.w	r1, [r3], #1
 80076aa:	e7f9      	b.n	80076a0 <memset+0x4>

080076ac <__libc_init_array>:
 80076ac:	b570      	push	{r4, r5, r6, lr}
 80076ae:	4d0d      	ldr	r5, [pc, #52]	; (80076e4 <__libc_init_array+0x38>)
 80076b0:	4c0d      	ldr	r4, [pc, #52]	; (80076e8 <__libc_init_array+0x3c>)
 80076b2:	1b64      	subs	r4, r4, r5
 80076b4:	10a4      	asrs	r4, r4, #2
 80076b6:	2600      	movs	r6, #0
 80076b8:	42a6      	cmp	r6, r4
 80076ba:	d109      	bne.n	80076d0 <__libc_init_array+0x24>
 80076bc:	4d0b      	ldr	r5, [pc, #44]	; (80076ec <__libc_init_array+0x40>)
 80076be:	4c0c      	ldr	r4, [pc, #48]	; (80076f0 <__libc_init_array+0x44>)
 80076c0:	f000 f826 	bl	8007710 <_init>
 80076c4:	1b64      	subs	r4, r4, r5
 80076c6:	10a4      	asrs	r4, r4, #2
 80076c8:	2600      	movs	r6, #0
 80076ca:	42a6      	cmp	r6, r4
 80076cc:	d105      	bne.n	80076da <__libc_init_array+0x2e>
 80076ce:	bd70      	pop	{r4, r5, r6, pc}
 80076d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80076d4:	4798      	blx	r3
 80076d6:	3601      	adds	r6, #1
 80076d8:	e7ee      	b.n	80076b8 <__libc_init_array+0xc>
 80076da:	f855 3b04 	ldr.w	r3, [r5], #4
 80076de:	4798      	blx	r3
 80076e0:	3601      	adds	r6, #1
 80076e2:	e7f2      	b.n	80076ca <__libc_init_array+0x1e>
 80076e4:	08007924 	.word	0x08007924
 80076e8:	08007924 	.word	0x08007924
 80076ec:	08007924 	.word	0x08007924
 80076f0:	08007928 	.word	0x08007928

080076f4 <memcpy>:
 80076f4:	440a      	add	r2, r1
 80076f6:	4291      	cmp	r1, r2
 80076f8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80076fc:	d100      	bne.n	8007700 <memcpy+0xc>
 80076fe:	4770      	bx	lr
 8007700:	b510      	push	{r4, lr}
 8007702:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007706:	f803 4f01 	strb.w	r4, [r3, #1]!
 800770a:	4291      	cmp	r1, r2
 800770c:	d1f9      	bne.n	8007702 <memcpy+0xe>
 800770e:	bd10      	pop	{r4, pc}

08007710 <_init>:
 8007710:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007712:	bf00      	nop
 8007714:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007716:	bc08      	pop	{r3}
 8007718:	469e      	mov	lr, r3
 800771a:	4770      	bx	lr

0800771c <_fini>:
 800771c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800771e:	bf00      	nop
 8007720:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007722:	bc08      	pop	{r3}
 8007724:	469e      	mov	lr, r3
 8007726:	4770      	bx	lr
